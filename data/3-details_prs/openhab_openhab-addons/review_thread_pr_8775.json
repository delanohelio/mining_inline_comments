{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDg5MjQ0", "number": 8775, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjowMDoyOVrOE0KHFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjo0OTowM1rOE790Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI3MDYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjowMDoyOVrOHrwHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNzo0Mjo0NFrOHrwzFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzOTA1OQ==", "bodyText": "The dashed line is missing, causing the table not to be rendered.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515639059", "createdAt": "2020-11-01T16:00:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Generic Bluetooth Device\n+\n+This extension adds support for devices that expose [Bluetooth Generic Attributes (GATT)](https://www.bluetooth.com/specifications/gatt/)\n+\n+## Supported Things\n+\n+Only a single thing type is added by this extension:\n+\n+| Thing Type ID | Description                                     |\n+|---------------|-------------------------------------------------|\n+| generic       | A generic connectable bluetooth device          |\n+\n+## Discovery\n+\n+As any other Bluetooth device, Generic bluetooth devices are discovered automatically by the corresponding bridge.\n+Generic bluetooth devices will be discovered for any connectable bluetooth device that doesn't match another extension.\n+\n+## Thing Configuration\n+\n+| Parameter       | Required | Default | Description                                                         |\n+| address         | yes      |         | The address of the bluetooth device (in format \"XX:XX:XX:XX:XX:XX\") |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1MDMyNA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515650324", "createdAt": "2020-11-01T17:42:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "diffHunk": "@@ -0,0 +1,32 @@\n+# Generic Bluetooth Device\n+\n+This extension adds support for devices that expose [Bluetooth Generic Attributes (GATT)](https://www.bluetooth.com/specifications/gatt/)\n+\n+## Supported Things\n+\n+Only a single thing type is added by this extension:\n+\n+| Thing Type ID | Description                                     |\n+|---------------|-------------------------------------------------|\n+| generic       | A generic connectable bluetooth device          |\n+\n+## Discovery\n+\n+As any other Bluetooth device, Generic bluetooth devices are discovered automatically by the corresponding bridge.\n+Generic bluetooth devices will be discovered for any connectable bluetooth device that doesn't match another extension.\n+\n+## Thing Configuration\n+\n+| Parameter       | Required | Default | Description                                                         |\n+| address         | yes      |         | The address of the bluetooth device (in format \"XX:XX:XX:XX:XX:XX\") |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzOTA1OQ=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI3NDE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothChannelUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjowNDo1MVrOHrwIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDozMTo0MlrOHrx5jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzOTQ5NA==", "bodyText": "Can you remove this or implement it?", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515639494", "createdAt": "2020-11-01T16:04:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothChannelUtils.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.spec.Enumeration;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldFormat;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldType;\n+\n+/**\n+ * The {@link BluetoothChannelUtils} contains utility functions used by the GattChannelHandler\n+ *\n+ * @author Vlad Kolotov - Original author\n+ * @author Connor Petty - Modified for openHAB use\n+ */\n+@NonNullByDefault\n+public class BluetoothChannelUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(BluetoothChannelUtils.class);\n+\n+    public static String encodeFieldID(Field field) {\n+        String requirements = Optional.ofNullable(field.getRequirements()).orElse(Collections.emptyList()).stream()\n+                .collect(Collectors.joining());\n+        return encodeFieldName(field.getName() + requirements);\n+    }\n+\n+    public static String encodeFieldName(String fieldName) {\n+        return Base64.getEncoder().encodeToString(fieldName.getBytes(StandardCharsets.UTF_8)).replace(\"=\", \"\");\n+    }\n+\n+    public static String decodeFieldName(String encodedFieldName) {\n+        return new String(Base64.getDecoder().decode(encodedFieldName), StandardCharsets.UTF_8);\n+    }\n+\n+    public static @Nullable String getItemType(Field field) {\n+        FieldFormat format = field.getFormat();\n+        if (format == null) {\n+            // unknown format\n+            return null;\n+        }\n+        switch (field.getFormat().getType()) {\n+            case BOOLEAN:\n+                return \"Switch\";\n+            case UINT:\n+            case SINT:\n+            case FLOAT_IEE754:\n+            case FLOAT_IEE11073:\n+                BluetoothUnit unit = BluetoothUnit.findByType(field.getUnit());\n+                if (unit != null) {\n+                    // TODO\n+                    // return \"Number:\" + unit.getUnit().getDimension();\n+                }\n+                return \"Number\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2ODM2Ng==", "bodyText": "This is a placeholder until the additional units in openhab core get merged. Until that gets merged I won't add support for quantity types in this binding. I'd prefer to leave this TODO here as it is something that can't be immediately addressed but also something that will be done.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515668366", "createdAt": "2020-11-01T20:31:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothChannelUtils.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.spec.Enumeration;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldFormat;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldType;\n+\n+/**\n+ * The {@link BluetoothChannelUtils} contains utility functions used by the GattChannelHandler\n+ *\n+ * @author Vlad Kolotov - Original author\n+ * @author Connor Petty - Modified for openHAB use\n+ */\n+@NonNullByDefault\n+public class BluetoothChannelUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(BluetoothChannelUtils.class);\n+\n+    public static String encodeFieldID(Field field) {\n+        String requirements = Optional.ofNullable(field.getRequirements()).orElse(Collections.emptyList()).stream()\n+                .collect(Collectors.joining());\n+        return encodeFieldName(field.getName() + requirements);\n+    }\n+\n+    public static String encodeFieldName(String fieldName) {\n+        return Base64.getEncoder().encodeToString(fieldName.getBytes(StandardCharsets.UTF_8)).replace(\"=\", \"\");\n+    }\n+\n+    public static String decodeFieldName(String encodedFieldName) {\n+        return new String(Base64.getDecoder().decode(encodedFieldName), StandardCharsets.UTF_8);\n+    }\n+\n+    public static @Nullable String getItemType(Field field) {\n+        FieldFormat format = field.getFormat();\n+        if (format == null) {\n+            // unknown format\n+            return null;\n+        }\n+        switch (field.getFormat().getType()) {\n+            case BOOLEAN:\n+                return \"Switch\";\n+            case UINT:\n+            case SINT:\n+            case FLOAT_IEE754:\n+            case FLOAT_IEE11073:\n+                BluetoothUnit unit = BluetoothUnit.findByType(field.getUnit());\n+                if (unit != null) {\n+                    // TODO\n+                    // return \"Number:\" + unit.getUnit().getDimension();\n+                }\n+                return \"Number\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzOTQ5NA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI3NjgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjowNzoxOFrOHrwJ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDo1MTo1NVrOHryB6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzOTgwNw==", "bodyText": "\"done\"? Also see below.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515639807", "createdAt": "2020-11-01T16:07:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MDUwNg==", "bodyText": "This whole class is incomplete due to the lack of proper support of the units in the core. In fact a lot of the self made units are meant to be removed from this class once those units are supported in the core. I'll do what I can to cleanup what is already here though.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515670506", "createdAt": "2020-11-01T20:51:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzOTgwNw=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI3NzI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjowNzo1NlrOHrwKOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxNToxMVrOHryLhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzOTg2Nw==", "bodyText": "TODO", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515639867", "createdAt": "2020-11-01T16:07:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3Mjk2NQ==", "bodyText": "removed", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515672965", "createdAt": "2020-11-01T21:15:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYzOTg2Nw=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI4NzMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjoxODowNFrOHrwPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxNToxOFrOHryLiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MTEwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n          \n          \n            \n                TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", KILO(SIUnits.KILOGRAM)), // done", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515641108", "createdAt": "2020-11-01T16:18:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3Mjk2OA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515672968", "createdAt": "2020-11-01T21:15:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MTEwOA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI5MDIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjoyMTowN1rOHrwQdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxMDo1MlrOHryJ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MTQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ;", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515641463", "createdAt": "2020-11-01T16:21:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MjUzOA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515672538", "createdAt": "2020-11-01T21:10:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MTQ2Mw=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI5MDQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjoyMToxN1rOHrwQjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxMDo0OFrOHryJzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MTQ4NQ==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515641485", "createdAt": "2020-11-01T16:21:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MjUyNQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515672525", "createdAt": "2020-11-01T21:10:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MTQ4NQ=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI5MDU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjoyMTozNFrOHrwQnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxMDoxMFrOHryJoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MTUwMw==", "bodyText": "This is never used.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515641503", "createdAt": "2020-11-01T16:21:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }\n+\n+    private UUID uuid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MjQ4MQ==", "bodyText": "It isn't but it is an important identifier nonetheless. I added this field to be consistent with the other bluetooth protocol classes included in the bluetooth binding.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515672481", "createdAt": "2020-11-01T21:10:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }\n+\n+    private UUID uuid;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MTUwMw=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI5NDkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjoyNjoyNVrOHrwSrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxODo1N1rOHryMwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MjAyOQ==", "bodyText": "I'd love to see this in the core.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515642029", "createdAt": "2020-11-01T16:26:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }\n+\n+    private UUID uuid;\n+\n+    private String type;\n+\n+    private Unit<?> unit;\n+\n+    private BluetoothUnit(long key, String type, Unit<?> unit) {\n+        this.uuid = new UUID((key << 32) | 0x1000, BluetoothBindingConstants.BLUETOOTH_BASE_UUID);\n+        this.type = type;\n+        this.unit = unit;\n+    }\n+\n+    static class BUnits {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MzI4Mg==", "bodyText": "So would I, there are a couple of PRs for it (openhab/openhab-core#1672 and openhab/openhab-core#1664) that are currently languishing in PR purgatory.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515673282", "createdAt": "2020-11-01T21:18:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }\n+\n+    private UUID uuid;\n+\n+    private String type;\n+\n+    private Unit<?> unit;\n+\n+    private BluetoothUnit(long key, String type, Unit<?> unit) {\n+        this.uuid = new UUID((key << 32) | 0x1000, BluetoothBindingConstants.BLUETOOTH_BASE_UUID);\n+        this.type = type;\n+        this.unit = unit;\n+    }\n+\n+    static class BUnits {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MjAyOQ=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI5NTkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjoyNzoxMVrOHrwTHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxOTozOVrOHryNEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MjE0MA==", "bodyText": "This is never used.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515642140", "createdAt": "2020-11-01T16:27:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }\n+\n+    private UUID uuid;\n+\n+    private String type;\n+\n+    private Unit<?> unit;\n+\n+    private BluetoothUnit(long key, String type, Unit<?> unit) {\n+        this.uuid = new UUID((key << 32) | 0x1000, BluetoothBindingConstants.BLUETOOTH_BASE_UUID);\n+        this.type = type;\n+        this.unit = unit;\n+    }\n+\n+    static class BUnits {\n+        public static final Unit<ArealDensity> KILOGRAM_PER_SQUARE_METER = addUnit(\n+                new ProductUnit<ArealDensity>(Units.KILOGRAM.divide(Units.SQUARE_METRE)));\n+\n+        public static final Unit<RadiationExposure> COULOMB_PER_KILOGRAM = addUnit(\n+                new ProductUnit<RadiationExposure>(Units.COULOMB.divide(Units.KILOGRAM)));\n+\n+        public static final Unit<RadiationDoseAbsorptionRate> GRAY_PER_SECOND = addUnit(\n+                new ProductUnit<RadiationDoseAbsorptionRate>(Units.GRAY.divide(Units.SECOND)));\n+\n+        public static final Unit<Mass> POUND = addUnit(\n+                new TransformedUnit<Mass>(Units.KILOGRAM, new MultiplyConverter(0.45359237)));\n+\n+        public static final Unit<Angle> MINUTE_ANGLE = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(1, 180 * 60))));\n+\n+        public static final Unit<Angle> SECOND_ANGLE = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(1, 180 * 60 * 60))));\n+\n+        public static final Unit<Area> HECTARE = addUnit(Units.SQUARE_METRE.multiply(10000.0));\n+        public static final Unit<Area> BARN = addUnit(Units.SQUARE_METRE.multiply(10E-28));\n+\n+        public static final Unit<Length> NAUTICAL_MILE = addUnit(SIUnits.METRE.multiply(1852.0));\n+\n+        public static final Unit<RadiantIntensity> WATT_PER_STERADIAN = addUnit(\n+                new ProductUnit<RadiantIntensity>(Units.WATT.divide(Units.STERADIAN)));\n+\n+        public static final Unit<Radiance> WATT_PER_STERADIAN_PER_SQUARE_METRE = addUnit(\n+                new ProductUnit<Radiance>(WATT_PER_STERADIAN.divide(Units.SQUARE_METRE)));\n+\n+        public static final Unit<Frequency> CYCLES_PER_MINUTE = addUnit(new TransformedUnit<Frequency>(Units.HERTZ,\n+                new RationalConverter(BigInteger.valueOf(60), BigInteger.ONE)));\n+\n+        public static final Unit<Angle> REVOLUTION = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(2, 1))));\n+        public static final Unit<AngularVelocity> REVOLUTION_PER_MINUTE = addUnit(\n+                new ProductUnit<AngularVelocity>(REVOLUTION.divide(Units.MINUTE)));\n+\n+        public static final Unit<Dimensionless> STEPS = addUnit(SmartHomeUnits.ONE.alternate(\"steps\"));\n+        public static final Unit<Dimensionless> BEATS = addUnit(SmartHomeUnits.ONE.alternate(\"beats\"));\n+        public static final Unit<Dimensionless> STROKE = addUnit(SmartHomeUnits.ONE.alternate(\"stroke\"));\n+\n+        public static final Unit<Frequency> STEP_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(STEPS.divide(Units.MINUTE)));\n+\n+        public static final Unit<Frequency> BEATS_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(BEATS.divide(Units.MINUTE)));\n+\n+        public static final Unit<Frequency> STROKE_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(STROKE.divide(Units.MINUTE)));\n+\n+        public static final Unit<MassFlowRate> GRAM_PER_SECOND = addUnit(\n+                new ProductUnit<MassFlowRate>(Units.GRAM.divide(Units.SECOND)));\n+\n+        public static final Unit<LuminousEfficacy> LUMEN_PER_WATT = addUnit(\n+                new ProductUnit<LuminousEfficacy>(Units.LUMEN.divide(Units.WATT)));\n+\n+        public static final Unit<LuminousEnergy> LUMEN_SECOND = addUnit(\n+                new ProductUnit<LuminousEnergy>(Units.LUMEN.multiply(Units.SECOND)));\n+\n+        public static final Unit<LuminousEnergy> LUMEN_HOUR = addUnit(\n+                new ProductUnit<LuminousEnergy>(Units.LUMEN.multiply(Units.HOUR)));\n+\n+        public static final Unit<ElectricCharge> AMPERE_HOUR = addUnit(\n+                new ProductUnit<ElectricCharge>(Units.AMPERE.multiply(Units.HOUR)));\n+\n+        public static final Unit<LuminousExposure> LUX_HOUR = addUnit(\n+                new ProductUnit<LuminousExposure>(Units.LUX.multiply(Units.HOUR)));\n+\n+        public static final Unit<Speed> KILOMETRE_PER_MINUTE = addUnit(Units.KILOMETRE_PER_HOUR.multiply(60.0));\n+\n+        public static final Unit<VolumetricFlowRate> LITRE_PER_SECOND = addUnit(\n+                new ProductUnit<VolumetricFlowRate>(Units.LITRE.divide(Units.SECOND)));\n+\n+        public static final Unit<Dimensionless> PARTS_PER_BILLION = addUnit(new TransformedUnit<>(SmartHomeUnits.ONE,\n+                new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1_000_000_000))));\n+\n+        static {\n+            SimpleUnitFormat.getInstance().label(GRAY_PER_SECOND, \"Gy/s\");\n+            SimpleUnitFormat.getInstance().label(MINUTE_ANGLE, \"'\");\n+            SimpleUnitFormat.getInstance().label(SECOND_ANGLE, \"\\\"\");\n+            SimpleUnitFormat.getInstance().label(HECTARE, \"ha\");\n+            SimpleUnitFormat.getInstance().label(NAUTICAL_MILE, \"NM\");\n+            SimpleUnitFormat.getInstance().label(KILOGRAM_PER_SQUARE_METER, \"kg/m\u00b2\");\n+            SimpleUnitFormat.getInstance().label(POUND, \"lb\");\n+            SimpleUnitFormat.getInstance().label(CYCLES_PER_MINUTE, \"cpm\");\n+            SimpleUnitFormat.getInstance().label(GRAM_PER_SECOND, \"g/s\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_SECOND, \"lm\u00b7s\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_HOUR, \"lm\u00b7h\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_PER_WATT, \"lm/W\");\n+            SimpleUnitFormat.getInstance().label(LUX_HOUR, \"lx\u00b7h\");\n+            SimpleUnitFormat.getInstance().label(KILOMETRE_PER_MINUTE, \"km/min\");\n+            SimpleUnitFormat.getInstance().label(LITRE_PER_SECOND, \"l/s\");\n+            SimpleUnitFormat.getInstance().label(PARTS_PER_BILLION, \"ppb\");\n+            SimpleUnitFormat.getInstance().label(BEATS_PER_MINUTE, \"bpm\");\n+            SimpleUnitFormat.getInstance().label(STEP_PER_MINUTE, \"steps/min\");\n+            SimpleUnitFormat.getInstance().label(STROKE_PER_MINUTE, \"spm\");\n+            SimpleUnitFormat.getInstance().label(REVOLUTION_PER_MINUTE, \"rpm\");\n+        }\n+\n+        private static <U extends Unit<?>> U addUnit(U unit) {\n+            return unit;\n+        }\n+    }\n+\n+    public interface AngularVelocity extends Quantity<AngularVelocity> {\n+    }\n+\n+    public interface LuminousEnergy extends Quantity<LuminousEnergy> {\n+    }\n+\n+    public interface LuminousEfficacy extends Quantity<LuminousEfficacy> {\n+    }\n+\n+    public interface LuminousExposure extends Quantity<LuminousExposure> {\n+    }\n+\n+    public interface RadiantIntensity extends Quantity<RadiantIntensity> {\n+    }\n+\n+    public interface Radiance extends Quantity<Radiance> {\n+    }\n+\n+    public interface RadiationExposure extends Quantity<RadiationExposure> {\n+    }\n+\n+    public interface RadiationDoseAbsorptionRate extends Quantity<RadiationDoseAbsorptionRate> {\n+    }\n+\n+    public interface MassFlowRate extends Quantity<MassFlowRate> {\n+    }\n+\n+    public static @Nullable BluetoothUnit findByType(String type) {\n+        for (BluetoothUnit unit : BluetoothUnit.values()) {\n+            if (unit.type.equals(type)) {\n+                return unit;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static final String RAW = \"<tbody>\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 359}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MzM2Mg==", "bodyText": "It was used to generate most of this file. But I don't need it anymore so I'll remove it.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515673362", "createdAt": "2020-11-01T21:19:39Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }\n+\n+    private UUID uuid;\n+\n+    private String type;\n+\n+    private Unit<?> unit;\n+\n+    private BluetoothUnit(long key, String type, Unit<?> unit) {\n+        this.uuid = new UUID((key << 32) | 0x1000, BluetoothBindingConstants.BLUETOOTH_BASE_UUID);\n+        this.type = type;\n+        this.unit = unit;\n+    }\n+\n+    static class BUnits {\n+        public static final Unit<ArealDensity> KILOGRAM_PER_SQUARE_METER = addUnit(\n+                new ProductUnit<ArealDensity>(Units.KILOGRAM.divide(Units.SQUARE_METRE)));\n+\n+        public static final Unit<RadiationExposure> COULOMB_PER_KILOGRAM = addUnit(\n+                new ProductUnit<RadiationExposure>(Units.COULOMB.divide(Units.KILOGRAM)));\n+\n+        public static final Unit<RadiationDoseAbsorptionRate> GRAY_PER_SECOND = addUnit(\n+                new ProductUnit<RadiationDoseAbsorptionRate>(Units.GRAY.divide(Units.SECOND)));\n+\n+        public static final Unit<Mass> POUND = addUnit(\n+                new TransformedUnit<Mass>(Units.KILOGRAM, new MultiplyConverter(0.45359237)));\n+\n+        public static final Unit<Angle> MINUTE_ANGLE = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(1, 180 * 60))));\n+\n+        public static final Unit<Angle> SECOND_ANGLE = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(1, 180 * 60 * 60))));\n+\n+        public static final Unit<Area> HECTARE = addUnit(Units.SQUARE_METRE.multiply(10000.0));\n+        public static final Unit<Area> BARN = addUnit(Units.SQUARE_METRE.multiply(10E-28));\n+\n+        public static final Unit<Length> NAUTICAL_MILE = addUnit(SIUnits.METRE.multiply(1852.0));\n+\n+        public static final Unit<RadiantIntensity> WATT_PER_STERADIAN = addUnit(\n+                new ProductUnit<RadiantIntensity>(Units.WATT.divide(Units.STERADIAN)));\n+\n+        public static final Unit<Radiance> WATT_PER_STERADIAN_PER_SQUARE_METRE = addUnit(\n+                new ProductUnit<Radiance>(WATT_PER_STERADIAN.divide(Units.SQUARE_METRE)));\n+\n+        public static final Unit<Frequency> CYCLES_PER_MINUTE = addUnit(new TransformedUnit<Frequency>(Units.HERTZ,\n+                new RationalConverter(BigInteger.valueOf(60), BigInteger.ONE)));\n+\n+        public static final Unit<Angle> REVOLUTION = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(2, 1))));\n+        public static final Unit<AngularVelocity> REVOLUTION_PER_MINUTE = addUnit(\n+                new ProductUnit<AngularVelocity>(REVOLUTION.divide(Units.MINUTE)));\n+\n+        public static final Unit<Dimensionless> STEPS = addUnit(SmartHomeUnits.ONE.alternate(\"steps\"));\n+        public static final Unit<Dimensionless> BEATS = addUnit(SmartHomeUnits.ONE.alternate(\"beats\"));\n+        public static final Unit<Dimensionless> STROKE = addUnit(SmartHomeUnits.ONE.alternate(\"stroke\"));\n+\n+        public static final Unit<Frequency> STEP_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(STEPS.divide(Units.MINUTE)));\n+\n+        public static final Unit<Frequency> BEATS_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(BEATS.divide(Units.MINUTE)));\n+\n+        public static final Unit<Frequency> STROKE_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(STROKE.divide(Units.MINUTE)));\n+\n+        public static final Unit<MassFlowRate> GRAM_PER_SECOND = addUnit(\n+                new ProductUnit<MassFlowRate>(Units.GRAM.divide(Units.SECOND)));\n+\n+        public static final Unit<LuminousEfficacy> LUMEN_PER_WATT = addUnit(\n+                new ProductUnit<LuminousEfficacy>(Units.LUMEN.divide(Units.WATT)));\n+\n+        public static final Unit<LuminousEnergy> LUMEN_SECOND = addUnit(\n+                new ProductUnit<LuminousEnergy>(Units.LUMEN.multiply(Units.SECOND)));\n+\n+        public static final Unit<LuminousEnergy> LUMEN_HOUR = addUnit(\n+                new ProductUnit<LuminousEnergy>(Units.LUMEN.multiply(Units.HOUR)));\n+\n+        public static final Unit<ElectricCharge> AMPERE_HOUR = addUnit(\n+                new ProductUnit<ElectricCharge>(Units.AMPERE.multiply(Units.HOUR)));\n+\n+        public static final Unit<LuminousExposure> LUX_HOUR = addUnit(\n+                new ProductUnit<LuminousExposure>(Units.LUX.multiply(Units.HOUR)));\n+\n+        public static final Unit<Speed> KILOMETRE_PER_MINUTE = addUnit(Units.KILOMETRE_PER_HOUR.multiply(60.0));\n+\n+        public static final Unit<VolumetricFlowRate> LITRE_PER_SECOND = addUnit(\n+                new ProductUnit<VolumetricFlowRate>(Units.LITRE.divide(Units.SECOND)));\n+\n+        public static final Unit<Dimensionless> PARTS_PER_BILLION = addUnit(new TransformedUnit<>(SmartHomeUnits.ONE,\n+                new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1_000_000_000))));\n+\n+        static {\n+            SimpleUnitFormat.getInstance().label(GRAY_PER_SECOND, \"Gy/s\");\n+            SimpleUnitFormat.getInstance().label(MINUTE_ANGLE, \"'\");\n+            SimpleUnitFormat.getInstance().label(SECOND_ANGLE, \"\\\"\");\n+            SimpleUnitFormat.getInstance().label(HECTARE, \"ha\");\n+            SimpleUnitFormat.getInstance().label(NAUTICAL_MILE, \"NM\");\n+            SimpleUnitFormat.getInstance().label(KILOGRAM_PER_SQUARE_METER, \"kg/m\u00b2\");\n+            SimpleUnitFormat.getInstance().label(POUND, \"lb\");\n+            SimpleUnitFormat.getInstance().label(CYCLES_PER_MINUTE, \"cpm\");\n+            SimpleUnitFormat.getInstance().label(GRAM_PER_SECOND, \"g/s\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_SECOND, \"lm\u00b7s\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_HOUR, \"lm\u00b7h\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_PER_WATT, \"lm/W\");\n+            SimpleUnitFormat.getInstance().label(LUX_HOUR, \"lx\u00b7h\");\n+            SimpleUnitFormat.getInstance().label(KILOMETRE_PER_MINUTE, \"km/min\");\n+            SimpleUnitFormat.getInstance().label(LITRE_PER_SECOND, \"l/s\");\n+            SimpleUnitFormat.getInstance().label(PARTS_PER_BILLION, \"ppb\");\n+            SimpleUnitFormat.getInstance().label(BEATS_PER_MINUTE, \"bpm\");\n+            SimpleUnitFormat.getInstance().label(STEP_PER_MINUTE, \"steps/min\");\n+            SimpleUnitFormat.getInstance().label(STROKE_PER_MINUTE, \"spm\");\n+            SimpleUnitFormat.getInstance().label(REVOLUTION_PER_MINUTE, \"rpm\");\n+        }\n+\n+        private static <U extends Unit<?>> U addUnit(U unit) {\n+            return unit;\n+        }\n+    }\n+\n+    public interface AngularVelocity extends Quantity<AngularVelocity> {\n+    }\n+\n+    public interface LuminousEnergy extends Quantity<LuminousEnergy> {\n+    }\n+\n+    public interface LuminousEfficacy extends Quantity<LuminousEfficacy> {\n+    }\n+\n+    public interface LuminousExposure extends Quantity<LuminousExposure> {\n+    }\n+\n+    public interface RadiantIntensity extends Quantity<RadiantIntensity> {\n+    }\n+\n+    public interface Radiance extends Quantity<Radiance> {\n+    }\n+\n+    public interface RadiationExposure extends Quantity<RadiationExposure> {\n+    }\n+\n+    public interface RadiationDoseAbsorptionRate extends Quantity<RadiationDoseAbsorptionRate> {\n+    }\n+\n+    public interface MassFlowRate extends Quantity<MassFlowRate> {\n+    }\n+\n+    public static @Nullable BluetoothUnit findByType(String type) {\n+        for (BluetoothUnit unit : BluetoothUnit.values()) {\n+            if (unit.type.equals(type)) {\n+                return unit;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static final String RAW = \"<tbody>\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MjE0MA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 359}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTI5NjEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjoyNzoyNFrOHrwTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxOTo0N1rOHryNKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MjE2Nw==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515642167", "createdAt": "2020-11-01T16:27:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }\n+\n+    private UUID uuid;\n+\n+    private String type;\n+\n+    private Unit<?> unit;\n+\n+    private BluetoothUnit(long key, String type, Unit<?> unit) {\n+        this.uuid = new UUID((key << 32) | 0x1000, BluetoothBindingConstants.BLUETOOTH_BASE_UUID);\n+        this.type = type;\n+        this.unit = unit;\n+    }\n+\n+    static class BUnits {\n+        public static final Unit<ArealDensity> KILOGRAM_PER_SQUARE_METER = addUnit(\n+                new ProductUnit<ArealDensity>(Units.KILOGRAM.divide(Units.SQUARE_METRE)));\n+\n+        public static final Unit<RadiationExposure> COULOMB_PER_KILOGRAM = addUnit(\n+                new ProductUnit<RadiationExposure>(Units.COULOMB.divide(Units.KILOGRAM)));\n+\n+        public static final Unit<RadiationDoseAbsorptionRate> GRAY_PER_SECOND = addUnit(\n+                new ProductUnit<RadiationDoseAbsorptionRate>(Units.GRAY.divide(Units.SECOND)));\n+\n+        public static final Unit<Mass> POUND = addUnit(\n+                new TransformedUnit<Mass>(Units.KILOGRAM, new MultiplyConverter(0.45359237)));\n+\n+        public static final Unit<Angle> MINUTE_ANGLE = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(1, 180 * 60))));\n+\n+        public static final Unit<Angle> SECOND_ANGLE = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(1, 180 * 60 * 60))));\n+\n+        public static final Unit<Area> HECTARE = addUnit(Units.SQUARE_METRE.multiply(10000.0));\n+        public static final Unit<Area> BARN = addUnit(Units.SQUARE_METRE.multiply(10E-28));\n+\n+        public static final Unit<Length> NAUTICAL_MILE = addUnit(SIUnits.METRE.multiply(1852.0));\n+\n+        public static final Unit<RadiantIntensity> WATT_PER_STERADIAN = addUnit(\n+                new ProductUnit<RadiantIntensity>(Units.WATT.divide(Units.STERADIAN)));\n+\n+        public static final Unit<Radiance> WATT_PER_STERADIAN_PER_SQUARE_METRE = addUnit(\n+                new ProductUnit<Radiance>(WATT_PER_STERADIAN.divide(Units.SQUARE_METRE)));\n+\n+        public static final Unit<Frequency> CYCLES_PER_MINUTE = addUnit(new TransformedUnit<Frequency>(Units.HERTZ,\n+                new RationalConverter(BigInteger.valueOf(60), BigInteger.ONE)));\n+\n+        public static final Unit<Angle> REVOLUTION = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(2, 1))));\n+        public static final Unit<AngularVelocity> REVOLUTION_PER_MINUTE = addUnit(\n+                new ProductUnit<AngularVelocity>(REVOLUTION.divide(Units.MINUTE)));\n+\n+        public static final Unit<Dimensionless> STEPS = addUnit(SmartHomeUnits.ONE.alternate(\"steps\"));\n+        public static final Unit<Dimensionless> BEATS = addUnit(SmartHomeUnits.ONE.alternate(\"beats\"));\n+        public static final Unit<Dimensionless> STROKE = addUnit(SmartHomeUnits.ONE.alternate(\"stroke\"));\n+\n+        public static final Unit<Frequency> STEP_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(STEPS.divide(Units.MINUTE)));\n+\n+        public static final Unit<Frequency> BEATS_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(BEATS.divide(Units.MINUTE)));\n+\n+        public static final Unit<Frequency> STROKE_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(STROKE.divide(Units.MINUTE)));\n+\n+        public static final Unit<MassFlowRate> GRAM_PER_SECOND = addUnit(\n+                new ProductUnit<MassFlowRate>(Units.GRAM.divide(Units.SECOND)));\n+\n+        public static final Unit<LuminousEfficacy> LUMEN_PER_WATT = addUnit(\n+                new ProductUnit<LuminousEfficacy>(Units.LUMEN.divide(Units.WATT)));\n+\n+        public static final Unit<LuminousEnergy> LUMEN_SECOND = addUnit(\n+                new ProductUnit<LuminousEnergy>(Units.LUMEN.multiply(Units.SECOND)));\n+\n+        public static final Unit<LuminousEnergy> LUMEN_HOUR = addUnit(\n+                new ProductUnit<LuminousEnergy>(Units.LUMEN.multiply(Units.HOUR)));\n+\n+        public static final Unit<ElectricCharge> AMPERE_HOUR = addUnit(\n+                new ProductUnit<ElectricCharge>(Units.AMPERE.multiply(Units.HOUR)));\n+\n+        public static final Unit<LuminousExposure> LUX_HOUR = addUnit(\n+                new ProductUnit<LuminousExposure>(Units.LUX.multiply(Units.HOUR)));\n+\n+        public static final Unit<Speed> KILOMETRE_PER_MINUTE = addUnit(Units.KILOMETRE_PER_HOUR.multiply(60.0));\n+\n+        public static final Unit<VolumetricFlowRate> LITRE_PER_SECOND = addUnit(\n+                new ProductUnit<VolumetricFlowRate>(Units.LITRE.divide(Units.SECOND)));\n+\n+        public static final Unit<Dimensionless> PARTS_PER_BILLION = addUnit(new TransformedUnit<>(SmartHomeUnits.ONE,\n+                new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1_000_000_000))));\n+\n+        static {\n+            SimpleUnitFormat.getInstance().label(GRAY_PER_SECOND, \"Gy/s\");\n+            SimpleUnitFormat.getInstance().label(MINUTE_ANGLE, \"'\");\n+            SimpleUnitFormat.getInstance().label(SECOND_ANGLE, \"\\\"\");\n+            SimpleUnitFormat.getInstance().label(HECTARE, \"ha\");\n+            SimpleUnitFormat.getInstance().label(NAUTICAL_MILE, \"NM\");\n+            SimpleUnitFormat.getInstance().label(KILOGRAM_PER_SQUARE_METER, \"kg/m\u00b2\");\n+            SimpleUnitFormat.getInstance().label(POUND, \"lb\");\n+            SimpleUnitFormat.getInstance().label(CYCLES_PER_MINUTE, \"cpm\");\n+            SimpleUnitFormat.getInstance().label(GRAM_PER_SECOND, \"g/s\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_SECOND, \"lm\u00b7s\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_HOUR, \"lm\u00b7h\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_PER_WATT, \"lm/W\");\n+            SimpleUnitFormat.getInstance().label(LUX_HOUR, \"lx\u00b7h\");\n+            SimpleUnitFormat.getInstance().label(KILOMETRE_PER_MINUTE, \"km/min\");\n+            SimpleUnitFormat.getInstance().label(LITRE_PER_SECOND, \"l/s\");\n+            SimpleUnitFormat.getInstance().label(PARTS_PER_BILLION, \"ppb\");\n+            SimpleUnitFormat.getInstance().label(BEATS_PER_MINUTE, \"bpm\");\n+            SimpleUnitFormat.getInstance().label(STEP_PER_MINUTE, \"steps/min\");\n+            SimpleUnitFormat.getInstance().label(STROKE_PER_MINUTE, \"spm\");\n+            SimpleUnitFormat.getInstance().label(REVOLUTION_PER_MINUTE, \"rpm\");\n+        }\n+\n+        private static <U extends Unit<?>> U addUnit(U unit) {\n+            return unit;\n+        }\n+    }\n+\n+    public interface AngularVelocity extends Quantity<AngularVelocity> {\n+    }\n+\n+    public interface LuminousEnergy extends Quantity<LuminousEnergy> {\n+    }\n+\n+    public interface LuminousEfficacy extends Quantity<LuminousEfficacy> {\n+    }\n+\n+    public interface LuminousExposure extends Quantity<LuminousExposure> {\n+    }\n+\n+    public interface RadiantIntensity extends Quantity<RadiantIntensity> {\n+    }\n+\n+    public interface Radiance extends Quantity<Radiance> {\n+    }\n+\n+    public interface RadiationExposure extends Quantity<RadiationExposure> {\n+    }\n+\n+    public interface RadiationDoseAbsorptionRate extends Quantity<RadiationDoseAbsorptionRate> {\n+    }\n+\n+    public interface MassFlowRate extends Quantity<MassFlowRate> {\n+    }\n+\n+    public static @Nullable BluetoothUnit findByType(String type) {\n+        for (BluetoothUnit unit : BluetoothUnit.values()) {\n+            if (unit.type.equals(type)) {\n+                return unit;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static final String RAW = \"<tbody>\\n\"\n+            + \"                <tr id=\\\"table_21_row_0\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2700</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">unitless</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.unitless</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_1\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2701</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_2\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2702</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass (kilogram)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass.kilogram</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_3\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2703</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_4\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2704</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric current (ampere)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_current.ampere</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_5\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2705</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">thermodynamic temperature (kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.thermodynamic_temperature.kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_6\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2706</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">amount of substance (mole)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.amount_of_substance.mole</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_7\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2707</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous intensity (candela)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_intensity.candela</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_8\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2710</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">area (square metres)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.area.square_metres</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_9\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2711</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">volume (cubic metres)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.volume.cubic_metres</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_10\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2712</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">velocity (metres per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.metres_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_11\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2713</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">acceleration (metres per second squared)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.acceleration.metres_per_second_squared</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_12\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2714</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">wavenumber (reciprocal metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.wavenumber.reciprocal_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_13\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2715</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">density (kilogram per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.density.kilogram_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_14\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2716</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">surface density (kilogram per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.surface_density.kilogram_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_15\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2717</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">specific volume (cubic metre per kilogram)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_16\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2718</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">current density (ampere per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.current_density.ampere_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_17\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2719</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">magnetic field strength (ampere per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.magnetic_field_strength.ampere_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_18\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271A</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">amount concentration (mole per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.amount_concentration.mole_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_19\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271B</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass concentration (kilogram per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_20\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271C</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminance (candela per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminance.candela_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_21\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271D</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">refractive index</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.refractive_index</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_22\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271E</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">relative permeability</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.relative_permeability</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_23\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2720</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">plane angle (radian)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.plane_angle.radian</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_24\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2721</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">solid angle (steradian)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.solid_angle.steradian</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_25\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2722</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">frequency (hertz)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.frequency.hertz</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_26\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2723</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">force (newton)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.force.newton</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_27\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2724</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pressure (pascal)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.pressure.pascal</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_28\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2725</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy (joule)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy.joule</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_29\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2726</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">power (watt)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.power.watt</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_30\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2727</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric charge (coulomb)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_charge.coulomb</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_31\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2728</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric potential difference (volt)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_potential_difference.volt</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_32\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2729</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">capacitance (farad)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.capacitance.farad</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_33\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272A</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric resistance (ohm)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_resistance.ohm</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_34\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272B</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric conductance (siemens)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_conductance.siemens</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_35\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272C</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">magnetic flux (weber)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.magnetic_flux.weber</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_36\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272D</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">magnetic flux density (tesla)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.magnetic_flux_density.tesla</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_37\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272E</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">inductance (henry)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.inductance.henry</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_38\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272F</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">Celsius temperature (degree Celsius)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.thermodynamic_temperature.degree_celsius</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_39\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2730</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous flux (lumen)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_flux.lumen</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_40\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2731</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">illuminance (lux)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.illuminance.lux</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_41\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2732</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">activity referred to a radionuclide (becquerel)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_42\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2733</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">absorbed dose (gray)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.absorbed_dose.gray</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_43\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2734</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">dose equivalent (sievert)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.dose_equivalent.sievert</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_44\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2735</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">catalytic activity (katal)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.catalytic_activity.katal</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_45\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2740</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">dynamic viscosity (pascal second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.dynamic_viscosity.pascal_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_46\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2741</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">moment of force (newton metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.moment_of_force.newton_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_47\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2742</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">surface tension (newton per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.surface_tension.newton_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_48\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2743</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">angular velocity (radian per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.angular_velocity.radian_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_49\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2744</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">angular acceleration (radian per second squared)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.angular_acceleration.radian_per_second_squared</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_50\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2745</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">heat flux density (watt per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.heat_flux_density.watt_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_51\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2746</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">heat capacity (joule per kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.heat_capacity.joule_per_kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_52\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2747</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">specific heat capacity (joule per kilogram kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_53\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2748</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">specific energy (joule per kilogram)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.specific_energy.joule_per_kilogram</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_54\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2749</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">thermal conductivity (watt per metre kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_55\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274A</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy density (joule per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy_density.joule_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_56\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274B</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric field strength (volt per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_field_strength.volt_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_57\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274C</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric charge density (coulomb per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_58\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274D</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">surface charge density (coulomb per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_59\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274E</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric flux density (coulomb per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_60\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274F</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">permittivity (farad per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.permittivity.farad_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_61\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2750</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">permeability (henry per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.permeability.henry_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_62\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2751</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">molar energy (joule per mole)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.molar_energy.joule_per_mole</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_63\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2752</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">molar entropy (joule per mole kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_64\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2753</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">exposure (coulomb per kilogram)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.exposure.coulomb_per_kilogram</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_65\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2754</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">absorbed dose rate (gray per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.absorbed_dose_rate.gray_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_66\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2755</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">radiant intensity (watt per steradian)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.radiant_intensity.watt_per_steradian</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_67\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2756</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">radiance (watt per square metre steradian)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.radiance.watt_per_square_metre_steradian</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_68\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2757</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">catalytic activity concentration (katal per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_69\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2760</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_70\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2761</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_71\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2762</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (day)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.day</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_72\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2763</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">plane angle (degree)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.plane_angle.degree</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_73\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2764</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">plane angle (minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.plane_angle.minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_74\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2765</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">plane angle (second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.plane_angle.second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_75\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2766</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">area (hectare)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.area.hectare</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_76\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2767</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">volume (litre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.volume.litre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_77\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2768</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass (tonne)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass.tonne</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_78\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2780</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pressure (bar)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.pressure.bar</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_79\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2781</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pressure (millimetre of mercury)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.pressure.millimetre_of_mercury</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_80\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2782</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (\u00e5ngstr\u00f6m)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.\u00e5ngstr\u00f6m</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_81\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2783</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (nautical mile)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.nautical_mile</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_82\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2784</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">area (barn)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.area.barn</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_83\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2785</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">velocity (knot)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.knot</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_84\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2786</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">logarithmic radio quantity (neper)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.logarithmic_radio_quantity.neper</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_85\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2787</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">logarithmic radio quantity (bel)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.logarithmic_radio_quantity.bel</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_86\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A0</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (yard)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.yard</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_87\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A1</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (parsec)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.parsec</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_88\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A2</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (inch)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.inch</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_89\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A3</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (foot)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.foot</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_90\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A4</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (mile)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.mile</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_91\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A5</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pressure (pound-force per square inch)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.pressure.pound_force_per_square_inch</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_92\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A6</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">velocity (kilometre per hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.kilometre_per_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_93\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A7</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">velocity (mile per hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.mile_per_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_94\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A8</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">angular velocity (revolution per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.angular_velocity.revolution_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_95\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A9</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy (gram calorie)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy.gram_calorie</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_96\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AA</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy (kilogram calorie)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy.kilogram_calorie</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_97\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AB</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy (kilowatt hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy.kilowatt_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_98\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AC</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">thermodynamic temperature (degree Fahrenheit)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_99\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AD</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">percentage</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.percentage</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_100\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AE</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">per mille</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.per_mille</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_101\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AF</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">period (beats per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.period.beats_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_102\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B0</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric charge (ampere hours)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_charge.ampere_hours</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_103\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B1</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass density (milligram per decilitre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass_density.milligram_per_decilitre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_104\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B2</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass density (millimole per litre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass_density.millimole_per_litre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_105\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B3</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (year)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.year</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_106\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B4</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (month)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.month</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_107\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B5</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">concentration (count per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.concentration.count_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_108\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B6</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">irradiance (watt per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.irradiance.watt_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_109\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B7</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">milliliter (per kilogram per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_110\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B8</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass (pound)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass.pound</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_111\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B9</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">metabolic equivalent</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.metabolic_equivalent</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_112\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BA</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">step (per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.step_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_113\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BC</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">stroke (per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.stroke_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_114\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BD</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pace (kilometre per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.kilometer_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_115\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BE</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous efficacy (lumen per watt)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_efficacy.lumen_per_watt</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_116\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BF</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous energy (lumen hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_energy.lumen_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_117\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C0</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous exposure (lux hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_exposure.lux_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_118\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C1</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass flow (gram per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass_flow.gram_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_119\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C2</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">volume flow (litre per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.volume_flow.litre_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_120\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C3</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">sound pressure (decibel)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.sound_pressure.decibel_spl</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_121\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C4</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">concentration (parts per million)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.concentration.parts_per_million</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_122\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C5</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">concentration (parts per billion)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.concentration.parts_per_billion</td>\\n\"\n+            + \"                    </tr></tbody>\";\n+\n+    // public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 854}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MzM4NA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515673384", "createdAt": "2020-11-01T21:19:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnit.java", "diffHunk": "@@ -0,0 +1,876 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigInteger;\n+import java.util.UUID;\n+\n+import javax.measure.Quantity;\n+import javax.measure.Unit;\n+import javax.measure.quantity.Angle;\n+import javax.measure.quantity.Area;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.ElectricCharge;\n+import javax.measure.quantity.Frequency;\n+import javax.measure.quantity.Length;\n+import javax.measure.quantity.Mass;\n+import javax.measure.quantity.Speed;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.core.library.dimension.ArealDensity;\n+import org.openhab.core.library.dimension.VolumetricFlowRate;\n+import org.openhab.core.library.unit.ImperialUnits;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.MultiplyConverter;\n+import tec.uom.se.function.PiMultiplierConverter;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link BluetoothUnit} maps bluetooth units to openHAB units.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum BluetoothUnit {\n+\n+    UNITLESS(0x2700, \"org.bluetooth.unit.unitless\", SmartHomeUnits.ONE),\n+    METRE(0x2701, \"org.bluetooth.unit.length.metre\", SIUnits.METRE),\n+    KILOGRAM(0x2702, \"org.bluetooth.unit.mass.kilogram\", SIUnits.KILOGRAM),\n+    SECOND(0x2703, \"org.bluetooth.unit.time.second\", SmartHomeUnits.SECOND),\n+    AMPERE(0x2704, \"org.bluetooth.unit.electric_current.ampere\", SmartHomeUnits.AMPERE),\n+    KELVIN(0x2705, \"org.bluetooth.unit.thermodynamic_temperature.kelvin\", SmartHomeUnits.KELVIN),\n+    MOLE(0x2706, \"org.bluetooth.unit.amount_of_substance.mole\", SmartHomeUnits.MOLE),\n+    CANDELA(0x2707, \"org.bluetooth.unit.luminous_intensity.candela\", SmartHomeUnits.CANDELA),\n+    SQUARE_METRES(0x2710, \"org.bluetooth.unit.area.square_metres\", SIUnits.SQUARE_METRE),\n+    CUBIC_METRES(0x2711, \"org.bluetooth.unit.volume.cubic_metres\", SIUnits.CUBIC_METRE),\n+    METRE_PER_SECOND(0x2712, \"org.bluetooth.unit.velocity.metres_per_second\", SmartHomeUnits.METRE_PER_SECOND),\n+    METRE_PER_SQUARE_SECOND(0X2713, \"org.bluetooth.unit.acceleration.metres_per_second_squared\",\n+            SmartHomeUnits.METRE_PER_SQUARE_SECOND),\n+    WAVENUMBER(0x2714, \"org.bluetooth.unit.wavenumber.reciprocal_metre\", SmartHomeUnits.ONE), // done\n+    KILOGRAM_PER_CUBIC_METRE(0x2715, \"org.bluetooth.unit.density.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    KILOGRAM_PER_SQUARE_METRE(0x2716, \"org.bluetooth.unit.surface_density.kilogram_per_square_metre\",\n+            BUnits.KILOGRAM_PER_SQUARE_METER), // done\n+    CUBIC_METRE_PER_KILOGRAM(0x2717, \"org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram\", SmartHomeUnits.ONE), // TODO\n+                                                                                                                         // FIX\n+    AMPERE_PER_SQUARE_METRE(0x2718, \"org.bluetooth.unit.current_density.ampere_per_square_metre\", SmartHomeUnits.ONE),\n+    AMPERE_PER_METRE(0x2719, \"org.bluetooth.unit.magnetic_field_strength.ampere_per_metre\", SmartHomeUnits.ONE), //\n+    // done\n+    MOLE_PER_CUBIC_METRE(0x271A, \"org.bluetooth.unit.amount_concentration.mole_per_cubic_metre\", SmartHomeUnits.ONE),\n+    CONCENTRATION_KILOGRAM_PER_CUBIC_METRE(0x271B, \"org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre\",\n+            SmartHomeUnits.KILOGRAM_PER_CUBICMETRE),\n+    CANDELA_PER_SQUARE_METRE(0x271C, \"org.bluetooth.unit.luminance.candela_per_square_metre\", SmartHomeUnits.ONE),\n+    REFRACTIVE_INDEX(0x271D, \"org.bluetooth.unit.refractive_index\", SmartHomeUnits.ONE),\n+    RELATIVE_PERMEABILITY(0x271E, \"org.bluetooth.unit.relative_permeability\", SmartHomeUnits.ONE),\n+    RADIAN(0x2720, \"org.bluetooth.unit.plane_angle.radian\", SmartHomeUnits.RADIAN),\n+    STERADIAN(0x2721, \"org.bluetooth.unit.solid_angle.steradian\", SmartHomeUnits.STERADIAN),\n+    HERTZ(0x2722, \"org.bluetooth.unit.frequency.hertz\", SmartHomeUnits.HERTZ),\n+    NEWTON(0x2723, \"org.bluetooth.unit.force.newton\", SmartHomeUnits.NEWTON),\n+    PASCAL(0x2724, \"org.bluetooth.unit.pressure.pascal\", SIUnits.PASCAL),\n+    JOULE(0x2725, \"org.bluetooth.unit.energy.joule\", SmartHomeUnits.JOULE),\n+    WATT(0x2726, \"org.bluetooth.unit.power.watt\", SmartHomeUnits.WATT),\n+    COULOMB(0x2727, \"org.bluetooth.unit.electric_charge.coulomb\", SmartHomeUnits.COULOMB),\n+    VOLT(0x2728, \"org.bluetooth.unit.electric_potential_difference.volt\", SmartHomeUnits.VOLT),\n+    FARAD(0x2729, \"org.bluetooth.unit.capacitance.farad\", SmartHomeUnits.FARAD),\n+    OHM(0x272A, \"org.bluetooth.unit.electric_resistance.ohm\", SmartHomeUnits.OHM),\n+    SIEMENS(0x272B, \"org.bluetooth.unit.electric_conductance.siemens\", SmartHomeUnits.SIEMENS),\n+    WEBER(0x272C, \"org.bluetooth.unit.magnetic_flux.weber\", SmartHomeUnits.WEBER),\n+    TESLA(0x272D, \"org.bluetooth.unit.magnetic_flux_density.tesla\", SmartHomeUnits.TESLA),\n+    HENRY(0x272E, \"org.bluetooth.unit.inductance.henry\", SmartHomeUnits.HENRY),\n+    DEGREE_CELSIUS(0x272F, \"org.bluetooth.unit.thermodynamic_temperature.degree_celsius\", SIUnits.CELSIUS),\n+    LUMEN(0x2730, \"org.bluetooth.unit.luminous_flux.lumen\", SmartHomeUnits.LUMEN),\n+    LUX(0x2731, \"org.bluetooth.unit.illuminance.lux\", SmartHomeUnits.LUX),\n+    BECQUEREL(0x2732, \"org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel\", SmartHomeUnits.BECQUEREL),\n+    GRAY(0x2733, \"org.bluetooth.unit.absorbed_dose.gray\", SmartHomeUnits.GRAY),\n+    SIEVERT(0x2734, \"org.bluetooth.unit.dose_equivalent.sievert\", SmartHomeUnits.SIEVERT),\n+    KATAL(0x2735, \"org.bluetooth.unit.catalytic_activity.katal\", SmartHomeUnits.KATAL),\n+    PASCAL_SECOND(0x2740, \"org.bluetooth.unit.dynamic_viscosity.pascal_second\", SmartHomeUnits.ONE), // done\n+    NEWTON_METRE(0x2741, \"org.bluetooth.unit.moment_of_force.newton_metre\", SmartHomeUnits.ONE),\n+    NEWTON_PER_METRE(0x2742, \"org.bluetooth.unit.surface_tension.newton_per_metre\", SmartHomeUnits.ONE),\n+    RADIAN_PER_SECOND(0x2743, \"org.bluetooth.unit.angular_velocity.radian_per_second\", SmartHomeUnits.ONE), // done\n+    RADIAN_PER_SECOND_SQUARED(0x2744, \"org.bluetooth.unit.angular_acceleration.radian_per_second_squared\",\n+            SmartHomeUnits.ONE), // done\n+    FLUX_WATT_PER_SQUARE_METRE(0x2745, \"org.bluetooth.unit.heat_flux_density.watt_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KELVIN(0x2746, \"org.bluetooth.unit.heat_capacity.joule_per_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM_KELVIN(0x2747, \"org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin\",\n+            SmartHomeUnits.ONE),\n+    JOULE_PER_KILOGRAM(0x2748, \"org.bluetooth.unit.specific_energy.joule_per_kilogram\", SmartHomeUnits.ONE),\n+    WATT_PER_METRE_KELVIN(0x2749, \"org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin\", SmartHomeUnits.ONE),\n+    JOULE_PER_CUBIC_METRE(0x274A, \"org.bluetooth.unit.energy_density.joule_per_cubic_metre\", SmartHomeUnits.ONE),\n+    VOLT_PER_METRE(0x274B, \"org.bluetooth.unit.electric_field_strength.volt_per_metre\", SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_CUBIC_METRE(0x274C, \"org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    CHARGE_DENSITY_COULOMB_PER_SQUARE_METRE(0x274D,\n+            \"org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre\", SmartHomeUnits.ONE),\n+    FLUX_DENSITY_COULOMB_PER_SQUARE_METRE(0x274E, \"org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre\",\n+            SmartHomeUnits.ONE),\n+    FARAD_PER_METRE(0x274F, \"org.bluetooth.unit.permittivity.farad_per_metre\", SmartHomeUnits.ONE),\n+    HENRY_PER_METRE(0x2750, \"org.bluetooth.unit.permeability.henry_per_metre\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE(0x2751, \"org.bluetooth.unit.molar_energy.joule_per_mole\", SmartHomeUnits.ONE),\n+    JOULE_PER_MOLE_KELVIN(0x2752, \"org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin\", SmartHomeUnits.ONE),\n+    COULOMB_PER_KILOGRAM(0x2753, \"org.bluetooth.unit.exposure.coulomb_per_kilogram\", SmartHomeUnits.ONE), // done\n+    GRAY_PER_SECOND(0x2754, \"org.bluetooth.unit.absorbed_dose_rate.gray_per_second\", BUnits.GRAY_PER_SECOND),\n+    WATT_PER_STERADIAN(0x2755, \"org.bluetooth.unit.radiant_intensity.watt_per_steradian\", BUnits.WATT_PER_STERADIAN),\n+    // done\n+    WATT_PER_STERADIAN_PER_SQUARE_METRE(0x2756, \"org.bluetooth.unit.radiance.watt_per_square_metre_steradian\",\n+            BUnits.WATT_PER_STERADIAN_PER_SQUARE_METRE), // done\n+    KATAL_PER_CUBIC_METRE(0x2757, \"org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre\",\n+            SmartHomeUnits.ONE),\n+    MINUTE(0x2760, \"org.bluetooth.unit.time.minute\", SmartHomeUnits.MINUTE),\n+    HOUR(0x2761, \"org.bluetooth.unit.time.hour\", SmartHomeUnits.HOUR),\n+    DAY(0x2762, \"org.bluetooth.unit.time.day\", SmartHomeUnits.DAY),\n+    ANGLE_DEGREE(0x2763, \"org.bluetooth.unit.plane_angle.degree\", SmartHomeUnits.DEGREE_ANGLE),\n+    ANGLE_MINUTE(0x2764, \"org.bluetooth.unit.plane_angle.minute\", BUnits.MINUTE_ANGLE),\n+    ANGLE_SECOND(0x2765, \"org.bluetooth.unit.plane_angle.second\", BUnits.SECOND_ANGLE),\n+    HECTARE(0x2766, \"org.bluetooth.unit.area.hectare\", BUnits.HECTARE),\n+    LITRE(0x2767, \"org.bluetooth.unit.volume.litre\", SmartHomeUnits.LITRE),\n+    TONNE(0x2768, \"org.bluetooth.unit.mass.tonne\", SmartHomeUnits.ONE), // done\n+    BAR(0x2780, \"org.bluetooth.unit.pressure.bar\", SmartHomeUnits.BAR),\n+    MILLIMETRE_OF_MERCURY(0x2781, \"org.bluetooth.unit.pressure.millimetre_of_mercury\",\n+            SmartHomeUnits.MILLIMETRE_OF_MERCURY),\n+    \u00c5NGSTR\u00d6M(0x2782, \"org.bluetooth.unit.length.\u00e5ngstr\u00f6m\", SmartHomeUnits.ONE),\n+    NAUTICAL_MILE(0x2783, \"org.bluetooth.unit.length.nautical_mile\", BUnits.NAUTICAL_MILE),\n+    BARN(0x2784, \"org.bluetooth.unit.area.barn\", BUnits.BARN), // done\n+    KNOT(0x2785, \"org.bluetooth.unit.velocity.knot\", SmartHomeUnits.KNOT),\n+    NEPER(0x2786, \"org.bluetooth.unit.logarithmic_radio_quantity.neper\", SmartHomeUnits.ONE),\n+    BEL(0x2787, \"org.bluetooth.unit.logarithmic_radio_quantity.bel\", SmartHomeUnits.ONE),\n+    YARD(0x27A0, \"org.bluetooth.unit.length.yard\", ImperialUnits.YARD),\n+    PARSEC(0x27A1, \"org.bluetooth.unit.length.parsec\", SmartHomeUnits.ONE), // done\n+    INCH(0x27A2, \"org.bluetooth.unit.length.inch\", ImperialUnits.INCH),\n+    FOOT(0x27A3, \"org.bluetooth.unit.length.foot\", ImperialUnits.FOOT),\n+    MILE(0x27A4, \"org.bluetooth.unit.length.mile\", ImperialUnits.MILE),\n+    POUND_FORCE_PER_SQUARE_INCH(0x27A5, \"org.bluetooth.unit.pressure.pound_force_per_square_inch\", SmartHomeUnits.ONE),\n+    KILOMETRE_PER_HOUR(0x27A6, \"org.bluetooth.unit.velocity.kilometre_per_hour\", SIUnits.KILOMETRE_PER_HOUR),\n+    MILES_PER_HOUR(0x27A7, \"org.bluetooth.unit.velocity.mile_per_hour\", ImperialUnits.MILES_PER_HOUR),\n+    REVOLUTION_PER_MINUTE(0x27A8, \"org.bluetooth.unit.angular_velocity.revolution_per_minute\",\n+            BUnits.REVOLUTION_PER_MINUTE),\n+    GRAM_CALORIE(0x27A9, \"org.bluetooth.unit.energy.gram_calorie\", SmartHomeUnits.ONE),\n+    KILOGRAM_CALORIE(0x27AA, \"org.bluetooth.unit.energy.kilogram_calorie\", SmartHomeUnits.ONE),\n+    KILOWATT_HOUR(0x27AB, \"org.bluetooth.unit.energy.kilowatt_hour\", SmartHomeUnits.KILOWATT_HOUR),\n+    DEGREE_FAHRENHEIT(0x27AC, \"org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit\",\n+            ImperialUnits.FAHRENHEIT),\n+    PERCENTAGE(0x27AD, \"org.bluetooth.unit.percentage\", SmartHomeUnits.PERCENT),\n+    PER_MILLE(0x27AE, \"org.bluetooth.unit.per_mille\", SmartHomeUnits.ONE),\n+    BEATS_PER_MINUTE(0x27AF, \"org.bluetooth.unit.period.beats_per_minute\", BUnits.BEATS_PER_MINUTE),\n+    AMPERE_HOURS(0x27B0, \"org.bluetooth.unit.electric_charge.ampere_hours\", BUnits.AMPERE_HOUR),\n+    MILLIGRAM_PER_DECILITRE(0x27B1, \"org.bluetooth.unit.mass_density.milligram_per_decilitre\", SmartHomeUnits.ONE),\n+    // // done\n+    MILLIMOLE_PER_LITRE(0x27B2, \"org.bluetooth.unit.mass_density.millimole_per_litre\", SmartHomeUnits.ONE),\n+    YEAR(0x27B3, \"org.bluetooth.unit.time.year\", SmartHomeUnits.YEAR),\n+    MONTH(0x27B4, \"org.bluetooth.unit.time.month\", SmartHomeUnits.ONE),\n+    COUNT_PER_CUBIC_METRE(0x27B5, \"org.bluetooth.unit.concentration.count_per_cubic_metre\", SmartHomeUnits.ONE),\n+    WATT_PER_SQUARE_METRE(0x27B6, \"org.bluetooth.unit.irradiance.watt_per_square_metre\", SmartHomeUnits.IRRADIANCE),\n+    MILLILITER_PER_KILOGRAM_PER_MINUTE(0x27B7, \"org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute\",\n+            SmartHomeUnits.ONE),\n+    POUND(0x27B8, \"org.bluetooth.unit.mass.pound\", BUnits.POUND),\n+    METABOLIC_EQUIVALENT(0x27B9, \"org.bluetooth.unit.metabolic_equivalent\", SmartHomeUnits.ONE),\n+    STEP_PER_MINUTE(0x27BA, \"org.bluetooth.unit.step_per_minute\", BUnits.STEP_PER_MINUTE),\n+    STROKE_PER_MINUTE(0x27BC, \"org.bluetooth.unit.stroke_per_minute\", BUnits.STROKE_PER_MINUTE),\n+    KILOMETER_PER_MINUTE(0x27BD, \"org.bluetooth.unit.velocity.kilometer_per_minute\", BUnits.KILOMETRE_PER_MINUTE),\n+    LUMEN_PER_WATT(0x27BE, \"org.bluetooth.unit.luminous_efficacy.lumen_per_watt\", BUnits.LUMEN_PER_WATT), // done\n+    LUMEN_HOUR(0x27BF, \"org.bluetooth.unit.luminous_energy.lumen_hour\", BUnits.LUMEN_HOUR), // done\n+    LUX_HOUR(0x27C0, \"org.bluetooth.unit.luminous_exposure.lux_hour\", BUnits.LUX_HOUR), // done\n+    GRAM_PER_SECOND(0x27C1, \"org.bluetooth.unit.mass_flow.gram_per_second\", BUnits.GRAM_PER_SECOND), // done\n+    LITRE_PER_SECOND(0x27C2, \"org.bluetooth.unit.volume_flow.litre_per_second\", BUnits.LITRE_PER_SECOND), // done\n+    DECIBEL_SPL(0x27C3, \"org.bluetooth.unit.sound_pressure.decibel_spl\", SmartHomeUnits.ONE),\n+    PARTS_PER_MILLION(0x27C4, \"org.bluetooth.unit.concentration.parts_per_million\", SmartHomeUnits.PARTS_PER_MILLION),\n+    PARTS_PER_BILLION(0x27C5, \"org.bluetooth.unit.concentration.parts_per_billion\", BUnits.PARTS_PER_BILLION);// done\n+    ;\n+\n+    {\n+        // ImperialUnits.\n+        // Units.\n+        // SmartHomeUnits.S\n+        // SIUnits.KILOMETRE_PER_HOUR\n+    }\n+\n+    private UUID uuid;\n+\n+    private String type;\n+\n+    private Unit<?> unit;\n+\n+    private BluetoothUnit(long key, String type, Unit<?> unit) {\n+        this.uuid = new UUID((key << 32) | 0x1000, BluetoothBindingConstants.BLUETOOTH_BASE_UUID);\n+        this.type = type;\n+        this.unit = unit;\n+    }\n+\n+    static class BUnits {\n+        public static final Unit<ArealDensity> KILOGRAM_PER_SQUARE_METER = addUnit(\n+                new ProductUnit<ArealDensity>(Units.KILOGRAM.divide(Units.SQUARE_METRE)));\n+\n+        public static final Unit<RadiationExposure> COULOMB_PER_KILOGRAM = addUnit(\n+                new ProductUnit<RadiationExposure>(Units.COULOMB.divide(Units.KILOGRAM)));\n+\n+        public static final Unit<RadiationDoseAbsorptionRate> GRAY_PER_SECOND = addUnit(\n+                new ProductUnit<RadiationDoseAbsorptionRate>(Units.GRAY.divide(Units.SECOND)));\n+\n+        public static final Unit<Mass> POUND = addUnit(\n+                new TransformedUnit<Mass>(Units.KILOGRAM, new MultiplyConverter(0.45359237)));\n+\n+        public static final Unit<Angle> MINUTE_ANGLE = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(1, 180 * 60))));\n+\n+        public static final Unit<Angle> SECOND_ANGLE = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(1, 180 * 60 * 60))));\n+\n+        public static final Unit<Area> HECTARE = addUnit(Units.SQUARE_METRE.multiply(10000.0));\n+        public static final Unit<Area> BARN = addUnit(Units.SQUARE_METRE.multiply(10E-28));\n+\n+        public static final Unit<Length> NAUTICAL_MILE = addUnit(SIUnits.METRE.multiply(1852.0));\n+\n+        public static final Unit<RadiantIntensity> WATT_PER_STERADIAN = addUnit(\n+                new ProductUnit<RadiantIntensity>(Units.WATT.divide(Units.STERADIAN)));\n+\n+        public static final Unit<Radiance> WATT_PER_STERADIAN_PER_SQUARE_METRE = addUnit(\n+                new ProductUnit<Radiance>(WATT_PER_STERADIAN.divide(Units.SQUARE_METRE)));\n+\n+        public static final Unit<Frequency> CYCLES_PER_MINUTE = addUnit(new TransformedUnit<Frequency>(Units.HERTZ,\n+                new RationalConverter(BigInteger.valueOf(60), BigInteger.ONE)));\n+\n+        public static final Unit<Angle> REVOLUTION = addUnit(new TransformedUnit<Angle>(Units.RADIAN,\n+                new PiMultiplierConverter().concatenate(new RationalConverter(2, 1))));\n+        public static final Unit<AngularVelocity> REVOLUTION_PER_MINUTE = addUnit(\n+                new ProductUnit<AngularVelocity>(REVOLUTION.divide(Units.MINUTE)));\n+\n+        public static final Unit<Dimensionless> STEPS = addUnit(SmartHomeUnits.ONE.alternate(\"steps\"));\n+        public static final Unit<Dimensionless> BEATS = addUnit(SmartHomeUnits.ONE.alternate(\"beats\"));\n+        public static final Unit<Dimensionless> STROKE = addUnit(SmartHomeUnits.ONE.alternate(\"stroke\"));\n+\n+        public static final Unit<Frequency> STEP_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(STEPS.divide(Units.MINUTE)));\n+\n+        public static final Unit<Frequency> BEATS_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(BEATS.divide(Units.MINUTE)));\n+\n+        public static final Unit<Frequency> STROKE_PER_MINUTE = addUnit(\n+                new ProductUnit<Frequency>(STROKE.divide(Units.MINUTE)));\n+\n+        public static final Unit<MassFlowRate> GRAM_PER_SECOND = addUnit(\n+                new ProductUnit<MassFlowRate>(Units.GRAM.divide(Units.SECOND)));\n+\n+        public static final Unit<LuminousEfficacy> LUMEN_PER_WATT = addUnit(\n+                new ProductUnit<LuminousEfficacy>(Units.LUMEN.divide(Units.WATT)));\n+\n+        public static final Unit<LuminousEnergy> LUMEN_SECOND = addUnit(\n+                new ProductUnit<LuminousEnergy>(Units.LUMEN.multiply(Units.SECOND)));\n+\n+        public static final Unit<LuminousEnergy> LUMEN_HOUR = addUnit(\n+                new ProductUnit<LuminousEnergy>(Units.LUMEN.multiply(Units.HOUR)));\n+\n+        public static final Unit<ElectricCharge> AMPERE_HOUR = addUnit(\n+                new ProductUnit<ElectricCharge>(Units.AMPERE.multiply(Units.HOUR)));\n+\n+        public static final Unit<LuminousExposure> LUX_HOUR = addUnit(\n+                new ProductUnit<LuminousExposure>(Units.LUX.multiply(Units.HOUR)));\n+\n+        public static final Unit<Speed> KILOMETRE_PER_MINUTE = addUnit(Units.KILOMETRE_PER_HOUR.multiply(60.0));\n+\n+        public static final Unit<VolumetricFlowRate> LITRE_PER_SECOND = addUnit(\n+                new ProductUnit<VolumetricFlowRate>(Units.LITRE.divide(Units.SECOND)));\n+\n+        public static final Unit<Dimensionless> PARTS_PER_BILLION = addUnit(new TransformedUnit<>(SmartHomeUnits.ONE,\n+                new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1_000_000_000))));\n+\n+        static {\n+            SimpleUnitFormat.getInstance().label(GRAY_PER_SECOND, \"Gy/s\");\n+            SimpleUnitFormat.getInstance().label(MINUTE_ANGLE, \"'\");\n+            SimpleUnitFormat.getInstance().label(SECOND_ANGLE, \"\\\"\");\n+            SimpleUnitFormat.getInstance().label(HECTARE, \"ha\");\n+            SimpleUnitFormat.getInstance().label(NAUTICAL_MILE, \"NM\");\n+            SimpleUnitFormat.getInstance().label(KILOGRAM_PER_SQUARE_METER, \"kg/m\u00b2\");\n+            SimpleUnitFormat.getInstance().label(POUND, \"lb\");\n+            SimpleUnitFormat.getInstance().label(CYCLES_PER_MINUTE, \"cpm\");\n+            SimpleUnitFormat.getInstance().label(GRAM_PER_SECOND, \"g/s\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_SECOND, \"lm\u00b7s\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_HOUR, \"lm\u00b7h\");\n+            SimpleUnitFormat.getInstance().label(LUMEN_PER_WATT, \"lm/W\");\n+            SimpleUnitFormat.getInstance().label(LUX_HOUR, \"lx\u00b7h\");\n+            SimpleUnitFormat.getInstance().label(KILOMETRE_PER_MINUTE, \"km/min\");\n+            SimpleUnitFormat.getInstance().label(LITRE_PER_SECOND, \"l/s\");\n+            SimpleUnitFormat.getInstance().label(PARTS_PER_BILLION, \"ppb\");\n+            SimpleUnitFormat.getInstance().label(BEATS_PER_MINUTE, \"bpm\");\n+            SimpleUnitFormat.getInstance().label(STEP_PER_MINUTE, \"steps/min\");\n+            SimpleUnitFormat.getInstance().label(STROKE_PER_MINUTE, \"spm\");\n+            SimpleUnitFormat.getInstance().label(REVOLUTION_PER_MINUTE, \"rpm\");\n+        }\n+\n+        private static <U extends Unit<?>> U addUnit(U unit) {\n+            return unit;\n+        }\n+    }\n+\n+    public interface AngularVelocity extends Quantity<AngularVelocity> {\n+    }\n+\n+    public interface LuminousEnergy extends Quantity<LuminousEnergy> {\n+    }\n+\n+    public interface LuminousEfficacy extends Quantity<LuminousEfficacy> {\n+    }\n+\n+    public interface LuminousExposure extends Quantity<LuminousExposure> {\n+    }\n+\n+    public interface RadiantIntensity extends Quantity<RadiantIntensity> {\n+    }\n+\n+    public interface Radiance extends Quantity<Radiance> {\n+    }\n+\n+    public interface RadiationExposure extends Quantity<RadiationExposure> {\n+    }\n+\n+    public interface RadiationDoseAbsorptionRate extends Quantity<RadiationDoseAbsorptionRate> {\n+    }\n+\n+    public interface MassFlowRate extends Quantity<MassFlowRate> {\n+    }\n+\n+    public static @Nullable BluetoothUnit findByType(String type) {\n+        for (BluetoothUnit unit : BluetoothUnit.values()) {\n+            if (unit.type.equals(type)) {\n+                return unit;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static final String RAW = \"<tbody>\\n\"\n+            + \"                <tr id=\\\"table_21_row_0\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2700</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">unitless</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.unitless</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_1\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2701</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_2\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2702</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass (kilogram)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass.kilogram</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_3\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2703</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_4\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2704</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric current (ampere)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_current.ampere</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_5\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2705</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">thermodynamic temperature (kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.thermodynamic_temperature.kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_6\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2706</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">amount of substance (mole)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.amount_of_substance.mole</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_7\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2707</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous intensity (candela)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_intensity.candela</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_8\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2710</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">area (square metres)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.area.square_metres</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_9\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2711</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">volume (cubic metres)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.volume.cubic_metres</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_10\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2712</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">velocity (metres per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.metres_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_11\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2713</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">acceleration (metres per second squared)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.acceleration.metres_per_second_squared</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_12\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2714</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">wavenumber (reciprocal metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.wavenumber.reciprocal_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_13\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2715</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">density (kilogram per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.density.kilogram_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_14\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2716</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">surface density (kilogram per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.surface_density.kilogram_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_15\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2717</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">specific volume (cubic metre per kilogram)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.specific_volume.cubic_metre_per_kilogram</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_16\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2718</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">current density (ampere per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.current_density.ampere_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_17\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2719</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">magnetic field strength (ampere per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.magnetic_field_strength.ampere_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_18\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271A</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">amount concentration (mole per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.amount_concentration.mole_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_19\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271B</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass concentration (kilogram per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass_concentration.kilogram_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_20\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271C</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminance (candela per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminance.candela_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_21\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271D</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">refractive index</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.refractive_index</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_22\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x271E</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">relative permeability</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.relative_permeability</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_23\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2720</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">plane angle (radian)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.plane_angle.radian</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_24\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2721</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">solid angle (steradian)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.solid_angle.steradian</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_25\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2722</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">frequency (hertz)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.frequency.hertz</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_26\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2723</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">force (newton)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.force.newton</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_27\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2724</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pressure (pascal)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.pressure.pascal</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_28\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2725</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy (joule)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy.joule</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_29\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2726</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">power (watt)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.power.watt</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_30\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2727</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric charge (coulomb)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_charge.coulomb</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_31\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2728</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric potential difference (volt)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_potential_difference.volt</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_32\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2729</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">capacitance (farad)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.capacitance.farad</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_33\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272A</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric resistance (ohm)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_resistance.ohm</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_34\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272B</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric conductance (siemens)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_conductance.siemens</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_35\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272C</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">magnetic flux (weber)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.magnetic_flux.weber</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_36\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272D</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">magnetic flux density (tesla)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.magnetic_flux_density.tesla</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_37\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272E</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">inductance (henry)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.inductance.henry</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_38\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x272F</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">Celsius temperature (degree Celsius)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.thermodynamic_temperature.degree_celsius</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_39\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2730</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous flux (lumen)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_flux.lumen</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_40\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2731</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">illuminance (lux)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.illuminance.lux</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_41\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2732</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">activity referred to a radionuclide (becquerel)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.activity_referred_to_a_radionuclide.becquerel</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_42\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2733</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">absorbed dose (gray)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.absorbed_dose.gray</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_43\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2734</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">dose equivalent (sievert)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.dose_equivalent.sievert</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_44\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2735</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">catalytic activity (katal)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.catalytic_activity.katal</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_45\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2740</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">dynamic viscosity (pascal second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.dynamic_viscosity.pascal_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_46\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2741</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">moment of force (newton metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.moment_of_force.newton_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_47\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2742</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">surface tension (newton per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.surface_tension.newton_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_48\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2743</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">angular velocity (radian per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.angular_velocity.radian_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_49\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2744</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">angular acceleration (radian per second squared)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.angular_acceleration.radian_per_second_squared</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_50\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2745</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">heat flux density (watt per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.heat_flux_density.watt_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_51\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2746</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">heat capacity (joule per kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.heat_capacity.joule_per_kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_52\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2747</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">specific heat capacity (joule per kilogram kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.specific_heat_capacity.joule_per_kilogram_kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_53\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2748</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">specific energy (joule per kilogram)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.specific_energy.joule_per_kilogram</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_54\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2749</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">thermal conductivity (watt per metre kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.thermal_conductivity.watt_per_metre_kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_55\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274A</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy density (joule per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy_density.joule_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_56\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274B</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric field strength (volt per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_field_strength.volt_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_57\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274C</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric charge density (coulomb per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_charge_density.coulomb_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_58\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274D</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">surface charge density (coulomb per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.surface_charge_density.coulomb_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_59\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274E</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric flux density (coulomb per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_flux_density.coulomb_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_60\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x274F</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">permittivity (farad per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.permittivity.farad_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_61\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2750</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">permeability (henry per metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.permeability.henry_per_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_62\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2751</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">molar energy (joule per mole)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.molar_energy.joule_per_mole</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_63\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2752</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">molar entropy (joule per mole kelvin)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.molar_entropy.joule_per_mole_kelvin</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_64\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2753</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">exposure (coulomb per kilogram)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.exposure.coulomb_per_kilogram</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_65\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2754</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">absorbed dose rate (gray per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.absorbed_dose_rate.gray_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_66\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2755</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">radiant intensity (watt per steradian)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.radiant_intensity.watt_per_steradian</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_67\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2756</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">radiance (watt per square metre steradian)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.radiance.watt_per_square_metre_steradian</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_68\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2757</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">catalytic activity concentration (katal per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.catalytic_activity_concentration.katal_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_69\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2760</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_70\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2761</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_71\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2762</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (day)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.day</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_72\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2763</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">plane angle (degree)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.plane_angle.degree</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_73\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2764</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">plane angle (minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.plane_angle.minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_74\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2765</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">plane angle (second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.plane_angle.second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_75\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2766</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">area (hectare)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.area.hectare</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_76\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2767</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">volume (litre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.volume.litre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_77\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2768</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass (tonne)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass.tonne</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_78\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2780</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pressure (bar)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.pressure.bar</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_79\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2781</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pressure (millimetre of mercury)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.pressure.millimetre_of_mercury</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_80\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2782</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (\u00e5ngstr\u00f6m)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.\u00e5ngstr\u00f6m</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_81\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2783</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (nautical mile)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.nautical_mile</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_82\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2784</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">area (barn)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.area.barn</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_83\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2785</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">velocity (knot)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.knot</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_84\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2786</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">logarithmic radio quantity (neper)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.logarithmic_radio_quantity.neper</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_85\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x2787</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">logarithmic radio quantity (bel)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.logarithmic_radio_quantity.bel</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_86\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A0</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (yard)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.yard</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_87\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A1</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (parsec)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.parsec</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_88\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A2</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (inch)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.inch</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_89\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A3</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (foot)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.foot</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_90\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A4</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">length (mile)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.length.mile</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_91\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A5</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pressure (pound-force per square inch)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.pressure.pound_force_per_square_inch</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_92\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A6</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">velocity (kilometre per hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.kilometre_per_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_93\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A7</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">velocity (mile per hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.mile_per_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_94\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A8</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">angular velocity (revolution per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.angular_velocity.revolution_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_95\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27A9</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy (gram calorie)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy.gram_calorie</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_96\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AA</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy (kilogram calorie)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy.kilogram_calorie</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_97\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AB</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">energy (kilowatt hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.energy.kilowatt_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_98\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AC</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">thermodynamic temperature (degree Fahrenheit)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.thermodynamic_temperature.degree_fahrenheit</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_99\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AD</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">percentage</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.percentage</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_100\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AE</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">per mille</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.per_mille</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_101\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27AF</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">period (beats per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.period.beats_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_102\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B0</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">electric charge (ampere hours)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.electric_charge.ampere_hours</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_103\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B1</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass density (milligram per decilitre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass_density.milligram_per_decilitre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_104\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B2</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass density (millimole per litre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass_density.millimole_per_litre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_105\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B3</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (year)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.year</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_106\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B4</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">time (month)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.time.month</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_107\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B5</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">concentration (count per cubic metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.concentration.count_per_cubic_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_108\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B6</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">irradiance (watt per square metre)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.irradiance.watt_per_square_metre</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_109\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B7</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">milliliter (per kilogram per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.transfer_rate.milliliter_per_kilogram_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_110\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B8</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass (pound)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass.pound</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_111\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27B9</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">metabolic equivalent</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.metabolic_equivalent</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_112\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BA</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">step (per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.step_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_113\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BC</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">stroke (per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.stroke_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_114\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BD</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">pace (kilometre per minute)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.velocity.kilometer_per_minute</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_115\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BE</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous efficacy (lumen per watt)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_efficacy.lumen_per_watt</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_116\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27BF</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous energy (lumen hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_energy.lumen_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_117\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C0</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">luminous exposure (lux hour)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.luminous_exposure.lux_hour</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_118\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C1</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">mass flow (gram per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.mass_flow.gram_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_119\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C2</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">volume flow (litre per second)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.volume_flow.litre_per_second</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_120\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C3</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">sound pressure (decibel)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.sound_pressure.decibel_spl</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_121\\\" role=\\\"row\\\" class=\\\"even\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C4</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">concentration (parts per million)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.concentration.parts_per_million</td>\\n\"\n+            + \"                    </tr><tr id=\\\"table_21_row_122\\\" role=\\\"row\\\" class=\\\"odd\\\">\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"column-name sorting_1\\\"><span class=\\\"responsiveExpander\\\"></span>0x27C5</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-value\\\">concentration (parts per billion)</td>\\n\"\n+            + \"                            <td style=\\\"\\\" class=\\\"  column-type\\\">org.bluetooth.unit.concentration.parts_per_billion</td>\\n\"\n+            + \"                    </tr></tbody>\";\n+\n+    // public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MjE2Nw=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 854}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTMwMjEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjozNDowMlrOHrwWAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToxOTo1OVrOHryNRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0Mjg4MA==", "bodyText": "Should this rather be trace?", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515642880", "createdAt": "2020-11-01T16:34:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MDI1Mw==", "bodyText": "whoops, it should be. I accidentally left that at a higher level during debugging.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515670253", "createdAt": "2020-11-01T20:49:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0Mjg4MA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MzQxNQ==", "bodyText": "Thanks for spotting this.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515673415", "createdAt": "2020-11-01T21:19:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0Mjg4MA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTMwNDkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjozNjozNlrOHrwXTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToyMDozOFrOHryNeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MzIxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515643215", "createdAt": "2020-11-01T16:36:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);\n+            updateThingChannels();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        CharacteristicHandler handler = channelHandlers.get(channelUID);\n+        if (handler != null) {\n+            handler.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        super.onCharacteristicReadComplete(characteristic, status);\n+        if (status == BluetoothCompletionStatus.SUCCESS) {\n+            byte[] data = characteristic.getByteValue();\n+            getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        super.onCharacteristicUpdate(characteristic);\n+        byte[] data = characteristic.getByteValue();\n+        getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+    }\n+\n+    private void updateThingChannels() {\n+        List<Channel> channels = device.getServices().stream()//\n+                .flatMap(service -> service.getCharacteristics().stream())//\n+                .flatMap(characteristic -> {\n+                    logger.trace(\"{} processing characteristic {}\", address, characteristic.getUuid());\n+                    CharacteristicHandler handler = getCharacteristicHandler(characteristic);\n+                    List<Channel> chans = handler.buildChannels();\n+                    for (Channel channel : chans) {\n+                        channelHandlers.put(channel.getUID(), handler);\n+                    }\n+                    return chans.stream();\n+                })//\n+                .collect(Collectors.toList());\n+\n+        ThingBuilder builder = editThing();\n+        boolean changed = false;\n+        for (Channel channel : channels) {\n+            logger.trace(\"{} attempting to add channel {}\", address, channel.getLabel());\n+            // we only want to add each channel, not replace all of them\n+            if (getThing().getChannel(channel.getUID()) == null) {\n+                changed = true;\n+                builder.withChannel(channel);\n+            }\n+        }\n+        if (changed) {\n+            updateThing(builder.build());\n+        }\n+    }\n+\n+    private CharacteristicHandler getCharacteristicHandler(BluetoothCharacteristic characteristic) {\n+        return charHandlers.computeIfAbsent(characteristic, CharacteristicHandler::new);\n+    }\n+\n+    private boolean readCharacteristic(BluetoothCharacteristic characteristic) {\n+        return device.readCharacteristic(characteristic);\n+    }\n+\n+    private boolean writeCharacteristic(BluetoothCharacteristic characteristic, byte[] data) {\n+        characteristic.setValue(data);\n+        return device.writeCharacteristic(characteristic);\n+    }\n+\n+    private class CharacteristicHandler {\n+\n+        private BluetoothCharacteristic characteristic;\n+\n+        public CharacteristicHandler(BluetoothCharacteristic characteristic) {\n+            this.characteristic = characteristic;\n+        }\n+\n+        private String getCharacteristicUUID() {\n+            return characteristic.getUuid().toString();\n+        }\n+\n+        public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+            // Handle REFRESH\n+            if (command == RefreshType.REFRESH) {\n+                if (canRead()) {\n+                    readCharacteristic(characteristic);\n+                }\n+                return;\n+            }\n+\n+            // handle write\n+            if (command instanceof State) {\n+                State state = (State) command;\n+                String characteristicUUID = getCharacteristicUUID();\n+                try {\n+                    if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                        String fieldName = getFieldName(channelUID);\n+                        if (fieldName != null) {\n+                            updateCharacteristic(fieldName, state);\n+                        } else {\n+                            logger.warn(\"Characteristic has no field name!\");\n+                        }\n+                    } else if (state instanceof StringType) {\n+                        // unknown characteristic\n+                        byte[] data = HexUtils.hexToBytes(state.toString());\n+                        if (!writeCharacteristic(characteristic, data)) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Could not write data to characteristic: \" + characteristicUUID);\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not update bluetooth device. Error: \" + ex.getMessage());\n+                    logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MzQ2NA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515673464", "createdAt": "2020-11-01T21:20:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);\n+            updateThingChannels();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        CharacteristicHandler handler = channelHandlers.get(channelUID);\n+        if (handler != null) {\n+            handler.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        super.onCharacteristicReadComplete(characteristic, status);\n+        if (status == BluetoothCompletionStatus.SUCCESS) {\n+            byte[] data = characteristic.getByteValue();\n+            getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        super.onCharacteristicUpdate(characteristic);\n+        byte[] data = characteristic.getByteValue();\n+        getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+    }\n+\n+    private void updateThingChannels() {\n+        List<Channel> channels = device.getServices().stream()//\n+                .flatMap(service -> service.getCharacteristics().stream())//\n+                .flatMap(characteristic -> {\n+                    logger.trace(\"{} processing characteristic {}\", address, characteristic.getUuid());\n+                    CharacteristicHandler handler = getCharacteristicHandler(characteristic);\n+                    List<Channel> chans = handler.buildChannels();\n+                    for (Channel channel : chans) {\n+                        channelHandlers.put(channel.getUID(), handler);\n+                    }\n+                    return chans.stream();\n+                })//\n+                .collect(Collectors.toList());\n+\n+        ThingBuilder builder = editThing();\n+        boolean changed = false;\n+        for (Channel channel : channels) {\n+            logger.trace(\"{} attempting to add channel {}\", address, channel.getLabel());\n+            // we only want to add each channel, not replace all of them\n+            if (getThing().getChannel(channel.getUID()) == null) {\n+                changed = true;\n+                builder.withChannel(channel);\n+            }\n+        }\n+        if (changed) {\n+            updateThing(builder.build());\n+        }\n+    }\n+\n+    private CharacteristicHandler getCharacteristicHandler(BluetoothCharacteristic characteristic) {\n+        return charHandlers.computeIfAbsent(characteristic, CharacteristicHandler::new);\n+    }\n+\n+    private boolean readCharacteristic(BluetoothCharacteristic characteristic) {\n+        return device.readCharacteristic(characteristic);\n+    }\n+\n+    private boolean writeCharacteristic(BluetoothCharacteristic characteristic, byte[] data) {\n+        characteristic.setValue(data);\n+        return device.writeCharacteristic(characteristic);\n+    }\n+\n+    private class CharacteristicHandler {\n+\n+        private BluetoothCharacteristic characteristic;\n+\n+        public CharacteristicHandler(BluetoothCharacteristic characteristic) {\n+            this.characteristic = characteristic;\n+        }\n+\n+        private String getCharacteristicUUID() {\n+            return characteristic.getUuid().toString();\n+        }\n+\n+        public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+            // Handle REFRESH\n+            if (command == RefreshType.REFRESH) {\n+                if (canRead()) {\n+                    readCharacteristic(characteristic);\n+                }\n+                return;\n+            }\n+\n+            // handle write\n+            if (command instanceof State) {\n+                State state = (State) command;\n+                String characteristicUUID = getCharacteristicUUID();\n+                try {\n+                    if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                        String fieldName = getFieldName(channelUID);\n+                        if (fieldName != null) {\n+                            updateCharacteristic(fieldName, state);\n+                        } else {\n+                            logger.warn(\"Characteristic has no field name!\");\n+                        }\n+                    } else if (state instanceof StringType) {\n+                        // unknown characteristic\n+                        byte[] data = HexUtils.hexToBytes(state.toString());\n+                        if (!writeCharacteristic(characteristic, data)) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Could not write data to characteristic: \" + characteristicUUID);\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not update bluetooth device. Error: \" + ex.getMessage());\n+                    logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MzIxNQ=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTMwNjA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjozODowNlrOHrwX4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDo0ODowN1rOHryANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MzM2Mw==", "bodyText": "Can you remove this or implement it?", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515643363", "createdAt": "2020-11-01T16:38:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);\n+            updateThingChannels();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        CharacteristicHandler handler = channelHandlers.get(channelUID);\n+        if (handler != null) {\n+            handler.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        super.onCharacteristicReadComplete(characteristic, status);\n+        if (status == BluetoothCompletionStatus.SUCCESS) {\n+            byte[] data = characteristic.getByteValue();\n+            getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        super.onCharacteristicUpdate(characteristic);\n+        byte[] data = characteristic.getByteValue();\n+        getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+    }\n+\n+    private void updateThingChannels() {\n+        List<Channel> channels = device.getServices().stream()//\n+                .flatMap(service -> service.getCharacteristics().stream())//\n+                .flatMap(characteristic -> {\n+                    logger.trace(\"{} processing characteristic {}\", address, characteristic.getUuid());\n+                    CharacteristicHandler handler = getCharacteristicHandler(characteristic);\n+                    List<Channel> chans = handler.buildChannels();\n+                    for (Channel channel : chans) {\n+                        channelHandlers.put(channel.getUID(), handler);\n+                    }\n+                    return chans.stream();\n+                })//\n+                .collect(Collectors.toList());\n+\n+        ThingBuilder builder = editThing();\n+        boolean changed = false;\n+        for (Channel channel : channels) {\n+            logger.trace(\"{} attempting to add channel {}\", address, channel.getLabel());\n+            // we only want to add each channel, not replace all of them\n+            if (getThing().getChannel(channel.getUID()) == null) {\n+                changed = true;\n+                builder.withChannel(channel);\n+            }\n+        }\n+        if (changed) {\n+            updateThing(builder.build());\n+        }\n+    }\n+\n+    private CharacteristicHandler getCharacteristicHandler(BluetoothCharacteristic characteristic) {\n+        return charHandlers.computeIfAbsent(characteristic, CharacteristicHandler::new);\n+    }\n+\n+    private boolean readCharacteristic(BluetoothCharacteristic characteristic) {\n+        return device.readCharacteristic(characteristic);\n+    }\n+\n+    private boolean writeCharacteristic(BluetoothCharacteristic characteristic, byte[] data) {\n+        characteristic.setValue(data);\n+        return device.writeCharacteristic(characteristic);\n+    }\n+\n+    private class CharacteristicHandler {\n+\n+        private BluetoothCharacteristic characteristic;\n+\n+        public CharacteristicHandler(BluetoothCharacteristic characteristic) {\n+            this.characteristic = characteristic;\n+        }\n+\n+        private String getCharacteristicUUID() {\n+            return characteristic.getUuid().toString();\n+        }\n+\n+        public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+            // Handle REFRESH\n+            if (command == RefreshType.REFRESH) {\n+                if (canRead()) {\n+                    readCharacteristic(characteristic);\n+                }\n+                return;\n+            }\n+\n+            // handle write\n+            if (command instanceof State) {\n+                State state = (State) command;\n+                String characteristicUUID = getCharacteristicUUID();\n+                try {\n+                    if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                        String fieldName = getFieldName(channelUID);\n+                        if (fieldName != null) {\n+                            updateCharacteristic(fieldName, state);\n+                        } else {\n+                            logger.warn(\"Characteristic has no field name!\");\n+                        }\n+                    } else if (state instanceof StringType) {\n+                        // unknown characteristic\n+                        byte[] data = HexUtils.hexToBytes(state.toString());\n+                        if (!writeCharacteristic(characteristic, data)) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Could not write data to characteristic: \" + characteristicUUID);\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not update bluetooth device. Error: \" + ex.getMessage());\n+                    logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());\n+                }\n+            }\n+        }\n+\n+        private void updateCharacteristic(String fieldName, State state) {\n+            // TODO maybe we should check if the characteristic is authenticated?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MDA2OA==", "bodyText": "I'm not knowledgable enough about bluetooth atm to know how to implement this. This TODO is from the original copied code. I don't know if there will be enough demand to implement this but I find that the TODO is a nice placeholder for knowing where code would need to be added in order to implement the feature.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515670068", "createdAt": "2020-11-01T20:48:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);\n+            updateThingChannels();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        CharacteristicHandler handler = channelHandlers.get(channelUID);\n+        if (handler != null) {\n+            handler.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        super.onCharacteristicReadComplete(characteristic, status);\n+        if (status == BluetoothCompletionStatus.SUCCESS) {\n+            byte[] data = characteristic.getByteValue();\n+            getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        super.onCharacteristicUpdate(characteristic);\n+        byte[] data = characteristic.getByteValue();\n+        getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+    }\n+\n+    private void updateThingChannels() {\n+        List<Channel> channels = device.getServices().stream()//\n+                .flatMap(service -> service.getCharacteristics().stream())//\n+                .flatMap(characteristic -> {\n+                    logger.trace(\"{} processing characteristic {}\", address, characteristic.getUuid());\n+                    CharacteristicHandler handler = getCharacteristicHandler(characteristic);\n+                    List<Channel> chans = handler.buildChannels();\n+                    for (Channel channel : chans) {\n+                        channelHandlers.put(channel.getUID(), handler);\n+                    }\n+                    return chans.stream();\n+                })//\n+                .collect(Collectors.toList());\n+\n+        ThingBuilder builder = editThing();\n+        boolean changed = false;\n+        for (Channel channel : channels) {\n+            logger.trace(\"{} attempting to add channel {}\", address, channel.getLabel());\n+            // we only want to add each channel, not replace all of them\n+            if (getThing().getChannel(channel.getUID()) == null) {\n+                changed = true;\n+                builder.withChannel(channel);\n+            }\n+        }\n+        if (changed) {\n+            updateThing(builder.build());\n+        }\n+    }\n+\n+    private CharacteristicHandler getCharacteristicHandler(BluetoothCharacteristic characteristic) {\n+        return charHandlers.computeIfAbsent(characteristic, CharacteristicHandler::new);\n+    }\n+\n+    private boolean readCharacteristic(BluetoothCharacteristic characteristic) {\n+        return device.readCharacteristic(characteristic);\n+    }\n+\n+    private boolean writeCharacteristic(BluetoothCharacteristic characteristic, byte[] data) {\n+        characteristic.setValue(data);\n+        return device.writeCharacteristic(characteristic);\n+    }\n+\n+    private class CharacteristicHandler {\n+\n+        private BluetoothCharacteristic characteristic;\n+\n+        public CharacteristicHandler(BluetoothCharacteristic characteristic) {\n+            this.characteristic = characteristic;\n+        }\n+\n+        private String getCharacteristicUUID() {\n+            return characteristic.getUuid().toString();\n+        }\n+\n+        public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+            // Handle REFRESH\n+            if (command == RefreshType.REFRESH) {\n+                if (canRead()) {\n+                    readCharacteristic(characteristic);\n+                }\n+                return;\n+            }\n+\n+            // handle write\n+            if (command instanceof State) {\n+                State state = (State) command;\n+                String characteristicUUID = getCharacteristicUUID();\n+                try {\n+                    if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                        String fieldName = getFieldName(channelUID);\n+                        if (fieldName != null) {\n+                            updateCharacteristic(fieldName, state);\n+                        } else {\n+                            logger.warn(\"Characteristic has no field name!\");\n+                        }\n+                    } else if (state instanceof StringType) {\n+                        // unknown characteristic\n+                        byte[] data = HexUtils.hexToBytes(state.toString());\n+                        if (!writeCharacteristic(characteristic, data)) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Could not write data to characteristic: \" + characteristicUUID);\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not update bluetooth device. Error: \" + ex.getMessage());\n+                    logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());\n+                }\n+            }\n+        }\n+\n+        private void updateCharacteristic(String fieldName, State state) {\n+            // TODO maybe we should check if the characteristic is authenticated?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MzM2Mw=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTMwODc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjo0MDo0MVrOHrwZIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMDo1NTowNlrOH37KQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MzY4MQ==", "bodyText": "TODO", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515643681", "createdAt": "2020-11-01T16:40:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);\n+            updateThingChannels();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        CharacteristicHandler handler = channelHandlers.get(channelUID);\n+        if (handler != null) {\n+            handler.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        super.onCharacteristicReadComplete(characteristic, status);\n+        if (status == BluetoothCompletionStatus.SUCCESS) {\n+            byte[] data = characteristic.getByteValue();\n+            getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        super.onCharacteristicUpdate(characteristic);\n+        byte[] data = characteristic.getByteValue();\n+        getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+    }\n+\n+    private void updateThingChannels() {\n+        List<Channel> channels = device.getServices().stream()//\n+                .flatMap(service -> service.getCharacteristics().stream())//\n+                .flatMap(characteristic -> {\n+                    logger.trace(\"{} processing characteristic {}\", address, characteristic.getUuid());\n+                    CharacteristicHandler handler = getCharacteristicHandler(characteristic);\n+                    List<Channel> chans = handler.buildChannels();\n+                    for (Channel channel : chans) {\n+                        channelHandlers.put(channel.getUID(), handler);\n+                    }\n+                    return chans.stream();\n+                })//\n+                .collect(Collectors.toList());\n+\n+        ThingBuilder builder = editThing();\n+        boolean changed = false;\n+        for (Channel channel : channels) {\n+            logger.trace(\"{} attempting to add channel {}\", address, channel.getLabel());\n+            // we only want to add each channel, not replace all of them\n+            if (getThing().getChannel(channel.getUID()) == null) {\n+                changed = true;\n+                builder.withChannel(channel);\n+            }\n+        }\n+        if (changed) {\n+            updateThing(builder.build());\n+        }\n+    }\n+\n+    private CharacteristicHandler getCharacteristicHandler(BluetoothCharacteristic characteristic) {\n+        return charHandlers.computeIfAbsent(characteristic, CharacteristicHandler::new);\n+    }\n+\n+    private boolean readCharacteristic(BluetoothCharacteristic characteristic) {\n+        return device.readCharacteristic(characteristic);\n+    }\n+\n+    private boolean writeCharacteristic(BluetoothCharacteristic characteristic, byte[] data) {\n+        characteristic.setValue(data);\n+        return device.writeCharacteristic(characteristic);\n+    }\n+\n+    private class CharacteristicHandler {\n+\n+        private BluetoothCharacteristic characteristic;\n+\n+        public CharacteristicHandler(BluetoothCharacteristic characteristic) {\n+            this.characteristic = characteristic;\n+        }\n+\n+        private String getCharacteristicUUID() {\n+            return characteristic.getUuid().toString();\n+        }\n+\n+        public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+            // Handle REFRESH\n+            if (command == RefreshType.REFRESH) {\n+                if (canRead()) {\n+                    readCharacteristic(characteristic);\n+                }\n+                return;\n+            }\n+\n+            // handle write\n+            if (command instanceof State) {\n+                State state = (State) command;\n+                String characteristicUUID = getCharacteristicUUID();\n+                try {\n+                    if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                        String fieldName = getFieldName(channelUID);\n+                        if (fieldName != null) {\n+                            updateCharacteristic(fieldName, state);\n+                        } else {\n+                            logger.warn(\"Characteristic has no field name!\");\n+                        }\n+                    } else if (state instanceof StringType) {\n+                        // unknown characteristic\n+                        byte[] data = HexUtils.hexToBytes(state.toString());\n+                        if (!writeCharacteristic(characteristic, data)) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Could not write data to characteristic: \" + characteristicUUID);\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not update bluetooth device. Error: \" + ex.getMessage());\n+                    logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());\n+                }\n+            }\n+        }\n+\n+        private void updateCharacteristic(String fieldName, State state) {\n+            // TODO maybe we should check if the characteristic is authenticated?\n+            String characteristicUUID = getCharacteristicUUID();\n+\n+            if (gattParser.isValidForWrite(characteristicUUID)) {\n+                GattRequest request = gattParser.prepare(characteristicUUID);\n+                try {\n+                    BluetoothChannelUtils.updateHolder(gattParser, request, fieldName, state);\n+                    byte[] data = gattParser.serialize(request);\n+\n+                    if (!writeCharacteristic(characteristic, data)) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Could not write data to characteristic: \" + characteristicUUID);\n+                    }\n+                } catch (NumberFormatException ex) {\n+                    logger.warn(\"Could not parse characteristic value: {} : {}\", characteristicUUID, state, ex);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not parse characteristic value: \" + characteristicUUID + \" : \" + state);\n+                }\n+            }\n+        }\n+\n+        public void handleCharacteristicUpdate(byte[] data) {\n+            String characteristicUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                GattResponse response = gattParser.parse(characteristicUUID, data);\n+                for (FieldHolder holder : response.getFieldHolders()) {\n+                    Field field = holder.getField();\n+                    ChannelUID channelUID = getChannelUID(field);\n+                    updateState(channelUID, BluetoothChannelUtils.convert(gattParser, holder));\n+                }\n+            } else {\n+                // this is a raw channel\n+                String hex = HexUtils.bytesToHex(data);\n+                ChannelUID channelUID = getChannelUID(null);\n+                updateState(channelUID, new StringType(hex));\n+            }\n+        }\n+\n+        public List<Channel> buildChannels() {\n+            List<Channel> channels = new ArrayList<>();\n+            String charUUID = getCharacteristicUUID();\n+            Characteristic gattChar = gattParser.getCharacteristic(charUUID);\n+            if (gattChar != null) {\n+                List<Field> fields = gattParser.getFields(charUUID);\n+\n+                String label = null;\n+                // check if the characteristic has only on field, if so use its name as label\n+                if (fields.size() == 1) {\n+                    label = gattChar.getName();\n+                }\n+\n+                Map<String, List<Field>> fieldsMapping = fields.stream().collect(Collectors.groupingBy(Field::getName));\n+\n+                for (List<Field> fieldList : fieldsMapping.values()) {\n+                    Field field = fieldList.get(0);\n+                    if (fieldList.size() > 1) {\n+                        if (field.isFlagField() || field.isOpCodesField()) {\n+                            logger.debug(\"Skipping flags/op codes field: {}.\", charUUID);\n+                        } else {\n+                            logger.warn(\"Multiple fields with the same name found: {} / {}. Skipping these fields.\",\n+                                    charUUID, field.getName());\n+                        }\n+                        continue;\n+                    }\n+\n+                    if (isFieldSupported(field)) {\n+                        Channel channel = buildFieldChannel(field, label, !gattChar.isValidForWrite());\n+                        if (channel != null) {\n+                            channels.add(channel);\n+                        } else {\n+                            logger.warn(\"Unable to build channel for field: {}\", field.getName());\n+                        }\n+                    } else {\n+                        logger.warn(\"GATT field is not supported: {} / {} / {}\", charUUID, field.getName(),\n+                                field.getFormat());\n+                    }\n+                }\n+            } else {\n+                channels.add(buildUnknownChannel());\n+            }\n+            return channels;\n+        }\n+\n+        private Channel buildUnknownChannel() {\n+            ChannelUID channelUID = getChannelUID(null);\n+            ChannelTypeUID channelTypeUID = new ChannelTypeUID(BluetoothBindingConstants.BINDING_ID, \"char-unknown\");\n+            return ChannelBuilder.create(channelUID).withType(channelTypeUID).withProperties(getChannelProperties(null))\n+                    .build();\n+        }\n+\n+        public boolean canRead() {\n+            String charUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(charUUID)) {\n+                return gattParser.isValidForRead(charUUID);\n+            }\n+            // TODO: need to evaluate this from characteristic properties, but such properties aren't support yet\n+            return true;\n+        }\n+\n+        public boolean canWrite() {\n+            String charUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(charUUID)) {\n+                return gattParser.isValidForWrite(charUUID);\n+            }\n+            // TODO: need to evaluate this from characteristic properties, but such properties aren't support yet\n+            return true;\n+        }\n+\n+        private boolean isAdvanced() {\n+            return false;// TODO need to decide whether to implement this or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2OTgzNg==", "bodyText": "Even I don't know what to do about this since the TODO is from @vkolotov's code that I copied over. It is unknown at this time if/how to implement this.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515669836", "createdAt": "2020-11-01T20:45:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);\n+            updateThingChannels();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        CharacteristicHandler handler = channelHandlers.get(channelUID);\n+        if (handler != null) {\n+            handler.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        super.onCharacteristicReadComplete(characteristic, status);\n+        if (status == BluetoothCompletionStatus.SUCCESS) {\n+            byte[] data = characteristic.getByteValue();\n+            getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        super.onCharacteristicUpdate(characteristic);\n+        byte[] data = characteristic.getByteValue();\n+        getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+    }\n+\n+    private void updateThingChannels() {\n+        List<Channel> channels = device.getServices().stream()//\n+                .flatMap(service -> service.getCharacteristics().stream())//\n+                .flatMap(characteristic -> {\n+                    logger.trace(\"{} processing characteristic {}\", address, characteristic.getUuid());\n+                    CharacteristicHandler handler = getCharacteristicHandler(characteristic);\n+                    List<Channel> chans = handler.buildChannels();\n+                    for (Channel channel : chans) {\n+                        channelHandlers.put(channel.getUID(), handler);\n+                    }\n+                    return chans.stream();\n+                })//\n+                .collect(Collectors.toList());\n+\n+        ThingBuilder builder = editThing();\n+        boolean changed = false;\n+        for (Channel channel : channels) {\n+            logger.trace(\"{} attempting to add channel {}\", address, channel.getLabel());\n+            // we only want to add each channel, not replace all of them\n+            if (getThing().getChannel(channel.getUID()) == null) {\n+                changed = true;\n+                builder.withChannel(channel);\n+            }\n+        }\n+        if (changed) {\n+            updateThing(builder.build());\n+        }\n+    }\n+\n+    private CharacteristicHandler getCharacteristicHandler(BluetoothCharacteristic characteristic) {\n+        return charHandlers.computeIfAbsent(characteristic, CharacteristicHandler::new);\n+    }\n+\n+    private boolean readCharacteristic(BluetoothCharacteristic characteristic) {\n+        return device.readCharacteristic(characteristic);\n+    }\n+\n+    private boolean writeCharacteristic(BluetoothCharacteristic characteristic, byte[] data) {\n+        characteristic.setValue(data);\n+        return device.writeCharacteristic(characteristic);\n+    }\n+\n+    private class CharacteristicHandler {\n+\n+        private BluetoothCharacteristic characteristic;\n+\n+        public CharacteristicHandler(BluetoothCharacteristic characteristic) {\n+            this.characteristic = characteristic;\n+        }\n+\n+        private String getCharacteristicUUID() {\n+            return characteristic.getUuid().toString();\n+        }\n+\n+        public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+            // Handle REFRESH\n+            if (command == RefreshType.REFRESH) {\n+                if (canRead()) {\n+                    readCharacteristic(characteristic);\n+                }\n+                return;\n+            }\n+\n+            // handle write\n+            if (command instanceof State) {\n+                State state = (State) command;\n+                String characteristicUUID = getCharacteristicUUID();\n+                try {\n+                    if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                        String fieldName = getFieldName(channelUID);\n+                        if (fieldName != null) {\n+                            updateCharacteristic(fieldName, state);\n+                        } else {\n+                            logger.warn(\"Characteristic has no field name!\");\n+                        }\n+                    } else if (state instanceof StringType) {\n+                        // unknown characteristic\n+                        byte[] data = HexUtils.hexToBytes(state.toString());\n+                        if (!writeCharacteristic(characteristic, data)) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Could not write data to characteristic: \" + characteristicUUID);\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not update bluetooth device. Error: \" + ex.getMessage());\n+                    logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());\n+                }\n+            }\n+        }\n+\n+        private void updateCharacteristic(String fieldName, State state) {\n+            // TODO maybe we should check if the characteristic is authenticated?\n+            String characteristicUUID = getCharacteristicUUID();\n+\n+            if (gattParser.isValidForWrite(characteristicUUID)) {\n+                GattRequest request = gattParser.prepare(characteristicUUID);\n+                try {\n+                    BluetoothChannelUtils.updateHolder(gattParser, request, fieldName, state);\n+                    byte[] data = gattParser.serialize(request);\n+\n+                    if (!writeCharacteristic(characteristic, data)) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Could not write data to characteristic: \" + characteristicUUID);\n+                    }\n+                } catch (NumberFormatException ex) {\n+                    logger.warn(\"Could not parse characteristic value: {} : {}\", characteristicUUID, state, ex);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not parse characteristic value: \" + characteristicUUID + \" : \" + state);\n+                }\n+            }\n+        }\n+\n+        public void handleCharacteristicUpdate(byte[] data) {\n+            String characteristicUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                GattResponse response = gattParser.parse(characteristicUUID, data);\n+                for (FieldHolder holder : response.getFieldHolders()) {\n+                    Field field = holder.getField();\n+                    ChannelUID channelUID = getChannelUID(field);\n+                    updateState(channelUID, BluetoothChannelUtils.convert(gattParser, holder));\n+                }\n+            } else {\n+                // this is a raw channel\n+                String hex = HexUtils.bytesToHex(data);\n+                ChannelUID channelUID = getChannelUID(null);\n+                updateState(channelUID, new StringType(hex));\n+            }\n+        }\n+\n+        public List<Channel> buildChannels() {\n+            List<Channel> channels = new ArrayList<>();\n+            String charUUID = getCharacteristicUUID();\n+            Characteristic gattChar = gattParser.getCharacteristic(charUUID);\n+            if (gattChar != null) {\n+                List<Field> fields = gattParser.getFields(charUUID);\n+\n+                String label = null;\n+                // check if the characteristic has only on field, if so use its name as label\n+                if (fields.size() == 1) {\n+                    label = gattChar.getName();\n+                }\n+\n+                Map<String, List<Field>> fieldsMapping = fields.stream().collect(Collectors.groupingBy(Field::getName));\n+\n+                for (List<Field> fieldList : fieldsMapping.values()) {\n+                    Field field = fieldList.get(0);\n+                    if (fieldList.size() > 1) {\n+                        if (field.isFlagField() || field.isOpCodesField()) {\n+                            logger.debug(\"Skipping flags/op codes field: {}.\", charUUID);\n+                        } else {\n+                            logger.warn(\"Multiple fields with the same name found: {} / {}. Skipping these fields.\",\n+                                    charUUID, field.getName());\n+                        }\n+                        continue;\n+                    }\n+\n+                    if (isFieldSupported(field)) {\n+                        Channel channel = buildFieldChannel(field, label, !gattChar.isValidForWrite());\n+                        if (channel != null) {\n+                            channels.add(channel);\n+                        } else {\n+                            logger.warn(\"Unable to build channel for field: {}\", field.getName());\n+                        }\n+                    } else {\n+                        logger.warn(\"GATT field is not supported: {} / {} / {}\", charUUID, field.getName(),\n+                                field.getFormat());\n+                    }\n+                }\n+            } else {\n+                channels.add(buildUnknownChannel());\n+            }\n+            return channels;\n+        }\n+\n+        private Channel buildUnknownChannel() {\n+            ChannelUID channelUID = getChannelUID(null);\n+            ChannelTypeUID channelTypeUID = new ChannelTypeUID(BluetoothBindingConstants.BINDING_ID, \"char-unknown\");\n+            return ChannelBuilder.create(channelUID).withType(channelTypeUID).withProperties(getChannelProperties(null))\n+                    .build();\n+        }\n+\n+        public boolean canRead() {\n+            String charUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(charUUID)) {\n+                return gattParser.isValidForRead(charUUID);\n+            }\n+            // TODO: need to evaluate this from characteristic properties, but such properties aren't support yet\n+            return true;\n+        }\n+\n+        public boolean canWrite() {\n+            String charUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(charUUID)) {\n+                return gattParser.isValidForWrite(charUUID);\n+            }\n+            // TODO: need to evaluate this from characteristic properties, but such properties aren't support yet\n+            return true;\n+        }\n+\n+        private boolean isAdvanced() {\n+            return false;// TODO need to decide whether to implement this or not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MzY4MQ=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMzMDcwOQ==", "bodyText": "I would suggest to remove it then.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528330709", "createdAt": "2020-11-22T12:46:46Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);\n+            updateThingChannels();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        CharacteristicHandler handler = channelHandlers.get(channelUID);\n+        if (handler != null) {\n+            handler.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        super.onCharacteristicReadComplete(characteristic, status);\n+        if (status == BluetoothCompletionStatus.SUCCESS) {\n+            byte[] data = characteristic.getByteValue();\n+            getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        super.onCharacteristicUpdate(characteristic);\n+        byte[] data = characteristic.getByteValue();\n+        getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+    }\n+\n+    private void updateThingChannels() {\n+        List<Channel> channels = device.getServices().stream()//\n+                .flatMap(service -> service.getCharacteristics().stream())//\n+                .flatMap(characteristic -> {\n+                    logger.trace(\"{} processing characteristic {}\", address, characteristic.getUuid());\n+                    CharacteristicHandler handler = getCharacteristicHandler(characteristic);\n+                    List<Channel> chans = handler.buildChannels();\n+                    for (Channel channel : chans) {\n+                        channelHandlers.put(channel.getUID(), handler);\n+                    }\n+                    return chans.stream();\n+                })//\n+                .collect(Collectors.toList());\n+\n+        ThingBuilder builder = editThing();\n+        boolean changed = false;\n+        for (Channel channel : channels) {\n+            logger.trace(\"{} attempting to add channel {}\", address, channel.getLabel());\n+            // we only want to add each channel, not replace all of them\n+            if (getThing().getChannel(channel.getUID()) == null) {\n+                changed = true;\n+                builder.withChannel(channel);\n+            }\n+        }\n+        if (changed) {\n+            updateThing(builder.build());\n+        }\n+    }\n+\n+    private CharacteristicHandler getCharacteristicHandler(BluetoothCharacteristic characteristic) {\n+        return charHandlers.computeIfAbsent(characteristic, CharacteristicHandler::new);\n+    }\n+\n+    private boolean readCharacteristic(BluetoothCharacteristic characteristic) {\n+        return device.readCharacteristic(characteristic);\n+    }\n+\n+    private boolean writeCharacteristic(BluetoothCharacteristic characteristic, byte[] data) {\n+        characteristic.setValue(data);\n+        return device.writeCharacteristic(characteristic);\n+    }\n+\n+    private class CharacteristicHandler {\n+\n+        private BluetoothCharacteristic characteristic;\n+\n+        public CharacteristicHandler(BluetoothCharacteristic characteristic) {\n+            this.characteristic = characteristic;\n+        }\n+\n+        private String getCharacteristicUUID() {\n+            return characteristic.getUuid().toString();\n+        }\n+\n+        public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+            // Handle REFRESH\n+            if (command == RefreshType.REFRESH) {\n+                if (canRead()) {\n+                    readCharacteristic(characteristic);\n+                }\n+                return;\n+            }\n+\n+            // handle write\n+            if (command instanceof State) {\n+                State state = (State) command;\n+                String characteristicUUID = getCharacteristicUUID();\n+                try {\n+                    if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                        String fieldName = getFieldName(channelUID);\n+                        if (fieldName != null) {\n+                            updateCharacteristic(fieldName, state);\n+                        } else {\n+                            logger.warn(\"Characteristic has no field name!\");\n+                        }\n+                    } else if (state instanceof StringType) {\n+                        // unknown characteristic\n+                        byte[] data = HexUtils.hexToBytes(state.toString());\n+                        if (!writeCharacteristic(characteristic, data)) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Could not write data to characteristic: \" + characteristicUUID);\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not update bluetooth device. Error: \" + ex.getMessage());\n+                    logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());\n+                }\n+            }\n+        }\n+\n+        private void updateCharacteristic(String fieldName, State state) {\n+            // TODO maybe we should check if the characteristic is authenticated?\n+            String characteristicUUID = getCharacteristicUUID();\n+\n+            if (gattParser.isValidForWrite(characteristicUUID)) {\n+                GattRequest request = gattParser.prepare(characteristicUUID);\n+                try {\n+                    BluetoothChannelUtils.updateHolder(gattParser, request, fieldName, state);\n+                    byte[] data = gattParser.serialize(request);\n+\n+                    if (!writeCharacteristic(characteristic, data)) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Could not write data to characteristic: \" + characteristicUUID);\n+                    }\n+                } catch (NumberFormatException ex) {\n+                    logger.warn(\"Could not parse characteristic value: {} : {}\", characteristicUUID, state, ex);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not parse characteristic value: \" + characteristicUUID + \" : \" + state);\n+                }\n+            }\n+        }\n+\n+        public void handleCharacteristicUpdate(byte[] data) {\n+            String characteristicUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                GattResponse response = gattParser.parse(characteristicUUID, data);\n+                for (FieldHolder holder : response.getFieldHolders()) {\n+                    Field field = holder.getField();\n+                    ChannelUID channelUID = getChannelUID(field);\n+                    updateState(channelUID, BluetoothChannelUtils.convert(gattParser, holder));\n+                }\n+            } else {\n+                // this is a raw channel\n+                String hex = HexUtils.bytesToHex(data);\n+                ChannelUID channelUID = getChannelUID(null);\n+                updateState(channelUID, new StringType(hex));\n+            }\n+        }\n+\n+        public List<Channel> buildChannels() {\n+            List<Channel> channels = new ArrayList<>();\n+            String charUUID = getCharacteristicUUID();\n+            Characteristic gattChar = gattParser.getCharacteristic(charUUID);\n+            if (gattChar != null) {\n+                List<Field> fields = gattParser.getFields(charUUID);\n+\n+                String label = null;\n+                // check if the characteristic has only on field, if so use its name as label\n+                if (fields.size() == 1) {\n+                    label = gattChar.getName();\n+                }\n+\n+                Map<String, List<Field>> fieldsMapping = fields.stream().collect(Collectors.groupingBy(Field::getName));\n+\n+                for (List<Field> fieldList : fieldsMapping.values()) {\n+                    Field field = fieldList.get(0);\n+                    if (fieldList.size() > 1) {\n+                        if (field.isFlagField() || field.isOpCodesField()) {\n+                            logger.debug(\"Skipping flags/op codes field: {}.\", charUUID);\n+                        } else {\n+                            logger.warn(\"Multiple fields with the same name found: {} / {}. Skipping these fields.\",\n+                                    charUUID, field.getName());\n+                        }\n+                        continue;\n+                    }\n+\n+                    if (isFieldSupported(field)) {\n+                        Channel channel = buildFieldChannel(field, label, !gattChar.isValidForWrite());\n+                        if (channel != null) {\n+                            channels.add(channel);\n+                        } else {\n+                            logger.warn(\"Unable to build channel for field: {}\", field.getName());\n+                        }\n+                    } else {\n+                        logger.warn(\"GATT field is not supported: {} / {} / {}\", charUUID, field.getName(),\n+                                field.getFormat());\n+                    }\n+                }\n+            } else {\n+                channels.add(buildUnknownChannel());\n+            }\n+            return channels;\n+        }\n+\n+        private Channel buildUnknownChannel() {\n+            ChannelUID channelUID = getChannelUID(null);\n+            ChannelTypeUID channelTypeUID = new ChannelTypeUID(BluetoothBindingConstants.BINDING_ID, \"char-unknown\");\n+            return ChannelBuilder.create(channelUID).withType(channelTypeUID).withProperties(getChannelProperties(null))\n+                    .build();\n+        }\n+\n+        public boolean canRead() {\n+            String charUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(charUUID)) {\n+                return gattParser.isValidForRead(charUUID);\n+            }\n+            // TODO: need to evaluate this from characteristic properties, but such properties aren't support yet\n+            return true;\n+        }\n+\n+        public boolean canWrite() {\n+            String charUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(charUUID)) {\n+                return gattParser.isValidForWrite(charUUID);\n+            }\n+            // TODO: need to evaluate this from characteristic properties, but such properties aren't support yet\n+            return true;\n+        }\n+\n+        private boolean isAdvanced() {\n+            return false;// TODO need to decide whether to implement this or not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MzY4MQ=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwMzAwOA==", "bodyText": "I just implemented it instead.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528403008", "createdAt": "2020-11-22T20:55:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,431 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+        super.dispose();\n+\n+        charHandlers.clear();\n+        channelHandlers.clear();\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        if (!resolved) {\n+            resolved = true;\n+            logger.warn(\"Service discovery completed for '{}'\", address);\n+            updateThingChannels();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        CharacteristicHandler handler = channelHandlers.get(channelUID);\n+        if (handler != null) {\n+            handler.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        super.onCharacteristicReadComplete(characteristic, status);\n+        if (status == BluetoothCompletionStatus.SUCCESS) {\n+            byte[] data = characteristic.getByteValue();\n+            getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicUpdate(BluetoothCharacteristic characteristic) {\n+        super.onCharacteristicUpdate(characteristic);\n+        byte[] data = characteristic.getByteValue();\n+        getCharacteristicHandler(characteristic).handleCharacteristicUpdate(data);\n+    }\n+\n+    private void updateThingChannels() {\n+        List<Channel> channels = device.getServices().stream()//\n+                .flatMap(service -> service.getCharacteristics().stream())//\n+                .flatMap(characteristic -> {\n+                    logger.trace(\"{} processing characteristic {}\", address, characteristic.getUuid());\n+                    CharacteristicHandler handler = getCharacteristicHandler(characteristic);\n+                    List<Channel> chans = handler.buildChannels();\n+                    for (Channel channel : chans) {\n+                        channelHandlers.put(channel.getUID(), handler);\n+                    }\n+                    return chans.stream();\n+                })//\n+                .collect(Collectors.toList());\n+\n+        ThingBuilder builder = editThing();\n+        boolean changed = false;\n+        for (Channel channel : channels) {\n+            logger.trace(\"{} attempting to add channel {}\", address, channel.getLabel());\n+            // we only want to add each channel, not replace all of them\n+            if (getThing().getChannel(channel.getUID()) == null) {\n+                changed = true;\n+                builder.withChannel(channel);\n+            }\n+        }\n+        if (changed) {\n+            updateThing(builder.build());\n+        }\n+    }\n+\n+    private CharacteristicHandler getCharacteristicHandler(BluetoothCharacteristic characteristic) {\n+        return charHandlers.computeIfAbsent(characteristic, CharacteristicHandler::new);\n+    }\n+\n+    private boolean readCharacteristic(BluetoothCharacteristic characteristic) {\n+        return device.readCharacteristic(characteristic);\n+    }\n+\n+    private boolean writeCharacteristic(BluetoothCharacteristic characteristic, byte[] data) {\n+        characteristic.setValue(data);\n+        return device.writeCharacteristic(characteristic);\n+    }\n+\n+    private class CharacteristicHandler {\n+\n+        private BluetoothCharacteristic characteristic;\n+\n+        public CharacteristicHandler(BluetoothCharacteristic characteristic) {\n+            this.characteristic = characteristic;\n+        }\n+\n+        private String getCharacteristicUUID() {\n+            return characteristic.getUuid().toString();\n+        }\n+\n+        public void handleCommand(ChannelUID channelUID, Command command) {\n+\n+            // Handle REFRESH\n+            if (command == RefreshType.REFRESH) {\n+                if (canRead()) {\n+                    readCharacteristic(characteristic);\n+                }\n+                return;\n+            }\n+\n+            // handle write\n+            if (command instanceof State) {\n+                State state = (State) command;\n+                String characteristicUUID = getCharacteristicUUID();\n+                try {\n+                    if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                        String fieldName = getFieldName(channelUID);\n+                        if (fieldName != null) {\n+                            updateCharacteristic(fieldName, state);\n+                        } else {\n+                            logger.warn(\"Characteristic has no field name!\");\n+                        }\n+                    } else if (state instanceof StringType) {\n+                        // unknown characteristic\n+                        byte[] data = HexUtils.hexToBytes(state.toString());\n+                        if (!writeCharacteristic(characteristic, data)) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Could not write data to characteristic: \" + characteristicUUID);\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not update bluetooth device. Error: \" + ex.getMessage());\n+                    logger.warn(\"Could not update bluetooth device: {} : {}\", characteristicUUID, ex.getMessage());\n+                }\n+            }\n+        }\n+\n+        private void updateCharacteristic(String fieldName, State state) {\n+            // TODO maybe we should check if the characteristic is authenticated?\n+            String characteristicUUID = getCharacteristicUUID();\n+\n+            if (gattParser.isValidForWrite(characteristicUUID)) {\n+                GattRequest request = gattParser.prepare(characteristicUUID);\n+                try {\n+                    BluetoothChannelUtils.updateHolder(gattParser, request, fieldName, state);\n+                    byte[] data = gattParser.serialize(request);\n+\n+                    if (!writeCharacteristic(characteristic, data)) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Could not write data to characteristic: \" + characteristicUUID);\n+                    }\n+                } catch (NumberFormatException ex) {\n+                    logger.warn(\"Could not parse characteristic value: {} : {}\", characteristicUUID, state, ex);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Could not parse characteristic value: \" + characteristicUUID + \" : \" + state);\n+                }\n+            }\n+        }\n+\n+        public void handleCharacteristicUpdate(byte[] data) {\n+            String characteristicUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(characteristicUUID)) {\n+                GattResponse response = gattParser.parse(characteristicUUID, data);\n+                for (FieldHolder holder : response.getFieldHolders()) {\n+                    Field field = holder.getField();\n+                    ChannelUID channelUID = getChannelUID(field);\n+                    updateState(channelUID, BluetoothChannelUtils.convert(gattParser, holder));\n+                }\n+            } else {\n+                // this is a raw channel\n+                String hex = HexUtils.bytesToHex(data);\n+                ChannelUID channelUID = getChannelUID(null);\n+                updateState(channelUID, new StringType(hex));\n+            }\n+        }\n+\n+        public List<Channel> buildChannels() {\n+            List<Channel> channels = new ArrayList<>();\n+            String charUUID = getCharacteristicUUID();\n+            Characteristic gattChar = gattParser.getCharacteristic(charUUID);\n+            if (gattChar != null) {\n+                List<Field> fields = gattParser.getFields(charUUID);\n+\n+                String label = null;\n+                // check if the characteristic has only on field, if so use its name as label\n+                if (fields.size() == 1) {\n+                    label = gattChar.getName();\n+                }\n+\n+                Map<String, List<Field>> fieldsMapping = fields.stream().collect(Collectors.groupingBy(Field::getName));\n+\n+                for (List<Field> fieldList : fieldsMapping.values()) {\n+                    Field field = fieldList.get(0);\n+                    if (fieldList.size() > 1) {\n+                        if (field.isFlagField() || field.isOpCodesField()) {\n+                            logger.debug(\"Skipping flags/op codes field: {}.\", charUUID);\n+                        } else {\n+                            logger.warn(\"Multiple fields with the same name found: {} / {}. Skipping these fields.\",\n+                                    charUUID, field.getName());\n+                        }\n+                        continue;\n+                    }\n+\n+                    if (isFieldSupported(field)) {\n+                        Channel channel = buildFieldChannel(field, label, !gattChar.isValidForWrite());\n+                        if (channel != null) {\n+                            channels.add(channel);\n+                        } else {\n+                            logger.warn(\"Unable to build channel for field: {}\", field.getName());\n+                        }\n+                    } else {\n+                        logger.warn(\"GATT field is not supported: {} / {} / {}\", charUUID, field.getName(),\n+                                field.getFormat());\n+                    }\n+                }\n+            } else {\n+                channels.add(buildUnknownChannel());\n+            }\n+            return channels;\n+        }\n+\n+        private Channel buildUnknownChannel() {\n+            ChannelUID channelUID = getChannelUID(null);\n+            ChannelTypeUID channelTypeUID = new ChannelTypeUID(BluetoothBindingConstants.BINDING_ID, \"char-unknown\");\n+            return ChannelBuilder.create(channelUID).withType(channelTypeUID).withProperties(getChannelProperties(null))\n+                    .build();\n+        }\n+\n+        public boolean canRead() {\n+            String charUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(charUUID)) {\n+                return gattParser.isValidForRead(charUUID);\n+            }\n+            // TODO: need to evaluate this from characteristic properties, but such properties aren't support yet\n+            return true;\n+        }\n+\n+        public boolean canWrite() {\n+            String charUUID = getCharacteristicUUID();\n+            if (gattParser.isKnownCharacteristic(charUUID)) {\n+                return gattParser.isValidForWrite(charUUID);\n+            }\n+            // TODO: need to evaluate this from characteristic properties, but such properties aren't support yet\n+            return true;\n+        }\n+\n+        private boolean isAdvanced() {\n+            return false;// TODO need to decide whether to implement this or not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0MzY4MQ=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTMxNDM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjo0Njo0NlrOHrwb2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMDo0MzoyMVrOHrx-Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NDM3Ng==", "bodyText": "Are you sure the value is a good design decision? By using MAX_VALUE you are fixed.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515644376", "createdAt": "2020-11-01T16:46:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCompanyIdentifiers;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryDevice;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class implements the BluetoothDiscoveryParticipant for generic bluetooth devices.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = BluetoothDiscoveryParticipant.class)\n+public class GenericDiscoveryParticipant implements BluetoothDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericDiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Set.of(GenericBindingConstants.THING_TYPE_GENERIC);\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(BluetoothDiscoveryDevice device) {\n+        ThingUID thingUID = getThingUID(device);\n+        if (thingUID == null) {\n+            // the thingUID will never be null in practice but this makes the null checker happy\n+            return null;\n+        }\n+        String label = \"Generic Connectable Bluetooth Device\";\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(BluetoothBindingConstants.CONFIGURATION_ADDRESS, device.getAddress().toString());\n+        Integer txPower = device.getTxPower();\n+        if (txPower != null && txPower > 0) {\n+            properties.put(BluetoothBindingConstants.PROPERTY_TXPOWER, Integer.toString(txPower));\n+        }\n+        String manufacturer = BluetoothCompanyIdentifiers.get(device.getManufacturerId());\n+        if (manufacturer == null) {\n+            logger.debug(\"Unknown manufacturer Id ({}) found on bluetooth device.\", device.getManufacturerId());\n+        } else {\n+            properties.put(Thing.PROPERTY_VENDOR, manufacturer);\n+            label += \" (\" + manufacturer + \")\";\n+        }\n+\n+        addPropertyIfPresent(properties, Thing.PROPERTY_MODEL_ID, device.getModel());\n+        addPropertyIfPresent(properties, Thing.PROPERTY_SERIAL_NUMBER, device.getSerialNumber());\n+        addPropertyIfPresent(properties, Thing.PROPERTY_HARDWARE_VERSION, device.getHardwareRevision());\n+        addPropertyIfPresent(properties, Thing.PROPERTY_FIRMWARE_VERSION, device.getFirmwareRevision());\n+        addPropertyIfPresent(properties, BluetoothBindingConstants.PROPERTY_SOFTWARE_VERSION,\n+                device.getSoftwareRevision());\n+\n+        return DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                .withRepresentationProperty(BluetoothBindingConstants.CONFIGURATION_ADDRESS)\n+                .withBridge(device.getAdapter().getUID()).withLabel(label).build();\n+    }\n+\n+    private static void addPropertyIfPresent(Map<String, Object> properties, String key, @Nullable Object value) {\n+        if (value != null) {\n+            properties.put(key, value);\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingUID getThingUID(BluetoothDiscoveryDevice device) {\n+        return new ThingUID(GenericBindingConstants.THING_TYPE_GENERIC, device.getAdapter().getUID(),\n+                device.getAddress().toString().toLowerCase().replace(\":\", \"\"));\n+    }\n+\n+    @Override\n+    public boolean requiresConnection(BluetoothDiscoveryDevice device) {\n+        return true;\n+    }\n+\n+    @Override\n+    public int order() {\n+        // we want to go last\n+        return Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2OTYwMw==", "bodyText": "Generic bluetooth devices were always intended to be the fallback. Originally this binding was integrated into the bluetooth binding code and used as the fallback during discovery, but I separated it into its own binding so I had to add this order method to the discovery participant class so that the generic bluetooth devices could still act as the fallback. If there is ever a time that something else should be the fallback (I can't imagine what) then we can change the  order value of generic devices.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515669603", "createdAt": "2020-11-01T20:43:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCompanyIdentifiers;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryDevice;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class implements the BluetoothDiscoveryParticipant for generic bluetooth devices.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = BluetoothDiscoveryParticipant.class)\n+public class GenericDiscoveryParticipant implements BluetoothDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericDiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Set.of(GenericBindingConstants.THING_TYPE_GENERIC);\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(BluetoothDiscoveryDevice device) {\n+        ThingUID thingUID = getThingUID(device);\n+        if (thingUID == null) {\n+            // the thingUID will never be null in practice but this makes the null checker happy\n+            return null;\n+        }\n+        String label = \"Generic Connectable Bluetooth Device\";\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(BluetoothBindingConstants.CONFIGURATION_ADDRESS, device.getAddress().toString());\n+        Integer txPower = device.getTxPower();\n+        if (txPower != null && txPower > 0) {\n+            properties.put(BluetoothBindingConstants.PROPERTY_TXPOWER, Integer.toString(txPower));\n+        }\n+        String manufacturer = BluetoothCompanyIdentifiers.get(device.getManufacturerId());\n+        if (manufacturer == null) {\n+            logger.debug(\"Unknown manufacturer Id ({}) found on bluetooth device.\", device.getManufacturerId());\n+        } else {\n+            properties.put(Thing.PROPERTY_VENDOR, manufacturer);\n+            label += \" (\" + manufacturer + \")\";\n+        }\n+\n+        addPropertyIfPresent(properties, Thing.PROPERTY_MODEL_ID, device.getModel());\n+        addPropertyIfPresent(properties, Thing.PROPERTY_SERIAL_NUMBER, device.getSerialNumber());\n+        addPropertyIfPresent(properties, Thing.PROPERTY_HARDWARE_VERSION, device.getHardwareRevision());\n+        addPropertyIfPresent(properties, Thing.PROPERTY_FIRMWARE_VERSION, device.getFirmwareRevision());\n+        addPropertyIfPresent(properties, BluetoothBindingConstants.PROPERTY_SOFTWARE_VERSION,\n+                device.getSoftwareRevision());\n+\n+        return DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                .withRepresentationProperty(BluetoothBindingConstants.CONFIGURATION_ADDRESS)\n+                .withBridge(device.getAdapter().getUID()).withLabel(label).build();\n+    }\n+\n+    private static void addPropertyIfPresent(Map<String, Object> properties, String key, @Nullable Object value) {\n+        if (value != null) {\n+            properties.put(key, value);\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingUID getThingUID(BluetoothDiscoveryDevice device) {\n+        return new ThingUID(GenericBindingConstants.THING_TYPE_GENERIC, device.getAdapter().getUID(),\n+                device.getAddress().toString().toLowerCase().replace(\":\", \"\"));\n+    }\n+\n+    @Override\n+    public boolean requiresConnection(BluetoothDiscoveryDevice device) {\n+        return true;\n+    }\n+\n+    @Override\n+    public int order() {\n+        // we want to go last\n+        return Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NDM3Ng=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTMyMjUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/BluetoothDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNjo1NjowNVrOHrwf4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMToyMToyM1rOHryNxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NTQxMA==", "bodyText": "The formatting is broken.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515645410", "createdAt": "2020-11-01T16:56:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/BluetoothDiscoveryParticipant.java", "diffHunk": "@@ -91,4 +91,15 @@ public default void publishAdditionalResults(DiscoveryResult result,\n             BiConsumer<BluetoothAdapter, DiscoveryResult> publisher) {\n         // do nothing by default\n     }\n+\n+    /**\n+     * Overriding this method allows discovery participants to dictate the order in which they should be evaluated\n+     * relative\n+     * to other discovery participants. Participants with a lower order value are evaluated first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MzU0Mw==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515673543", "createdAt": "2020-11-01T21:21:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/BluetoothDiscoveryParticipant.java", "diffHunk": "@@ -91,4 +91,15 @@ public default void publishAdditionalResults(DiscoveryResult result,\n             BiConsumer<BluetoothAdapter, DiscoveryResult> publisher) {\n         // do nothing by default\n     }\n+\n+    /**\n+     * Overriding this method allows discovery participants to dictate the order in which they should be evaluated\n+     * relative\n+     * to other discovery participants. Participants with a lower order value are evaluated first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NTQxMA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTMyNjMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/pom.xml", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxNzowMDowMVrOHrwhvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMTo0Njo1NVrOHryXwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NTg4NA==", "bodyText": "Are these used anywhere?", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515645884", "createdAt": "2020-11-01T17:00:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/pom.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.bluetooth.generic</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: Generic Bluetooth Adapter</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.openhab.addons.bundles</groupId>\n+      <artifactId>org.openhab.binding.bluetooth</artifactId>\n+      <version>${project.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.sputnikdev</groupId>\n+      <artifactId>bluetooth-gatt-parser</artifactId>\n+      <version>1.9.4</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-collections</groupId>\n+      <artifactId>commons-collections</artifactId>\n+      <version>3.2.2</version>\n+      <scope>compile</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2OTExNw==", "bodyText": "They aren't used in this binding, but they are transitive dependencies for the gatt-parser library and in order for them to be packaged into this binding's jar I have to explicitly label them as compile dependencies in the pom.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515669117", "createdAt": "2020-11-01T20:38:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/pom.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.bluetooth.generic</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: Generic Bluetooth Adapter</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.openhab.addons.bundles</groupId>\n+      <artifactId>org.openhab.binding.bluetooth</artifactId>\n+      <version>${project.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.sputnikdev</groupId>\n+      <artifactId>bluetooth-gatt-parser</artifactId>\n+      <version>1.9.4</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-collections</groupId>\n+      <artifactId>commons-collections</artifactId>\n+      <version>3.2.2</version>\n+      <scope>compile</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NTg4NA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY2OTU4OA==", "bodyText": "Are you sure? In the GATT POM, only commons-beanutils is listed: https://github.com/sputnikdev/bluetooth-gatt-parser/blob/master/pom.xml", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515669588", "createdAt": "2020-11-01T20:43:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.generic/pom.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.bluetooth.generic</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: Generic Bluetooth Adapter</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.openhab.addons.bundles</groupId>\n+      <artifactId>org.openhab.binding.bluetooth</artifactId>\n+      <version>${project.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.sputnikdev</groupId>\n+      <artifactId>bluetooth-gatt-parser</artifactId>\n+      <version>1.9.4</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-collections</groupId>\n+      <artifactId>commons-collections</artifactId>\n+      <version>3.2.2</version>\n+      <scope>compile</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NTg4NA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3MzcwMA==", "bodyText": "I am sure, because without including it here karaf would throw a fit during compilation wanting me to add commons-collections to the feature.xml. I didn't want to do that so I added it as a compile dependency instead.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515673700", "createdAt": "2020-11-01T21:23:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/pom.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.bluetooth.generic</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: Generic Bluetooth Adapter</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.openhab.addons.bundles</groupId>\n+      <artifactId>org.openhab.binding.bluetooth</artifactId>\n+      <version>${project.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.sputnikdev</groupId>\n+      <artifactId>bluetooth-gatt-parser</artifactId>\n+      <version>1.9.4</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-collections</groupId>\n+      <artifactId>commons-collections</artifactId>\n+      <version>3.2.2</version>\n+      <scope>compile</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NTg4NA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3NjA5Ng==", "bodyText": "I looked further into it and found that the commons-collections library is a dependency for the commons-beanutils library.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r515676096", "createdAt": "2020-11-01T21:46:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/pom.xml", "diffHunk": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.bluetooth.generic</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: Generic Bluetooth Adapter</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.openhab.addons.bundles</groupId>\n+      <artifactId>org.openhab.binding.bluetooth</artifactId>\n+      <version>${project.version}</version>\n+      <scope>provided</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.sputnikdev</groupId>\n+      <artifactId>bluetooth-gatt-parser</artifactId>\n+      <version>1.9.4</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-collections</groupId>\n+      <artifactId>commons-collections</artifactId>\n+      <version>3.2.2</version>\n+      <scope>compile</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY0NTg4NA=="}, "originalCommit": {"oid": "4a490dcb579b246fff3a2575b3dc32a271fd821b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzExOTEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNjo1OVrOH32l6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNjo1OVrOH32l6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This extension adds support for devices that expose [Bluetooth Generic Attributes (GATT)](https://www.bluetooth.com/specifications/gatt/)\n          \n          \n            \n            This binding adds support for devices that expose [Bluetooth Generic Attributes (GATT)](https://www.bluetooth.com/specifications/gatt/)", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528328169", "createdAt": "2020-11-22T12:26:59Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Generic Bluetooth Device\n+\n+This extension adds support for devices that expose [Bluetooth Generic Attributes (GATT)](https://www.bluetooth.com/specifications/gatt/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzExOTM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNzowOFrOH32mCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNzowOFrOH32mCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODIwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Only a single thing type is added by this extension:\n          \n          \n            \n            Only a single thing type is added by this binding:", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528328203", "createdAt": "2020-11-22T12:27:08Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Generic Bluetooth Device\n+\n+This extension adds support for devices that expose [Bluetooth Generic Attributes (GATT)](https://www.bluetooth.com/specifications/gatt/)\n+\n+## Supported Things\n+\n+Only a single thing type is added by this extension:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzExOTY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNzoyOVrOH32mLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjoyNzoyOVrOH32mLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODIzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As any other Bluetooth device, Generic bluetooth devices are discovered automatically by the corresponding bridge.\n          \n          \n            \n            As any other Bluetooth device, generic bluetooth devices are discovered automatically by the corresponding bridge.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528328238", "createdAt": "2020-11-22T12:27:29Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/README.md", "diffHunk": "@@ -0,0 +1,33 @@\n+# Generic Bluetooth Device\n+\n+This extension adds support for devices that expose [Bluetooth Generic Attributes (GATT)](https://www.bluetooth.com/specifications/gatt/)\n+\n+## Supported Things\n+\n+Only a single thing type is added by this extension:\n+\n+| Thing Type ID | Description                                     |\n+|---------------|-------------------------------------------------|\n+| generic       | A generic connectable bluetooth device          |\n+\n+## Discovery\n+\n+As any other Bluetooth device, Generic bluetooth devices are discovered automatically by the corresponding bridge.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzEyMzYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothChannelUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozMTozMFrOH32oDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQyMDozNToxNVrOH37BEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODcxNw==", "bodyText": "Are there only minor modifications or larger ones?", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528328717", "createdAt": "2020-11-22T12:31:30Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothChannelUtils.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.spec.Enumeration;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldFormat;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldType;\n+\n+/**\n+ * The {@link BluetoothChannelUtils} contains utility functions used by the GattChannelHandler\n+ *\n+ * @author Vlad Kolotov - Original author\n+ * @author Connor Petty - Modified for openHAB use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQwMDY1Nw==", "bodyText": "I slightly modified how a couple of methods worked and added/removed some some other methods.", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528400657", "createdAt": "2020-11-22T20:35:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothChannelUtils.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.spec.Enumeration;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldFormat;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldType;\n+\n+/**\n+ * The {@link BluetoothChannelUtils} contains utility functions used by the GattChannelHandler\n+ *\n+ * @author Vlad Kolotov - Original author\n+ * @author Connor Petty - Modified for openHAB use", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODcxNw=="}, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzEyNDU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothChannelUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozMjoyMlrOH32ogQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozMjoyMlrOH32ogQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyODgzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            state = holder.getBoolean() ? OnOffType.ON : OnOffType.OFF;\n          \n          \n            \n                            state = OnOffType.from(holder.getBoolean());", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528328833", "createdAt": "2020-11-22T12:32:22Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/BluetoothChannelUtils.java", "diffHunk": "@@ -0,0 +1,221 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.spec.Enumeration;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldFormat;\n+import org.sputnikdev.bluetooth.gattparser.spec.FieldType;\n+\n+/**\n+ * The {@link BluetoothChannelUtils} contains utility functions used by the GattChannelHandler\n+ *\n+ * @author Vlad Kolotov - Original author\n+ * @author Connor Petty - Modified for openHAB use\n+ */\n+@NonNullByDefault\n+public class BluetoothChannelUtils {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(BluetoothChannelUtils.class);\n+\n+    public static String encodeFieldID(Field field) {\n+        String requirements = Optional.ofNullable(field.getRequirements()).orElse(Collections.emptyList()).stream()\n+                .collect(Collectors.joining());\n+        return encodeFieldName(field.getName() + requirements);\n+    }\n+\n+    public static String encodeFieldName(String fieldName) {\n+        return Base64.getEncoder().encodeToString(fieldName.getBytes(StandardCharsets.UTF_8)).replace(\"=\", \"\");\n+    }\n+\n+    public static String decodeFieldName(String encodedFieldName) {\n+        return new String(Base64.getDecoder().decode(encodedFieldName), StandardCharsets.UTF_8);\n+    }\n+\n+    public static @Nullable String getItemType(Field field) {\n+        FieldFormat format = field.getFormat();\n+        if (format == null) {\n+            // unknown format\n+            return null;\n+        }\n+        switch (field.getFormat().getType()) {\n+            case BOOLEAN:\n+                return \"Switch\";\n+            case UINT:\n+            case SINT:\n+            case FLOAT_IEE754:\n+            case FLOAT_IEE11073:\n+                BluetoothUnit unit = BluetoothUnit.findByType(field.getUnit());\n+                if (unit != null) {\n+                    // TODO\n+                    // return \"Number:\" + unit.getUnit().getDimension();\n+                }\n+                return \"Number\";\n+            case UTF8S:\n+            case UTF16S:\n+                return \"String\";\n+            case STRUCT:\n+                return \"String\";\n+            // unsupported format\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    public static State convert(BluetoothGattParser parser, FieldHolder holder) {\n+        State state;\n+        if (holder.isValueSet()) {\n+            if (holder.getField().getFormat().isBoolean()) {\n+                state = holder.getBoolean() ? OnOffType.ON : OnOffType.OFF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzEyOTU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozODowOVrOH32q_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozODowOVrOH32q_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyOTQ2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @Nullable Future<?> readCharacteristicJob = null;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> readCharacteristicJob = null;", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528329469", "createdAt": "2020-11-22T12:38:09Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzEzMDA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozODo1NlrOH32rSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjozODo1NlrOH32rSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyOTU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Future<?> future = readCharacteristicJob;\n          \n          \n            \n                    ScheduledFuture<?> future = readCharacteristicJob;", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528329544", "createdAt": "2020-11-22T12:38:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/main/java/org/openhab/binding/bluetooth/generic/internal/GenericBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,430 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.ConnectedBluetoothHandler;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.builder.ChannelBuilder;\n+import org.openhab.core.thing.binding.builder.ThingBuilder;\n+import org.openhab.core.thing.type.ChannelTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParser;\n+import org.sputnikdev.bluetooth.gattparser.BluetoothGattParserFactory;\n+import org.sputnikdev.bluetooth.gattparser.FieldHolder;\n+import org.sputnikdev.bluetooth.gattparser.GattRequest;\n+import org.sputnikdev.bluetooth.gattparser.GattResponse;\n+import org.sputnikdev.bluetooth.gattparser.spec.Characteristic;\n+import org.sputnikdev.bluetooth.gattparser.spec.Field;\n+\n+/**\n+ * This is a handler for generic connected bluetooth devices that dynamically generates\n+ * channels based off of a bluetooth device's GATT characteristics.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GenericBluetoothHandler extends ConnectedBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GenericBluetoothHandler.class);\n+    private final Map<BluetoothCharacteristic, CharacteristicHandler> charHandlers = new ConcurrentHashMap<>();\n+    private final Map<ChannelUID, CharacteristicHandler> channelHandlers = new ConcurrentHashMap<>();\n+    private final BluetoothGattParser gattParser = BluetoothGattParserFactory.getDefault();\n+    private final CharacteristicChannelTypeProvider channelTypeProvider;\n+\n+    private @Nullable Future<?> readCharacteristicJob = null;\n+\n+    public GenericBluetoothHandler(Thing thing, CharacteristicChannelTypeProvider channelTypeProvider) {\n+        super(thing);\n+        this.channelTypeProvider = channelTypeProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        GenericBindingConfiguration config = getConfigAs(GenericBindingConfiguration.class);\n+        readCharacteristicJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                if (resolved) {\n+                    for (CharacteristicHandler charHandler : charHandlers.values()) {\n+                        if (charHandler.canRead()) {\n+                            device.readCharacteristic(charHandler.characteristic);\n+                            try {\n+                                // TODO the ideal solution would be to use locks/conditions and timeouts\n+                                // between this code and `onCharacteristicReadComplete` but\n+                                // that would overcomplicate the code a bit and I plan\n+                                // on implementing a better more generalized solution later\n+                                Thread.sleep(50);\n+                            } catch (InterruptedException e) {\n+                                return;\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    // if we are connected and still haven't been able to resolve the services, try disconnecting and\n+                    // then connecting again\n+                    device.disconnect();\n+                }\n+            }\n+        }, 15, config.pollingInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        Future<?> future = readCharacteristicJob;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMzE0MjM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.generic/src/test/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjo0OTowM1rOH32xAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMjo0OTowM1rOH32xAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMzMTAxMQ==", "bodyText": "Please fix author", "url": "https://github.com/openhab/openhab-addons/pull/8775#discussion_r528331011", "createdAt": "2020-11-22T12:49:03Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.generic/src/test/java/org/openhab/binding/bluetooth/generic/internal/BluetoothUnitTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.generic.internal;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * @author cpetty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002ea5226f4b35325279355da1227a7fd4a7057c"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4062, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}