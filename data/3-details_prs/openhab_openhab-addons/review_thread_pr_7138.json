{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODEzNTU4", "number": 7138, "reviewThreads": {"totalCount": 78, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowMzowNFrOEHUVSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODozMjo1OVrOENhaWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA4NjE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowMzowNFrOGmoU6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowMzowNFrOGmoU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTc4Ng==", "bodyText": "If you want to have these in a single line each, you could enter two spaces at the end of each line.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443159786", "createdAt": "2020-06-20T21:03:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA4NzU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowNjowM1rOGmoVrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowNjowM1rOGmoVrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTk4Mg==", "bodyText": "Can you insert a table explaining all parameters? You could take a look at other bindings.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443159982", "createdAt": "2020-06-20T21:06:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration\n+\n+It is necessary to configure at least `username` and `password`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA4Nzg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowNjo1MVrOGmoV0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowNjo1MVrOGmoV0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDAxOA==", "bodyText": "Can you use Units of Measure?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | floorTemperature  | Number | Floor temperature            |\n          \n          \n            \n            | floorTemperature  | Number:Temperature | Floor temperature            |", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160018", "createdAt": "2020-06-20T21:06:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration\n+\n+It is necessary to configure at least `username` and `password`.\n+\n+### OJ Electronics OWD5/MWD5 Thermostat\n+\n+It is necessary to configure only the `serialNumber` of the thermostat.\n+\n+## Channels\n+\n+| channel           | type   | description                  |\n+|-------------------|--------|------------------------------|\n+| floorTemperature  | Number | Floor temperature            |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA4ODUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowODowOFrOGmoWIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxOToxMDoxNFrOGmtt4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDA5OQ==", "bodyText": "If these are read only, you could use Contact.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160099", "createdAt": "2020-06-20T21:08:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration\n+\n+It is necessary to configure at least `username` and `password`.\n+\n+### OJ Electronics OWD5/MWD5 Thermostat\n+\n+It is necessary to configure only the `serialNumber` of the thermostat.\n+\n+## Channels\n+\n+| channel           | type   | description                  |\n+|-------------------|--------|------------------------------|\n+| floorTemperature  | Number | Floor temperature            |\n+| groupName         | Text   | Group name                   |\n+| groupId           | Number | Group Id                     |\n+| online            | Switch | Online                       |\n+| heating           | Switch | Heating                      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzMjgwNw==", "bodyText": "I think a Contact is for windows and doors, isn't it? Should i change it anyway?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443232807", "createdAt": "2020-06-21T15:55:20Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration\n+\n+It is necessary to configure at least `username` and `password`.\n+\n+### OJ Electronics OWD5/MWD5 Thermostat\n+\n+It is necessary to configure only the `serialNumber` of the thermostat.\n+\n+## Channels\n+\n+| channel           | type   | description                  |\n+|-------------------|--------|------------------------------|\n+| floorTemperature  | Number | Floor temperature            |\n+| groupName         | Text   | Group name                   |\n+| groupId           | Number | Group Id                     |\n+| online            | Switch | Online                       |\n+| heating           | Switch | Heating                      |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDA5OQ=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNzg1MA==", "bodyText": "Contact is an abstract contact that can be open and closed. It doesn't relate to windows and doors at first sight, but can also be a signal input. I think that fits better than a switch.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443237850", "createdAt": "2020-06-21T16:58:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration\n+\n+It is necessary to configure at least `username` and `password`.\n+\n+### OJ Electronics OWD5/MWD5 Thermostat\n+\n+It is necessary to configure only the `serialNumber` of the thermostat.\n+\n+## Channels\n+\n+| channel           | type   | description                  |\n+|-------------------|--------|------------------------------|\n+| floorTemperature  | Number | Floor temperature            |\n+| groupName         | Text   | Group name                   |\n+| groupId           | Number | Group Id                     |\n+| online            | Switch | Online                       |\n+| heating           | Switch | Heating                      |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDA5OQ=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0ODA5Ng==", "bodyText": "ok. I changed it", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443248096", "createdAt": "2020-06-21T19:10:14Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration\n+\n+It is necessary to configure at least `username` and `password`.\n+\n+### OJ Electronics OWD5/MWD5 Thermostat\n+\n+It is necessary to configure only the `serialNumber` of the thermostat.\n+\n+## Channels\n+\n+| channel           | type   | description                  |\n+|-------------------|--------|------------------------------|\n+| floorTemperature  | Number | Floor temperature            |\n+| groupName         | Text   | Group name                   |\n+| groupId           | Number | Group Id                     |\n+| online            | Switch | Online                       |\n+| heating           | Switch | Heating                      |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDA5OQ=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA4ODcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowODo1MFrOGmoWPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTowODo1MFrOGmoWPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDEyNg==", "bodyText": "Can you mention the thing IDs?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160126", "createdAt": "2020-06-20T21:08:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA5MDE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToxMjoxMlrOGmoW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzowNjozNlrOGmr3uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDMxMQ==", "bodyText": "Is this called \"bridge\" by ojelectronics, too or can you be more precisely with the wording (e.g. concrete product name)?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160311", "createdAt": "2020-06-20T21:12:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNzg0OA==", "bodyText": "The bridge is a wrapper around the REST-API. It is not a concrete product but every product like the thermostats us it. I think bridge is the right word for it. But i think i could give the bridge a more meaningful name like \"API bridge\".", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443217848", "createdAt": "2020-06-21T13:06:36Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,48 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only. \n+[ ] Change the state of the thermostate.\n+[ ] Automatic discovery.\n+[ ] Thermostat group thing.\n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| bridge               | Bridge | OJ Electronics Bridge               |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDMxMQ=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA5MTAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToxNDoyNFrOGmoXYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToxNDoyNFrOGmoXYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDQxNg==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging\nSame for below.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160416", "createdAt": "2020-06-20T21:14:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA5MzI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToxOTo1OFrOGmoYkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToxOTo1OFrOGmoYkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDcyMA==", "bodyText": "Are you sure this needs to be started?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160720", "createdAt": "2020-06-20T21:19:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA5MzUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToyMDozMlrOGmoYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToyMDozMlrOGmoYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDc0OQ==", "bodyText": "You should call the base class destructor at the end of the method.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160749", "createdAt": "2020-06-20T21:20:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA5NDAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToyMToxNlrOGmoY4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMToyMToxNlrOGmoY4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MDgwMQ==", "bodyText": "Does the state matter, when the Thing is disposed? Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443160801", "createdAt": "2020-06-20T21:21:16Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA5ODEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMDozMVrOGmoa4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMDozMVrOGmoa4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTMxNQ==", "bodyText": "Bindings should only log to error, when something really severe happened. In this case you could put the message as an argument to the updateStatus() invocation. This is logged by the framework and shown in the UI.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443161315", "createdAt": "2020-06-20T21:30:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTA5OTU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMzozNlrOGmobng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozMzozNlrOGmobng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTUwMg==", "bodyText": "You could give the user a hint what went wrong. See above.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443161502", "createdAt": "2020-06-20T21:33:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorized()\");\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorizedWhileSignIn()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwMDU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozNTo1OFrOGmocLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozNTo1OFrOGmocLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTY0NQ==", "bodyText": "You could use the framework's thread pool (and syntactical sugar)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Executors.newScheduledThreadPool(1).schedule(new Runnable() {\n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void run() {\n          \n          \n            \n                            ensureSignIn();\n          \n          \n            \n                        }\n          \n          \n            \n                    }, delayInSeconds, TimeUnit.SECONDS);\n          \n          \n            \n                    scheduler.schedule(this::ensureSignIn, delayInSeconds, TimeUnit.SECONDS);", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443161645", "createdAt": "2020-06-20T21:35:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorized()\");\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorizedWhileSignIn()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+    }\n+\n+    private void handleConnectionLost() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleConnectionLost()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(getConfiguration().refreshDelayInSeconds);\n+    }\n+\n+    private void restartRefreshServiceAsync(long delayInSeconds) {\n+        logger.trace(\"OJElectronicsBridgeHandler.restartRefreshServiceAsync({})\", delayInSeconds);\n+        Executors.newScheduledThreadPool(1).schedule(new Runnable() {\n+            @Override\n+            public void run() {\n+                ensureSignIn();\n+            }\n+        }, delayInSeconds, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwMDkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozNzowOFrOGmocXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTozNzowOFrOGmocXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MTY5Mw==", "bodyText": "You could cache the config in initialize(), since this invocation is quite expensive.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443161693", "createdAt": "2020-06-20T21:37:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorized()\");\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorizedWhileSignIn()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+    }\n+\n+    private void handleConnectionLost() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleConnectionLost()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(getConfiguration().refreshDelayInSeconds);\n+    }\n+\n+    private void restartRefreshServiceAsync(long delayInSeconds) {\n+        logger.trace(\"OJElectronicsBridgeHandler.restartRefreshServiceAsync({})\", delayInSeconds);\n+        Executors.newScheduledThreadPool(1).schedule(new Runnable() {\n+            @Override\n+            public void run() {\n+                ensureSignIn();\n+            }\n+        }, delayInSeconds, TimeUnit.SECONDS);\n+    }\n+\n+    private OJElectronicsBridgeConfiguration getConfiguration() {\n+        return getConfigAs(OJElectronicsBridgeConfiguration.class);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwMzkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0MzowM1rOGmodxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0MzowM1rOGmodxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjA1Mg==", "bodyText": "Are you sure this method is needed? If the config is updated dispose()/initialize() are called.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162052", "createdAt": "2020-06-20T21:43:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorized()\");\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleUnauthorizedWhileSignIn()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+    }\n+\n+    private void handleConnectionLost() {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleConnectionLost()\");\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(getConfiguration().refreshDelayInSeconds);\n+    }\n+\n+    private void restartRefreshServiceAsync(long delayInSeconds) {\n+        logger.trace(\"OJElectronicsBridgeHandler.restartRefreshServiceAsync({})\", delayInSeconds);\n+        Executors.newScheduledThreadPool(1).schedule(new Runnable() {\n+            @Override\n+            public void run() {\n+                ensureSignIn();\n+            }\n+        }, delayInSeconds, TimeUnit.SECONDS);\n+    }\n+\n+    private OJElectronicsBridgeConfiguration getConfiguration() {\n+        return getConfigAs(OJElectronicsBridgeConfiguration.class);\n+    }\n+\n+    @Override\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwNTU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0Njo1M1rOGmoenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0Njo1M1rOGmoenw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjI3MQ==", "bodyText": "Are you sure this method is needed? If the bridge goes offline, its child Things are updated, too.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162271", "createdAt": "2020-06-20T21:46:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsThermostatHandler.class);\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles changes of the state of the bridge of this thing.\n+     */\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwNjAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0NzozNVrOGmoe0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzoxMDo0MlrOGmr5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjMyMA==", "bodyText": "You might want to handle the refresh command.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162320", "createdAt": "2020-06-20T21:47:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsThermostatHandler.class);\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles changes of the state of the bridge of this thing.\n+     */\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+        }\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing do here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxODIwNQ==", "bodyText": "Yes i want but not an the moment. Handle command is the next step", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443218205", "createdAt": "2020-06-21T13:10:42Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsThermostatHandler.class);\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles changes of the state of the bridge of this thing.\n+     */\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+        }\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing do here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjMyMA=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwNjY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0ODo0NVrOGmofJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODoyMzoxOVrOGmteXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQwNA==", "bodyText": "Is this key public?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162404", "createdAt": "2020-06-20T21:48:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsBridgeHandler}\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeConfiguration {\n+\n+    /**\n+     * Password\n+     */\n+    public String password = \"\";\n+\n+    /**\n+     * Customer-ID\n+     */\n+    public Integer customerId = 1;\n+\n+    /**\n+     * User Name\n+     */\n+    public String userName = \"\";\n+\n+    /**\n+     * Url for API\n+     */\n+    public String apiUrl = \"https://OWD5-OJ001-App.ojelectronics.com/api\";\n+\n+    /**\n+     * API-Key\n+     */\n+    public String APIKEY = \"f219aab4-9ac0-4343-8422-b72203e2fac9\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxODU2NA==", "bodyText": "It's not public. Should i remove the bridge parameter?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443218564", "createdAt": "2020-06-21T13:15:33Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsBridgeHandler}\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeConfiguration {\n+\n+    /**\n+     * Password\n+     */\n+    public String password = \"\";\n+\n+    /**\n+     * Customer-ID\n+     */\n+    public Integer customerId = 1;\n+\n+    /**\n+     * User Name\n+     */\n+    public String userName = \"\";\n+\n+    /**\n+     * Url for API\n+     */\n+    public String apiUrl = \"https://OWD5-OJ001-App.ojelectronics.com/api\";\n+\n+    /**\n+     * API-Key\n+     */\n+    public String APIKEY = \"f219aab4-9ac0-4343-8422-b72203e2fac9\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQwNA=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIzNzY3Mg==", "bodyText": "It depends on the license of the vendor. If you are allowed to distribute the key to third parties, it's ok. By signing the commit messages you take responsibility.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443237672", "createdAt": "2020-06-21T16:56:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsBridgeHandler}\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeConfiguration {\n+\n+    /**\n+     * Password\n+     */\n+    public String password = \"\";\n+\n+    /**\n+     * Customer-ID\n+     */\n+    public Integer customerId = 1;\n+\n+    /**\n+     * User Name\n+     */\n+    public String userName = \"\";\n+\n+    /**\n+     * Url for API\n+     */\n+    public String apiUrl = \"https://OWD5-OJ001-App.ojelectronics.com/api\";\n+\n+    /**\n+     * API-Key\n+     */\n+    public String APIKEY = \"f219aab4-9ac0-4343-8422-b72203e2fac9\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQwNA=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NDEyNQ==", "bodyText": "I think it's complicated. I'm not the vendor so i'm not allowed to distrubute. So i'm deleting the Key and every one have to set it to a thing property.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443244125", "createdAt": "2020-06-21T18:23:19Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsBridgeHandler}\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeConfiguration {\n+\n+    /**\n+     * Password\n+     */\n+    public String password = \"\";\n+\n+    /**\n+     * Customer-ID\n+     */\n+    public Integer customerId = 1;\n+\n+    /**\n+     * User Name\n+     */\n+    public String userName = \"\";\n+\n+    /**\n+     * Url for API\n+     */\n+    public String apiUrl = \"https://OWD5-OJ001-App.ojelectronics.com/api\";\n+\n+    /**\n+     * API-Key\n+     */\n+    public String APIKEY = \"f219aab4-9ac0-4343-8422-b72203e2fac9\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQwNA=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwNjkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0OToyMFrOGmofRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo0OToyMFrOGmofRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjQzNg==", "bodyText": "Syntactical sugar\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<Event> events = new ArrayList<Event>();\n          \n          \n            \n                public List<Event> events = new ArrayList<>();", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162436", "createdAt": "2020-06-20T21:49:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a day\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Day {\n+\n+    @SerializedName(\"WeekDayGrpNo\")\n+    @Expose\n+    public Integer weekDayGrpNo = 0;\n+    @SerializedName(\"Events\")\n+    @Expose\n+    public List<Event> events = new ArrayList<Event>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwNzQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1MDo0MVrOGmofhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1MDo0MVrOGmofhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjUwMA==", "bodyText": "How about apikey?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162500", "createdAt": "2020-06-20T21:50:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.userprofile;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for signing sin\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PostSignInQueryModel {\n+\n+    @SerializedName(\"APIKEY\")\n+    @Expose\n+    public String aPIKEY = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwODA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1MjoxMFrOGmof2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1MjoxMFrOGmof2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjU4Ng==", "bodyText": "Syntactical sugar\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    groupContentList.stream().flatMap(entry -> entry.thermostats.stream())\n          \n          \n            \n                            .forEach(thermostat -> HandleThermostat(thermostat));\n          \n          \n            \n                    groupContentList.stream().flatMap(entry -> entry.thermostats.stream()).forEach(this::HandleThermostat);", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162586", "createdAt": "2020-06-20T21:52:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.ojelectronics.internal.OJElectronicsThermostatHandler;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContent;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * Refreshes values of {@link OJElectronicsThermostatHandler}\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class RefreshGroupContentService {\n+\n+    private final List<GroupContent> groupContentList;\n+    private List<Thing> things;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshGroupContentService}\n+     *\n+     * @param groupContents {@link GroupContent}\n+     * @param things Things\n+     */\n+    public RefreshGroupContentService(List<GroupContent> groupContents, List<Thing> things) {\n+        this.groupContentList = groupContents;\n+        this.things = things;\n+    }\n+\n+    /**\n+     * Handles the changes to all things.\n+     */\n+    public void Handle() {\n+        groupContentList.stream().flatMap(entry -> entry.thermostats.stream())\n+                .forEach(thermostat -> HandleThermostat(thermostat));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwODQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1MzowMVrOGmogCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1MzowMVrOGmogCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjYzMg==", "bodyText": "Can you use camel case? Same for below.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void Handle() {\n          \n          \n            \n                public void handle() {", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162632", "createdAt": "2020-06-20T21:53:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.ojelectronics.internal.OJElectronicsThermostatHandler;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContent;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * Refreshes values of {@link OJElectronicsThermostatHandler}\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class RefreshGroupContentService {\n+\n+    private final List<GroupContent> groupContentList;\n+    private List<Thing> things;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshGroupContentService}\n+     *\n+     * @param groupContents {@link GroupContent}\n+     * @param things Things\n+     */\n+    public RefreshGroupContentService(List<GroupContent> groupContents, List<Thing> things) {\n+        this.groupContentList = groupContents;\n+        this.things = things;\n+    }\n+\n+    /**\n+     * Handles the changes to all things.\n+     */\n+    public void Handle() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwOTQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1NToyOVrOGmoggg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1NToyOVrOGmoggg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2Mjc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @Nullable Runnable connectionLosed;\n          \n          \n            \n                private @Nullable Runnable connectionLost;", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162754", "createdAt": "2020-06-20T21:55:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+\n+    private @Nullable Runnable connectionLosed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTEwOTc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1NjoxMVrOGmogsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1NjoxMVrOGmogsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjgwMA==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162800", "createdAt": "2020-06-20T21:56:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+\n+    private @Nullable Runnable connectionLosed;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static Boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLosed, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLosed = connectionLosed;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = Executors.newScheduledThreadPool(1).scheduleWithFixedDelay(() -> refresh(), refreshTime,\n+                refreshTime, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExMDczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1ODowM1rOGmohLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMTo1ODowM1rOGmohLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MjkyNA==", "bodyText": "Syntactical sugar\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n          \n          \n            \n                                () -> handleUnauthorized());\n          \n          \n            \n                        refreshService.start(sessionId, this::handleRefreshDone, this::handleConnectionLost,\n          \n          \n            \n                                this::handleUnauthorized);", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443162924", "createdAt": "2020-06-20T21:58:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        logger.trace(\"OJElectronicsBridgeHandler.OJElectronicsBridgeHandler({})\", bridge);\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        try {\n+            httpClient.start();\n+            ensureSignIn();\n+\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    /**\n+     * Handles commands\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing to do here\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(getConfiguration(), httpClient);\n+        }\n+        if (signInService != null) {\n+            signInService.SignIn(sessionId -> handleSignInDone(sessionId), () -> handleConnectionLost(),\n+                    () -> handleUnauthorizedWhileSignIn());\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).Handle();\n+        } else {\n+            logger.error(\"Wrong or no result model; Refreshing stoppped\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsBridgeHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(getConfiguration(), httpClient);\n+        }\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, content -> handleRefreshDone(content), () -> handleConnectionLost(),\n+                    () -> handleUnauthorized());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExMzE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowMzoxN1rOGmoiWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowMzoxN1rOGmoiWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzIyNA==", "bodyText": "You might want to log the exception's message.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163224", "createdAt": "2020-06-20T22:03:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+\n+    private @Nullable Runnable connectionLosed;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static Boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLosed, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLosed = connectionLosed;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = Executors.newScheduledThreadPool(1).scheduleWithFixedDelay(() -> refresh(), refreshTime,\n+                refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        logger.trace(\"RefreshService.stopService({})\", this);\n+        destroyed = true;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+            scheduler = null;\n+        }\n+    }\n+\n+    private void refresh() {\n+        logger.trace(\"RefreshService.refresh({})\", this);\n+\n+        if (sessionId.equals(\"\")) {\n+            handleConnectionLosed();\n+            return;\n+        }\n+        CreateRequest().send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (!destroyed) {\n+                    if (result == null || result.isFailed()) {\n+                        handleConnectionLosed();\n+                    } else if (result.getResponse().getStatus() == HttpStatus.FORBIDDEN_403) {\n+                        if (unauthorized != null) {\n+                            unauthorized.run();\n+                        }\n+                    } else {\n+                        handleRefreshDone(getContentAsString());\n+                    }\n+                }\n+            }\n+\n+        });\n+    }\n+\n+    private Request CreateRequest() {\n+        Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n+                .param(\"APIKEY\", config.APIKEY).method(HttpMethod.GET);\n+        return request;\n+    }\n+\n+    private void handleRefreshDone(String responseBody) {\n+        if (refreshDone != null) {\n+            logger.trace(\"refresh {}\", responseBody);\n+\n+            try {\n+                GroupContentResponseModel content = gson.fromJson(responseBody, GroupContentResponseModel.class);\n+                if (refreshDone != null) {\n+                    refreshDone.accept(content);\n+                }\n+            } catch (JsonSyntaxException exception) {\n+                handleConnectionLosed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExMzQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNDozN1rOGmoihA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNDozN1rOGmoihA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzI2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private PostSignInQueryModel getpostSignInQueryModel() {\n          \n          \n            \n                private PostSignInQueryModel getPostSignInQueryModel() {", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163268", "createdAt": "2020-06-20T22:04:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInQueryModel;\n+import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Handles the sign in process.\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class SignInService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SignInService.class);\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+\n+    private final HttpClient httpClient;\n+    private final OJElectronicsBridgeConfiguration config;\n+\n+    /**\n+     * Creates a new instance of {@link SignInService}\n+     *\n+     * @param config configuration {@link OJElectronicsBridgeConfiguration}\n+     * @param httpClient HTTP client\n+     */\n+    public SignInService(OJElectronicsBridgeConfiguration config, HttpClient httpClient) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Signing in\n+     *\n+     * @param signInDone This method is called if sign in process was successful.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void SignIn(Consumer<String> signInDone, Runnable connectionLosed, Runnable unauthorized) {\n+        logger.trace(\"SignInService.SignIn ({})\", this);\n+        Request request = httpClient.POST(config.apiUrl + \"/UserProfile/SignIn\")\n+                .header(HttpHeader.CONTENT_TYPE, \"application/json\")\n+                .content(new StringContentProvider(gson.toJson(getpostSignInQueryModel())));\n+\n+        request.send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (result == null || result.isFailed()) {\n+                    connectionLosed.run();\n+                    return;\n+                }\n+                if (result != null && result.getResponse().getStatus() != 200) {\n+                    unauthorized.run();\n+                    return;\n+                }\n+                PostSignInResponseModel signInModel = gson.fromJson(getContentAsString(),\n+                        PostSignInResponseModel.class);\n+                if (signInModel.errorCode != 0 || signInModel.sessionId.equals(\"\")) {\n+                    unauthorized.run();\n+                    return;\n+                }\n+                signInDone.accept(signInModel.sessionId);\n+            }\n+        });\n+    }\n+\n+    private PostSignInQueryModel getpostSignInQueryModel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExMzc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNToxMVrOGmoirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNToxMVrOGmoirA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzMwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            binding.ojelectronics.description = \"Bindingf\ufffdr OJElectronics.\"\n          \n          \n            \n            binding.ojelectronics.description = \"Binding f\ufffdr OJElectronics.\"", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163308", "createdAt": "2020-06-20T22:05:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content\n+# binding\n+binding.ojelectronics.name = \"Binding f\ufffdr OJElectronics\"\n+binding.ojelectronics.description = \"Bindingf\ufffdr OJElectronics.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExMzg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNTozMFrOGmoitw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNTozMFrOGmoitw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzMxOQ==", "bodyText": "Can these be removed?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163319", "createdAt": "2020-06-20T22:05:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExNDMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNjoxOFrOGmoi7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNjoxOFrOGmoi7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            thing-type.config.ojelectronics.bridge.userName.description = \"Nutzername f\ufffdr den Zugriff auf OJ Electronics cloud.\"\n          \n          \n            \n            thing-type.config.ojelectronics.bridge.userName.description = \"Nutzername f\ufffdr den Zugriff auf OJ Electronics Cloud.\"", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163372", "createdAt": "2020-06-20T22:06:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content\n+# binding\n+binding.ojelectronics.name = \"Binding f\ufffdr OJElectronics\"\n+binding.ojelectronics.description = \"Bindingf\ufffdr OJElectronics.\"\n+\n+# thing types\n+thing-type.ojelectronics.owd5.label = \"OJ Electronics OWD5/MWD5 Thermostate\"\n+thing-type.ojelectronics.owd5.description = \"OJ Electronics OWD5/MWD5 Thermostate\"\n+thing-type.ojelectronics.bridge.label = \"OJ Electronics Bridge\"\n+thing-type.ojelectronics.bridge.description = \"Bridge f\ufffdr den Zugriff auf alle OJ Electronics-Ger\ufffdte.\"\n+\n+# thing type config description\n+thing-type.config.ojelectronics.bridge.userName.label = \"Nutzername\"\n+thing-type.config.ojelectronics.bridge.userName.description = \"Nutzername f\ufffdr den Zugriff auf OJ Electronics cloud.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExNDU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNzowN1rOGmojCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowNzowN1rOGmojCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzQwMw==", "bodyText": "This file is encoded with ISO-8859-1. You might want to use UTF-8.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163403", "createdAt": "2020-06-20T22:07:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExNDk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowODowMVrOGmojQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowODowMVrOGmojQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzQ1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\">\n          \n          \n            \n            \t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163456", "createdAt": "2020-06-20T22:08:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,165 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\" xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExNTA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowODowOFrOGmojTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowODowOFrOGmojTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzQ2OQ==", "bodyText": "Words in labels should be capitalized. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163469", "createdAt": "2020-06-20T22:08:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,165 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\" xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\">\n+\t\t\t\t<label>Refresh delay</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExNTY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowOTo1NFrOGmojpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjowOTo1NFrOGmojpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzU1OA==", "bodyText": "Should this be configureable by the user or is it more a constant, that depends on your current implementation?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163558", "createdAt": "2020-06-20T22:09:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,165 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\" xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\">\n+\t\t\t\t<label>Refresh delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"APIKEY\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>APIKEY</label>\n+\t\t\t\t<description>APIKEY</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<context>password</context>\n+\t\t\t\t<default>f219aab4-9ac0-4343-8422-b72203e2fac9</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExNjE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxMDo0NVrOGmoj3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxMDo0NVrOGmoj3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzYxMw==", "bodyText": "If you use UoM\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<state pattern=\"%.1f \u00b0C\" readOnly=\"true\" />\n          \n          \n            \n            \t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\" />", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163613", "createdAt": "2020-06-20T22:10:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,165 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\" xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\">\n+\t\t\t\t<label>Refresh delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"APIKEY\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>APIKEY</label>\n+\t\t\t\t<description>APIKEY</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<context>password</context>\n+\t\t\t\t<default>f219aab4-9ac0-4343-8422-b72203e2fac9</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>\n+\t\t<description>OJ Electronics OWD5/MWD5 Thermostat</description>\n+\t\t<category>RadiatorControl</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"floorTemperature\" typeId=\"floorTemperature\" />\n+\t\t\t<channel id=\"roomTemperature\" typeId=\"roomTemperature\" />\n+\t\t\t<channel id=\"groupName\" typeId=\"groupName\" />\n+\t\t\t<channel id=\"groupId\" typeId=\"groupId\" />\n+\t\t\t<channel id=\"online\" typeId=\"online\" />\n+\t\t\t<channel id=\"heating\" typeId=\"heating\" />\n+\t\t\t<channel id=\"thermostatName\" typeId=\"thermostatName\" />\n+\t\t\t<channel id=\"regulationMode\" typeId=\"regulationMode\" />\n+\t\t\t<channel id=\"serialNumber\" typeId=\"serialNumber\" />\n+\t\t\t<channel id=\"comfortSetpoint\" typeId=\"comfortSetpoint\" />\n+\t\t\t<channel id=\"comfortEndTime\" typeId=\"comfortEndTime\" />\n+\t\t\t<channel id=\"boostEndTime\" typeId=\"boostEndTime\" />\n+\t\t\t<channel id=\"manualModeSetpoint\" typeId=\"manualModeSetpoint\" />\n+\t\t\t<channel id=\"vacationEnabled\" typeId=\"vacationEnabled\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t\t<description>Serial number of the thermostat. You can find the serial number in the app or on the thermostat itself.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"floorTemperature\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Floor temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f \u00b0C\" readOnly=\"true\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExNjE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxMDo1NVrOGmoj5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo1MDo0NFrOGp_eRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzYyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Temperature</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163620", "createdAt": "2020-06-20T22:10:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,165 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\" xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\">\n+\t\t\t\t<label>Refresh delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"APIKEY\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>APIKEY</label>\n+\t\t\t\t<description>APIKEY</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<context>password</context>\n+\t\t\t\t<default>f219aab4-9ac0-4343-8422-b72203e2fac9</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>\n+\t\t<description>OJ Electronics OWD5/MWD5 Thermostat</description>\n+\t\t<category>RadiatorControl</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"floorTemperature\" typeId=\"floorTemperature\" />\n+\t\t\t<channel id=\"roomTemperature\" typeId=\"roomTemperature\" />\n+\t\t\t<channel id=\"groupName\" typeId=\"groupName\" />\n+\t\t\t<channel id=\"groupId\" typeId=\"groupId\" />\n+\t\t\t<channel id=\"online\" typeId=\"online\" />\n+\t\t\t<channel id=\"heating\" typeId=\"heating\" />\n+\t\t\t<channel id=\"thermostatName\" typeId=\"thermostatName\" />\n+\t\t\t<channel id=\"regulationMode\" typeId=\"regulationMode\" />\n+\t\t\t<channel id=\"serialNumber\" typeId=\"serialNumber\" />\n+\t\t\t<channel id=\"comfortSetpoint\" typeId=\"comfortSetpoint\" />\n+\t\t\t<channel id=\"comfortEndTime\" typeId=\"comfortEndTime\" />\n+\t\t\t<channel id=\"boostEndTime\" typeId=\"boostEndTime\" />\n+\t\t\t<channel id=\"manualModeSetpoint\" typeId=\"manualModeSetpoint\" />\n+\t\t\t<channel id=\"vacationEnabled\" typeId=\"vacationEnabled\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t\t<description>Serial number of the thermostat. You can find the serial number in the app or on the thermostat itself.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"floorTemperature\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NDc0MQ==", "bodyText": "Do you want to adopt or comment on this?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446684741", "createdAt": "2020-06-28T18:50:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,165 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\" xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\">\n+\t\t\t\t<label>Refresh delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"APIKEY\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>APIKEY</label>\n+\t\t\t\t<description>APIKEY</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<context>password</context>\n+\t\t\t\t<default>f219aab4-9ac0-4343-8422-b72203e2fac9</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>\n+\t\t<description>OJ Electronics OWD5/MWD5 Thermostat</description>\n+\t\t<category>RadiatorControl</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"floorTemperature\" typeId=\"floorTemperature\" />\n+\t\t\t<channel id=\"roomTemperature\" typeId=\"roomTemperature\" />\n+\t\t\t<channel id=\"groupName\" typeId=\"groupName\" />\n+\t\t\t<channel id=\"groupId\" typeId=\"groupId\" />\n+\t\t\t<channel id=\"online\" typeId=\"online\" />\n+\t\t\t<channel id=\"heating\" typeId=\"heating\" />\n+\t\t\t<channel id=\"thermostatName\" typeId=\"thermostatName\" />\n+\t\t\t<channel id=\"regulationMode\" typeId=\"regulationMode\" />\n+\t\t\t<channel id=\"serialNumber\" typeId=\"serialNumber\" />\n+\t\t\t<channel id=\"comfortSetpoint\" typeId=\"comfortSetpoint\" />\n+\t\t\t<channel id=\"comfortEndTime\" typeId=\"comfortEndTime\" />\n+\t\t\t<channel id=\"boostEndTime\" typeId=\"boostEndTime\" />\n+\t\t\t<channel id=\"manualModeSetpoint\" typeId=\"manualModeSetpoint\" />\n+\t\t\t<channel id=\"vacationEnabled\" typeId=\"vacationEnabled\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t\t<description>Serial number of the thermostat. You can find the serial number in the app or on the thermostat itself.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"floorTemperature\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzYyMA=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExNzc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxMzozNVrOGmokoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxMzozNVrOGmokoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2MzgwOQ==", "bodyText": "Is it necessary to expose the serialNumber as a Channel, since it is already a property.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163809", "createdAt": "2020-06-20T22:13:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,165 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\" xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\">\n+\t\t\t\t<label>Refresh delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"APIKEY\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>APIKEY</label>\n+\t\t\t\t<description>APIKEY</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<context>password</context>\n+\t\t\t\t<default>f219aab4-9ac0-4343-8422-b72203e2fac9</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bridge\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>\n+\t\t<description>OJ Electronics OWD5/MWD5 Thermostat</description>\n+\t\t<category>RadiatorControl</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"floorTemperature\" typeId=\"floorTemperature\" />\n+\t\t\t<channel id=\"roomTemperature\" typeId=\"roomTemperature\" />\n+\t\t\t<channel id=\"groupName\" typeId=\"groupName\" />\n+\t\t\t<channel id=\"groupId\" typeId=\"groupId\" />\n+\t\t\t<channel id=\"online\" typeId=\"online\" />\n+\t\t\t<channel id=\"heating\" typeId=\"heating\" />\n+\t\t\t<channel id=\"thermostatName\" typeId=\"thermostatName\" />\n+\t\t\t<channel id=\"regulationMode\" typeId=\"regulationMode\" />\n+\t\t\t<channel id=\"serialNumber\" typeId=\"serialNumber\" />\n+\t\t\t<channel id=\"comfortSetpoint\" typeId=\"comfortSetpoint\" />\n+\t\t\t<channel id=\"comfortEndTime\" typeId=\"comfortEndTime\" />\n+\t\t\t<channel id=\"boostEndTime\" typeId=\"boostEndTime\" />\n+\t\t\t<channel id=\"manualModeSetpoint\" typeId=\"manualModeSetpoint\" />\n+\t\t\t<channel id=\"vacationEnabled\" typeId=\"vacationEnabled\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t\t<description>Serial number of the thermostat. You can find the serial number in the app or on the thermostat itself.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"floorTemperature\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Floor temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f \u00b0C\" readOnly=\"true\" />\n+\t</channel-type>\n+\t<channel-type id=\"groupName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Group name</label>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\t<channel-type id=\"groupId\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Group Id</label>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\t<channel-type id=\"online\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Online</label>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\t<channel-type id=\"heating\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Heating</label>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\t<channel-type id=\"roomTemperature\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Room temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f \u00b0C\" readOnly=\"true\" />\n+\t</channel-type>\n+\t<channel-type id=\"thermostatName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Thermostat name</label>\n+\t\t<state readOnly=\"true\" />\n+\t</channel-type>\n+\t<channel-type id=\"regulationMode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Regulation mode</label>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Auto</option>\n+\t\t\t\t<option value=\"2\">Comfort</option>\n+\t\t\t\t<option value=\"3\">Manual</option>\n+\t\t\t\t<option value=\"4\">Vacation</option>\n+\t\t\t\t<option value=\"6\">Frost protection</option>\n+\t\t\t\t<option value=\"8\">Boost</option>\n+\t\t\t\t<option value=\"9\">Eco</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"serialNumber\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExODE1OnYy", "diffSide": "RIGHT", "path": "bundles/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxNDozMVrOGmokzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo1NDo1OFrOGp_f4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2Mzg1NQ==", "bodyText": "Can you remove the blank line?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163855", "createdAt": "2020-06-20T22:14:31Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -178,6 +178,8 @@\n     <module>org.openhab.binding.ntp</module>\n     <module>org.openhab.binding.nuki</module>\n     <module>org.openhab.binding.oceanic</module>\n+    <module>org.openhab.binding.ojelectronics</module>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NTE1Mg==", "bodyText": "Do you want to adopt or comment on this?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446685152", "createdAt": "2020-06-28T18:54:58Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -178,6 +178,8 @@\n     <module>org.openhab.binding.ntp</module>\n     <module>org.openhab.binding.nuki</module>\n     <module>org.openhab.binding.oceanic</module>\n+    <module>org.openhab.binding.ojelectronics</module>\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2Mzg1NQ=="}, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExODE5OnYy", "diffSide": "RIGHT", "path": "bundles/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxNDozOFrOGmok1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxNDozOFrOGmok1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2Mzg2Mg==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443163862", "createdAt": "2020-06-20T22:14:38Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -509,3 +511,4 @@\n   </profiles>\n \n </project>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExOTQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxNzo0NlrOGmoleA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxNzo0NlrOGmoleA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDAyNA==", "bodyText": "This is not used.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443164024", "createdAt": "2020-06-20T22:17:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.Executors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTExOTY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxODozNlrOGmolkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMjoxODozNlrOGmolkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE2NDA1MQ==", "bodyText": "This null check is not needed.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r443164051", "createdAt": "2020-06-20T22:18:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/SignInService.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInQueryModel;\n+import org.openhab.binding.ojelectronics.internal.models.userprofile.PostSignInResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+\n+/**\n+ * Handles the sign in process.\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class SignInService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SignInService.class);\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+\n+    private final HttpClient httpClient;\n+    private final OJElectronicsBridgeConfiguration config;\n+\n+    /**\n+     * Creates a new instance of {@link SignInService}\n+     *\n+     * @param config configuration {@link OJElectronicsBridgeConfiguration}\n+     * @param httpClient HTTP client\n+     */\n+    public SignInService(OJElectronicsBridgeConfiguration config, HttpClient httpClient) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Signing in\n+     *\n+     * @param signInDone This method is called if sign in process was successful.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void SignIn(Consumer<String> signInDone, Runnable connectionLosed, Runnable unauthorized) {\n+        logger.trace(\"SignInService.SignIn ({})\", this);\n+        Request request = httpClient.POST(config.apiUrl + \"/UserProfile/SignIn\")\n+                .header(HttpHeader.CONTENT_TYPE, \"application/json\")\n+                .content(new StringContentProvider(gson.toJson(getpostSignInQueryModel())));\n+\n+        request.send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (result == null || result.isFailed()) {\n+                    connectionLosed.run();\n+                    return;\n+                }\n+                if (result != null && result.getResponse().getStatus() != 200) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f6825ed37a2d831875e1e062fd02fbc08a781d2"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY3MDQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODozMTowN1rOGp_WrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODozMTowN1rOGp_WrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4Mjc5Ng==", "bodyText": "Does the user know how to get an API key or should this be described here?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446682796", "createdAt": "2020-06-28T18:31:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |  \n+|----------------------|--------|-------------------------------------|  \n+| bridge               | Bridge | OJ Electronics Bridge               |  \n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |  \n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration (bridge)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| userName              | user name from the OJElectronics App (required)                          |\n+| password              | password from the OJElectronics App (required)                           |\n+| apiUrl                | URL of the API endpoint. Optional, the default value should always work. |\n+| refreshDelayInSeconds | Refresh interval in seconds. Optional, the default value is 30 seconds.  |\n+| customerId            | Customer ID. Optional, the default value should always work.             |\n+| APIKEY                | API key. Optional, the default value should always work.                 |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28bfcc274d491586ac61468eb3e8f8576284eb3c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY3Mzc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODozNToxMFrOGp_YNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODozNToxMFrOGp_YNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4MzE4OQ==", "bodyText": "What exception do you want to catch here? Can you sepcify the concrete type or can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446683189", "createdAt": "2020-06-28T18:35:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        try {\n+            ensureSignIn();\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28bfcc274d491586ac61468eb3e8f8576284eb3c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY3NDcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODozNjowM1rOGp_YrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODozNjowM1rOGp_YrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4MzMwOA==", "bodyText": "No harm in setting a null field to null. You could remove the if.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446683308", "createdAt": "2020-06-28T18:36:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsBridgeHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+\n+    public OJElectronicsBridgeHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        try {\n+            ensureSignIn();\n+        } catch (Exception e) {\n+            logger.error(\"error initializing OJElectronicsBridgeHandler\", e);\n+        }\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        if (refreshService != null) {\n+            refreshService.stop();\n+            refreshService = null;\n+        }\n+        if (signInService != null) {\n+            signInService = null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28bfcc274d491586ac61468eb3e8f8576284eb3c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY4MDU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo0Mzo0MlrOGp_bhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo0Mzo0MlrOGp_bhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NDAzOA==", "bodyText": "Is the component/cloud from OJ Electronics really called \"bridge\" or does it have a specific name? bridge is quite common and collides in some way with the openHAB naming. Suggestion: ojCloud", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446684038", "createdAt": "2020-06-28T18:43:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |  \n+|----------------------|--------|-------------------------------------|  \n+| bridge               | Bridge | OJ Electronics Bridge               |  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28bfcc274d491586ac61468eb3e8f8576284eb3c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY4MzE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo0Njo1NVrOGp_ctQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo0Njo1NVrOGp_ctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NDM0MQ==", "bodyText": "If it is fixed length, you could specify the min/max value.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446684341", "createdAt": "2020-06-28T18:46:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,159 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28bfcc274d491586ac61468eb3e8f8576284eb3c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY4NDU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo0ODo1MVrOGp_dbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo0ODo1MVrOGp_dbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NDUyNA==", "bodyText": "Since it is a quite long string, I think it's not necessary to display it as asterisks when pasting/entering the code.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446684524", "createdAt": "2020-06-28T18:48:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,159 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"bridge\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API Key</label>\n+\t\t\t\t<description>API-Key</description>\n+\t\t\t\t<context>password</context>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28bfcc274d491586ac61468eb3e8f8576284eb3c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY4ODYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo1Mzo1OFrOGp_fbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODo1Mzo1OFrOGp_fbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4NTAzNw==", "bodyText": "Units of Measure, to be able to specify Number:Temperature in the XML file.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            new DecimalType(thermostat.comfortSetpoint / (double) 100));\n          \n          \n            \n                            new QuantityType<Temperature>(thermostat.floorTemperature / (double) 100, SIUnits.CELSIUS));", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r446685037", "createdAt": "2020-06-28T18:53:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // nothing do here\n+    }\n+\n+    /**\n+     * Initializes the thing handler.\n+     */\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    /**\n+     * Sets the values after refreshing the thermostats values\n+     *\n+     * @param thermostat thermostat values\n+     */\n+    public void handleThermostatRefresh(Thermostat thermostat) {\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_GROUPNAME, StringType.valueOf(thermostat.groupName));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_GROUPID, new DecimalType(thermostat.groupId));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_ONLINE,\n+                thermostat.online ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_HEATING,\n+                thermostat.heating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_ROOMTEMPERATURE,\n+                new DecimalType(thermostat.roomTemperature / (double) 100));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_FLOORTEMPERATURE,\n+                new DecimalType(thermostat.floorTemperature / (double) 100));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_THERMOSTATNAME,\n+                StringType.valueOf(thermostat.thermostatName));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_REGULATIONMODE,\n+                StringType.valueOf(thermostat.regulationMode.toString()));\n+        updateState(OJElectronicsBindingConstants.CHANNEL_OWD5_COMFORTSETPOINT,\n+                new DecimalType(thermostat.comfortSetpoint / (double) 100));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28bfcc274d491586ac61468eb3e8f8576284eb3c"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTgzMjY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozMToyN1rOGsY8sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozMToyN1rOGsY8sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE5OTI4MA==", "bodyText": "Didn't notice this can't be final. In this case this should be lower case. Sorry.\nYou could use the primitve type: boolean", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r449199280", "createdAt": "2020-07-02T18:31:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static Boolean DESTROYED = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520dff5a82286ab4ff8a02305da7a2459f1b94fe"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTg0MTM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozNDozMlrOGsZCRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozNDozMlrOGsZCRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMDcxMA==", "bodyText": "Can you cancel this task when dispose() is invoked?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r449200710", "createdAt": "2020-07-02T18:34:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsCloudHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsCloudHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+\n+    public OJElectronicsCloudHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        ensureSignIn();\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        this.refreshService = null;\n+        signInService = null;\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    private void ensureSignIn() {\n+        if (signInService == null) {\n+            signInService = new SignInService(configuration, httpClient);\n+        }\n+        final SignInService signInService = this.signInService;\n+        if (signInService != null) {\n+            signInService.signIn(this::handleSignInDone, this::handleConnectionLost,\n+                    this::handleUnauthorizedWhileSignIn);\n+        }\n+    }\n+\n+    private void handleRefreshDone(@Nullable GroupContentResponseModel groupContentResponse) {\n+        logger.trace(\"OJElectronicsCloudHandler.handleRefreshDone({})\", groupContentResponse);\n+\n+        if (groupContentResponse != null && groupContentResponse.errorCode == 0) {\n+            new RefreshGroupContentService(groupContentResponse.groupContents, getThing().getThings()).handle();\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Wrong or no result model; Refreshing stoppped\");\n+            final RefreshService refreshService = this.refreshService;\n+            if (refreshService != null) {\n+                refreshService.stop();\n+            }\n+        }\n+    }\n+\n+    private void handleSignInDone(String sessionId) {\n+        logger.trace(\"OJElectronicsCloudHandler.handleSignInDone({})\", sessionId);\n+        if (refreshService == null) {\n+            refreshService = new RefreshService(configuration, httpClient, scheduler);\n+        }\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.start(sessionId, this::handleRefreshDone, this::handleConnectionLost,\n+                    this::handleUnauthorized);\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }\n+\n+    private void handleUnauthorized() {\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(1);\n+    }\n+\n+    private void handleUnauthorizedWhileSignIn() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                \"Could not sign in. Check user name and password.\");\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+    }\n+\n+    private void handleConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        restartRefreshServiceAsync(configuration.refreshDelayInSeconds);\n+    }\n+\n+    private void restartRefreshServiceAsync(long delayInSeconds) {\n+        scheduler.schedule(this::ensureSignIn, delayInSeconds, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520dff5a82286ab4ff8a02305da7a2459f1b94fe"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5OTg1MzU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozODo0NlrOGsZJsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxODozODo0NlrOGsZJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTIwMjYxMQ==", "bodyText": "There seem to be an issue with the encoding. Umlauts take only two bytes in UTF-8, actually.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r449202611", "createdAt": "2020-07-02T18:38:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/i18n/ojelectronics_de_DE.properties", "diffHunk": "@@ -0,0 +1,31 @@\n+# binding\n+binding.ojelectronics.name = Binding f\u00ef\u00bf\u00bdr OJElectronics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "520dff5a82286ab4ff8a02305da7a2459f1b94fe"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTUzMjgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMDoxMVrOGvQysA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMDoxMVrOGvQysA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMTM3Ng==", "bodyText": "What would you think about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            At this moment all information read only.\n          \n          \n            \n            At this moment all information is read-only.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452211376", "createdAt": "2020-07-09T13:20:11Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTUzNjA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMDo1NVrOGvQ0pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyNTo0MVrOGvc2IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMTg3OQ==", "bodyText": "This README is used as part of the online documentation, I don't think the roadmap should be part of that.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452211879", "createdAt": "2020-07-09T13:20:55Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwODg2NA==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452408864", "createdAt": "2020-07-09T18:25:41Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMTg3OQ=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTUzODQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMTozMlrOGvQ2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMTozMlrOGvQ2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMjI5NA==", "bodyText": "What about:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Not at the moment\n          \n          \n            \n            Not supported at the moment.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452212294", "createdAt": "2020-07-09T13:21:32Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| ojcloud              | Bridge | OJ Electronics Cloud Connector      |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTU2NjQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyODoyM1rOGvRIXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxOTo1NTowOVrOGwO5jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNjkyNg==", "bodyText": "Can you make sure that you follow the example readme and add examples for the thing files, items files and for the sitemap.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452216926", "createdAt": "2020-07-09T13:28:23Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| ojcloud              | Bridge | OJ Electronics Cloud Connector      |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration (ojcloud)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| userName              | user name from the OJElectronics App (required)                          |\n+| password              | password from the OJElectronics App (required)                           |\n+| APIKEY                | API key. You get the key from your local distributor.                    |\n+| apiUrl                | URL of the API endpoint. Optional, the default value should always work. |\n+| refreshDelayInSeconds | Refresh interval in seconds. Optional, the default value is 30 seconds.  |\n+| customerId            | Customer ID. Optional, the default value should always work.             |\n+| softwareVersion       | Software version. Optional, the default value should always work.        |\n+\n+### OJ Electronics OWD5/MWD5 Thermostat configuration (owd5)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| serialNumber          | serial number from the OJElectronics App or the thermostat (required)    |\n+\n+## Channels\n+\n+| Channel            | Type               | Description                                                                        |\n+|--------------------|--------------------|------------------------------------------------------------------------------------|\n+| floorTemperature   | Number:Temperature | Floor temperature                                                                  |\n+| groupName          | Text               | Group name                                                                         |\n+| groupId            | Number             | Group Id                                                                           |\n+| online             | Switch             | Online                                                                             |\n+| heating            | Switch             | Heating                                                                            |\n+| roomTemperature    | Number:Temperature | Room temperature                                                                   |\n+| thermostatName     | Text               | Thermostat name                                                                    |\n+| regulationMode     | Text               | Regulation mode                                                                    |\n+| serialNumber       | Text               | Serial number                                                                      |\n+| comfortSetpoint    | Number:Temperature | Target comfort temperature                                                         |\n+| comfortEndTime     | Date time          | Date and time when the thermostat switchs back from comfort mode to automatic mode |\n+| boostEndTime       | Date time          | Date and time when the thermostat switchs back from boost mode to automatic mode   |\n+| manualModeSetpoint | Number:Temperature | Target temperature of the manual mode                                              |\n+| vacationEnabled    | Switch             | Vacation is enabled                                                                |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyNTc3OA==", "bodyText": "Writing Documentation: My Favorite way of passing the time. \ud83d\ude01", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453225778", "createdAt": "2020-07-11T19:17:37Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| ojcloud              | Bridge | OJ Electronics Cloud Connector      |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration (ojcloud)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| userName              | user name from the OJElectronics App (required)                          |\n+| password              | password from the OJElectronics App (required)                           |\n+| APIKEY                | API key. You get the key from your local distributor.                    |\n+| apiUrl                | URL of the API endpoint. Optional, the default value should always work. |\n+| refreshDelayInSeconds | Refresh interval in seconds. Optional, the default value is 30 seconds.  |\n+| customerId            | Customer ID. Optional, the default value should always work.             |\n+| softwareVersion       | Software version. Optional, the default value should always work.        |\n+\n+### OJ Electronics OWD5/MWD5 Thermostat configuration (owd5)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| serialNumber          | serial number from the OJElectronics App or the thermostat (required)    |\n+\n+## Channels\n+\n+| Channel            | Type               | Description                                                                        |\n+|--------------------|--------------------|------------------------------------------------------------------------------------|\n+| floorTemperature   | Number:Temperature | Floor temperature                                                                  |\n+| groupName          | Text               | Group name                                                                         |\n+| groupId            | Number             | Group Id                                                                           |\n+| online             | Switch             | Online                                                                             |\n+| heating            | Switch             | Heating                                                                            |\n+| roomTemperature    | Number:Temperature | Room temperature                                                                   |\n+| thermostatName     | Text               | Thermostat name                                                                    |\n+| regulationMode     | Text               | Regulation mode                                                                    |\n+| serialNumber       | Text               | Serial number                                                                      |\n+| comfortSetpoint    | Number:Temperature | Target comfort temperature                                                         |\n+| comfortEndTime     | Date time          | Date and time when the thermostat switchs back from comfort mode to automatic mode |\n+| boostEndTime       | Date time          | Date and time when the thermostat switchs back from boost mode to automatic mode   |\n+| manualModeSetpoint | Number:Temperature | Target temperature of the manual mode                                              |\n+| vacationEnabled    | Switch             | Vacation is enabled                                                                |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNjkyNg=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyNzA3MA==", "bodyText": "Thanks for reminding me I would forget about this one \ud83d\ude1b", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453227070", "createdAt": "2020-07-11T19:33:50Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| ojcloud              | Bridge | OJ Electronics Cloud Connector      |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration (ojcloud)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| userName              | user name from the OJElectronics App (required)                          |\n+| password              | password from the OJElectronics App (required)                           |\n+| APIKEY                | API key. You get the key from your local distributor.                    |\n+| apiUrl                | URL of the API endpoint. Optional, the default value should always work. |\n+| refreshDelayInSeconds | Refresh interval in seconds. Optional, the default value is 30 seconds.  |\n+| customerId            | Customer ID. Optional, the default value should always work.             |\n+| softwareVersion       | Software version. Optional, the default value should always work.        |\n+\n+### OJ Electronics OWD5/MWD5 Thermostat configuration (owd5)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| serialNumber          | serial number from the OJElectronics App or the thermostat (required)    |\n+\n+## Channels\n+\n+| Channel            | Type               | Description                                                                        |\n+|--------------------|--------------------|------------------------------------------------------------------------------------|\n+| floorTemperature   | Number:Temperature | Floor temperature                                                                  |\n+| groupName          | Text               | Group name                                                                         |\n+| groupId            | Number             | Group Id                                                                           |\n+| online             | Switch             | Online                                                                             |\n+| heating            | Switch             | Heating                                                                            |\n+| roomTemperature    | Number:Temperature | Room temperature                                                                   |\n+| thermostatName     | Text               | Thermostat name                                                                    |\n+| regulationMode     | Text               | Regulation mode                                                                    |\n+| serialNumber       | Text               | Serial number                                                                      |\n+| comfortSetpoint    | Number:Temperature | Target comfort temperature                                                         |\n+| comfortEndTime     | Date time          | Date and time when the thermostat switchs back from comfort mode to automatic mode |\n+| boostEndTime       | Date time          | Date and time when the thermostat switchs back from boost mode to automatic mode   |\n+| manualModeSetpoint | Number:Temperature | Target temperature of the manual mode                                              |\n+| vacationEnabled    | Switch             | Vacation is enabled                                                                |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNjkyNg=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyODQxMQ==", "bodyText": "The visual studio code plugin can help you generate a least the items definition, I would not know by heart whether I can also generate the others.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453228411", "createdAt": "2020-07-11T19:49:02Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| ojcloud              | Bridge | OJ Electronics Cloud Connector      |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration (ojcloud)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| userName              | user name from the OJElectronics App (required)                          |\n+| password              | password from the OJElectronics App (required)                           |\n+| APIKEY                | API key. You get the key from your local distributor.                    |\n+| apiUrl                | URL of the API endpoint. Optional, the default value should always work. |\n+| refreshDelayInSeconds | Refresh interval in seconds. Optional, the default value is 30 seconds.  |\n+| customerId            | Customer ID. Optional, the default value should always work.             |\n+| softwareVersion       | Software version. Optional, the default value should always work.        |\n+\n+### OJ Electronics OWD5/MWD5 Thermostat configuration (owd5)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| serialNumber          | serial number from the OJElectronics App or the thermostat (required)    |\n+\n+## Channels\n+\n+| Channel            | Type               | Description                                                                        |\n+|--------------------|--------------------|------------------------------------------------------------------------------------|\n+| floorTemperature   | Number:Temperature | Floor temperature                                                                  |\n+| groupName          | Text               | Group name                                                                         |\n+| groupId            | Number             | Group Id                                                                           |\n+| online             | Switch             | Online                                                                             |\n+| heating            | Switch             | Heating                                                                            |\n+| roomTemperature    | Number:Temperature | Room temperature                                                                   |\n+| thermostatName     | Text               | Thermostat name                                                                    |\n+| regulationMode     | Text               | Regulation mode                                                                    |\n+| serialNumber       | Text               | Serial number                                                                      |\n+| comfortSetpoint    | Number:Temperature | Target comfort temperature                                                         |\n+| comfortEndTime     | Date time          | Date and time when the thermostat switchs back from comfort mode to automatic mode |\n+| boostEndTime       | Date time          | Date and time when the thermostat switchs back from boost mode to automatic mode   |\n+| manualModeSetpoint | Number:Temperature | Target temperature of the manual mode                                              |\n+| vacationEnabled    | Switch             | Vacation is enabled                                                                |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNjkyNg=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyODk0MA==", "bodyText": "Thanks for reminding me I would forget about this one stuck_out_tongue\n\nDamn. That would have been my chance ... \ud83e\udd23\nBut it's no problem... I wrote a good example that anyone can start with. At least that's what I hope.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453228940", "createdAt": "2020-07-11T19:55:09Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| ojcloud              | Bridge | OJ Electronics Cloud Connector      |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration (ojcloud)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| userName              | user name from the OJElectronics App (required)                          |\n+| password              | password from the OJElectronics App (required)                           |\n+| APIKEY                | API key. You get the key from your local distributor.                    |\n+| apiUrl                | URL of the API endpoint. Optional, the default value should always work. |\n+| refreshDelayInSeconds | Refresh interval in seconds. Optional, the default value is 30 seconds.  |\n+| customerId            | Customer ID. Optional, the default value should always work.             |\n+| softwareVersion       | Software version. Optional, the default value should always work.        |\n+\n+### OJ Electronics OWD5/MWD5 Thermostat configuration (owd5)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| serialNumber          | serial number from the OJElectronics App or the thermostat (required)    |\n+\n+## Channels\n+\n+| Channel            | Type               | Description                                                                        |\n+|--------------------|--------------------|------------------------------------------------------------------------------------|\n+| floorTemperature   | Number:Temperature | Floor temperature                                                                  |\n+| groupName          | Text               | Group name                                                                         |\n+| groupId            | Number             | Group Id                                                                           |\n+| online             | Switch             | Online                                                                             |\n+| heating            | Switch             | Heating                                                                            |\n+| roomTemperature    | Number:Temperature | Room temperature                                                                   |\n+| thermostatName     | Text               | Thermostat name                                                                    |\n+| regulationMode     | Text               | Regulation mode                                                                    |\n+| serialNumber       | Text               | Serial number                                                                      |\n+| comfortSetpoint    | Number:Temperature | Target comfort temperature                                                         |\n+| comfortEndTime     | Date time          | Date and time when the thermostat switchs back from comfort mode to automatic mode |\n+| boostEndTime       | Date time          | Date and time when the thermostat switchs back from boost mode to automatic mode   |\n+| manualModeSetpoint | Number:Temperature | Target temperature of the manual mode                                              |\n+| vacationEnabled    | Switch             | Vacation is enabled                                                                |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxNjkyNg=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTU5OTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozNjoxOFrOGvRddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODoyMDo1MlrOGwOaVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMjMyNw==", "bodyText": "Please handle the REFRESH-command directly or indirectly via some cache. It prevents situations were people link an additional channel after the binding was already started. It will make sure that they don't have to wait until the next cycle for the data to be populated.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452222327", "createdAt": "2020-07-09T13:36:18Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsCloudHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsCloudHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+    private @Nullable ScheduledFuture<?> signTask;\n+\n+    public OJElectronicsCloudHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        ensureSignIn();\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        final ScheduledFuture<?> signTask = this.signTask;\n+        if (signTask != null) {\n+            signTask.cancel(true);\n+        }\n+        this.refreshService = null;\n+        signInService = null;\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMDk1MA==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453220950", "createdAt": "2020-07-11T18:20:52Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsCloudHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshGroupContentService;\n+import org.openhab.binding.ojelectronics.internal.services.RefreshService;\n+import org.openhab.binding.ojelectronics.internal.services.SignInService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handles all traffic with OJ Electronics cloud\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsCloudHandler extends BaseBridgeHandler implements BridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OJElectronicsCloudHandler.class);\n+    private final HttpClient httpClient;\n+\n+    private @Nullable RefreshService refreshService;\n+    private @Nullable SignInService signInService;\n+    private OJElectronicsBridgeConfiguration configuration;\n+    private @Nullable ScheduledFuture<?> signTask;\n+\n+    public OJElectronicsCloudHandler(Bridge bridge, HttpClient httpClient) {\n+        super(bridge);\n+        this.httpClient = httpClient;\n+        this.configuration = new OJElectronicsBridgeConfiguration();\n+    }\n+\n+    /**\n+     * Initializes the binding.\n+     */\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(OJElectronicsBridgeConfiguration.class);\n+        ensureSignIn();\n+    }\n+\n+    /**\n+     * Disposes the binding.\n+     */\n+    @Override\n+    public void dispose() {\n+        final RefreshService refreshService = this.refreshService;\n+        if (refreshService != null) {\n+            refreshService.stop();\n+        }\n+        final ScheduledFuture<?> signTask = this.signTask;\n+        if (signTask != null) {\n+            signTask.cancel(true);\n+        }\n+        this.refreshService = null;\n+        signInService = null;\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMjMyNw=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTYwNDc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozNzoyM1rOGvRgng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyNzo1OVrOGvc7DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzEzNA==", "bodyText": "It seems that this field can be final.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452223134", "createdAt": "2020-07-09T13:37:23Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private String serialNumber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMDEyNA==", "bodyText": "That's true.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452410124", "createdAt": "2020-07-09T18:27:59Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private String serialNumber;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzEzNA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTYwNTYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozNzozNlrOGvRhLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyODo1OFrOGvc9Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzI3Ng==", "bodyText": "Please use your real name and check all.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452223276", "createdAt": "2020-07-09T13:37:36Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMDY0Mw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452410643", "createdAt": "2020-07-09T18:28:58Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzI3Ng=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTYwODEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozODowOVrOGvRilg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODozMDoyMlrOGvdASw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzYzOA==", "bodyText": "Are you sure that this guaranteed to be non-null?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452223638", "createdAt": "2020-07-09T13:38:09Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMTQ2Nw==", "bodyText": "I think yes because it is required in thing-types.xml", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452411467", "createdAt": "2020-07-09T18:30:22Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/OJElectronicsThermostatHandler.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link OJElectronicsThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author EvilPingu - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsThermostatHandler extends BaseThingHandler {\n+\n+    private String serialNumber;\n+\n+    /**\n+     * Creates a new instance of {@link OJElectronicsThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public OJElectronicsThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyMzYzOA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTYxMjk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzozOToxOVrOGvRlmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODozNDoyMFrOGvdIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNDQxMQ==", "bodyText": "You could consider making this an int it will ensure that its non-null :-)", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452224411", "createdAt": "2020-07-09T13:39:19Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsCloudHandler}\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeConfiguration {\n+\n+    /**\n+     * Password\n+     */\n+    public String password = \"\";\n+\n+    /**\n+     * Customer-ID\n+     */\n+    public Integer customerId = 1;\n+\n+    /**\n+     * User Name\n+     */\n+    public String userName = \"\";\n+\n+    /**\n+     * Url for API\n+     */\n+    public String apiUrl = \"https://OWD5-OJ001-App.ojelectronics.com/api\";\n+\n+    /**\n+     * API-Key\n+     */\n+    public String apiKey = \"\";\n+\n+    /**\n+     * Software Version\n+     */\n+    public Integer softwareVersion = 1060;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMzUzMw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452413533", "createdAt": "2020-07-09T18:34:20Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/config/OJElectronicsBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The configuration for {@link org.openhab.binding.ojelectronics.internal.OJElectronicsCloudHandler}\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OJElectronicsBridgeConfiguration {\n+\n+    /**\n+     * Password\n+     */\n+    public String password = \"\";\n+\n+    /**\n+     * Customer-ID\n+     */\n+    public Integer customerId = 1;\n+\n+    /**\n+     * User Name\n+     */\n+    public String userName = \"\";\n+\n+    /**\n+     * Url for API\n+     */\n+    public String apiUrl = \"https://OWD5-OJ001-App.ojelectronics.com/api\";\n+\n+    /**\n+     * API-Key\n+     */\n+    public String apiKey = \"\";\n+\n+    /**\n+     * Software Version\n+     */\n+    public Integer softwareVersion = 1060;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNDQxMQ=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTYyNjk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo0MjoyNFrOGvRuMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo0MjoyNFrOGvRuMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNjYwOA==", "bodyText": "I see a lot of flavors, I would propose to use apiKey everywhere, please check all.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452226608", "createdAt": "2020-07-09T13:42:24Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/README.md", "diffHunk": "@@ -0,0 +1,64 @@\n+# OJElectronics Binding\n+\n+With this binding it is possible to connect [OWD5/MWD5 Thermostat](https://www.ojelectronics.com/business-areas/wifi-thermostat-owd5-prod400) of OJ Electronics.\n+\n+At this moment all information read only.\n+\n+## Road map\n+\n+[x] Information of thermostat read only  \n+[ ] Change the state of the thermostate  \n+[ ] Automatic discovery  \n+[ ] Thermostat group thing  \n+\n+## Supported Things\n+\n+There are two things:\n+\n+| Thing                | Type   | Description                         |\n+|----------------------|--------|-------------------------------------|\n+| ojcloud              | Bridge | OJ Electronics Cloud Connector      |\n+| owd5                 | Thing  | OJ Electronics OWD5/MWD5 Thermostat |\n+\n+## Discovery\n+\n+Not at the moment\n+\n+## Thing Configuration\n+\n+### OJ Electronics Bridge configuration (ojcloud)\n+\n+| Parameter             | Description                                                              |\n+|-----------------------|--------------------------------------------------------------------------|\n+| userName              | user name from the OJElectronics App (required)                          |\n+| password              | password from the OJElectronics App (required)                           |\n+| APIKEY                | API key. You get the key from your local distributor.                    |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTYyODA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo0Mjo0MFrOGvRu6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0Mjo1MVrOGvdZeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNjc5Mg==", "bodyText": "Consider using the consistent apiKey", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452226792", "createdAt": "2020-07-09T13:42:40Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.userprofile;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for signing sin\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PostSignInQueryModel {\n+\n+    @SerializedName(\"APIKEY\")\n+    @Expose\n+    public String apikey = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNzkxNA==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452417914", "createdAt": "2020-07-09T18:42:51Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.userprofile;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for signing sin\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PostSignInQueryModel {\n+\n+    @SerializedName(\"APIKEY\")\n+    @Expose\n+    public String apikey = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNjc5Mg=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTYzMDkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo0MzoyMVrOGvRwxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0Mjo0MVrOGvdZBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNzI3MA==", "bodyText": "The documentation uses other capitals for this field", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452227270", "createdAt": "2020-07-09T13:43:21Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNzc5Nw==", "bodyText": "I changed this in the documentation.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452417797", "createdAt": "2020-07-09T18:42:41Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyNzI3MA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTYzNTc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo0NDoyOVrOGvRzzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0OToyNlrOGvdnBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyODA0Ng==", "bodyText": "I don't think you should repeat OJ Electronics in the names of things. The binding has that name I would leave out for individual things.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452228046", "createdAt": "2020-07-09T13:44:29Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">\n+\t\t\t\t<label>API Key</label>\n+\t\t\t\t<description>API-Key from your local distributor</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\" unit=\"s\">\n+\t\t\t\t<label>Refresh Delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"ojcloud\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzNDQxOA==", "bodyText": "You can add as a property though, see for example:\n\n  \n    \n      openhab-addons/bundles/org.openhab.binding.heos/src/main/resources/ESH-INF/thing/HeosPlayer.xml\n    \n    \n        Lines 36 to 38\n      in\n      b5c5e39\n    \n    \n    \n    \n\n        \n          \n           <properties> \n        \n\n        \n          \n           \t<property name=\"vendor\">Denon</property> \n        \n\n        \n          \n           </properties>", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452234418", "createdAt": "2020-07-09T13:53:16Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">\n+\t\t\t\t<label>API Key</label>\n+\t\t\t\t<description>API-Key from your local distributor</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\" unit=\"s\">\n+\t\t\t\t<label>Refresh Delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"ojcloud\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyODA0Ng=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMTM4Mw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452421383", "createdAt": "2020-07-09T18:49:26Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">\n+\t\t\t\t<label>API Key</label>\n+\t\t\t\t<description>API-Key from your local distributor</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\" unit=\"s\">\n+\t\t\t\t<label>Refresh Delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"ojcloud\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIyODA0Ng=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTY5MTc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo1Njo1OVrOGvSXCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNzo1OTozNFrOGwLSWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzNzA2NQ==", "bodyText": "Is the expose needed, or would it work fine without it?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452237065", "createdAt": "2020-07-09T13:56:59Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a day\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Day {\n+\n+    @SerializedName(\"WeekDayGrpNo\")\n+    @Expose", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE2OTc1Mg==", "bodyText": "Of course it works without it. I generated this models with http://www.jsonschema2pojo.org/. I remove this explicit expose. No problem", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453169752", "createdAt": "2020-07-11T07:59:34Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a day\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Day {\n+\n+    @SerializedName(\"WeekDayGrpNo\")\n+    @Expose", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzNzA2NQ=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTY5OTM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzo1ODo0NFrOGvScEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMzozODo1MVrOGwM45w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzODM1Mw==", "bodyText": "What about using FieldNamingPolicy.UPPER_CAMEL_CASE it makes the mapping less verbose and you only have to document what is actually interesting.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452238353", "createdAt": "2020-07-09T13:58:44Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a day\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Day {\n+\n+    @SerializedName(\"WeekDayGrpNo\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NjAwNw==", "bodyText": "I changed this in all models", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453196007", "createdAt": "2020-07-11T13:38:51Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Day.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a day\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Day {\n+\n+    @SerializedName(\"WeekDayGrpNo\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIzODM1Mw=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTcxMDE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDowMTowNVrOGvSi_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxOTozMDowMVrOGwOxGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw==", "bodyText": "I think it might be dangerous to annotate your JSON classes like this, it gives a false sense of security. GSON will not validate the null-ness of the fields. And I don't know whether your bases it on some documentation but even that is not guaranteed to remain as is.\n@cpmeister what do you think of this?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452240127", "createdAt": "2020-07-09T14:01:05Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzNTc0NA==", "bodyText": "If i do so, i think i got a warning.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452435744", "createdAt": "2020-07-09T19:16:55Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNTgyNA==", "bodyText": "I think it might be dangerous to annotate your JSON classes like this, it gives a false sense of security. GSON will not validate the null-ness of the fields. And I don't know whether your bases it on some documentation but even that is not guaranteed to remain as is.\n\n@openhab/add-ons-maintainers your opinions are greatly appreciated here :-)", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453215824", "createdAt": "2020-07-11T17:24:21Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMjIxMg==", "bodyText": "@EvilPingu if no one veto's this (about nullable and json-mapping) one tonight and you looked into the latest remarks it should be ready to be merged! Thanks for your quick responses.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453222212", "createdAt": "2020-07-11T18:35:06Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyNjc3Nw==", "bodyText": "@martinvw Afaik, our guidelines say that @NonNullByDefault must be used on classes and I do not recall any exception for JSON pojos. I'd hence say, it is fine (while not saying that your remark that it gives a false sense of security is wrong).", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453226777", "createdAt": "2020-07-11T19:30:01Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDEyNw=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTcxMjQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDowMTozNFrOGvSkcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMzozOTozNFrOGwM5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDQ5Nw==", "bodyText": "If you do believe fields will not be null, then better use the primitive types.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452240497", "createdAt": "2020-07-09T14:01:34Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Schedule {\n+\n+    @SerializedName(\"Days\")\n+    @Expose\n+    public List<Day> days = new ArrayList<Day>();\n+    @SerializedName(\"ModifiedDueToVerification\")\n+    @Expose\n+    public Boolean modifiedDueToVerification = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NjA4OA==", "bodyText": "I changed this too. I always use primitive types in models now", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453196088", "createdAt": "2020-07-11T13:39:34Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/groups/Schedule.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.groups;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for a schedule\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Schedule {\n+\n+    @SerializedName(\"Days\")\n+    @Expose\n+    public List<Day> days = new ArrayList<Day>();\n+    @SerializedName(\"ModifiedDueToVerification\")\n+    @Expose\n+    public Boolean modifiedDueToVerification = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDQ5Nw=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTcxNDY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDowMjowMlrOGvSl2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo0NDo1NVrOGvddgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDg1Ng==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452240856", "createdAt": "2020-07-09T14:02:02Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.userprofile;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for signing sin\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PostSignInQueryModel {\n+\n+    @SerializedName(\"APIKEY\")\n+    @Expose\n+    public String apikey = \"\";\n+\n+    @SerializedName(\"UserName\")\n+    @Expose\n+    public String userName = \"\";\n+\n+    @SerializedName(\"Password\")\n+    @Expose\n+    public String password = \"\";\n+\n+    @SerializedName(\"CustomerId\")\n+    @Expose\n+    public Integer customerId = 0;\n+\n+    @SerializedName(\"ClientSWVersion\")\n+    @Expose\n+    public Integer clientSWVersion = 0;\n+\n+    /**\n+     * Add API-Key\n+     *\n+     * @param aPIKEY API-Key\n+     * @return Model\n+     */\n+    public PostSignInQueryModel withAPIKEY(String apikey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxODk0Ng==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452418946", "createdAt": "2020-07-09T18:44:55Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/models/userprofile/PostSignInQueryModel.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.models.userprofile;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.Expose;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Model for signing sin\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class PostSignInQueryModel {\n+\n+    @SerializedName(\"APIKEY\")\n+    @Expose\n+    public String apikey = \"\";\n+\n+    @SerializedName(\"UserName\")\n+    @Expose\n+    public String userName = \"\";\n+\n+    @SerializedName(\"Password\")\n+    @Expose\n+    public String password = \"\";\n+\n+    @SerializedName(\"CustomerId\")\n+    @Expose\n+    public Integer customerId = 0;\n+\n+    @SerializedName(\"ClientSWVersion\")\n+    @Expose\n+    public Integer clientSWVersion = 0;\n+\n+    /**\n+     * Add API-Key\n+     *\n+     * @param aPIKEY API-Key\n+     * @return Model\n+     */\n+    public PostSignInQueryModel withAPIKEY(String apikey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MDg1Ng=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTcyNDU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDowNDoyNFrOGvSsPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzozOTozMlrOGwOL1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MjQ5Mg==", "bodyText": "Would something terrible happen if you would support a duplicated device with the same serial number? It would simplify the code:\nyou could then just skip the findFirst and replace it by a forEach", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452242492", "createdAt": "2020-07-09T14:04:24Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.ojelectronics.internal.OJElectronicsThermostatHandler;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContent;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * Refreshes values of {@link OJElectronicsThermostatHandler}\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class RefreshGroupContentService {\n+\n+    private final List<GroupContent> groupContentList;\n+    private List<Thing> things;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshGroupContentService}\n+     *\n+     * @param groupContents {@link GroupContent}\n+     * @param things Things\n+     */\n+    public RefreshGroupContentService(List<GroupContent> groupContents, List<Thing> things) {\n+        this.groupContentList = groupContents;\n+        this.things = things;\n+    }\n+\n+    /**\n+     * Handles the changes to all things.\n+     */\n+    public void handle() {\n+        groupContentList.stream().flatMap(entry -> entry.thermostats.stream()).forEach(this::handleThermostat);\n+    }\n+\n+    private void handleThermostat(Thermostat thermostat) {\n+        Optional<OJElectronicsThermostatHandler> handler = things.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzIzNw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453217237", "createdAt": "2020-07-11T17:39:32Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshGroupContentService.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.ojelectronics.internal.OJElectronicsThermostatHandler;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContent;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * Refreshes values of {@link OJElectronicsThermostatHandler}\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class RefreshGroupContentService {\n+\n+    private final List<GroupContent> groupContentList;\n+    private List<Thing> things;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshGroupContentService}\n+     *\n+     * @param groupContents {@link GroupContent}\n+     * @param things Things\n+     */\n+    public RefreshGroupContentService(List<GroupContent> groupContents, List<Thing> things) {\n+        this.groupContentList = groupContents;\n+        this.things = things;\n+    }\n+\n+    /**\n+     * Handles the changes to all things.\n+     */\n+    public void handle() {\n+        groupContentList.stream().flatMap(entry -> entry.thermostats.stream()).forEach(this::handleThermostat);\n+    }\n+\n+    private void handleThermostat(Thermostat thermostat) {\n+        Optional<OJElectronicsThermostatHandler> handler = things.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MjQ5Mg=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTcyODI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDowNToxOVrOGvSujQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMzo1MToxOFrOGwM9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MzA4NQ==", "bodyText": "See remark above about using a naming strategy, given the size of the statement you might also consider creating some static method to initialize it.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452243085", "createdAt": "2020-07-09T14:05:19Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NzA5NA==", "bodyText": "I shorten the class names and extracts some methods", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453197094", "createdAt": "2020-07-11T13:51:18Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0MzA4NQ=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTc3NDA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoxNTozOFrOGvTLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzozOTozMFrOGwOLxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MDQ3OQ==", "bodyText": "It might make more sense to just make this fields nullable, it seems you have \"\" a magical meaning instead.\nIf you want to leave, then position the literal first in String comparisons - that way if the String is null you won't get a NullPointerException, it'll just return false. source: PMD", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452250479", "createdAt": "2020-07-09T14:15:38Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient,\n+            ScheduledExecutorService schedulerService) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+        this.schedulerService = schedulerService;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLost, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLost = connectionLost;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = schedulerService.scheduleWithFixedDelay(this::refresh, refreshTime, refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        destroyed = true;\n+        final ScheduledFuture<?> scheduler = this.scheduler;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+        }\n+        this.scheduler = null;\n+    }\n+\n+    private void refresh() {\n+        if (sessionId.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzIyMw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453217223", "createdAt": "2020-07-11T17:39:30Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient,\n+            ScheduledExecutorService schedulerService) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+        this.schedulerService = schedulerService;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLost, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLost = connectionLost;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = schedulerService.scheduleWithFixedDelay(this::refresh, refreshTime, refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        destroyed = true;\n+        final ScheduledFuture<?> scheduler = this.scheduler;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+        }\n+        this.scheduler = null;\n+    }\n+\n+    private void refresh() {\n+        if (sessionId.equals(\"\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MDQ3OQ=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTc3OTM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoxNjo1MVrOGvTOyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNzozOTo0NlrOGwOL6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MTMzOA==", "bodyText": "In E.4 of the coding guidelines we listed what kind of logging level should be used when. Error should only be used:\n\nerror logging should only be used to inform the user that something is tremendously wrong in his setup, the system cannot function normally anymore, and there is a need for immediate action.\n\nPlease change this to use the correct logging levels.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452251338", "createdAt": "2020-07-09T14:16:51Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient,\n+            ScheduledExecutorService schedulerService) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+        this.schedulerService = schedulerService;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLost, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLost = connectionLost;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = schedulerService.scheduleWithFixedDelay(this::refresh, refreshTime, refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        destroyed = true;\n+        final ScheduledFuture<?> scheduler = this.scheduler;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+        }\n+        this.scheduler = null;\n+    }\n+\n+    private void refresh() {\n+        if (sessionId.equals(\"\")) {\n+            handleConnectionLost();\n+            return;\n+        }\n+        final Runnable unauthorized = this.unauthorized;\n+        createRequest().send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (!destroyed) {\n+                    if (result == null || result.isFailed()) {\n+                        handleConnectionLost();\n+                    } else if (result.getResponse().getStatus() == HttpStatus.FORBIDDEN_403) {\n+                        if (unauthorized != null) {\n+                            unauthorized.run();\n+                        }\n+                    } else {\n+                        handleRefreshDone(getContentAsString());\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private Request createRequest() {\n+        Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n+                .param(\"APIKEY\", config.apiKey).method(HttpMethod.GET);\n+        return request;\n+    }\n+\n+    private void handleRefreshDone(String responseBody) {\n+        final Consumer<@Nullable GroupContentResponseModel> refreshDone = this.refreshDone;\n+        if (refreshDone != null) {\n+            logger.trace(\"refresh {}\", responseBody);\n+            try {\n+                GroupContentResponseModel content = gson.fromJson(responseBody, GroupContentResponseModel.class);\n+                refreshDone.accept(content);\n+            } catch (JsonSyntaxException exception) {\n+                logger.error(\"Error mapping Result to model\", exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0MDY2Nw==", "bodyText": "I think the correct way is to remove the logging and disable the thing. Is this correct?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452440667", "createdAt": "2020-07-09T19:26:13Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient,\n+            ScheduledExecutorService schedulerService) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+        this.schedulerService = schedulerService;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLost, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLost = connectionLost;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = schedulerService.scheduleWithFixedDelay(this::refresh, refreshTime, refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        destroyed = true;\n+        final ScheduledFuture<?> scheduler = this.scheduler;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+        }\n+        this.scheduler = null;\n+    }\n+\n+    private void refresh() {\n+        if (sessionId.equals(\"\")) {\n+            handleConnectionLost();\n+            return;\n+        }\n+        final Runnable unauthorized = this.unauthorized;\n+        createRequest().send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (!destroyed) {\n+                    if (result == null || result.isFailed()) {\n+                        handleConnectionLost();\n+                    } else if (result.getResponse().getStatus() == HttpStatus.FORBIDDEN_403) {\n+                        if (unauthorized != null) {\n+                            unauthorized.run();\n+                        }\n+                    } else {\n+                        handleRefreshDone(getContentAsString());\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private Request createRequest() {\n+        Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n+                .param(\"APIKEY\", config.apiKey).method(HttpMethod.GET);\n+        return request;\n+    }\n+\n+    private void handleRefreshDone(String responseBody) {\n+        final Consumer<@Nullable GroupContentResponseModel> refreshDone = this.refreshDone;\n+        if (refreshDone != null) {\n+            logger.trace(\"refresh {}\", responseBody);\n+            try {\n+                GroupContentResponseModel content = gson.fromJson(responseBody, GroupContentResponseModel.class);\n+                refreshDone.accept(content);\n+            } catch (JsonSyntaxException exception) {\n+                logger.error(\"Error mapping Result to model\", exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MTMzOA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NTY1OQ==", "bodyText": "Not really disabling, updating the thing status, calling updateStatus and I would see that this indicates a communication error, you could log the full stack trace to debug, but the most important is reporting to the user that something is wrong and passing the exception.getMessage() to the updateStatus could help for that.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452485659", "createdAt": "2020-07-09T20:57:11Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient,\n+            ScheduledExecutorService schedulerService) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+        this.schedulerService = schedulerService;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLost, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLost = connectionLost;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = schedulerService.scheduleWithFixedDelay(this::refresh, refreshTime, refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        destroyed = true;\n+        final ScheduledFuture<?> scheduler = this.scheduler;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+        }\n+        this.scheduler = null;\n+    }\n+\n+    private void refresh() {\n+        if (sessionId.equals(\"\")) {\n+            handleConnectionLost();\n+            return;\n+        }\n+        final Runnable unauthorized = this.unauthorized;\n+        createRequest().send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (!destroyed) {\n+                    if (result == null || result.isFailed()) {\n+                        handleConnectionLost();\n+                    } else if (result.getResponse().getStatus() == HttpStatus.FORBIDDEN_403) {\n+                        if (unauthorized != null) {\n+                            unauthorized.run();\n+                        }\n+                    } else {\n+                        handleRefreshDone(getContentAsString());\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private Request createRequest() {\n+        Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n+                .param(\"APIKEY\", config.apiKey).method(HttpMethod.GET);\n+        return request;\n+    }\n+\n+    private void handleRefreshDone(String responseBody) {\n+        final Consumer<@Nullable GroupContentResponseModel> refreshDone = this.refreshDone;\n+        if (refreshDone != null) {\n+            logger.trace(\"refresh {}\", responseBody);\n+            try {\n+                GroupContentResponseModel content = gson.fromJson(responseBody, GroupContentResponseModel.class);\n+                refreshDone.accept(content);\n+            } catch (JsonSyntaxException exception) {\n+                logger.error(\"Error mapping Result to model\", exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MTMzOA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxNzI1Nw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453217257", "createdAt": "2020-07-11T17:39:46Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/services/RefreshService.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal.services;\n+\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsBridgeConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.GroupContentResponseModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Handles the refreshing of the devices of a OJElectronics session\n+ *\n+ * @author Christian Kittel - Initial Contribution\n+ */\n+@NonNullByDefault\n+public final class RefreshService implements AutoCloseable {\n+\n+    private final OJElectronicsBridgeConfiguration config;\n+    private final Logger logger = LoggerFactory.getLogger(RefreshService.class);\n+    private final HttpClient httpClient;\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\").create();\n+    private final ScheduledExecutorService schedulerService;\n+\n+    private @Nullable Runnable connectionLost;\n+    private @Nullable Consumer<@Nullable GroupContentResponseModel> refreshDone;\n+    private @Nullable ScheduledFuture<?> scheduler;\n+    private @Nullable Runnable unauthorized;\n+    private String sessionId = \"\";\n+    private static boolean destroyed = false;\n+\n+    /**\n+     * Creates a new instance of {@link RefreshService}\n+     *\n+     * @param config Configuration of the bridge\n+     * @param httpClient HTTP client\n+     */\n+    public RefreshService(OJElectronicsBridgeConfiguration config, HttpClient httpClient,\n+            ScheduledExecutorService schedulerService) {\n+        this.config = config;\n+        this.httpClient = httpClient;\n+        this.schedulerService = schedulerService;\n+    }\n+\n+    /**\n+     * Starts refreshing all thing values\n+     *\n+     * @param sessionId Session-Id\n+     * @param refreshDone This method is called if refreshing is done.\n+     * @param connectionLosed This method is called if no connection could established.\n+     * @param unauthorized This method is called if the result is unauthorized.\n+     */\n+    public void start(String sessionId, Consumer<@Nullable GroupContentResponseModel> refreshDone,\n+            Runnable connectionLost, Runnable unauthorized) {\n+        logger.trace(\"RefreshService.startService({})\", sessionId);\n+        this.connectionLost = connectionLost;\n+        this.refreshDone = refreshDone;\n+        this.unauthorized = unauthorized;\n+        this.sessionId = sessionId;\n+        long refreshTime = config.refreshDelayInSeconds;\n+        scheduler = schedulerService.scheduleWithFixedDelay(this::refresh, refreshTime, refreshTime, TimeUnit.SECONDS);\n+        destroyed = false;\n+    }\n+\n+    /**\n+     * Stops refreshing.\n+     */\n+    public void stop() {\n+        destroyed = true;\n+        final ScheduledFuture<?> scheduler = this.scheduler;\n+        if (scheduler != null) {\n+            scheduler.cancel(false);\n+        }\n+        this.scheduler = null;\n+    }\n+\n+    private void refresh() {\n+        if (sessionId.equals(\"\")) {\n+            handleConnectionLost();\n+            return;\n+        }\n+        final Runnable unauthorized = this.unauthorized;\n+        createRequest().send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                if (!destroyed) {\n+                    if (result == null || result.isFailed()) {\n+                        handleConnectionLost();\n+                    } else if (result.getResponse().getStatus() == HttpStatus.FORBIDDEN_403) {\n+                        if (unauthorized != null) {\n+                            unauthorized.run();\n+                        }\n+                    } else {\n+                        handleRefreshDone(getContentAsString());\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    private Request createRequest() {\n+        Request request = httpClient.newRequest(config.apiUrl + \"/Group/GroupContents\").param(\"sessionid\", sessionId)\n+                .param(\"APIKEY\", config.apiKey).method(HttpMethod.GET);\n+        return request;\n+    }\n+\n+    private void handleRefreshDone(String responseBody) {\n+        final Consumer<@Nullable GroupContentResponseModel> refreshDone = this.refreshDone;\n+        if (refreshDone != null) {\n+            logger.trace(\"refresh {}\", responseBody);\n+            try {\n+                GroupContentResponseModel content = gson.fromJson(responseBody, GroupContentResponseModel.class);\n+                refreshDone.accept(content);\n+            } catch (JsonSyntaxException exception) {\n+                logger.error(\"Error mapping Result to model\", exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MTMzOA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTc4NjI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoxODoyNFrOGvTTMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODo1Mzo1M1rOGvdwyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MjQ2NQ==", "bodyText": "I would really not repeat OJ Electronics so often, it feels like bad commercial like this :-)", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452252465", "createdAt": "2020-07-09T14:18:24Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMzg4MA==", "bodyText": "Yes, I actually use it relatively often.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452423880", "createdAt": "2020-07-09T18:53:53Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MjQ2NQ=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTc5MTg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoxOTo0MlrOGvTWxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMzo1MTo1M1rOGwM9aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MzM4MA==", "bodyText": "Would it make sense to let the binding already map the numeric values to more meaningful strings, it will ease displaying on sitemaps and make rules etc more readable.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452253380", "createdAt": "2020-07-09T14:19:42Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">\n+\t\t\t\t<label>API Key</label>\n+\t\t\t\t<description>API-Key from your local distributor</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\" unit=\"s\">\n+\t\t\t\t<label>Refresh Delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"ojcloud\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>\n+\t\t<description>OJ Electronics OWD5/MWD5 Thermostat</description>\n+\t\t<category>RadiatorControl</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"floorTemperature\" typeId=\"floorTemperature\"/>\n+\t\t\t<channel id=\"roomTemperature\" typeId=\"roomTemperature\"/>\n+\t\t\t<channel id=\"groupName\" typeId=\"groupName\"/>\n+\t\t\t<channel id=\"groupId\" typeId=\"groupId\"/>\n+\t\t\t<channel id=\"online\" typeId=\"online\"/>\n+\t\t\t<channel id=\"heating\" typeId=\"heating\"/>\n+\t\t\t<channel id=\"thermostatName\" typeId=\"thermostatName\"/>\n+\t\t\t<channel id=\"regulationMode\" typeId=\"regulationMode\"/>\n+\t\t\t<channel id=\"comfortSetpoint\" typeId=\"comfortSetpoint\"/>\n+\t\t\t<channel id=\"comfortEndTime\" typeId=\"comfortEndTime\"/>\n+\t\t\t<channel id=\"boostEndTime\" typeId=\"boostEndTime\"/>\n+\t\t\t<channel id=\"manualSetpoint\" typeId=\"manualSetpoint\"/>\n+\t\t\t<channel id=\"vacationEnabled\" typeId=\"vacationEnabled\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t\t<description>Serial number of the thermostat. You can find the serial number in the app or on the thermostat itself.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"floorTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Floor Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"groupName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Group Name</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"groupId\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Group ID</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"online\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Online</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"heating\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Heating</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"roomTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"thermostatName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Thermostat Name</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"regulationMode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Regulation Mode</label>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Auto</option>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQzODQ3Mg==", "bodyText": "I don't know what you mean exactly. I think this is the mapping of numeric value. Or did you mean i should use string in here and map in the handler in source code?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452438472", "createdAt": "2020-07-09T19:22:06Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">\n+\t\t\t\t<label>API Key</label>\n+\t\t\t\t<description>API-Key from your local distributor</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\" unit=\"s\">\n+\t\t\t\t<label>Refresh Delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"ojcloud\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>\n+\t\t<description>OJ Electronics OWD5/MWD5 Thermostat</description>\n+\t\t<category>RadiatorControl</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"floorTemperature\" typeId=\"floorTemperature\"/>\n+\t\t\t<channel id=\"roomTemperature\" typeId=\"roomTemperature\"/>\n+\t\t\t<channel id=\"groupName\" typeId=\"groupName\"/>\n+\t\t\t<channel id=\"groupId\" typeId=\"groupId\"/>\n+\t\t\t<channel id=\"online\" typeId=\"online\"/>\n+\t\t\t<channel id=\"heating\" typeId=\"heating\"/>\n+\t\t\t<channel id=\"thermostatName\" typeId=\"thermostatName\"/>\n+\t\t\t<channel id=\"regulationMode\" typeId=\"regulationMode\"/>\n+\t\t\t<channel id=\"comfortSetpoint\" typeId=\"comfortSetpoint\"/>\n+\t\t\t<channel id=\"comfortEndTime\" typeId=\"comfortEndTime\"/>\n+\t\t\t<channel id=\"boostEndTime\" typeId=\"boostEndTime\"/>\n+\t\t\t<channel id=\"manualSetpoint\" typeId=\"manualSetpoint\"/>\n+\t\t\t<channel id=\"vacationEnabled\" typeId=\"vacationEnabled\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t\t<description>Serial number of the thermostat. You can find the serial number in the app or on the thermostat itself.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"floorTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Floor Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"groupName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Group Name</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"groupId\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Group ID</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"online\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Online</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"heating\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Heating</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"roomTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"thermostatName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Thermostat Name</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"regulationMode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Regulation Mode</label>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Auto</option>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MzM4MA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4NDM1MQ==", "bodyText": "Or did you mean i should use string in here and map in the handler in source code?\n\nIndeed sorry I was unclear :-)", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r452484351", "createdAt": "2020-07-09T20:54:50Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">\n+\t\t\t\t<label>API Key</label>\n+\t\t\t\t<description>API-Key from your local distributor</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\" unit=\"s\">\n+\t\t\t\t<label>Refresh Delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"ojcloud\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>\n+\t\t<description>OJ Electronics OWD5/MWD5 Thermostat</description>\n+\t\t<category>RadiatorControl</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"floorTemperature\" typeId=\"floorTemperature\"/>\n+\t\t\t<channel id=\"roomTemperature\" typeId=\"roomTemperature\"/>\n+\t\t\t<channel id=\"groupName\" typeId=\"groupName\"/>\n+\t\t\t<channel id=\"groupId\" typeId=\"groupId\"/>\n+\t\t\t<channel id=\"online\" typeId=\"online\"/>\n+\t\t\t<channel id=\"heating\" typeId=\"heating\"/>\n+\t\t\t<channel id=\"thermostatName\" typeId=\"thermostatName\"/>\n+\t\t\t<channel id=\"regulationMode\" typeId=\"regulationMode\"/>\n+\t\t\t<channel id=\"comfortSetpoint\" typeId=\"comfortSetpoint\"/>\n+\t\t\t<channel id=\"comfortEndTime\" typeId=\"comfortEndTime\"/>\n+\t\t\t<channel id=\"boostEndTime\" typeId=\"boostEndTime\"/>\n+\t\t\t<channel id=\"manualSetpoint\" typeId=\"manualSetpoint\"/>\n+\t\t\t<channel id=\"vacationEnabled\" typeId=\"vacationEnabled\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t\t<description>Serial number of the thermostat. You can find the serial number in the app or on the thermostat itself.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"floorTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Floor Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"groupName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Group Name</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"groupId\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Group ID</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"online\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Online</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"heating\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Heating</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"roomTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"thermostatName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Thermostat Name</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"regulationMode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Regulation Mode</label>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Auto</option>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MzM4MA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5NzE2MQ==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453197161", "createdAt": "2020-07-11T13:51:53Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,158 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"ojelectronics\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<!-- Bridge -->\n+\t<bridge-type id=\"ojcloud\">\n+\t\t<label>OJ Electronics Bridge</label>\n+\t\t<description>Bridge to access OJ Electronic devices.</description>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"userName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>User Name for access to OJ Electronics cloud service.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for access to OJ Electronics cloud service.</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiKey\" type=\"text\" required=\"true\" min=\"36\" max=\"36\">\n+\t\t\t\t<label>API Key</label>\n+\t\t\t\t<description>API-Key from your local distributor</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"apiUrl\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>API-URL</label>\n+\t\t\t\t<description>URL to cloud API-service.</description>\n+\t\t\t\t<context>url</context>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>https://OWD5-OJ001-App.ojelectronics.com/api</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshDelayInSeconds\" type=\"integer\" required=\"true\" min=\"15\" unit=\"s\">\n+\t\t\t\t<label>Refresh Delay</label>\n+\t\t\t\t<description>Refresh delay in seconds.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>30</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"customerId\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Customer ID</label>\n+\t\t\t\t<description>Customer ID</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"softwareVersion\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Software Version</label>\n+\t\t\t\t<description>Software Version</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>1060</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\t<thing-type id=\"owd5\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"ojcloud\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>OJ Electronics OWD5/MWD5 Thermostat</label>\n+\t\t<description>OJ Electronics OWD5/MWD5 Thermostat</description>\n+\t\t<category>RadiatorControl</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"floorTemperature\" typeId=\"floorTemperature\"/>\n+\t\t\t<channel id=\"roomTemperature\" typeId=\"roomTemperature\"/>\n+\t\t\t<channel id=\"groupName\" typeId=\"groupName\"/>\n+\t\t\t<channel id=\"groupId\" typeId=\"groupId\"/>\n+\t\t\t<channel id=\"online\" typeId=\"online\"/>\n+\t\t\t<channel id=\"heating\" typeId=\"heating\"/>\n+\t\t\t<channel id=\"thermostatName\" typeId=\"thermostatName\"/>\n+\t\t\t<channel id=\"regulationMode\" typeId=\"regulationMode\"/>\n+\t\t\t<channel id=\"comfortSetpoint\" typeId=\"comfortSetpoint\"/>\n+\t\t\t<channel id=\"comfortEndTime\" typeId=\"comfortEndTime\"/>\n+\t\t\t<channel id=\"boostEndTime\" typeId=\"boostEndTime\"/>\n+\t\t\t<channel id=\"manualSetpoint\" typeId=\"manualSetpoint\"/>\n+\t\t\t<channel id=\"vacationEnabled\" typeId=\"vacationEnabled\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t\t<description>Serial number of the thermostat. You can find the serial number in the app or on the thermostat itself.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"floorTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Floor Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"groupName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Group Name</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"groupId\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Group ID</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"online\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Online</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"heating\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Heating</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"roomTemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"thermostatName\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Thermostat Name</label>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"regulationMode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Regulation Mode</label>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"1\">Auto</option>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI1MzM4MA=="}, "originalCommit": {"oid": "6353e1d0e1aea865f8abb9f574fb19b7beb8778e"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjE0MjMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODozMToyMFrOGwOd9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxOToxMDo1OFrOGwOrFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMTg3OA==", "bodyText": "It seems you map to the capitalized values, or am I mistaken?", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453221878", "createdAt": "2020-07-11T18:31:20Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -121,13 +121,13 @@\n \t\t<label>Regulation Mode</label>\n \t\t<state readOnly=\"true\">\n \t\t\t<options>\n-\t\t\t\t<option value=\"Auto\">Auto</option>\n-\t\t\t\t<option value=\"Comfort\">Comfort</option>\n-\t\t\t\t<option value=\"Manual\">Manual</option>\n-\t\t\t\t<option value=\"Vacation\">Vacation</option>\n-\t\t\t\t<option value=\"Frost Protection\">Frost Protection</option>\n-\t\t\t\t<option value=\"Boost\">Boost</option>\n-\t\t\t\t<option value=\"Eco\">Eco</option>\n+\t\t\t\t<option value=\"auto\">Auto</option>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04b6369348011d9fdebcbdb0a957f350c0d94775"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyNTIzOA==", "bodyText": "You are right. I have to use lower case letters here and in source code too.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453225238", "createdAt": "2020-07-11T19:10:58Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -121,13 +121,13 @@\n \t\t<label>Regulation Mode</label>\n \t\t<state readOnly=\"true\">\n \t\t\t<options>\n-\t\t\t\t<option value=\"Auto\">Auto</option>\n-\t\t\t\t<option value=\"Comfort\">Comfort</option>\n-\t\t\t\t<option value=\"Manual\">Manual</option>\n-\t\t\t\t<option value=\"Vacation\">Vacation</option>\n-\t\t\t\t<option value=\"Frost Protection\">Frost Protection</option>\n-\t\t\t\t<option value=\"Boost\">Boost</option>\n-\t\t\t\t<option value=\"Eco\">Eco</option>\n+\t\t\t\t<option value=\"auto\">Auto</option>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMTg3OA=="}, "originalCommit": {"oid": "04b6369348011d9fdebcbdb0a957f350c0d94775"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjE0MzExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODozMjozMFrOGwOeWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODozMjozMFrOGwOeWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMTk3OA==", "bodyText": "Declare vars with their interface for the Collection types, so this should rather be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static HashMap<Integer, String> createRegulationMap() {\n          \n          \n            \n                private static Map<Integer, String> createRegulationMap() {", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453221978", "createdAt": "2020-07-11T18:32:30Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link ThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThermostatHandler extends BaseThingHandler {\n+\n+    private final String serialNumber;\n+    private @Nullable Thermostat currentThermostat;\n+    private static final Map<Integer, String> REGULATION_MODES = createRegulationMap();\n+    private final Map<String, Consumer<Thermostat>> channelrefreshActions = createChannelRefreshActionMap();\n+\n+    /**\n+     * Creates a new instance of {@link ThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public ThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            final Thermostat thermostat = currentThermostat;\n+            if (thermostat != null && channelrefreshActions.containsKey(channelUID.getId())) {\n+                channelrefreshActions.get(channelUID.getId()).accept(thermostat);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initializes the thing handler.\n+     */\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    /**\n+     * Sets the values after refreshing the thermostats values\n+     *\n+     * @param thermostat thermostat values\n+     */\n+    public void handleThermostatRefresh(Thermostat thermostat) {\n+        currentThermostat = thermostat;\n+        channelrefreshActions.forEach((channelUID, action) -> action.accept(thermostat));\n+    }\n+\n+    private void updateManualSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_MANUALSETPOINT,\n+                new QuantityType<Temperature>(thermostat.manualModeSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateBoostEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_BOOSTENDTIME,\n+                new DateTimeType(ZonedDateTime.ofInstant(thermostat.boostEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTENDTIME, new DateTimeType(\n+                ZonedDateTime.ofInstant(thermostat.comfortEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTSETPOINT,\n+                new QuantityType<Temperature>(thermostat.comfortSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRegulationMode(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_REGULATIONMODE,\n+                StringType.valueOf(getRegulationMode(thermostat.regulationMode)));\n+    }\n+\n+    private void updateThermostatName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_THERMOSTATNAME, StringType.valueOf(thermostat.thermostatName));\n+    }\n+\n+    private void updateFloorTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_FLOORTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.floorTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRoomTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ROOMTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.roomTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateHeating(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_HEATING,\n+                thermostat.heating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateOnline(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ONLINE,\n+                thermostat.online ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateGroupId(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPID, new DecimalType(thermostat.groupId));\n+    }\n+\n+    private void updateGroupName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPNAME, StringType.valueOf(thermostat.groupName));\n+    }\n+\n+    private String getRegulationMode(int regulationMode) {\n+        return REGULATION_MODES.get(regulationMode);\n+    }\n+\n+    private static HashMap<Integer, String> createRegulationMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7040b63cae57c31533d80b24a50b9e10b7c26ba7"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjE0MzYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxODozMjo1OVrOGwOelA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxOToxMzoyMFrOGwOr0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMjAzNg==", "bodyText": "Please use the diamond operator, ie replace the second occurrence of the same generic by <>\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashMap<Integer, String> map = new HashMap<Integer, String>();\n          \n          \n            \n                    Map<Integer, String> map = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453222036", "createdAt": "2020-07-11T18:32:59Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link ThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThermostatHandler extends BaseThingHandler {\n+\n+    private final String serialNumber;\n+    private @Nullable Thermostat currentThermostat;\n+    private static final Map<Integer, String> REGULATION_MODES = createRegulationMap();\n+    private final Map<String, Consumer<Thermostat>> channelrefreshActions = createChannelRefreshActionMap();\n+\n+    /**\n+     * Creates a new instance of {@link ThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public ThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            final Thermostat thermostat = currentThermostat;\n+            if (thermostat != null && channelrefreshActions.containsKey(channelUID.getId())) {\n+                channelrefreshActions.get(channelUID.getId()).accept(thermostat);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initializes the thing handler.\n+     */\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    /**\n+     * Sets the values after refreshing the thermostats values\n+     *\n+     * @param thermostat thermostat values\n+     */\n+    public void handleThermostatRefresh(Thermostat thermostat) {\n+        currentThermostat = thermostat;\n+        channelrefreshActions.forEach((channelUID, action) -> action.accept(thermostat));\n+    }\n+\n+    private void updateManualSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_MANUALSETPOINT,\n+                new QuantityType<Temperature>(thermostat.manualModeSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateBoostEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_BOOSTENDTIME,\n+                new DateTimeType(ZonedDateTime.ofInstant(thermostat.boostEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTENDTIME, new DateTimeType(\n+                ZonedDateTime.ofInstant(thermostat.comfortEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTSETPOINT,\n+                new QuantityType<Temperature>(thermostat.comfortSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRegulationMode(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_REGULATIONMODE,\n+                StringType.valueOf(getRegulationMode(thermostat.regulationMode)));\n+    }\n+\n+    private void updateThermostatName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_THERMOSTATNAME, StringType.valueOf(thermostat.thermostatName));\n+    }\n+\n+    private void updateFloorTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_FLOORTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.floorTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRoomTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ROOMTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.roomTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateHeating(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_HEATING,\n+                thermostat.heating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateOnline(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ONLINE,\n+                thermostat.online ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateGroupId(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPID, new DecimalType(thermostat.groupId));\n+    }\n+\n+    private void updateGroupName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPNAME, StringType.valueOf(thermostat.groupName));\n+    }\n+\n+    private String getRegulationMode(int regulationMode) {\n+        return REGULATION_MODES.get(regulationMode);\n+    }\n+\n+    private static HashMap<Integer, String> createRegulationMap() {\n+        HashMap<Integer, String> map = new HashMap<Integer, String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7040b63cae57c31533d80b24a50b9e10b7c26ba7"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyNTQyNw==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/7138#discussion_r453225427", "createdAt": "2020-07-11T19:13:20Z", "author": {"login": "EvilPingu"}, "path": "bundles/org.openhab.binding.ojelectronics/src/main/java/org/openhab/binding/ojelectronics/internal/ThermostatHandler.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ojelectronics.internal;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.ojelectronics.internal.config.OJElectronicsThermostatConfiguration;\n+import org.openhab.binding.ojelectronics.internal.models.groups.Thermostat;\n+\n+/**\n+ * The {@link ThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Christian Kittel - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThermostatHandler extends BaseThingHandler {\n+\n+    private final String serialNumber;\n+    private @Nullable Thermostat currentThermostat;\n+    private static final Map<Integer, String> REGULATION_MODES = createRegulationMap();\n+    private final Map<String, Consumer<Thermostat>> channelrefreshActions = createChannelRefreshActionMap();\n+\n+    /**\n+     * Creates a new instance of {@link ThermostatHandler}\n+     *\n+     * @param thing Thing\n+     */\n+    public ThermostatHandler(Thing thing) {\n+        super(thing);\n+        serialNumber = getConfigAs(OJElectronicsThermostatConfiguration.class).serialNumber;\n+    }\n+\n+    /**\n+     * Gets the thing's serial number.\n+     *\n+     * @return serial number\n+     */\n+    public String getSerialNumber() {\n+        return serialNumber;\n+    }\n+\n+    /**\n+     * Handles commands to this thing.\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            final Thermostat thermostat = currentThermostat;\n+            if (thermostat != null && channelrefreshActions.containsKey(channelUID.getId())) {\n+                channelrefreshActions.get(channelUID.getId()).accept(thermostat);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Initializes the thing handler.\n+     */\n+    @Override\n+    public void initialize() {\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    /**\n+     * Sets the values after refreshing the thermostats values\n+     *\n+     * @param thermostat thermostat values\n+     */\n+    public void handleThermostatRefresh(Thermostat thermostat) {\n+        currentThermostat = thermostat;\n+        channelrefreshActions.forEach((channelUID, action) -> action.accept(thermostat));\n+    }\n+\n+    private void updateManualSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_MANUALSETPOINT,\n+                new QuantityType<Temperature>(thermostat.manualModeSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateBoostEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_BOOSTENDTIME,\n+                new DateTimeType(ZonedDateTime.ofInstant(thermostat.boostEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortEndTime(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTENDTIME, new DateTimeType(\n+                ZonedDateTime.ofInstant(thermostat.comfortEndTime.toInstant(), ZoneId.systemDefault())));\n+    }\n+\n+    private void updateComfortSetpoint(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_COMFORTSETPOINT,\n+                new QuantityType<Temperature>(thermostat.comfortSetpoint / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRegulationMode(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_REGULATIONMODE,\n+                StringType.valueOf(getRegulationMode(thermostat.regulationMode)));\n+    }\n+\n+    private void updateThermostatName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_THERMOSTATNAME, StringType.valueOf(thermostat.thermostatName));\n+    }\n+\n+    private void updateFloorTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_FLOORTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.floorTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateRoomTemperature(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ROOMTEMPERATURE,\n+                new QuantityType<Temperature>(thermostat.roomTemperature / (double) 100, SIUnits.CELSIUS));\n+    }\n+\n+    private void updateHeating(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_HEATING,\n+                thermostat.heating ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateOnline(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_ONLINE,\n+                thermostat.online ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+    }\n+\n+    private void updateGroupId(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPID, new DecimalType(thermostat.groupId));\n+    }\n+\n+    private void updateGroupName(Thermostat thermostat) {\n+        updateState(BindingConstants.CHANNEL_OWD5_GROUPNAME, StringType.valueOf(thermostat.groupName));\n+    }\n+\n+    private String getRegulationMode(int regulationMode) {\n+        return REGULATION_MODES.get(regulationMode);\n+    }\n+\n+    private static HashMap<Integer, String> createRegulationMap() {\n+        HashMap<Integer, String> map = new HashMap<Integer, String>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyMjAzNg=="}, "originalCommit": {"oid": "7040b63cae57c31533d80b24a50b9e10b7c26ba7"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 675, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}