{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NzMyMDQ5", "number": 8390, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOToxOVrOEgG9Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjowNDoxMlrOEk1A_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTAzODk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/handler/HomieThingHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOToxOVrOHMysrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODoyOToxOVrOHMysrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NTU5Nw==", "bodyText": "I do not think, that this is a good idea.\nThe 5 second message is just a warning and the consequences are too big for me.", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r483175597", "createdAt": "2020-09-03T18:29:19Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/handler/HomieThingHandler.java", "diffHunk": "@@ -104,7 +105,7 @@ public void initialize() {\n             return;\n         }\n         device.initialize(config.basetopic, config.deviceid, thing.getChannels());\n-        super.initialize();\n+        scheduler.schedule(() -> super.initialize(), 0, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82094d32c6b0e2481f285d61f02dbae60cee3632"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA0OTgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Device.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozMTo0MlrOHMyz1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozMTo0MlrOHMyz1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3NzQzMA==", "bodyText": "This is not thread safe. So it will not guarantee solving the problem.\nOne thread might still be past the test and before setting the flag when the second call happens.\nHave a look into the java.util.concurrent.atomic.Atomic* classes to avoid this problem.", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r483177430", "createdAt": "2020-09-03T18:31:42Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Device.java", "diffHunk": "@@ -64,6 +64,7 @@\n     private String topic = \"\";\n     public String deviceID = \"\";\n     private boolean initialized = false;\n+    private boolean startingChannels = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82094d32c6b0e2481f285d61f02dbae60cee3632"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTA1ODEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Device.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozNDoyMlrOHMy5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxODozNDoyMlrOHMy5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzE3ODgwNQ==", "bodyText": "There is CompletableFuture.completedFuture(U value)\nFor line 151: There would have been CompletableFuture.failedFuture(Throwable ex)", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r483178805", "createdAt": "2020-09-03T18:34:22Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Device.java", "diffHunk": "@@ -140,14 +141,23 @@ public Device(ThingUID thingUID, DeviceCallback callback, DeviceAttributes attri\n      */\n     public CompletableFuture<@Nullable Void> startChannels(MqttBrokerConnection connection,\n             ScheduledExecutorService scheduler, int timeout, HomieThingHandler handler) {\n+        if (startingChannels) {\n+            CompletableFuture<@Nullable Void> c = new CompletableFuture<>();\n+            c.complete(null);\n+            return c;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82094d32c6b0e2481f285d61f02dbae60cee3632"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzM4MzE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Property.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNjo0MDo1OFrOHNqiow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNlQxNjo0MDo1OFrOHNqiow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5MDUzMQ==", "bodyText": "This is not the threadsafe way to do it.\nWe still try to start the channel a second time, if the first time has not finished yet....\nWe need to set starting to true before we try start it.\nSomething like:\nif (starting.getAndSet(true)) {\n   return CompletableFuture.completedFuture(null);\n}", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r484090531", "createdAt": "2020-09-06T16:40:58Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Property.java", "diffHunk": "@@ -262,6 +264,12 @@ public void createChannelFromAttribute() {\n      */\n     public CompletableFuture<@Nullable Void> startChannel(MqttBrokerConnection connection,\n             ScheduledExecutorService scheduler, int timeout) {\n+        if (started.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f52f3f355754cd812614384d013aabdaf8028c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDUyNzk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Property.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNjowNDoxMlrOHT_N2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxODoxODowNFrOHUtjFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyMDczMA==", "bodyText": "From what I can tell the fix should be in ChannelState.start() instead. It isn't thread safe and it is no surprise that you are seeing the issues that you are seeing.\nTry making these changes in ChannelState and see if it fixes your problem.\nprivate CompletableFuture<@Nullable Void> future = CompletableFuture.completedFuture(null);\nprivate final Object futureLock = new Object();\n\npublic CompletableFuture<@Nullable Void> start(MqttBrokerConnection connection, ScheduledExecutorService scheduler,\n            int timeout) {\n        sychronized(futureLock){\n          // if the connection is still the same, the subscription is still present, otherwise we need to renew\n          if ((hasSubscribed || !future.isDone()) && connection.equals(this.connection)) {\n              return future;\n          }\n          hasSubscribed = false;\n          \n          this.connection = connection;\n\n          if (StringUtils.isBlank(config.stateTopic)) {\n              return CompletableFuture.completedFuture(null);\n          }\n\n          this.future = new CompletableFuture<>();\n        }\n        connection.subscribe(config.stateTopic, this).thenRun(() -> {\n            hasSubscribed = true;\n            logger.debug(\"Subscribed channel {} to topic: {}\", this.channelUID, config.stateTopic);\n            if (timeout > 0 && !future.isDone()) {\n                this.scheduledFuture = scheduler.schedule(this::receivedOrTimeout, timeout, TimeUnit.MILLISECONDS);\n            } else {\n                receivedOrTimeout();\n            }\n        }).exceptionally(this::subscribeFail);\n        return future;\n    }", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r490720730", "createdAt": "2020-09-18T06:04:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Property.java", "diffHunk": "@@ -280,7 +286,7 @@ public void createChannelFromAttribute() {\n         }\n         // Make sure we set the callback again which might have been nulled during an stop\n         channelState.setChannelStateUpdateListener(this.callback);\n-        return channelState.start(connection, scheduler, timeout);\n+        return channelState.start(connection, scheduler, timeout).thenRun(() -> starting.set(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b60cd973b51bd5f1e246cc40b521452e41403f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3OTgyOA==", "bodyText": "Hi @cpmeister! Thanks for your suggestion, I've implemented it and it also works fine (I didn't expect anything else coming from you \ud83d\ude09)!\n@Hilbrand and @jochen314: what do you think? Should I commit the suggested changes?", "url": "https://github.com/openhab/openhab-addons/pull/8390#discussion_r491479828", "createdAt": "2020-09-19T18:18:04Z", "author": {"login": "bodiroga"}, "path": "bundles/org.openhab.binding.mqtt.homie/src/main/java/org/openhab/binding/mqtt/homie/internal/homie300/Property.java", "diffHunk": "@@ -280,7 +286,7 @@ public void createChannelFromAttribute() {\n         }\n         // Make sure we set the callback again which might have been nulled during an stop\n         channelState.setChannelStateUpdateListener(this.callback);\n-        return channelState.start(connection, scheduler, timeout);\n+        return channelState.start(connection, scheduler, timeout).thenRun(() -> starting.set(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcyMDczMA=="}, "originalCommit": {"oid": "92b60cd973b51bd5f1e246cc40b521452e41403f"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4419, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}