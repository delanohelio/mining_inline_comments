{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzkzNzk0", "number": 7767, "reviewThreads": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo0OTozN1rOD_POxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOToyOToxM1rOEBAtYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM2NDIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo0OTozN1rOGZybmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyOToxMVrOGZ-E5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5Mzg0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"socketTimeout\" type=\"integer\" min=\"5\" max=\"20\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"socketTimeout\" type=\"integer\" min=\"5\" max=\"20\" required=\"false\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429693848", "createdAt": "2020-05-25T00:49:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -26,14 +29,29 @@\n \t\t\t\t<label>Port Number</label>\n \t\t\t\t<description>Port number of the NeoHub</description>\n \t\t\t\t<default>4242</default>\n+\t\t\t\t<advanced>true</advanced>\n \t\t\t</parameter>\n \n-\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"10\" required=\"false\">\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"4\" max=\"60\" required=\"false\">\n \t\t\t\t<label>Polling Interval</label>\n \t\t\t\t<description>Time (seconds) between polling the NeoHub (min=4, max/default=60)</description>\n \t\t\t\t<default>60</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"socketTimeout\" type=\"integer\" min=\"5\" max=\"20\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NDY0Ng==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429884646", "createdAt": "2020-05-25T11:29:11Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -26,14 +29,29 @@\n \t\t\t\t<label>Port Number</label>\n \t\t\t\t<description>Port number of the NeoHub</description>\n \t\t\t\t<default>4242</default>\n+\t\t\t\t<advanced>true</advanced>\n \t\t\t</parameter>\n \n-\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"10\" required=\"false\">\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"4\" max=\"60\" required=\"false\">\n \t\t\t\t<label>Polling Interval</label>\n \t\t\t\t<description>Time (seconds) between polling the NeoHub (min=4, max/default=60)</description>\n \t\t\t\t<default>60</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"socketTimeout\" type=\"integer\" min=\"5\" max=\"20\" required=\"false\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5Mzg0OA=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM2NTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo1MTowNVrOGZycYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyOToyNlrOGZ-FYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NDA1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"4\" max=\"60\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"4\" max=\"60\" required=\"false\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429694051", "createdAt": "2020-05-25T00:51:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -26,14 +29,29 @@\n \t\t\t\t<label>Port Number</label>\n \t\t\t\t<description>Port number of the NeoHub</description>\n \t\t\t\t<default>4242</default>\n+\t\t\t\t<advanced>true</advanced>\n \t\t\t</parameter>\n \n-\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"10\" required=\"false\">\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"4\" max=\"60\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NDc2OA==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429884768", "createdAt": "2020-05-25T11:29:26Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -26,14 +29,29 @@\n \t\t\t\t<label>Port Number</label>\n \t\t\t\t<description>Port number of the NeoHub</description>\n \t\t\t\t<default>4242</default>\n+\t\t\t\t<advanced>true</advanced>\n \t\t\t</parameter>\n \n-\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"10\" required=\"false\">\n+\t\t\t<parameter name=\"pollingInterval\" type=\"integer\" min=\"4\" max=\"60\" required=\"false\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NDA1MQ=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM3MTcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubReadDcbResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo1ODoyOFrOGZyfng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMToyOTo0M1rOGZ-F_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NDg3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                @SerializedName(\"CORF\")\n          \n          \n            \n                private String degreesCorF;\n          \n          \n            \n                @SerializedName(\"CORF\")\n          \n          \n            \n                private @Nullable String degreesCorF;", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429694878", "createdAt": "2020-05-25T00:58:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubReadDcbResponse.java", "diffHunk": "@@ -23,15 +24,17 @@\n import com.google.gson.annotations.SerializedName;\n \n /**\n- * A wrapper around the JSON response to the JSON READ_DCB 100 request\n+ * A wrapper around the JSON response to the JSON READ_DCB and GET_SYSTEM\n+ * request\n  *\n  * @author Andrew Fiddian-Green - Initial contribution\n- * \n  */\n+@NonNullByDefault\n public class NeoHubReadDcbResponse {\n \n     private static final Gson GSON = new Gson();\n \n+    @Nullable\n     @SerializedName(\"CORF\")\n     private String degreesCorF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NDkyNw==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429884927", "createdAt": "2020-05-25T11:29:43Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubReadDcbResponse.java", "diffHunk": "@@ -23,15 +24,17 @@\n import com.google.gson.annotations.SerializedName;\n \n /**\n- * A wrapper around the JSON response to the JSON READ_DCB 100 request\n+ * A wrapper around the JSON response to the JSON READ_DCB and GET_SYSTEM\n+ * request\n  *\n  * @author Andrew Fiddian-Green - Initial contribution\n- * \n  */\n+@NonNullByDefault\n public class NeoHubReadDcbResponse {\n \n     private static final Gson GSON = new Gson();\n \n+    @Nullable\n     @SerializedName(\"CORF\")\n     private String degreesCorF;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NDg3OA=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM3MTg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubReadDcbResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo1ODo0MFrOGZyftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo1ODo0MFrOGZyftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NDkwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public static NeoHubReadDcbResponse createSystemData(String fromJson) throws JsonSyntaxException {\n          \n          \n            \n                public static @Nullable NeoHubReadDcbResponse createSystemData(String fromJson) throws JsonSyntaxException {", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429694901", "createdAt": "2020-05-25T00:58:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubReadDcbResponse.java", "diffHunk": "@@ -40,14 +43,15 @@\n     }\n \n     /**\n-     * Create wrapper around the JSON response\n+     * Create wrapper around a JSON string\n      * \n-     * @param response the JSON INFO request\n-     * @return a NeoHubReadDcbResponse wrapper around the JSON response\n+     * @param fromJson the JSON string\n+     * @return a NeoHubReadDcbResponse wrapper around the JSON string\n      * @throws JsonSyntaxException\n      * \n      */\n-    public static @Nullable NeoHubReadDcbResponse createReadDcbResponse(String response) throws JsonSyntaxException {\n-        return GSON.fromJson(response, NeoHubReadDcbResponse.class);\n+    @Nullable\n+    public static NeoHubReadDcbResponse createSystemData(String fromJson) throws JsonSyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM3MjAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMDo1ODo1NVrOGZyf0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTozMDoyNFrOGZ-HOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NDkyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                @Override\n          \n          \n            \n                public List<?> getDevices() {\n          \n          \n            \n                @Override\n          \n          \n            \n                public @Nullable List<? extends LiveDataRecord> getDevices() {\n          \n      \n    \n    \n  \n\nusing the ? extends LiveDataRecord generics basically makes the list readonly.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429694929", "createdAt": "2020-05-25T00:58:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * A wrapper around the JSON response to the JSON GET_LIVE_DATA request\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NeoHubLiveDeviceData extends NeoHubAbstractDeviceData {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    @Nullable\n+    @SerializedName(\"TIMESTAMP_ENGINEERS\")\n+    private BigDecimal timestampEngineers;\n+    @Nullable\n+    @SerializedName(\"TIMESTAMP_SYSTEM\")\n+    private BigDecimal timestampSystem;\n+\n+    @Nullable\n+    @SerializedName(\"devices\")\n+    private List<LiveDataRecord> deviceRecords;\n+\n+    @SuppressWarnings(\"null\")\n+    @NonNullByDefault\n+    public static class LiveDataRecord extends AbstractRecord {\n+\n+        // \"alternate\" is a special kludge for technical devices\n+        @Nullable\n+        @SerializedName(value = \"ZONE_NAME\", alternate = { \"device\" })\n+        private String deviceName;\n+        @Nullable\n+        @SerializedName(\"SET_TEMP\")\n+        private BigDecimal currentSetTemperature;\n+        @Nullable\n+        @SerializedName(\"ACTUAL_TEMP\")\n+        private BigDecimal currentTemperature;\n+        @Nullable\n+        @SerializedName(\"CURRENT_FLOOR_TEMPERATURE\")\n+        private BigDecimal currentFloorTemperature;\n+        @Nullable\n+        @SerializedName(\"WINDOW_OPEN\")\n+        private Boolean windowOpen;\n+        @Nullable\n+        @SerializedName(\"LOW_BATTERY\")\n+        private Boolean batteryLow;\n+        @Nullable\n+        @SerializedName(\"STANDBY\")\n+        private Boolean standby;\n+        @Nullable\n+        @SerializedName(\"HEATING\")\n+        private Boolean heating;\n+        @Nullable\n+        @SerializedName(\"PREHEAT\")\n+        private Boolean preHeat;\n+        @Nullable\n+        @SerializedName(\"TIMER_ON\")\n+        private Boolean timerOn;\n+        @Nullable\n+        @SerializedName(\"OFFLINE\")\n+        private Boolean offline;\n+        @Nullable\n+        @SerializedName(\"MANUAL_OFF\")\n+        private Boolean manualOff;\n+        @Nullable\n+        @SerializedName(\"MANUAL_ON\")\n+        private Boolean manualOn;\n+\n+        private boolean safeBoolean(@Nullable Boolean value) {\n+            return (value == null ? false : value.booleanValue());\n+        }\n+\n+        @Override\n+        public String getDeviceName() {\n+            String deviceName = this.deviceName;\n+            return deviceName != null ? deviceName : \"\";\n+        }\n+\n+        @Override\n+        public BigDecimal getTargetTemperature() {\n+            return safeBigDecimal(currentSetTemperature);\n+        }\n+\n+        @Override\n+        public BigDecimal getActualTemperature() {\n+            return safeBigDecimal(currentTemperature);\n+        }\n+\n+        @Override\n+        public BigDecimal getFloorTemperature() {\n+            return safeBigDecimal(currentFloorTemperature);\n+        }\n+\n+        @Override\n+        public boolean isStandby() {\n+            return safeBoolean(standby);\n+        }\n+\n+        @Override\n+        public boolean isHeating() {\n+            return safeBoolean(heating);\n+        }\n+\n+        @Override\n+        public boolean isPreHeating() {\n+            return safeBoolean(preHeat);\n+        }\n+\n+        @Override\n+        public boolean isTimerOn() {\n+            return safeBoolean(timerOn);\n+        }\n+\n+        @Override\n+        public boolean offline() {\n+            return safeBoolean(offline);\n+        }\n+\n+        @Override\n+        public boolean stateManual() {\n+            return safeBoolean(manualOn);\n+        }\n+\n+        @Override\n+        public boolean stateAuto() {\n+            return safeBoolean(manualOff);\n+        }\n+\n+        @Override\n+        public boolean isWindowOpen() {\n+            return safeBoolean(windowOpen);\n+        }\n+\n+        @Override\n+        public boolean isBatteryLow() {\n+            return safeBoolean(batteryLow);\n+        }\n+    }\n+\n+    public long getTimestampEngineers() {\n+        BigDecimal timestampEngineers = this.timestampEngineers;\n+        return timestampEngineers != null ? timestampEngineers.longValue() : 0;\n+    }\n+\n+    public long getTimestampSystem() {\n+        BigDecimal timestampSystem = this.timestampSystem;\n+        return timestampSystem != null ? timestampSystem.longValue() : 0;\n+    }\n+\n+    /**\n+     * Create wrapper around a JSON string\n+     * \n+     * @param fromJson the JSON string\n+     * @return a NeoHubGetLiveDataResponse wrapper around the JSON string\n+     * @throws JsonSyntaxException\n+     * \n+     */\n+    @Nullable\n+    public static NeoHubLiveDeviceData createDeviceData(String fromJson) throws JsonSyntaxException {\n+        return GSON.fromJson(fromJson, NeoHubLiveDeviceData.class);\n+    }\n+\n+    /**\n+     * returns the device record corresponding to a given device name\n+     * \n+     * @param deviceName the device name\n+     * @return its respective device record\n+     */\n+    @Nullable\n+    @Override\n+    public AbstractRecord getDeviceRecord(String deviceName) {\n+        List<LiveDataRecord> deviceRecords = this.deviceRecords;\n+        if (deviceRecords != null) {\n+            for (AbstractRecord deviceRecord : deviceRecords) {\n+                if (deviceName.equals(deviceRecord.getDeviceName())) {\n+                    return deviceRecord;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @return the full list of device records\n+     */\n+    @Nullable\n+    @Override\n+    public List<?> getDevices() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTI0MA==", "bodyText": "Ok", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429885240", "createdAt": "2020-05-25T11:30:24Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * A wrapper around the JSON response to the JSON GET_LIVE_DATA request\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NeoHubLiveDeviceData extends NeoHubAbstractDeviceData {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    @Nullable\n+    @SerializedName(\"TIMESTAMP_ENGINEERS\")\n+    private BigDecimal timestampEngineers;\n+    @Nullable\n+    @SerializedName(\"TIMESTAMP_SYSTEM\")\n+    private BigDecimal timestampSystem;\n+\n+    @Nullable\n+    @SerializedName(\"devices\")\n+    private List<LiveDataRecord> deviceRecords;\n+\n+    @SuppressWarnings(\"null\")\n+    @NonNullByDefault\n+    public static class LiveDataRecord extends AbstractRecord {\n+\n+        // \"alternate\" is a special kludge for technical devices\n+        @Nullable\n+        @SerializedName(value = \"ZONE_NAME\", alternate = { \"device\" })\n+        private String deviceName;\n+        @Nullable\n+        @SerializedName(\"SET_TEMP\")\n+        private BigDecimal currentSetTemperature;\n+        @Nullable\n+        @SerializedName(\"ACTUAL_TEMP\")\n+        private BigDecimal currentTemperature;\n+        @Nullable\n+        @SerializedName(\"CURRENT_FLOOR_TEMPERATURE\")\n+        private BigDecimal currentFloorTemperature;\n+        @Nullable\n+        @SerializedName(\"WINDOW_OPEN\")\n+        private Boolean windowOpen;\n+        @Nullable\n+        @SerializedName(\"LOW_BATTERY\")\n+        private Boolean batteryLow;\n+        @Nullable\n+        @SerializedName(\"STANDBY\")\n+        private Boolean standby;\n+        @Nullable\n+        @SerializedName(\"HEATING\")\n+        private Boolean heating;\n+        @Nullable\n+        @SerializedName(\"PREHEAT\")\n+        private Boolean preHeat;\n+        @Nullable\n+        @SerializedName(\"TIMER_ON\")\n+        private Boolean timerOn;\n+        @Nullable\n+        @SerializedName(\"OFFLINE\")\n+        private Boolean offline;\n+        @Nullable\n+        @SerializedName(\"MANUAL_OFF\")\n+        private Boolean manualOff;\n+        @Nullable\n+        @SerializedName(\"MANUAL_ON\")\n+        private Boolean manualOn;\n+\n+        private boolean safeBoolean(@Nullable Boolean value) {\n+            return (value == null ? false : value.booleanValue());\n+        }\n+\n+        @Override\n+        public String getDeviceName() {\n+            String deviceName = this.deviceName;\n+            return deviceName != null ? deviceName : \"\";\n+        }\n+\n+        @Override\n+        public BigDecimal getTargetTemperature() {\n+            return safeBigDecimal(currentSetTemperature);\n+        }\n+\n+        @Override\n+        public BigDecimal getActualTemperature() {\n+            return safeBigDecimal(currentTemperature);\n+        }\n+\n+        @Override\n+        public BigDecimal getFloorTemperature() {\n+            return safeBigDecimal(currentFloorTemperature);\n+        }\n+\n+        @Override\n+        public boolean isStandby() {\n+            return safeBoolean(standby);\n+        }\n+\n+        @Override\n+        public boolean isHeating() {\n+            return safeBoolean(heating);\n+        }\n+\n+        @Override\n+        public boolean isPreHeating() {\n+            return safeBoolean(preHeat);\n+        }\n+\n+        @Override\n+        public boolean isTimerOn() {\n+            return safeBoolean(timerOn);\n+        }\n+\n+        @Override\n+        public boolean offline() {\n+            return safeBoolean(offline);\n+        }\n+\n+        @Override\n+        public boolean stateManual() {\n+            return safeBoolean(manualOn);\n+        }\n+\n+        @Override\n+        public boolean stateAuto() {\n+            return safeBoolean(manualOff);\n+        }\n+\n+        @Override\n+        public boolean isWindowOpen() {\n+            return safeBoolean(windowOpen);\n+        }\n+\n+        @Override\n+        public boolean isBatteryLow() {\n+            return safeBoolean(batteryLow);\n+        }\n+    }\n+\n+    public long getTimestampEngineers() {\n+        BigDecimal timestampEngineers = this.timestampEngineers;\n+        return timestampEngineers != null ? timestampEngineers.longValue() : 0;\n+    }\n+\n+    public long getTimestampSystem() {\n+        BigDecimal timestampSystem = this.timestampSystem;\n+        return timestampSystem != null ? timestampSystem.longValue() : 0;\n+    }\n+\n+    /**\n+     * Create wrapper around a JSON string\n+     * \n+     * @param fromJson the JSON string\n+     * @return a NeoHubGetLiveDataResponse wrapper around the JSON string\n+     * @throws JsonSyntaxException\n+     * \n+     */\n+    @Nullable\n+    public static NeoHubLiveDeviceData createDeviceData(String fromJson) throws JsonSyntaxException {\n+        return GSON.fromJson(fromJson, NeoHubLiveDeviceData.class);\n+    }\n+\n+    /**\n+     * returns the device record corresponding to a given device name\n+     * \n+     * @param deviceName the device name\n+     * @return its respective device record\n+     */\n+    @Nullable\n+    @Override\n+    public AbstractRecord getDeviceRecord(String deviceName) {\n+        List<LiveDataRecord> deviceRecords = this.deviceRecords;\n+        if (deviceRecords != null) {\n+            for (AbstractRecord deviceRecord : deviceRecords) {\n+                if (deviceName.equals(deviceRecord.getDeviceName())) {\n+                    return deviceRecord;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @return the full list of device records\n+     */\n+    @Nullable\n+    @Override\n+    public List<?> getDevices() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NDkyOQ=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM3NDgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTowMjozNVrOGZyhbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTowMjozNVrOGZyhbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NTM0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                @SerializedName(\"devices\")\n          \n          \n            \n                private List<LiveDataRecord> deviceRecords;\n          \n          \n            \n                @SerializedName(\"devices\")\n          \n          \n            \n                private @Nullable List<LiveDataRecord> deviceRecords;", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429695341", "createdAt": "2020-05-25T01:02:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * A wrapper around the JSON response to the JSON GET_LIVE_DATA request\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NeoHubLiveDeviceData extends NeoHubAbstractDeviceData {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    @Nullable\n+    @SerializedName(\"TIMESTAMP_ENGINEERS\")\n+    private BigDecimal timestampEngineers;\n+    @Nullable\n+    @SerializedName(\"TIMESTAMP_SYSTEM\")\n+    private BigDecimal timestampSystem;\n+\n+    @Nullable\n+    @SerializedName(\"devices\")\n+    private List<LiveDataRecord> deviceRecords;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM3NTcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTowMzoyOVrOGZyh7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTowMzoyOVrOGZyh7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NTQ3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                @SerializedName(\"TIMESTAMP_ENGINEERS\")\n          \n          \n            \n                private BigDecimal timestampEngineers;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                @SerializedName(\"TIMESTAMP_SYSTEM\")\n          \n          \n            \n                private BigDecimal timestampSystem;\n          \n          \n            \n                @SerializedName(\"TIMESTAMP_ENGINEERS\")\n          \n          \n            \n                private @Nullable BigDecimal timestampEngineers;\n          \n          \n            \n                \n          \n          \n            \n                @SerializedName(\"TIMESTAMP_SYSTEM\")\n          \n          \n            \n                private @Nullable BigDecimal timestampSystem;\n          \n      \n    \n    \n  \n\nYou get the idea, please update elsewhere as applicable.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429695471", "createdAt": "2020-05-25T01:03:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * A wrapper around the JSON response to the JSON GET_LIVE_DATA request\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NeoHubLiveDeviceData extends NeoHubAbstractDeviceData {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    @Nullable\n+    @SerializedName(\"TIMESTAMP_ENGINEERS\")\n+    private BigDecimal timestampEngineers;\n+    @Nullable\n+    @SerializedName(\"TIMESTAMP_SYSTEM\")\n+    private BigDecimal timestampSystem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM4MDQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubInfoResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTowODo1N1rOGZykqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTowODo1N1rOGZykqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NjE3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                @Nullable\n          \n          \n            \n                public List<?> getDevices() {\n          \n          \n            \n                @Override\n          \n          \n            \n                public @Nullable List<? extends InfoRecord> getDevices() {", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429696171", "createdAt": "2020-05-25T01:08:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubInfoResponse.java", "diffHunk": "@@ -29,155 +30,198 @@\n  * @author Andrew Fiddian-Green - Refactoring for openHAB v2.x\n  * \n  */\n-public class NeoHubInfoResponse {\n+@NonNullByDefault\n+public class NeoHubInfoResponse extends NeoHubAbstractDeviceData {\n \n     private static final Gson GSON = new GsonBuilder()\n             .registerTypeAdapter(NeohubBool.class, new NeohubBoolDeserializer()).create();\n \n+    @Nullable\n     @SerializedName(\"devices\")\n-    private List<DeviceInfo> deviceInfos;\n+    private List<InfoRecord> deviceRecords;\n \n+    @SuppressWarnings(\"null\")\n+    @NonNullByDefault\n     static class StatMode {\n+        @Nullable\n         @SerializedName(\"MANUAL_OFF\")\n         private NeohubBool manualOff;\n+        @Nullable\n         @SerializedName(\"MANUAL_ON\")\n         private NeohubBool manualOn;\n \n-        private Boolean stateManualOn() {\n+        private boolean stateManualOn() {\n+            NeohubBool manualOn = this.manualOn;\n             return (manualOn == null ? false : manualOn.value);\n         }\n \n-        private Boolean stateManualOff() {\n+        private boolean stateManualOff() {\n+            NeohubBool manualOff = this.manualOff;\n             return (manualOff == null ? false : manualOff.value);\n         }\n     }\n \n-    public static class DeviceInfo {\n-\n+    @SuppressWarnings(\"null\")\n+    @NonNullByDefault\n+    public static class InfoRecord extends AbstractRecord {\n+        @Nullable\n         @SerializedName(\"device\")\n         private String deviceName;\n+        @Nullable\n         @SerializedName(\"CURRENT_SET_TEMPERATURE\")\n         private BigDecimal currentSetTemperature;\n+        @Nullable\n         @SerializedName(\"CURRENT_TEMPERATURE\")\n         private BigDecimal currentTemperature;\n+        @Nullable\n         @SerializedName(\"CURRENT_FLOOR_TEMPERATURE\")\n         private BigDecimal currentFloorTemperature;\n+        @Nullable\n         @SerializedName(\"COOL_INP\")\n         private NeohubBool coolInput;\n+        @Nullable\n         @SerializedName(\"LOW_BATTERY\")\n         private NeohubBool batteryLow;\n+        @Nullable\n         @SerializedName(\"STANDBY\")\n         private NeohubBool standby;\n+        @Nullable\n         @SerializedName(\"HEATING\")\n         private NeohubBool heating;\n+        @Nullable\n         @SerializedName(\"PREHEAT\")\n         private NeohubBool preHeat;\n+        @Nullable\n         @SerializedName(\"TIMER\")\n         private NeohubBool timerOn;\n+        @Nullable\n         @SerializedName(\"DEVICE_TYPE\")\n         private BigDecimal deviceType;\n         @SerializedName(\"OFFLINE\")\n+        @Nullable\n         private NeohubBool offline;\n+        @Nullable\n         @SerializedName(\"STAT_MODE\")\n         private StatMode statMode = new StatMode();\n \n-        protected Boolean safeBoolean(NeohubBool value) {\n+        private boolean safeBoolean(@Nullable NeohubBool value) {\n             return (value == null ? false : value.value);\n         }\n \n-        protected BigDecimal safeBigDecimal(BigDecimal value) {\n-            return value != null ? value : BigDecimal.ZERO;\n-        }\n-\n+        @Override\n         public String getDeviceName() {\n+            String deviceName = this.deviceName;\n             return deviceName != null ? deviceName : \"\";\n         }\n \n+        @Override\n         public BigDecimal getTargetTemperature() {\n             return safeBigDecimal(currentSetTemperature);\n         }\n \n-        public BigDecimal getRoomTemperature() {\n+        @Override\n+        public BigDecimal getActualTemperature() {\n             return safeBigDecimal(currentTemperature);\n         }\n \n+        @Override\n         public BigDecimal getFloorTemperature() {\n             return safeBigDecimal(currentFloorTemperature);\n         }\n \n-        public BigDecimal getDeviceType() {\n-            return safeBigDecimal(deviceType);\n-        }\n-\n-        public Boolean isStandby() {\n+        @Override\n+        public boolean isStandby() {\n             return safeBoolean(standby);\n         }\n \n-        public Boolean isHeating() {\n+        @Override\n+        public boolean isHeating() {\n             return safeBoolean(heating);\n         }\n \n-        public Boolean isPreHeating() {\n+        @Override\n+        public boolean isPreHeating() {\n             return safeBoolean(preHeat);\n         }\n \n-        public Boolean isTimerOn() {\n+        @Override\n+        public boolean isTimerOn() {\n             return safeBoolean(timerOn);\n         }\n \n-        public Boolean isOffline() {\n+        @Override\n+        public boolean offline() {\n             return safeBoolean(offline);\n         }\n \n-        public Boolean stateManual() {\n+        @Override\n+        public boolean stateManual() {\n+            StatMode statMode = this.statMode;\n             return (statMode != null && statMode.stateManualOn());\n         }\n \n-        public Boolean stateAuto() {\n+        @Override\n+        public boolean stateAuto() {\n+            StatMode statMode = this.statMode;\n             return (statMode != null && statMode.stateManualOff());\n         }\n \n-        public Boolean isCoolInputOn() {\n+        @Override\n+        public boolean isWindowOpen() {\n+            // legacy API misuses the cool input parameter\n             return safeBoolean(coolInput);\n         }\n \n-        public Boolean isBatteryLow() {\n+        @Override\n+        public boolean isBatteryLow() {\n             return safeBoolean(batteryLow);\n         }\n+\n+        public int getDeviceType() {\n+            BigDecimal deviceType = this.deviceType;\n+            return deviceType != null ? deviceType.intValue() : -1;\n+        }\n     }\n \n     /**\n-     * Create wrapper around the JSON response\n+     * Create wrapper around a JSON string\n      * \n-     * @param response the JSON INFO request\n-     * @return a NeoHubInfoResponse wrapper around the JSON response\n+     * @param fromJson the JSON string\n+     * @return a NeoHubInfoResponse wrapper around the JSON\n      * @throws JsonSyntaxException\n      * \n      */\n-    public static @Nullable NeoHubInfoResponse createInfoResponse(String response) throws JsonSyntaxException {\n-        return GSON.fromJson(response, NeoHubInfoResponse.class);\n+    @Nullable\n+    public static NeoHubInfoResponse createDeviceData(String fromJson) throws JsonSyntaxException {\n+        return GSON.fromJson(fromJson, NeoHubInfoResponse.class);\n     }\n \n-    /*\n-     * returns the DeviceInfo corresponding to a given device name\n+    /**\n+     * returns the device record corresponding to a given device name\n      * \n      * @param deviceName the device name\n-     * \n-     * @return its respective DeviceInfo\n+     * @return its respective device record\n      */\n-    public DeviceInfo getDeviceInfo(String deviceName) {\n-        for (DeviceInfo d : deviceInfos) {\n-            if (deviceName.equals(d.getDeviceName())) {\n-                return d;\n+    @Override\n+    @Nullable\n+    public AbstractRecord getDeviceRecord(String deviceName) {\n+        List<InfoRecord> deviceRecords = this.deviceRecords;\n+        if (deviceRecords != null) {\n+            for (AbstractRecord deviceRecord : deviceRecords) {\n+                if (deviceName.equals(deviceRecord.getDeviceName())) {\n+                    return deviceRecord;\n+                }\n             }\n         }\n         return null;\n     }\n \n-    /*\n-     * @return the full list of DeviceInfo objects\n+    /**\n+     * @return the full list of device records\n      */\n-    public List<DeviceInfo> getDevices() {\n-        return deviceInfos;\n+    @Override\n+    @Nullable\n+    public List<?> getDevices() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 245}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM4NDIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubAbstractDeviceData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMToxMjozMlrOGZymxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTozMToyMVrOGZ-Inw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NjcwOA==", "bodyText": "Why not be more specific on the return type?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public abstract List<?> getDevices();\n          \n          \n            \n                public abstract List<? extends AbstractRecord> getDevices();", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429696708", "createdAt": "2020-05-25T01:12:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubAbstractDeviceData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * An abstract prototype for wrappers around JSON responses to JSON INFO or\n+ * GET_LIVE_DATA requests\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class NeoHubAbstractDeviceData {\n+\n+    @SuppressWarnings(\"null\")\n+    @NonNullByDefault\n+    public abstract static class AbstractRecord {\n+\n+        public abstract String getDeviceName();\n+\n+        public abstract BigDecimal getTargetTemperature();\n+\n+        public abstract BigDecimal getActualTemperature();\n+\n+        public abstract BigDecimal getFloorTemperature();\n+\n+        public abstract boolean isStandby();\n+\n+        public abstract boolean isHeating();\n+\n+        public abstract boolean isPreHeating();\n+\n+        public abstract boolean isTimerOn();\n+\n+        public abstract boolean offline();\n+\n+        public abstract boolean stateManual();\n+\n+        public abstract boolean stateAuto();\n+\n+        public abstract boolean isWindowOpen();\n+\n+        public abstract boolean isBatteryLow();\n+\n+        protected BigDecimal safeBigDecimal(@Nullable BigDecimal value) {\n+            return value != null ? value : BigDecimal.ZERO;\n+        }\n+    }\n+\n+    /**\n+     * returns the device record corresponding to a given device name\n+     * \n+     * @param deviceName the device name\n+     * @return its respective device record\n+     */\n+    @Nullable\n+    public abstract AbstractRecord getDeviceRecord(String deviceName);\n+\n+    /**\n+     * @return the full list of device records\n+     */\n+    @Nullable\n+    public abstract List<?> getDevices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTU5OQ==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429885599", "createdAt": "2020-05-25T11:31:21Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubAbstractDeviceData.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * An abstract prototype for wrappers around JSON responses to JSON INFO or\n+ * GET_LIVE_DATA requests\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class NeoHubAbstractDeviceData {\n+\n+    @SuppressWarnings(\"null\")\n+    @NonNullByDefault\n+    public abstract static class AbstractRecord {\n+\n+        public abstract String getDeviceName();\n+\n+        public abstract BigDecimal getTargetTemperature();\n+\n+        public abstract BigDecimal getActualTemperature();\n+\n+        public abstract BigDecimal getFloorTemperature();\n+\n+        public abstract boolean isStandby();\n+\n+        public abstract boolean isHeating();\n+\n+        public abstract boolean isPreHeating();\n+\n+        public abstract boolean isTimerOn();\n+\n+        public abstract boolean offline();\n+\n+        public abstract boolean stateManual();\n+\n+        public abstract boolean stateAuto();\n+\n+        public abstract boolean isWindowOpen();\n+\n+        public abstract boolean isBatteryLow();\n+\n+        protected BigDecimal safeBigDecimal(@Nullable BigDecimal value) {\n+            return value != null ? value : BigDecimal.ZERO;\n+        }\n+    }\n+\n+    /**\n+     * returns the device record corresponding to a given device name\n+     * \n+     * @param deviceName the device name\n+     * @return its respective device record\n+     */\n+    @Nullable\n+    public abstract AbstractRecord getDeviceRecord(String deviceName);\n+\n+    /**\n+     * @return the full list of device records\n+     */\n+    @Nullable\n+    public abstract List<?> getDevices();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NjcwOA=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM4OTg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMToxODo1OVrOGZyqHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTozMTozM1rOGZ-I5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NzU2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private HashMap<String, Boolean> connectionStates = new HashMap<>();\n          \n          \n            \n                private Map<String, Boolean> connectionStates = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429697567", "createdAt": "2020-05-25T01:18:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -42,18 +48,33 @@\n  * @author Sebastian Prehn - Initial contribution (v1.x hub communication)\n  *\n  */\n+@NonNullByDefault\n public class NeoHubHandler extends BaseBridgeHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(NeoHubHandler.class);\n \n+    @Nullable\n     private NeoHubConfiguration config;\n+    @Nullable\n     private NeoHubSocket socket;\n-\n+    @Nullable\n     private ScheduledFuture<?> lazyPollingScheduler;\n+    @Nullable\n     private ScheduledFuture<?> fastPollingScheduler;\n \n     private final AtomicInteger fastPollingCallsToGo = new AtomicInteger();\n \n+    private Unit<?> temperatureUnit = SIUnits.CELSIUS;\n+\n+    private boolean isLegacyApiSelected = true;\n+    private boolean isApiOnline = false;\n+\n+    private boolean systemDataDirty = true;\n+    private long systemTimestamp = -1;\n+    private Instant systemLastRefreshed = Instant.now().minusSeconds(3600);\n+\n+    private HashMap<String, Boolean> connectionStates = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTY2OA==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429885668", "createdAt": "2020-05-25T11:31:33Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -42,18 +48,33 @@\n  * @author Sebastian Prehn - Initial contribution (v1.x hub communication)\n  *\n  */\n+@NonNullByDefault\n public class NeoHubHandler extends BaseBridgeHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(NeoHubHandler.class);\n \n+    @Nullable\n     private NeoHubConfiguration config;\n+    @Nullable\n     private NeoHubSocket socket;\n-\n+    @Nullable\n     private ScheduledFuture<?> lazyPollingScheduler;\n+    @Nullable\n     private ScheduledFuture<?> fastPollingScheduler;\n \n     private final AtomicInteger fastPollingCallsToGo = new AtomicInteger();\n \n+    private Unit<?> temperatureUnit = SIUnits.CELSIUS;\n+\n+    private boolean isLegacyApiSelected = true;\n+    private boolean isApiOnline = false;\n+\n+    private boolean systemDataDirty = true;\n+    private long systemTimestamp = -1;\n+    private Instant systemLastRefreshed = Instant.now().minusSeconds(3600);\n+\n+    private HashMap<String, Boolean> connectionStates = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5NzU2Nw=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjM5MTU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubBindingConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMToyMTowNFrOGZyrMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTozMTo0NFrOGZ-JRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5Nzg0MQ==", "bodyText": "I would prefer if you changed this field to a compiled Pattern and used the compiled pattern for your regex operations.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429697841", "createdAt": "2020-05-25T01:21:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubBindingConstants.java", "diffHunk": "@@ -78,6 +85,25 @@\n      */\n     public static final String CHAN_TEMPERATURE_SENSOR = \"sensorTemperature\";\n \n+    /*\n+     * Heatmiser Device Types\n+     */\n+    public static final int HEATMISER_DEVICE_TYPE_CONTACT = 5;\n+    public static final int HEATMISER_DEVICE_TYPE_PLUG = 6;\n+    public static final int HEATMISER_DEVICE_TYPE_REPEATER = 10;\n+    public static final int HEATMISER_DEVICE_TYPE_TEMPERATURE_SENSOR = 14;\n+\n+    /*\n+     * configuration parameters\n+     */\n+    public static final String PARAM_HOLD_ONLINE_STATE = \"holdOnlineState\";\n+\n+    /*\n+     * regular expressions\n+     */\n+    public static final String REGEX_HEATMISER_REPEATER = \"^repeaternode\\\\d+\";\n+    public static final String REGEX_IP_ADDRESS = \"\\\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\\\.|$)){4}\\\\b\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTc2NQ==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429885765", "createdAt": "2020-05-25T11:31:44Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubBindingConstants.java", "diffHunk": "@@ -78,6 +85,25 @@\n      */\n     public static final String CHAN_TEMPERATURE_SENSOR = \"sensorTemperature\";\n \n+    /*\n+     * Heatmiser Device Types\n+     */\n+    public static final int HEATMISER_DEVICE_TYPE_CONTACT = 5;\n+    public static final int HEATMISER_DEVICE_TYPE_PLUG = 6;\n+    public static final int HEATMISER_DEVICE_TYPE_REPEATER = 10;\n+    public static final int HEATMISER_DEVICE_TYPE_TEMPERATURE_SENSOR = 14;\n+\n+    /*\n+     * configuration parameters\n+     */\n+    public static final String PARAM_HOLD_ONLINE_STATE = \"holdOnlineState\";\n+\n+    /*\n+     * regular expressions\n+     */\n+    public static final String REGEX_HEATMISER_REPEATER = \"^repeaternode\\\\d+\";\n+    public static final String REGEX_IP_ADDRESS = \"\\\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\\\.|$)){4}\\\\b\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY5Nzg0MQ=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQxMjgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTo0NDowN1rOGZy3-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTozMjowMVrOGZ-JuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMTExNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The NeoHub (bridge) binding allows you to connect openHab via TCP/IP to Heatmiser's NeoHub and integrate your Heatmiser smart thermostats, smart plugs, and accessories onto the bus.\n          \n          \n            \n            The NeoHub (bridge) binding allows you to connect openHab via TCP/IP to Heatmiser's NeoHub and integrate your Heatmiser smart thermostats, smart plugs, and accessories.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429701115", "createdAt": "2020-05-25T01:44:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/README.md", "diffHunk": "@@ -1,53 +1,64 @@\n # NeoHub Binding\n \n This is a binding for integrating Heatmiser room and underfloor heating control products.\n-The NeoHub (bridge) binding allows you to connect openHab via TCP/IP to Heatmiser's NeoHub and integrate your NeoStat smart thermostats and NeoPlug smart plugs onto the bus.\n+The NeoHub (bridge) binding allows you to connect openHab via TCP/IP to Heatmiser's NeoHub and integrate your Heatmiser smart thermostats, smart plugs, and accessories onto the bus.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTg4MQ==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429885881", "createdAt": "2020-05-25T11:32:01Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/README.md", "diffHunk": "@@ -1,53 +1,64 @@\n # NeoHub Binding\n \n This is a binding for integrating Heatmiser room and underfloor heating control products.\n-The NeoHub (bridge) binding allows you to connect openHab via TCP/IP to Heatmiser's NeoHub and integrate your NeoStat smart thermostats and NeoPlug smart plugs onto the bus.\n+The NeoHub (bridge) binding allows you to connect openHab via TCP/IP to Heatmiser's NeoHub and integrate your Heatmiser smart thermostats, smart plugs, and accessories onto the bus.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMTExNQ=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjQxODE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMTo0ODo1MlrOGZy7BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTozMjoxNFrOGZ-KOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMTg5Mg==", "bodyText": "Java will automatically handle boxing/unboxing for you. Usually I'd prefer if you used a primitive boolean instead but in this case you are using boxed boolean logic so I'll allow you to keep it as boxed. At the very least, don't use new Boolean.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        Boolean online = new Boolean(!((AbstractRecord) device).offline());\n          \n          \n            \n                                        Boolean online = !((AbstractRecord) device).offline();", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429701892", "createdAt": "2020-05-25T01:48:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +319,71 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<?> devices;\n+            State state;\n+\n+            if ((devices = deviceData.getDevices()) == null) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {\n+                    int onlineDeviceCount = 0;\n+\n+                    for (Object device : devices) {\n+                        if (device instanceof AbstractRecord) {\n+                            String deviceName = ((AbstractRecord) device).getDeviceName();\n+                            Boolean online = new Boolean(!((AbstractRecord) device).offline());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NjAxMQ==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r429886011", "createdAt": "2020-05-25T11:32:14Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +319,71 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<?> devices;\n+            State state;\n+\n+            if ((devices = deviceData.getDevices()) == null) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {\n+                    int onlineDeviceCount = 0;\n+\n+                    for (Object device : devices) {\n+                        if (device instanceof AbstractRecord) {\n+                            String deviceName = ((AbstractRecord) device).getDeviceName();\n+                            Boolean online = new Boolean(!((AbstractRecord) device).offline());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMTg5Mg=="}, "originalCommit": {"oid": "82d74c13fddd6ef6b961977802c633cb9d62a92d"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk1MDIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/test/java/org/openhab/binding/neohub/test/NeoHubTestData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzoyNzo1M1rOGaK_lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTozOToxNFrOGaWg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NjI3OA==", "bodyText": "Rather than a \"main\" unit test method I would prefer if each of these methods were their own unit test.\nI guess this would be ok if each of these tests rely on the state left by a prior state. If that is not the case please add a @Test annotation to each of these test methods.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430096278", "createdAt": "2020-05-25T23:27:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/test/java/org/openhab/binding/neohub/test/NeoHubTestData.java", "diffHunk": "@@ -17,197 +17,372 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.openhab.binding.neohub.internal.NeoHubBindingConstants.*;\n \n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n import java.math.BigDecimal;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n import org.eclipse.smarthome.core.library.unit.SIUnits;\n import org.junit.Test;\n+import org.openhab.binding.neohub.internal.NeoHubAbstractDeviceData;\n+import org.openhab.binding.neohub.internal.NeoHubAbstractDeviceData.AbstractRecord;\n+import org.openhab.binding.neohub.internal.NeoHubGetEngineersData;\n import org.openhab.binding.neohub.internal.NeoHubInfoResponse;\n-import org.openhab.binding.neohub.internal.NeoHubInfoResponse.DeviceInfo;\n+import org.openhab.binding.neohub.internal.NeoHubInfoResponse.InfoRecord;\n+import org.openhab.binding.neohub.internal.NeoHubLiveDeviceData;\n import org.openhab.binding.neohub.internal.NeoHubReadDcbResponse;\n+import org.openhab.binding.neohub.internal.NeoHubSocket;\n \n /**\n  * The {@link NeoHubTestData} class defines common constants, which are used\n  * across the whole binding.\n  *\n  * @author Andrew Fiddian-Green - Initial contribution\n  */\n+@NonNullByDefault\n public class NeoHubTestData {\n \n-    public static final String NEOHUB_JSON_TEST_STRING = \"{\\\"devices\\\":[\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":23,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"22.2\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"22.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"2:42\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Dining Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"22.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":23,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"24.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"23.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"REMOTE_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":4,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Shower Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":26,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"23.3\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":16,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"25.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"20.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"3:48\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Conservatory\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":28,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"22.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"24.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"19.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"3:16\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":2,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":23,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"23.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"20.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"2:08\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":6,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Kitchen\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":17,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"20.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"20.1\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"21.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"20.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"7 days 00:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Hallway\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"10.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"17.3\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":10,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"19.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"16.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"7 days 08:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":5,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Shed\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":1,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_ON\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":11,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Plug South\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_ON\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":true,\\\"TIME_CLOCK_OVERIDE_BIT\\\":true,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":7,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Plug North\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":1,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":28,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Watering System\\\"}\"\n-            + \"]}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_NEW_OFFLINE_JSON = \"{\\\"devices\\\":[\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":21,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"24.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"24.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"3:24\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Dining Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"22.9\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":23,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"26.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"23.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"REMOTE_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Shower Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":23,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"25.7\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":16,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"26.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Conservatory\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":27,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"25.7\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"26.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"3:24\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":19,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"21.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"23.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"24.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"20.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Kitchen\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":19,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"20.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.7\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 22:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Hallway\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"9.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.4\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":9,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"22.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"15.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"4 days 08:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":5,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":1,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Shed Heating\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":1,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_ON\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":11,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room South\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_ON\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":true,\\\"TIME_CLOCK_OVERIDE_BIT\\\":true,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":192,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room North\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":1,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":57,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Green Wall Watering\\\"}\"\n-            + \"]}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_READ_DCB_CELSIUS = \"{\\\"AIR_ALT_DELAY\\\":60,\\\"AIR_ALT_DELAY_END\\\":6,\\\"AIR_ALT_DELAY_START\\\":23,\\\"ALT_TIMER_FORMAT\\\":1,\\\"AWAY\\\":false,\\\"BOOTTIME\\\":1587842223,\\\"CLOSE_DELAY\\\":null,\\\"COOLBOX\\\":\\\"heating\\\",\\\"COOLBOX_PRESENT\\\":0,\\\"CORF\\\":\\\"C\\\",\\\"DATE\\\":\\\"Apr 30\\\",\\\"DEVICE_ID\\\":\\\"NeoHub\\\",\\\"DSTAUTO\\\":true,\\\"DSTON\\\":true,\\\"EXTENDED_HISTORY\\\":\\\"off\\\",\\\"Firmware version\\\":2134,\\\"GDEVLIST\\\":[1,2,3,4,5,6,7,8,9,10],\\\"GLOBAL_SYSTEM_TYPE\\\":\\\"HeatOnly\\\",\\\"HEATING_LEVELS\\\":4,\\\"HEATORCOOL\\\":\\\"HEAT\\\",\\\"Homekit\\\":true,\\\"LAST_RECONNECT\\\":191959,\\\"LAST_RECONNECT_TIME\\\":1588034182,\\\"NTP\\\":\\\"Running\\\",\\\"OPEN_DELAY\\\":null,\\\"PARTITION COUNT\\\":\\\"4\\\",\\\"PROGFORMAT\\\":1,\\\"SET_GLOBAL_HC_MODE\\\":\\\"heating\\\",\\\"TIME\\\":\\\"16:24:35\\\",\\\"TIMEZONE\\\":0.0,\\\"UPTIME\\\":418052,\\\"ZIGBEE_CHANNEL\\\":\\\"15\\\"}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_READ_DCB_FAHRENHEIT = \"{\\\"AIR_ALT_DELAY\\\":60,\\\"AIR_ALT_DELAY_END\\\":6,\\\"AIR_ALT_DELAY_START\\\":23,\\\"ALT_TIMER_FORMAT\\\":1,\\\"AWAY\\\":false,\\\"BOOTTIME\\\":1587842223,\\\"CLOSE_DELAY\\\":null,\\\"COOLBOX\\\":\\\"heating\\\",\\\"COOLBOX_PRESENT\\\":0,\\\"CORF\\\":\\\"F\\\",\\\"DATE\\\":\\\"Apr 30\\\",\\\"DEVICE_ID\\\":\\\"NeoHub\\\",\\\"DSTAUTO\\\":true,\\\"DSTON\\\":true,\\\"EXTENDED_HISTORY\\\":\\\"off\\\",\\\"Firmware version\\\":2134,\\\"GDEVLIST\\\":[1,2,3,4,5,6,7,8,9,10],\\\"GLOBAL_SYSTEM_TYPE\\\":\\\"HeatOnly\\\",\\\"HEATING_LEVELS\\\":4,\\\"HEATORCOOL\\\":\\\"HEAT\\\",\\\"Homekit\\\":true,\\\"LAST_RECONNECT\\\":191959,\\\"LAST_RECONNECT_TIME\\\":1588034182,\\\"NTP\\\":\\\"Running\\\",\\\"OPEN_DELAY\\\":null,\\\"PARTITION COUNT\\\":\\\"4\\\",\\\"PROGFORMAT\\\":1,\\\"SET_GLOBAL_HC_MODE\\\":\\\"heating\\\",\\\"TIME\\\":\\\"16:24:35\\\",\\\"TIMEZONE\\\":0.0,\\\"UPTIME\\\":418052,\\\"ZIGBEE_CHANNEL\\\":\\\"15\\\"}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_READ_DCB_CORF_MISSING = \"{\\\"AIR_ALT_DELAY\\\":60,\\\"AIR_ALT_DELAY_END\\\":6,\\\"AIR_ALT_DELAY_START\\\":23,\\\"ALT_TIMER_FORMAT\\\":1,\\\"AWAY\\\":false,\\\"BOOTTIME\\\":1587842223,\\\"CLOSE_DELAY\\\":null,\\\"COOLBOX\\\":\\\"heating\\\",\\\"COOLBOX_PRESENT\\\":0,\\\"DATE\\\":\\\"Apr 30\\\",\\\"DEVICE_ID\\\":\\\"NeoHub\\\",\\\"DSTAUTO\\\":true,\\\"DSTON\\\":true,\\\"EXTENDED_HISTORY\\\":\\\"off\\\",\\\"Firmware version\\\":2134,\\\"GDEVLIST\\\":[1,2,3,4,5,6,7,8,9,10],\\\"GLOBAL_SYSTEM_TYPE\\\":\\\"HeatOnly\\\",\\\"HEATING_LEVELS\\\":4,\\\"HEATORCOOL\\\":\\\"HEAT\\\",\\\"Homekit\\\":true,\\\"LAST_RECONNECT\\\":191959,\\\"LAST_RECONNECT_TIME\\\":1588034182,\\\"NTP\\\":\\\"Running\\\",\\\"OPEN_DELAY\\\":null,\\\"PARTITION COUNT\\\":\\\"4\\\",\\\"PROGFORMAT\\\":1,\\\"SET_GLOBAL_HC_MODE\\\":\\\"heating\\\",\\\"TIME\\\":\\\"16:24:35\\\",\\\"TIMEZONE\\\":0.0,\\\"UPTIME\\\":418052,\\\"ZIGBEE_CHANNEL\\\":\\\"15\\\"}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_READ_DCB_CORF_EMPTY = \"{\\\"AIR_ALT_DELAY\\\":60,\\\"AIR_ALT_DELAY_END\\\":6,\\\"AIR_ALT_DELAY_START\\\":23,\\\"ALT_TIMER_FORMAT\\\":1,\\\"AWAY\\\":false,\\\"BOOTTIME\\\":1587842223,\\\"CLOSE_DELAY\\\":null,\\\"COOLBOX\\\":\\\"heating\\\",\\\"COOLBOX_PRESENT\\\":0,\\\"CORF\\\":\\\"\\\",\\\"DATE\\\":\\\"Apr 30\\\",\\\"DEVICE_ID\\\":\\\"NeoHub\\\",\\\"DSTAUTO\\\":true,\\\"DSTON\\\":true,\\\"EXTENDED_HISTORY\\\":\\\"off\\\",\\\"Firmware version\\\":2134,\\\"GDEVLIST\\\":[1,2,3,4,5,6,7,8,9,10],\\\"GLOBAL_SYSTEM_TYPE\\\":\\\"HeatOnly\\\",\\\"HEATING_LEVELS\\\":4,\\\"HEATORCOOL\\\":\\\"HEAT\\\",\\\"Homekit\\\":true,\\\"LAST_RECONNECT\\\":191959,\\\"LAST_RECONNECT_TIME\\\":1588034182,\\\"NTP\\\":\\\"Running\\\",\\\"OPEN_DELAY\\\":null,\\\"PARTITION COUNT\\\":\\\"4\\\",\\\"PROGFORMAT\\\":1,\\\"SET_GLOBAL_HC_MODE\\\":\\\"heating\\\",\\\"TIME\\\":\\\"16:24:35\\\",\\\"TIMEZONE\\\":0.0,\\\"UPTIME\\\":418052,\\\"ZIGBEE_CHANNEL\\\":\\\"15\\\"}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_INFO_SENSORS_CLOSED = \"{\\\"devices\\\":[\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":20,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"20.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.8\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":12,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"20.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"19.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 19:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"5:13\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":89,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.5\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":14,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Master Bedroom\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":22,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"12.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.5\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":12,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"1717\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"22.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 23:55\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":26,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Bathroom Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":22,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"12.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":24,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 22:30\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"1:02\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":27,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Ensuite Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"20.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":14,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Nursery\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"0.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":5,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Back Door\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"0.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":5,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Nursery Window\\\"}\"\n-            + \"]}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_INFO_SENSORS_OPEN = \"{\\\"devices\\\":[\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":20,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"7.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.8\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":12,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"20.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"19.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"5:13\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":true,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":90,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.5\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":14,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Master Bedroom\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":22,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"12.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":12,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"1717\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"22.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 23:55\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":26,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Bathroom Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":22,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"12.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":24,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 22:30\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"1:02\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":27,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Ensuite Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"20.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":14,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Nursery\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":true,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"0.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":5,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":true,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Back Door\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":true,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"0.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":5,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":true,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Nursery Window\\\"}]}\";\n+    /*\n+     * Load the test JSON payload string from a file\n+     */\n+    private String load(String fileName) {\n+        try (FileReader file = new FileReader(String.format(\"src/test/resources/%s.json\", fileName));\n+                BufferedReader reader = new BufferedReader(file)) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line).append(\"\\n\");\n+            }\n+            return builder.toString();\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n+        }\n+        return \"\";\n+    }\n \n+    /*\n+     * The main unit test method\n+     */\n     @Test\n     public void test() {\n-        // info response (old JSON format)\n-        NeoHubInfoResponse infoResponse = NeoHubInfoResponse.createInfoResponse(NEOHUB_JSON_TEST_STRING);\n+        testInfoJsonOld();\n+        testInfoJsonNew();\n+        testReadDcbJson();\n+        testInfoJsonWithSensors();\n+        testGetSystemJson();\n+        testGetLiveDataJson();\n+        testGetEngineersJson();\n+        testCommunications();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4NTAyMA==", "bodyText": "Ok. { I will do this in [siemensrds] as well.. }", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430285020", "createdAt": "2020-05-26T09:39:14Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/test/java/org/openhab/binding/neohub/test/NeoHubTestData.java", "diffHunk": "@@ -17,197 +17,372 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.openhab.binding.neohub.internal.NeoHubBindingConstants.*;\n \n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n import java.math.BigDecimal;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n import org.eclipse.smarthome.core.library.unit.SIUnits;\n import org.junit.Test;\n+import org.openhab.binding.neohub.internal.NeoHubAbstractDeviceData;\n+import org.openhab.binding.neohub.internal.NeoHubAbstractDeviceData.AbstractRecord;\n+import org.openhab.binding.neohub.internal.NeoHubGetEngineersData;\n import org.openhab.binding.neohub.internal.NeoHubInfoResponse;\n-import org.openhab.binding.neohub.internal.NeoHubInfoResponse.DeviceInfo;\n+import org.openhab.binding.neohub.internal.NeoHubInfoResponse.InfoRecord;\n+import org.openhab.binding.neohub.internal.NeoHubLiveDeviceData;\n import org.openhab.binding.neohub.internal.NeoHubReadDcbResponse;\n+import org.openhab.binding.neohub.internal.NeoHubSocket;\n \n /**\n  * The {@link NeoHubTestData} class defines common constants, which are used\n  * across the whole binding.\n  *\n  * @author Andrew Fiddian-Green - Initial contribution\n  */\n+@NonNullByDefault\n public class NeoHubTestData {\n \n-    public static final String NEOHUB_JSON_TEST_STRING = \"{\\\"devices\\\":[\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":23,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"22.2\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"22.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"2:42\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Dining Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"22.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":23,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"24.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"23.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"REMOTE_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":4,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Shower Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":26,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"23.3\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":16,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"25.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"20.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"3:48\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Conservatory\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":28,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"22.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"24.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"19.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"3:16\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":2,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":23,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"23.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"20.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"6 days 23:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"2:08\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":6,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Kitchen\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":17,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"20.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"20.1\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"21.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"20.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"7 days 00:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Hallway\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"10.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"17.3\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":10,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"19.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"16.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"7 days 08:00\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":5,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":20,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Shed\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":1,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_ON\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":11,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Plug South\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_ON\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":true,\\\"TIME_CLOCK_OVERIDE_BIT\\\":true,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":7,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Plug North\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":1,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":false,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":28,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Watering System\\\"}\"\n-            + \"]}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_NEW_OFFLINE_JSON = \"{\\\"devices\\\":[\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":21,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"24.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"24.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"3:24\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Dining Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"22.9\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":23,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"26.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"23.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"REMOTE_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Shower Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":23,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"25.7\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":16,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"26.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Conservatory\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":27,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"22.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"25.7\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"26.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"3:24\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":19,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"21.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"23.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"24.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"20.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 23:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Kitchen\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":19,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"20.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.7\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":21,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"3 days 22:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AND_FLOOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Hallway\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":23,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"9.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.4\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":12,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":9,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"22.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"15.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"4 days 08:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":5,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":24,\\\"WRITE_COUNT\\\":1,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Shed Heating\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":1,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_ON\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":11,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room South\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_ON\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":true,\\\"TIME_CLOCK_OVERIDE_BIT\\\":true,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":192,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room North\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":127,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"255.255\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":6,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":1,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"255.255\\\",\\\"MIN_TEMPERATURE\\\":\\\"255.255\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"24HOURSFIXED\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":79,\\\"WRITE_COUNT\\\":57,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Green Wall Watering\\\"}\"\n-            + \"]}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_READ_DCB_CELSIUS = \"{\\\"AIR_ALT_DELAY\\\":60,\\\"AIR_ALT_DELAY_END\\\":6,\\\"AIR_ALT_DELAY_START\\\":23,\\\"ALT_TIMER_FORMAT\\\":1,\\\"AWAY\\\":false,\\\"BOOTTIME\\\":1587842223,\\\"CLOSE_DELAY\\\":null,\\\"COOLBOX\\\":\\\"heating\\\",\\\"COOLBOX_PRESENT\\\":0,\\\"CORF\\\":\\\"C\\\",\\\"DATE\\\":\\\"Apr 30\\\",\\\"DEVICE_ID\\\":\\\"NeoHub\\\",\\\"DSTAUTO\\\":true,\\\"DSTON\\\":true,\\\"EXTENDED_HISTORY\\\":\\\"off\\\",\\\"Firmware version\\\":2134,\\\"GDEVLIST\\\":[1,2,3,4,5,6,7,8,9,10],\\\"GLOBAL_SYSTEM_TYPE\\\":\\\"HeatOnly\\\",\\\"HEATING_LEVELS\\\":4,\\\"HEATORCOOL\\\":\\\"HEAT\\\",\\\"Homekit\\\":true,\\\"LAST_RECONNECT\\\":191959,\\\"LAST_RECONNECT_TIME\\\":1588034182,\\\"NTP\\\":\\\"Running\\\",\\\"OPEN_DELAY\\\":null,\\\"PARTITION COUNT\\\":\\\"4\\\",\\\"PROGFORMAT\\\":1,\\\"SET_GLOBAL_HC_MODE\\\":\\\"heating\\\",\\\"TIME\\\":\\\"16:24:35\\\",\\\"TIMEZONE\\\":0.0,\\\"UPTIME\\\":418052,\\\"ZIGBEE_CHANNEL\\\":\\\"15\\\"}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_READ_DCB_FAHRENHEIT = \"{\\\"AIR_ALT_DELAY\\\":60,\\\"AIR_ALT_DELAY_END\\\":6,\\\"AIR_ALT_DELAY_START\\\":23,\\\"ALT_TIMER_FORMAT\\\":1,\\\"AWAY\\\":false,\\\"BOOTTIME\\\":1587842223,\\\"CLOSE_DELAY\\\":null,\\\"COOLBOX\\\":\\\"heating\\\",\\\"COOLBOX_PRESENT\\\":0,\\\"CORF\\\":\\\"F\\\",\\\"DATE\\\":\\\"Apr 30\\\",\\\"DEVICE_ID\\\":\\\"NeoHub\\\",\\\"DSTAUTO\\\":true,\\\"DSTON\\\":true,\\\"EXTENDED_HISTORY\\\":\\\"off\\\",\\\"Firmware version\\\":2134,\\\"GDEVLIST\\\":[1,2,3,4,5,6,7,8,9,10],\\\"GLOBAL_SYSTEM_TYPE\\\":\\\"HeatOnly\\\",\\\"HEATING_LEVELS\\\":4,\\\"HEATORCOOL\\\":\\\"HEAT\\\",\\\"Homekit\\\":true,\\\"LAST_RECONNECT\\\":191959,\\\"LAST_RECONNECT_TIME\\\":1588034182,\\\"NTP\\\":\\\"Running\\\",\\\"OPEN_DELAY\\\":null,\\\"PARTITION COUNT\\\":\\\"4\\\",\\\"PROGFORMAT\\\":1,\\\"SET_GLOBAL_HC_MODE\\\":\\\"heating\\\",\\\"TIME\\\":\\\"16:24:35\\\",\\\"TIMEZONE\\\":0.0,\\\"UPTIME\\\":418052,\\\"ZIGBEE_CHANNEL\\\":\\\"15\\\"}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_READ_DCB_CORF_MISSING = \"{\\\"AIR_ALT_DELAY\\\":60,\\\"AIR_ALT_DELAY_END\\\":6,\\\"AIR_ALT_DELAY_START\\\":23,\\\"ALT_TIMER_FORMAT\\\":1,\\\"AWAY\\\":false,\\\"BOOTTIME\\\":1587842223,\\\"CLOSE_DELAY\\\":null,\\\"COOLBOX\\\":\\\"heating\\\",\\\"COOLBOX_PRESENT\\\":0,\\\"DATE\\\":\\\"Apr 30\\\",\\\"DEVICE_ID\\\":\\\"NeoHub\\\",\\\"DSTAUTO\\\":true,\\\"DSTON\\\":true,\\\"EXTENDED_HISTORY\\\":\\\"off\\\",\\\"Firmware version\\\":2134,\\\"GDEVLIST\\\":[1,2,3,4,5,6,7,8,9,10],\\\"GLOBAL_SYSTEM_TYPE\\\":\\\"HeatOnly\\\",\\\"HEATING_LEVELS\\\":4,\\\"HEATORCOOL\\\":\\\"HEAT\\\",\\\"Homekit\\\":true,\\\"LAST_RECONNECT\\\":191959,\\\"LAST_RECONNECT_TIME\\\":1588034182,\\\"NTP\\\":\\\"Running\\\",\\\"OPEN_DELAY\\\":null,\\\"PARTITION COUNT\\\":\\\"4\\\",\\\"PROGFORMAT\\\":1,\\\"SET_GLOBAL_HC_MODE\\\":\\\"heating\\\",\\\"TIME\\\":\\\"16:24:35\\\",\\\"TIMEZONE\\\":0.0,\\\"UPTIME\\\":418052,\\\"ZIGBEE_CHANNEL\\\":\\\"15\\\"}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_READ_DCB_CORF_EMPTY = \"{\\\"AIR_ALT_DELAY\\\":60,\\\"AIR_ALT_DELAY_END\\\":6,\\\"AIR_ALT_DELAY_START\\\":23,\\\"ALT_TIMER_FORMAT\\\":1,\\\"AWAY\\\":false,\\\"BOOTTIME\\\":1587842223,\\\"CLOSE_DELAY\\\":null,\\\"COOLBOX\\\":\\\"heating\\\",\\\"COOLBOX_PRESENT\\\":0,\\\"CORF\\\":\\\"\\\",\\\"DATE\\\":\\\"Apr 30\\\",\\\"DEVICE_ID\\\":\\\"NeoHub\\\",\\\"DSTAUTO\\\":true,\\\"DSTON\\\":true,\\\"EXTENDED_HISTORY\\\":\\\"off\\\",\\\"Firmware version\\\":2134,\\\"GDEVLIST\\\":[1,2,3,4,5,6,7,8,9,10],\\\"GLOBAL_SYSTEM_TYPE\\\":\\\"HeatOnly\\\",\\\"HEATING_LEVELS\\\":4,\\\"HEATORCOOL\\\":\\\"HEAT\\\",\\\"Homekit\\\":true,\\\"LAST_RECONNECT\\\":191959,\\\"LAST_RECONNECT_TIME\\\":1588034182,\\\"NTP\\\":\\\"Running\\\",\\\"OPEN_DELAY\\\":null,\\\"PARTITION COUNT\\\":\\\"4\\\",\\\"PROGFORMAT\\\":1,\\\"SET_GLOBAL_HC_MODE\\\":\\\"heating\\\",\\\"TIME\\\":\\\"16:24:35\\\",\\\"TIMEZONE\\\":0.0,\\\"UPTIME\\\":418052,\\\"ZIGBEE_CHANNEL\\\":\\\"15\\\"}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_INFO_SENSORS_CLOSED = \"{\\\"devices\\\":[\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":20,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"20.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.8\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":12,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"20.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"19.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 19:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"5:13\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":89,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.5\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":14,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Master Bedroom\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":22,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"12.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.5\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":12,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"1717\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"22.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 23:55\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":26,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Bathroom Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":22,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"12.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":24,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 22:30\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"1:02\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":27,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Ensuite Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"20.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":14,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Nursery\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"0.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":5,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Back Door\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"0.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":5,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Nursery Window\\\"}\"\n-            + \"]}\";\n-\n-    public static final String NEOHUB_JSON_TEST_STRING_INFO_SENSORS_OPEN = \"{\\\"devices\\\":[\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":20,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"7.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.8\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":12,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"20.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"19.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"255 days 255:255\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"5:13\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":true,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":90,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Living Room Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"19.5\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":14,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Master Bedroom\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":22,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"12.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":12,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"1717\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"22.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 23:55\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"255:255\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":26,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Bathroom Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":22,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"12.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"21.6\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":1,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":24,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"23.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"21.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"5 days 22:30\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"1:02\\\",\\\"PROGRAM_MODE\\\":\\\"5DAY/2DAY\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"FLOOR_SENSOR_ONLY\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":108,\\\"WRITE_COUNT\\\":27,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":true,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Ensuite Floor\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":false,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"20.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":14,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":false,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"THERMOSTAT\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Nursery\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":true,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"0.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":5,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":true,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Back Door\\\"},\"\n-            + \"{\\\"AWAY\\\":false,\\\"COOLING\\\":false,\\\"COOLING_ENABLED\\\":false,\\\"COOLING_TEMPERATURE_IN_WHOLE_DEGREES\\\":0,\\\"COOL_INP\\\":true,\\\"COUNT_DOWN_TIME\\\":\\\"0:00\\\",\\\"CRADLE_PAIRED_TO_REMOTE_SENSOR\\\":false,\\\"CRADLE_PAIRED_TO_STAT\\\":false,\\\"CURRENT_FLOOR_TEMPERATURE\\\":0,\\\"CURRENT_SET_TEMPERATURE\\\":\\\"0.0\\\",\\\"CURRENT_TEMPERATURE\\\":\\\"0.0\\\",\\\"DEMAND\\\":false,\\\"DEVICE_TYPE\\\":5,\\\"ENABLE_BOILER\\\":false,\\\"ENABLE_COOLING\\\":false,\\\"ENABLE_PUMP\\\":false,\\\"ENABLE_VALVE\\\":false,\\\"ENABLE_ZONE\\\":false,\\\"FAILSAFE_STATE\\\":false,\\\"FAIL_SAFE_ENABLED\\\":false,\\\"FLOOR_LIMIT\\\":false,\\\"FULL/PARTIAL_LOCK_AVAILABLE\\\":false,\\\"HEAT/COOL_MODE\\\":false,\\\"HEATING\\\":false,\\\"HOLD_TEMPERATURE\\\":0,\\\"HOLD_TIME\\\":\\\"0:00\\\",\\\"HOLIDAY\\\":false,\\\"HOLIDAY_DAYS\\\":0,\\\"HUMIDITY\\\":0,\\\"LOCK\\\":false,\\\"LOCK_PIN_NUMBER\\\":\\\"0000\\\",\\\"LOW_BATTERY\\\":true,\\\"MAX_TEMPERATURE\\\":\\\"0.0\\\",\\\"MIN_TEMPERATURE\\\":\\\"0.0\\\",\\\"MODULATION_LEVEL\\\":0,\\\"NEXT_ON_TIME\\\":\\\"0 days 00:00\\\",\\\"OFFLINE\\\":0,\\\"OUPUT_DELAY\\\":false,\\\"OUTPUT_DELAY\\\":0,\\\"PREHEAT\\\":false,\\\"PREHEAT_TIME\\\":\\\"0:00\\\",\\\"PROGRAM_MODE\\\":\\\"NONPROGRAMMABLE\\\",\\\"PUMP_DELAY\\\":false,\\\"RADIATORS_OR_UNDERFLOOR\\\":false,\\\"SENSOR_SELECTION\\\":\\\"BUILT_IN_AIR_SENSOR\\\",\\\"SET_COUNTDOWN_TIME\\\":0,\\\"STANDBY\\\":false,\\\"STAT_MODE\\\":{\\\"4_HEAT_LEVELS\\\":true,\\\"MANUAL_OFF\\\":true,\\\"TIMECLOCK\\\":true},\\\"TEMPERATURE_FORMAT\\\":false,\\\"TEMP_HOLD\\\":false,\\\"TIMECLOCK_MODE\\\":false,\\\"TIMER\\\":false,\\\"TIME_CLOCK_OVERIDE_BIT\\\":false,\\\"ULTRA_VERSION\\\":0,\\\"VERSION_NUMBER\\\":0,\\\"WRITE_COUNT\\\":0,\\\"ZONE_1PAIRED_TO_MULTILINK\\\":false,\\\"ZONE_1_OR_2\\\":false,\\\"ZONE_2_PAIRED_TO_MULTILINK\\\":false,\\\"device\\\":\\\"Nursery Window\\\"}]}\";\n+    /*\n+     * Load the test JSON payload string from a file\n+     */\n+    private String load(String fileName) {\n+        try (FileReader file = new FileReader(String.format(\"src/test/resources/%s.json\", fileName));\n+                BufferedReader reader = new BufferedReader(file)) {\n+            StringBuilder builder = new StringBuilder();\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                builder.append(line).append(\"\\n\");\n+            }\n+            return builder.toString();\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n+        }\n+        return \"\";\n+    }\n \n+    /*\n+     * The main unit test method\n+     */\n     @Test\n     public void test() {\n-        // info response (old JSON format)\n-        NeoHubInfoResponse infoResponse = NeoHubInfoResponse.createInfoResponse(NEOHUB_JSON_TEST_STRING);\n+        testInfoJsonOld();\n+        testInfoJsonNew();\n+        testReadDcbJson();\n+        testInfoJsonWithSensors();\n+        testGetSystemJson();\n+        testGetLiveDataJson();\n+        testGetEngineersJson();\n+        testCommunications();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NjI3OA=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk1MjQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubAbstractDeviceData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzozMDoyOVrOGaLA_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo0Nzo0NFrOGaW0oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NjYzNg==", "bodyText": "Why is this warning suppressed here?", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430096636", "createdAt": "2020-05-25T23:30:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubAbstractDeviceData.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * An abstract prototype for wrappers around JSON responses to JSON INFO or\n+ * GET_LIVE_DATA requests\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class NeoHubAbstractDeviceData {\n+\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5MDA4MA==", "bodyText": "This is due to a conflict between the Eclipse compiler and the MVN command line compiler. The outer class is marked @NonNullByDefault so by definition the inner class inherits this annotation, and therefore @NonNullByDefault is not necessary explicitly on the inner class. However MVN raises an error that @NonNullByDefault must be applied. Whereas Eclipse raises an error that @NonNullByDefault must not be applied. And so I apply @SuppressWarnings(\"null\") to make them both happy :)\n@NonNullByDefault\npublic abstract class NeoHubAbstractDeviceData {\n\n    @SuppressWarnings(\"null\")\n    @NonNullByDefault\n    public abstract static class AbstractRecord {", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430290080", "createdAt": "2020-05-26T09:47:44Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubAbstractDeviceData.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * An abstract prototype for wrappers around JSON responses to JSON INFO or\n+ * GET_LIVE_DATA requests\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class NeoHubAbstractDeviceData {\n+\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5NjYzNg=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2Mjk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0MToyM1rOGaLG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDowMzoyOFrOGaXXvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODE1NQ==", "bodyText": "Why is this needed?", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430098155", "createdAt": "2020-05-25T23:41:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * A wrapper around the JSON response to the JSON GET_LIVE_DATA request\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NeoHubLiveDeviceData extends NeoHubAbstractDeviceData {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    @SerializedName(\"TIMESTAMP_ENGINEERS\")\n+    private @Nullable BigDecimal timestampEngineers;\n+    @SerializedName(\"TIMESTAMP_SYSTEM\")\n+    private @Nullable BigDecimal timestampSystem;\n+\n+    @SerializedName(\"devices\")\n+    private @Nullable List<LiveDataRecord> deviceRecords;\n+\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5OTA2OQ==", "bodyText": "ditto", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430299069", "createdAt": "2020-05-26T10:03:28Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubLiveDeviceData.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * A wrapper around the JSON response to the JSON GET_LIVE_DATA request\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NeoHubLiveDeviceData extends NeoHubAbstractDeviceData {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    @SerializedName(\"TIMESTAMP_ENGINEERS\")\n+    private @Nullable BigDecimal timestampEngineers;\n+    @SerializedName(\"TIMESTAMP_SYSTEM\")\n+    private @Nullable BigDecimal timestampSystem;\n+\n+    @SerializedName(\"devices\")\n+    private @Nullable List<LiveDataRecord> deviceRecords;\n+\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODE1NQ=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2MzM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubInfoResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0MTo1OVrOGaLHKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDowMzo0NlrOGaXYaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODIxNg==", "bodyText": "same question", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430098216", "createdAt": "2020-05-25T23:41:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubInfoResponse.java", "diffHunk": "@@ -29,155 +30,179 @@\n  * @author Andrew Fiddian-Green - Refactoring for openHAB v2.x\n  * \n  */\n-public class NeoHubInfoResponse {\n+@NonNullByDefault\n+public class NeoHubInfoResponse extends NeoHubAbstractDeviceData {\n \n     private static final Gson GSON = new GsonBuilder()\n             .registerTypeAdapter(NeohubBool.class, new NeohubBoolDeserializer()).create();\n \n     @SerializedName(\"devices\")\n-    private List<DeviceInfo> deviceInfos;\n+    private @Nullable List<InfoRecord> deviceRecords;\n \n+    @SuppressWarnings(\"null\")\n+    @NonNullByDefault\n     static class StatMode {\n         @SerializedName(\"MANUAL_OFF\")\n-        private NeohubBool manualOff;\n+        private @Nullable NeohubBool manualOff;\n         @SerializedName(\"MANUAL_ON\")\n-        private NeohubBool manualOn;\n+        private @Nullable NeohubBool manualOn;\n \n-        private Boolean stateManualOn() {\n+        private boolean stateManualOn() {\n+            NeohubBool manualOn = this.manualOn;\n             return (manualOn == null ? false : manualOn.value);\n         }\n \n-        private Boolean stateManualOff() {\n+        private boolean stateManualOff() {\n+            NeohubBool manualOff = this.manualOff;\n             return (manualOff == null ? false : manualOff.value);\n         }\n     }\n \n-    public static class DeviceInfo {\n-\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5OTI0MA==", "bodyText": "ditto", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430299240", "createdAt": "2020-05-26T10:03:46Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubInfoResponse.java", "diffHunk": "@@ -29,155 +30,179 @@\n  * @author Andrew Fiddian-Green - Refactoring for openHAB v2.x\n  * \n  */\n-public class NeoHubInfoResponse {\n+@NonNullByDefault\n+public class NeoHubInfoResponse extends NeoHubAbstractDeviceData {\n \n     private static final Gson GSON = new GsonBuilder()\n             .registerTypeAdapter(NeohubBool.class, new NeohubBoolDeserializer()).create();\n \n     @SerializedName(\"devices\")\n-    private List<DeviceInfo> deviceInfos;\n+    private @Nullable List<InfoRecord> deviceRecords;\n \n+    @SuppressWarnings(\"null\")\n+    @NonNullByDefault\n     static class StatMode {\n         @SerializedName(\"MANUAL_OFF\")\n-        private NeohubBool manualOff;\n+        private @Nullable NeohubBool manualOff;\n         @SerializedName(\"MANUAL_ON\")\n-        private NeohubBool manualOn;\n+        private @Nullable NeohubBool manualOn;\n \n-        private Boolean stateManualOn() {\n+        private boolean stateManualOn() {\n+            NeohubBool manualOn = this.manualOn;\n             return (manualOn == null ? false : manualOn.value);\n         }\n \n-        private Boolean stateManualOff() {\n+        private boolean stateManualOff() {\n+            NeohubBool manualOff = this.manualOff;\n             return (manualOff == null ? false : manualOff.value);\n         }\n     }\n \n-    public static class DeviceInfo {\n-\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODIxNg=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2NTA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0Mzo0MFrOGaLIEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1MjoxNFrOGaW-eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODQ1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<?> deviceRecords = deviceData.getDevices();\n          \n          \n            \n                        List<? extends AbstractRecord> deviceRecords = deviceData.getDevices();", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430098450", "createdAt": "2020-05-25T23:43:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryService.java", "diffHunk": "@@ -85,70 +92,95 @@ protected void startBackgroundDiscovery() {\n     protected void stopBackgroundDiscovery() {\n         logger.debug(\"stop background discovery..\");\n \n+        ScheduledFuture<?> discoveryScheduler = this.discoveryScheduler;\n         if (discoveryScheduler != null && !discoveryScheduler.isCancelled()) {\n             discoveryScheduler.cancel(true);\n         }\n     }\n \n     private void discoverDevices() {\n-        NeoHubInfoResponse infoResponse;\n-        if ((infoResponse = hub.fromNeoHubReadInfoResponse()) != null) {\n-            List<DeviceInfo> devices;\n-            if ((devices = infoResponse.getDevices()) != null) {\n-                for (DeviceInfo device : devices) {\n-                    publishDevice(device);\n+        NeoHubAbstractDeviceData deviceData = hub.fromNeoHubGetDeviceData();\n+        NeoHubGetEngineersData engineerData = hub.isLegacyApiSelected() ? null : hub.fromNeoHubGetEngineersData();\n+\n+        if (deviceData != null) {\n+            List<?> deviceRecords = deviceData.getDevices();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5MjYwMg==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430292602", "createdAt": "2020-05-26T09:52:14Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryService.java", "diffHunk": "@@ -85,70 +92,95 @@ protected void startBackgroundDiscovery() {\n     protected void stopBackgroundDiscovery() {\n         logger.debug(\"stop background discovery..\");\n \n+        ScheduledFuture<?> discoveryScheduler = this.discoveryScheduler;\n         if (discoveryScheduler != null && !discoveryScheduler.isCancelled()) {\n             discoveryScheduler.cancel(true);\n         }\n     }\n \n     private void discoverDevices() {\n-        NeoHubInfoResponse infoResponse;\n-        if ((infoResponse = hub.fromNeoHubReadInfoResponse()) != null) {\n-            List<DeviceInfo> devices;\n-            if ((devices = infoResponse.getDevices()) != null) {\n-                for (DeviceInfo device : devices) {\n-                    publishDevice(device);\n+        NeoHubAbstractDeviceData deviceData = hub.fromNeoHubGetDeviceData();\n+        NeoHubGetEngineersData engineerData = hub.isLegacyApiSelected() ? null : hub.fromNeoHubGetEngineersData();\n+\n+        if (deviceData != null) {\n+            List<?> deviceRecords = deviceData.getDevices();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODQ1MA=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2NTg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0NDozNlrOGaLIgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1MzoxOVrOGaXBJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODU2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for (Object deviceRecord : deviceRecords) {\n          \n          \n            \n                            for (AbstractRecord deviceRecord : deviceRecords) {", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430098561", "createdAt": "2020-05-25T23:44:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryService.java", "diffHunk": "@@ -85,70 +92,95 @@ protected void startBackgroundDiscovery() {\n     protected void stopBackgroundDiscovery() {\n         logger.debug(\"stop background discovery..\");\n \n+        ScheduledFuture<?> discoveryScheduler = this.discoveryScheduler;\n         if (discoveryScheduler != null && !discoveryScheduler.isCancelled()) {\n             discoveryScheduler.cancel(true);\n         }\n     }\n \n     private void discoverDevices() {\n-        NeoHubInfoResponse infoResponse;\n-        if ((infoResponse = hub.fromNeoHubReadInfoResponse()) != null) {\n-            List<DeviceInfo> devices;\n-            if ((devices = infoResponse.getDevices()) != null) {\n-                for (DeviceInfo device : devices) {\n-                    publishDevice(device);\n+        NeoHubAbstractDeviceData deviceData = hub.fromNeoHubGetDeviceData();\n+        NeoHubGetEngineersData engineerData = hub.isLegacyApiSelected() ? null : hub.fromNeoHubGetEngineersData();\n+\n+        if (deviceData != null) {\n+            List<?> deviceRecords = deviceData.getDevices();\n+\n+            if (deviceRecords != null) {\n+                int deviceType;\n+\n+                for (Object deviceRecord : deviceRecords) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5MzI4Ng==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430293286", "createdAt": "2020-05-26T09:53:19Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryService.java", "diffHunk": "@@ -85,70 +92,95 @@ protected void startBackgroundDiscovery() {\n     protected void stopBackgroundDiscovery() {\n         logger.debug(\"stop background discovery..\");\n \n+        ScheduledFuture<?> discoveryScheduler = this.discoveryScheduler;\n         if (discoveryScheduler != null && !discoveryScheduler.isCancelled()) {\n             discoveryScheduler.cancel(true);\n         }\n     }\n \n     private void discoverDevices() {\n-        NeoHubInfoResponse infoResponse;\n-        if ((infoResponse = hub.fromNeoHubReadInfoResponse()) != null) {\n-            List<DeviceInfo> devices;\n-            if ((devices = infoResponse.getDevices()) != null) {\n-                for (DeviceInfo device : devices) {\n-                    publishDevice(device);\n+        NeoHubAbstractDeviceData deviceData = hub.fromNeoHubGetDeviceData();\n+        NeoHubGetEngineersData engineerData = hub.isLegacyApiSelected() ? null : hub.fromNeoHubGetEngineersData();\n+\n+        if (deviceData != null) {\n+            List<?> deviceRecords = deviceData.getDevices();\n+\n+            if (deviceRecords != null) {\n+                int deviceType;\n+\n+                for (Object deviceRecord : deviceRecords) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODU2MQ=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2NzE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0NTo1NFrOGaLJNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1NjowMlrOGaXHUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODc0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, Boolean> connectionStates = new HashMap<>();\n          \n          \n            \n                private final Map<String, Boolean> connectionStates = new HashMap<>();\n          \n      \n    \n    \n  \n\nAlso move this field above the non-final fields.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430098740", "createdAt": "2020-05-25T23:45:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -42,18 +49,29 @@\n  * @author Sebastian Prehn - Initial contribution (v1.x hub communication)\n  *\n  */\n+@NonNullByDefault\n public class NeoHubHandler extends BaseBridgeHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(NeoHubHandler.class);\n \n-    private NeoHubConfiguration config;\n-    private NeoHubSocket socket;\n-\n-    private ScheduledFuture<?> lazyPollingScheduler;\n-    private ScheduledFuture<?> fastPollingScheduler;\n+    private @Nullable NeoHubConfiguration config;\n+    private @Nullable NeoHubSocket socket;\n+    private @Nullable ScheduledFuture<?> lazyPollingScheduler;\n+    private @Nullable ScheduledFuture<?> fastPollingScheduler;\n \n     private final AtomicInteger fastPollingCallsToGo = new AtomicInteger();\n \n+    private Unit<?> temperatureUnit = SIUnits.CELSIUS;\n+\n+    private boolean isLegacyApiSelected = true;\n+    private boolean isApiOnline = false;\n+\n+    private boolean systemDataDirty = true;\n+    private long systemTimestamp = -1;\n+    private Instant systemLastRefreshed = Instant.now().minusSeconds(3600);\n+\n+    private Map<String, Boolean> connectionStates = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5NDg2NA==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430294864", "createdAt": "2020-05-26T09:56:02Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -42,18 +49,29 @@\n  * @author Sebastian Prehn - Initial contribution (v1.x hub communication)\n  *\n  */\n+@NonNullByDefault\n public class NeoHubHandler extends BaseBridgeHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(NeoHubHandler.class);\n \n-    private NeoHubConfiguration config;\n-    private NeoHubSocket socket;\n-\n-    private ScheduledFuture<?> lazyPollingScheduler;\n-    private ScheduledFuture<?> fastPollingScheduler;\n+    private @Nullable NeoHubConfiguration config;\n+    private @Nullable NeoHubSocket socket;\n+    private @Nullable ScheduledFuture<?> lazyPollingScheduler;\n+    private @Nullable ScheduledFuture<?> fastPollingScheduler;\n \n     private final AtomicInteger fastPollingCallsToGo = new AtomicInteger();\n \n+    private Unit<?> temperatureUnit = SIUnits.CELSIUS;\n+\n+    private boolean isLegacyApiSelected = true;\n+    private boolean isApiOnline = false;\n+\n+    private boolean systemDataDirty = true;\n+    private long systemTimestamp = -1;\n+    private Instant systemLastRefreshed = Instant.now().minusSeconds(3600);\n+\n+    private Map<String, Boolean> connectionStates = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5ODc0MA=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk2OTAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo0ODowNlrOGaLKSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOTo1OToyNlrOGaXOtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5OTAxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (Object device : devices) {\n          \n          \n            \n                                    if (device instanceof AbstractRecord) {\n          \n          \n            \n                                for (AbstractRecord device : devices) {", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430099018", "createdAt": "2020-05-25T23:48:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,71 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<?> devices;\n+            State state;\n+\n+            if ((devices = deviceData.getDevices()) == null) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {\n+                    int onlineDeviceCount = 0;\n+\n+                    for (Object device : devices) {\n+                        if (device instanceof AbstractRecord) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5Njc1Ng==", "bodyText": "Ok. Cool..", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430296756", "createdAt": "2020-05-26T09:59:26Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,71 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<?> devices;\n+            State state;\n+\n+            if ((devices = deviceData.getDevices()) == null) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {\n+                    int onlineDeviceCount = 0;\n+\n+                    for (Object device : devices) {\n+                        if (device instanceof AbstractRecord) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5OTAxOA=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3ODk3MzQ2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMzo1MzowNlrOGaLM1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDowMjoyNVrOGaXVcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5OTY2OA==", "bodyText": "Please don't perform assignments inside if conditionals if you could just initialize it when you declare the variable.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<?> devices;\n          \n          \n            \n                        State state;\n          \n          \n            \n            \n          \n          \n            \n                        if ((devices = deviceData.getDevices()) == null) {\n          \n          \n            \n                            state = UnDefType.UNDEF;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            int totalDeviceCount;\n          \n          \n            \n            \n          \n          \n            \n                            if ((totalDeviceCount = devices.size()) == 0) {\n          \n          \n            \n                                state = UnDefType.UNDEF;\n          \n          \n            \n                            } else {\n          \n          \n            \n                        State state;\n          \n          \n            \n                        List<? extends AbstractRecord> devices = deviceData.getDevices();\n          \n          \n            \n            \n          \n          \n            \n                        if (devices == null || devices.isEmpty()) {\n          \n          \n            \n                            state = UnDefType.UNDEF;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            int totalDeviceCount = devices.size();", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430099668", "createdAt": "2020-05-25T23:53:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,71 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<?> devices;\n+            State state;\n+\n+            if ((devices = deviceData.getDevices()) == null) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5ODQ4MA==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430298480", "createdAt": "2020-05-26T10:02:25Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,71 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<?> devices;\n+            State state;\n+\n+            if ((devices = deviceData.getDevices()) == null) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA5OTY2OA=="}, "originalCommit": {"oid": "91050c9aa40fef2e53cbc118496627a4c1e12197"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTU0ODkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo0MDoxMlrOGakX8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo0Mzo1NlrOGanKBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMjExNQ==", "bodyText": "If the api is offline shouldn't that cause the thing to go offline as well?", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430512115", "createdAt": "2020-05-26T15:40:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +391,73 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+            }\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_SYSTEM);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+            }\n+        }\n+\n+        if (!supportsLegacyApi && !supportsFutureApi) {\n+            logger.warn(\"Currently neither legacy nor new API are supported!\");\n+            isApiOnline = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87947ad473e5d3fae7e7bc9eac65f275bb58c465"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU1NzcwMQ==", "bodyText": "It does in fact cause the thing status to go offline -- this happens when the next poll calls fromNeoHubGetDeviceData() which fails with an exception that is caught on lines 268..270 (note: I intentionally don't change thing status in selectApi() to avoid unnecessarily doing the same thing in several places)", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430557701", "createdAt": "2020-05-26T16:43:56Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +391,73 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+            }\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_SYSTEM);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+            }\n+        }\n+\n+        if (!supportsLegacyApi && !supportsFutureApi) {\n+            logger.warn(\"Currently neither legacy nor new API are supported!\");\n+            isApiOnline = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMjExNQ=="}, "originalCommit": {"oid": "87947ad473e5d3fae7e7bc9eac65f275bb58c465"}, "originalPosition": 406}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTU1OTE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo0MjowMlrOGakepg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjoyODo0MFrOGamesg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMzgzMA==", "bodyText": "should probably still log this as debug or trace.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430513830", "createdAt": "2020-05-26T15:42:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +391,73 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87947ad473e5d3fae7e7bc9eac65f275bb58c465"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0NjYxMA==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430546610", "createdAt": "2020-05-26T16:28:40Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +391,73 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMzgzMA=="}, "originalCommit": {"oid": "87947ad473e5d3fae7e7bc9eac65f275bb58c465"}, "originalPosition": 392}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTU1OTgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo0MjowOVrOGakfAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTo0MjowOVrOGakfAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMzkyMQ==", "bodyText": "same here", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430513921", "createdAt": "2020-05-26T15:42:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +391,73 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+            }\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_SYSTEM);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87947ad473e5d3fae7e7bc9eac65f275bb58c465"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjUxNDYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1MDoyMlrOGat7Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoyMzoyNFrOGa8jzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2ODYyNg==", "bodyText": "It seems like you are trying to implement an expiring cache, so why not try using openhab's ExpiringCache class?", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430668626", "createdAt": "2020-05-26T19:50:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -42,18 +49,29 @@\n  * @author Sebastian Prehn - Initial contribution (v1.x hub communication)\n  *\n  */\n+@NonNullByDefault\n public class NeoHubHandler extends BaseBridgeHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(NeoHubHandler.class);\n \n-    private NeoHubConfiguration config;\n-    private NeoHubSocket socket;\n+    private final Map<String, Boolean> connectionStates = new HashMap<>();\n \n-    private ScheduledFuture<?> lazyPollingScheduler;\n-    private ScheduledFuture<?> fastPollingScheduler;\n+    private @Nullable NeoHubConfiguration config;\n+    private @Nullable NeoHubSocket socket;\n+    private @Nullable ScheduledFuture<?> lazyPollingScheduler;\n+    private @Nullable ScheduledFuture<?> fastPollingScheduler;\n \n     private final AtomicInteger fastPollingCallsToGo = new AtomicInteger();\n \n+    private Unit<?> temperatureUnit = SIUnits.CELSIUS;\n+\n+    private boolean isLegacyApiSelected = true;\n+    private boolean isApiOnline = false;\n+\n+    private boolean systemDataDirty = true;\n+    private long systemTimestamp = -1;\n+    private Instant systemLastRefreshed = Instant.now().minusSeconds(3600);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwODM2Nw==", "bodyText": "No, it\u2019s not really a cache. I will explain it below...", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430908367", "createdAt": "2020-05-27T07:23:24Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -42,18 +49,29 @@\n  * @author Sebastian Prehn - Initial contribution (v1.x hub communication)\n  *\n  */\n+@NonNullByDefault\n public class NeoHubHandler extends BaseBridgeHandler {\n \n     private final Logger logger = LoggerFactory.getLogger(NeoHubHandler.class);\n \n-    private NeoHubConfiguration config;\n-    private NeoHubSocket socket;\n+    private final Map<String, Boolean> connectionStates = new HashMap<>();\n \n-    private ScheduledFuture<?> lazyPollingScheduler;\n-    private ScheduledFuture<?> fastPollingScheduler;\n+    private @Nullable NeoHubConfiguration config;\n+    private @Nullable NeoHubSocket socket;\n+    private @Nullable ScheduledFuture<?> lazyPollingScheduler;\n+    private @Nullable ScheduledFuture<?> fastPollingScheduler;\n \n     private final AtomicInteger fastPollingCallsToGo = new AtomicInteger();\n \n+    private Unit<?> temperatureUnit = SIUnits.CELSIUS;\n+\n+    private boolean isLegacyApiSelected = true;\n+    private boolean isApiOnline = false;\n+\n+    private boolean systemDataDirty = true;\n+    private long systemTimestamp = -1;\n+    private Instant systemLastRefreshed = Instant.now().minusSeconds(3600);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2ODYyNg=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjY4MzA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo0MjoyOVrOGavm7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo1MToxMVrOGbOPCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5NjE3Mw==", "bodyText": "I've spent a lot of time trying to figure out how all this expiration stuff works and frankly I think it is too complicated for a variety of reasons. One of the reasons is that you are modifying handler state in your getter methods. I don't think this logic belongs here and instead should be moved to the caller of this method.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430696173", "createdAt": "2020-05-26T20:42:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,35 +251,59 @@ protected NeoHubInfoResponse fromNeoHubReadInfoResponse() {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return newInfoResponse;\n+            if (deviceData instanceof NeoHubLiveDeviceData) {\n+                long temp = ((NeoHubLiveDeviceData) deviceData).getTimestampSystem();\n+                if (temp != systemTimestamp) {\n+                    systemDataDirty = true;\n+                    systemTimestamp = temp;\n+                }\n+            } else {\n+                if (Instant.now().isAfter(systemLastRefreshed.plusSeconds(3600))) {\n+                    systemDataDirty = true;\n+                    systemLastRefreshed = Instant.now();\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDM4MA==", "bodyText": "The hub provides two sorts of data: the fast changing live data from devices, and the slow changing settings from users. The fast changing data is called Info in the old Api and LiveData in the new Api. And the slow changing data is called DCB (old) and System (new). The fast changing data is polled (according to pollInterval) every 60 seconds. And the slow changing data is read less frequently. In the new Api, the LiveData includes a time stamp tag on the System data so the data can be automatically read (only) when the time stamp changes (systemDirty). However in the old Api the Info does not include such a time stamp, so instead the binding has to \u201cassume\u201d that the data is dirty from time to time, which it does every one hour (even if probably the data has not changed).\nPerhaps there is a better way to handle the polling of the slow changing data? In particular with the old Api? Do you have some suggestions?\nYou are partly right about the split of logic between the handler and the getters; the getters do indeed read the actual data, but only the handler knows the context about what changed (time stamp tag) since the getter was last called. Nevertheless I will see if I can shift some of the logic to the getters whilst still keeping the context in the handler.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430920380", "createdAt": "2020-05-27T07:46:00Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,35 +251,59 @@ protected NeoHubInfoResponse fromNeoHubReadInfoResponse() {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return newInfoResponse;\n+            if (deviceData instanceof NeoHubLiveDeviceData) {\n+                long temp = ((NeoHubLiveDeviceData) deviceData).getTimestampSystem();\n+                if (temp != systemTimestamp) {\n+                    systemDataDirty = true;\n+                    systemTimestamp = temp;\n+                }\n+            } else {\n+                if (Instant.now().isAfter(systemLastRefreshed.plusSeconds(3600))) {\n+                    systemDataDirty = true;\n+                    systemLastRefreshed = Instant.now();\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5NjE3Mw=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5Nzk2Mg==", "bodyText": "Hmm. I have been thinking some more about this. And I have made some changes about how the timestamps are checked (if any), and how systemData is updated. I hope it is Ok with you.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r431197962", "createdAt": "2020-05-27T14:51:11Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,35 +251,59 @@ protected NeoHubInfoResponse fromNeoHubReadInfoResponse() {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return newInfoResponse;\n+            if (deviceData instanceof NeoHubLiveDeviceData) {\n+                long temp = ((NeoHubLiveDeviceData) deviceData).getTimestampSystem();\n+                if (temp != systemTimestamp) {\n+                    systemDataDirty = true;\n+                    systemTimestamp = temp;\n+                }\n+            } else {\n+                if (Instant.now().isAfter(systemLastRefreshed.plusSeconds(3600))) {\n+                    systemDataDirty = true;\n+                    systemLastRefreshed = Instant.now();\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5NjE3Mw=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjY5MDcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo0NToxNFrOGavr2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo1MTo0OVrOGbORAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5NzQzNA==", "bodyText": "I don't know why you are checking systemDataDirty here. It would be better to push the burden of checking systemDataDirty on the caller.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430697434", "createdAt": "2020-05-26T20:45:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,35 +251,59 @@ protected NeoHubInfoResponse fromNeoHubReadInfoResponse() {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return newInfoResponse;\n+            if (deviceData instanceof NeoHubLiveDeviceData) {\n+                long temp = ((NeoHubLiveDeviceData) deviceData).getTimestampSystem();\n+                if (temp != systemTimestamp) {\n+                    systemDataDirty = true;\n+                    systemTimestamp = temp;\n+                }\n+            } else {\n+                if (Instant.now().isAfter(systemLastRefreshed.plusSeconds(3600))) {\n+                    systemDataDirty = true;\n+                    systemLastRefreshed = Instant.now();\n+                }\n+            }\n+\n+            return deviceData;\n         } catch (Exception e) {\n-            logger.warn(MSG_FMT_INFO_POLL_ERR, e.getMessage());\n+            logger.warn(MSG_FMT_DEVICE_POLL_ERR, e.getMessage());\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             return null;\n         }\n     }\n \n     /**\n-     * sends a JSON \"READ_DCB\" request to the NeoHub\n-     *\n-     * @return a class that contains the full status of all devices\n-     *\n+     * sends a JSON request to the NeoHub to read the system data\n+     * \n+     * @return a class that contains the status of the system\n      */\n-    protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n-        try {\n-            @Nullable\n-            String response = socket.sendMessage(CMD_CODE_READ_DCB);\n+    protected @Nullable NeoHubReadDcbResponse fromNeoHubReadSystemData() {\n+        NeoHubSocket socket = this.socket;\n+\n+        if (socket == null || !systemDataDirty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMDU5NQ==", "bodyText": "See above..", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430920595", "createdAt": "2020-05-27T07:46:23Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,35 +251,59 @@ protected NeoHubInfoResponse fromNeoHubReadInfoResponse() {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return newInfoResponse;\n+            if (deviceData instanceof NeoHubLiveDeviceData) {\n+                long temp = ((NeoHubLiveDeviceData) deviceData).getTimestampSystem();\n+                if (temp != systemTimestamp) {\n+                    systemDataDirty = true;\n+                    systemTimestamp = temp;\n+                }\n+            } else {\n+                if (Instant.now().isAfter(systemLastRefreshed.plusSeconds(3600))) {\n+                    systemDataDirty = true;\n+                    systemLastRefreshed = Instant.now();\n+                }\n+            }\n+\n+            return deviceData;\n         } catch (Exception e) {\n-            logger.warn(MSG_FMT_INFO_POLL_ERR, e.getMessage());\n+            logger.warn(MSG_FMT_DEVICE_POLL_ERR, e.getMessage());\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             return null;\n         }\n     }\n \n     /**\n-     * sends a JSON \"READ_DCB\" request to the NeoHub\n-     *\n-     * @return a class that contains the full status of all devices\n-     *\n+     * sends a JSON request to the NeoHub to read the system data\n+     * \n+     * @return a class that contains the status of the system\n      */\n-    protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n-        try {\n-            @Nullable\n-            String response = socket.sendMessage(CMD_CODE_READ_DCB);\n+    protected @Nullable NeoHubReadDcbResponse fromNeoHubReadSystemData() {\n+        NeoHubSocket socket = this.socket;\n+\n+        if (socket == null || !systemDataDirty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5NzQzNA=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyMzYxMg==", "bodyText": "But please note that the old Api callRead_DCB and new Api call Get_System are 99% the same code, so the same class is used as a getter for each. The systemDirty and refresh logic is different between old and new but the actual JSON payload is the same..", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430923612", "createdAt": "2020-05-27T07:51:43Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,35 +251,59 @@ protected NeoHubInfoResponse fromNeoHubReadInfoResponse() {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return newInfoResponse;\n+            if (deviceData instanceof NeoHubLiveDeviceData) {\n+                long temp = ((NeoHubLiveDeviceData) deviceData).getTimestampSystem();\n+                if (temp != systemTimestamp) {\n+                    systemDataDirty = true;\n+                    systemTimestamp = temp;\n+                }\n+            } else {\n+                if (Instant.now().isAfter(systemLastRefreshed.plusSeconds(3600))) {\n+                    systemDataDirty = true;\n+                    systemLastRefreshed = Instant.now();\n+                }\n+            }\n+\n+            return deviceData;\n         } catch (Exception e) {\n-            logger.warn(MSG_FMT_INFO_POLL_ERR, e.getMessage());\n+            logger.warn(MSG_FMT_DEVICE_POLL_ERR, e.getMessage());\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             return null;\n         }\n     }\n \n     /**\n-     * sends a JSON \"READ_DCB\" request to the NeoHub\n-     *\n-     * @return a class that contains the full status of all devices\n-     *\n+     * sends a JSON request to the NeoHub to read the system data\n+     * \n+     * @return a class that contains the status of the system\n      */\n-    protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n-        try {\n-            @Nullable\n-            String response = socket.sendMessage(CMD_CODE_READ_DCB);\n+    protected @Nullable NeoHubReadDcbResponse fromNeoHubReadSystemData() {\n+        NeoHubSocket socket = this.socket;\n+\n+        if (socket == null || !systemDataDirty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5NzQzNA=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5ODQ2NQ==", "bodyText": "Incorporated in the above mentioned changes..", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r431198465", "createdAt": "2020-05-27T14:51:49Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,35 +251,59 @@ protected NeoHubInfoResponse fromNeoHubReadInfoResponse() {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return newInfoResponse;\n+            if (deviceData instanceof NeoHubLiveDeviceData) {\n+                long temp = ((NeoHubLiveDeviceData) deviceData).getTimestampSystem();\n+                if (temp != systemTimestamp) {\n+                    systemDataDirty = true;\n+                    systemTimestamp = temp;\n+                }\n+            } else {\n+                if (Instant.now().isAfter(systemLastRefreshed.plusSeconds(3600))) {\n+                    systemDataDirty = true;\n+                    systemLastRefreshed = Instant.now();\n+                }\n+            }\n+\n+            return deviceData;\n         } catch (Exception e) {\n-            logger.warn(MSG_FMT_INFO_POLL_ERR, e.getMessage());\n+            logger.warn(MSG_FMT_DEVICE_POLL_ERR, e.getMessage());\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n             return null;\n         }\n     }\n \n     /**\n-     * sends a JSON \"READ_DCB\" request to the NeoHub\n-     *\n-     * @return a class that contains the full status of all devices\n-     *\n+     * sends a JSON request to the NeoHub to read the system data\n+     * \n+     * @return a class that contains the status of the system\n      */\n-    protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n-        try {\n-            @Nullable\n-            String response = socket.sendMessage(CMD_CODE_READ_DCB);\n+    protected @Nullable NeoHubReadDcbResponse fromNeoHubReadSystemData() {\n+        NeoHubSocket socket = this.socket;\n+\n+        if (socket == null || !systemDataDirty) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5NzQzNA=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 261}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjY5NTExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo0Njo0MFrOGavupw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo1Mjo1M1rOGbOUXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODE1MQ==", "bodyText": "Wouldn't this log every hour then regardless of if the unit changed or not? If you going to log it that frequently I'd prefer if you changed this to debug.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430698151", "createdAt": "2020-05-26T20:46:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,69 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNjMyOA==", "bodyText": "This should be wrapped in a check if (newTemperatureUnit != oldTemperatureUnit) {} so this would only be logged on binding start up, of when the user actually changes settings from Fahrenheit to Celsius (which is probably never).", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430926328", "createdAt": "2020-05-27T07:56:19Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,69 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODE1MQ=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5OTMyNQ==", "bodyText": "Deleted the logging.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r431199325", "createdAt": "2020-05-27T14:52:53Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,69 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODE1MQ=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 315}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjcwMDAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDo0ODoxMVrOGavxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo1MjoyOVrOGbOS_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODk0MA==", "bodyText": "Since you already check if devices is empty in the if statement above, you don't need to check it again here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            int totalDeviceCount;\n          \n          \n            \n            \n          \n          \n            \n                            if ((totalDeviceCount = devices.size()) == 0) {\n          \n          \n            \n                                state = UnDefType.UNDEF;\n          \n          \n            \n                            } else {\n          \n          \n            \n                            int totalDeviceCount = devices.size();", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430698940", "createdAt": "2020-05-26T20:48:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,69 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNzY3NQ==", "bodyText": "I am not sure I understand you. On one hand I am checking if devices is null and on the other hand I am checking if it is empty..", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430927675", "createdAt": "2020-05-27T07:58:34Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,69 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODk0MA=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyOTk2MA==", "bodyText": "The QoS measurement is a percentage of devices that are actually online in the RF mesh, divided by devices that have been configured in the hub. Obviously if there are zero devices configured in the hub, this would result in a divide-by-zero exception, so in that special case, we return UNDEF instead.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r430929960", "createdAt": "2020-05-27T08:02:37Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,69 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODk0MA=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 342}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5ODk3Mg==", "bodyText": "Ah. Ok. I see my error now. Sorry for the confusion.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r431198972", "createdAt": "2020-05-27T14:52:29Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +314,69 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // check the temperature unit\n+            if (systemDataDirty) {\n+                NeoHubReadDcbResponse systemData = fromNeoHubReadSystemData();\n+                if (systemData != null) {\n+                    temperatureUnit = systemData.getTemperatureUnit();\n+                    systemDataDirty = false;\n+                    logger.info(\"Setting temperature unit: => {}\", temperatureUnit);\n+                }\n+            }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount;\n+\n+                if ((totalDeviceCount = devices.size()) == 0) {\n+                    state = UnDefType.UNDEF;\n+                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY5ODk0MA=="}, "originalCommit": {"oid": "fb57d6a0ceace1f691ec6235f6a1389e444a2889"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzYyMTQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMzozOTozNlrOGbg1ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoxMDo0NlrOGbyNyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMjcxNQ==", "bodyText": "Shouldn't this be a quantity type with Percent units?", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r431502715", "createdAt": "2020-05-27T23:39:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +323,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);\n+\n+                    if (online.booleanValue()) {\n+                        onlineDeviceCount++;\n+                    }\n+                }\n+                state = new DecimalType((100.0 * onlineDeviceCount) / totalDeviceCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff28e182e15704a2450ba5cd34eb14d59ca5540"}, "originalPosition": 359}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc4NzQ2NQ==", "bodyText": "Yes. Done. But it reminds me that I should also have used QuantityType Percent on the [siemensrds] humidity point so I will do that as well and make new a \"micro\" PR for it.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r431787465", "createdAt": "2020-05-28T12:10:46Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +323,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);\n+\n+                    if (online.booleanValue()) {\n+                        onlineDeviceCount++;\n+                    }\n+                }\n+                state = new DecimalType((100.0 * onlineDeviceCount) / totalDeviceCount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTUwMjcxNQ=="}, "originalCommit": {"oid": "4ff28e182e15704a2450ba5cd34eb14d59ca5540"}, "originalPosition": 359}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTUxOTc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozMzoxOVrOGcHh6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDoxMTozOVrOGcW5gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNjY4Mg==", "bodyText": "Contacts can only be open or closed, not on or off.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432136682", "createdAt": "2020-05-28T21:33:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -232,28 +247,64 @@\n \t\t<description>The Thermostat is in the Present Occupancy Mode (Off=Absent, On=Present)</description>\n \t\t<category>presence</category>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"plugAutoMode\">\n \t\t<item-type>Switch</item-type>\n \t\t<label>Plug Auto Mode</label>\n \t\t<description>The Plug is in Automatic Mode (Off=Manual, On=Automatic)</description>\n+\t\t<category>energy</category>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"plugOutputState\">\n \t\t<item-type>Switch</item-type>\n \t\t<label>Plug Output State</label>\n \t\t<description>The state of the Plug switch, Off or On</description>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"contactState\">\n-\t\t<item-type>Switch</item-type>\n+\t\t<item-type>Contact</item-type>\n \t\t<label>Contact State</label>\n \t\t<description>The state of the contact, Off or On</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da595c8bd51cf080ab79bdf3df0aa1c56d142177"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxMjc4OQ==", "bodyText": "Also, wouldn't changing this break things for existing users?", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432212789", "createdAt": "2020-05-29T01:44:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -232,28 +247,64 @@\n \t\t<description>The Thermostat is in the Present Occupancy Mode (Off=Absent, On=Present)</description>\n \t\t<category>presence</category>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"plugAutoMode\">\n \t\t<item-type>Switch</item-type>\n \t\t<label>Plug Auto Mode</label>\n \t\t<description>The Plug is in Automatic Mode (Off=Manual, On=Automatic)</description>\n+\t\t<category>energy</category>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"plugOutputState\">\n \t\t<item-type>Switch</item-type>\n \t\t<label>Plug Output State</label>\n \t\t<description>The state of the Plug switch, Off or On</description>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"contactState\">\n-\t\t<item-type>Switch</item-type>\n+\t\t<item-type>Contact</item-type>\n \t\t<label>Contact State</label>\n \t\t<description>The state of the contact, Off or On</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNjY4Mg=="}, "originalCommit": {"oid": "da595c8bd51cf080ab79bdf3df0aa1c56d142177"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzODU4Mw==", "bodyText": "Yes, but I only added this device in the 2.5.5 release, so I doubt there are many users who have yet even noticed that it is there. I think it is better to fix it properly now.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432338583", "createdAt": "2020-05-29T08:37:15Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -232,28 +247,64 @@\n \t\t<description>The Thermostat is in the Present Occupancy Mode (Off=Absent, On=Present)</description>\n \t\t<category>presence</category>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"plugAutoMode\">\n \t\t<item-type>Switch</item-type>\n \t\t<label>Plug Auto Mode</label>\n \t\t<description>The Plug is in Automatic Mode (Off=Manual, On=Automatic)</description>\n+\t\t<category>energy</category>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"plugOutputState\">\n \t\t<item-type>Switch</item-type>\n \t\t<label>Plug Output State</label>\n \t\t<description>The state of the Plug switch, Off or On</description>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"contactState\">\n-\t\t<item-type>Switch</item-type>\n+\t\t<item-type>Contact</item-type>\n \t\t<label>Contact State</label>\n \t\t<description>The state of the contact, Off or On</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNjY4Mg=="}, "originalCommit": {"oid": "da595c8bd51cf080ab79bdf3df0aa1c56d142177"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4ODQ4MA==", "bodyText": "Done. And I corrected the ReadMe too :)", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432388480", "createdAt": "2020-05-29T10:11:39Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -232,28 +247,64 @@\n \t\t<description>The Thermostat is in the Present Occupancy Mode (Off=Absent, On=Present)</description>\n \t\t<category>presence</category>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"plugAutoMode\">\n \t\t<item-type>Switch</item-type>\n \t\t<label>Plug Auto Mode</label>\n \t\t<description>The Plug is in Automatic Mode (Off=Manual, On=Automatic)</description>\n+\t\t<category>energy</category>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"plugOutputState\">\n \t\t<item-type>Switch</item-type>\n \t\t<label>Plug Output State</label>\n \t\t<description>The state of the Plug switch, Off or On</description>\n \t\t<state readOnly=\"false\"/>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"holdOnlineState\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Hold Online State</label>\n+\t\t\t\t<description>If the device loses its RF mesh connection, hold the last known state display value</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n \t</channel-type>\n \n \t<channel-type id=\"contactState\">\n-\t\t<item-type>Switch</item-type>\n+\t\t<item-type>Contact</item-type>\n \t\t<label>Contact State</label>\n \t\t<description>The state of the contact, Off or On</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNjY4Mg=="}, "originalCommit": {"oid": "da595c8bd51cf080ab79bdf3df0aa1c56d142177"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDg3MTM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo1Njo0N1rOGcofjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMjoyMjowMlrOGcySNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3Njc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;\n          \n          \n            \n                            supportsFutureApi = systemData != null;", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432676751", "createdAt": "2020-05-29T18:56:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +387,88 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsLegacyApi) {\n+                    throw new NeoHubException(\"legacy API not supported\");\n+                }\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+                logger.debug(\"Legacy API is not supported!\");\n+            }\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_SYSTEM);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 402}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzNzE3Mw==", "bodyText": "Ok. Makes sense.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432837173", "createdAt": "2020-05-30T12:22:02Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +387,88 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsLegacyApi) {\n+                    throw new NeoHubException(\"legacy API not supported\");\n+                }\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+                logger.debug(\"Legacy API is not supported!\");\n+            }\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_SYSTEM);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3Njc1MQ=="}, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 402}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDg3NDMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo1Nzo1MVrOGcohhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMjozMTowOFrOGcyUtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3NzI1NQ==", "bodyText": "Can you catch specific exceptions here instead? Or do you intend to catch RuntimeExceptions as well?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } catch (Exception e) {\n          \n          \n            \n                        } catch (JsonSyntaxException | NeoHubException | IOException e) {", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432677255", "createdAt": "2020-05-29T18:57:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +387,88 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsLegacyApi) {\n+                    throw new NeoHubException(\"legacy API not supported\");\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 395}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzNzgxNA==", "bodyText": "Ok. No problemo.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432837814", "createdAt": "2020-05-30T12:31:08Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +387,88 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsLegacyApi) {\n+                    throw new NeoHubException(\"legacy API not supported\");\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3NzI1NQ=="}, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 395}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDg3NTgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo1ODoxOVrOGcoiZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo1ODoxOVrOGcoiZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3NzQ3Nw==", "bodyText": "same suggestion as above", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432677477", "createdAt": "2020-05-29T18:58:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +387,88 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsLegacyApi) {\n+                    throw new NeoHubException(\"legacy API not supported\");\n+                }\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+                logger.debug(\"Legacy API is not supported!\");\n+            }\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_SYSTEM);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsFutureApi) {\n+                    throw new NeoHubException(\"new API not supported\");\n+                }\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 406}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDg3NjI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo1ODoyOVrOGcoisA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxODo1ODoyOVrOGcoisA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3NzU1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n          \n          \n            \n                            supportsLegacyApi = systemData != null;", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432677552", "createdAt": "2020-05-29T18:58:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +387,88 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 391}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDg4NTM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOTowMjowMVrOGcoovg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMjozODoyOVrOGcyWkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3OTEwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (connectionStates.containsKey(deviceName)) {\n          \n          \n            \n                                    @Nullable\n          \n          \n            \n                                    Boolean onlineBefore = connectionStates.get(deviceName);\n          \n          \n            \n                                    if (!online.equals(onlineBefore)) {\n          \n          \n            \n                                        logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n          \n          \n            \n                                                online.booleanValue() ? \"joined\" : \"left\");\n          \n          \n            \n                                    }\n          \n          \n            \n                                }\n          \n          \n            \n                                connectionStates.put(deviceName, online);\n          \n          \n            \n                                Boolean onlineBefore = connectionStates.put(deviceName, online);\n          \n          \n            \n                                if (!online.equals(onlineBefore)) {\n          \n          \n            \n                                    logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n          \n          \n            \n                                            online.booleanValue() ? \"joined\" : \"left\");\n          \n          \n            \n                                }", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432679102", "createdAt": "2020-05-29T19:02:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +325,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzODI5MA==", "bodyText": "Cool. I didn't know that put() deliver a return value. But (PS) it can be null, so the Boolean still needs a @nullable annotation.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432838290", "createdAt": "2020-05-30T12:38:29Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +325,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3OTEwMg=="}, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDk1NDUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOToyODoyN1rOGcpVOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOTo0NToyM1rOGc1AUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDQ4OA==", "bodyText": "fastPollingCallsToGo decreases every time lazyPollingSchedulerExecute is called. Once fastPollingCallsToGo reaches zero fastPollingSchedulerExecute will no longer call lazyPollingSchedulerExecute. At that point you might as well cancel the fastPollingScheduler since it won't do anything at that point.\nAlso, no point in using AtomicInteger if you aren't going to make the changes atomic.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (fastPollingCallsToGo.get() > 0) {\n          \n          \n            \n                        fastPollingCallsToGo.decrementAndGet();\n          \n          \n            \n                    }\n          \n          \n            \n                    int callsToGo;\n          \n          \n            \n                    do {\n          \n          \n            \n                        callsToGo = fastPollingCallsToGo.get();\n          \n          \n            \n                    } while(callsToGo > 0 && !fastPollingCallsToGo.compareAndSet(callsToGo, callsToGo - 1));", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432690488", "createdAt": "2020-05-29T19:28:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +325,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);\n+\n+                    if (online.booleanValue()) {\n+                        onlineDeviceCount++;\n+                    }\n+                }\n+                state = new QuantityType<>((100.0 * onlineDeviceCount) / totalDeviceCount, Units.PERCENT);\n+            }\n+            updateState(CHAN_MESH_NETWORK_QOS, state);\n+        }\n         if (fastPollingCallsToGo.get() > 0) {\n             fastPollingCallsToGo.decrementAndGet();\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzOTY1NQ==", "bodyText": "At that point you might as well cancel the fastPollingScheduler since it won't do anything at that point.\n\nGood point. Note: as [siemensrds] uses the same code, I shall need to open yet another PR to fix this on that binding. Sorry for that :(\n\nAlso, no point in using AtomicInteger if you aren't going to make the changes atomic.\n\nSorry but I don't understand what you are saying here. But I think I can use fastPollingCallsToGo-- anyway since (in Java) that is in any case an atomic operation. Or??", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432839655", "createdAt": "2020-05-30T12:57:09Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +325,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);\n+\n+                    if (online.booleanValue()) {\n+                        onlineDeviceCount++;\n+                    }\n+                }\n+                state = new QuantityType<>((100.0 * onlineDeviceCount) / totalDeviceCount, Units.PERCENT);\n+            }\n+            updateState(CHAN_MESH_NETWORK_QOS, state);\n+        }\n         if (fastPollingCallsToGo.get() > 0) {\n             fastPollingCallsToGo.decrementAndGet();\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDQ4OA=="}, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0MDA4OQ==", "bodyText": "use fastPollingCallsToGo-- anyway since (in Java) that is in any case an atomic operation. Or??\n\nTo answer my own question: Nope!", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432840089", "createdAt": "2020-05-30T13:03:54Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +325,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);\n+\n+                    if (online.booleanValue()) {\n+                        onlineDeviceCount++;\n+                    }\n+                }\n+                state = new QuantityType<>((100.0 * onlineDeviceCount) / totalDeviceCount, Units.PERCENT);\n+            }\n+            updateState(CHAN_MESH_NETWORK_QOS, state);\n+        }\n         if (fastPollingCallsToGo.get() > 0) {\n             fastPollingCallsToGo.decrementAndGet();\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDQ4OA=="}, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg0NDk4Nw==", "bodyText": "^^\nPlease ignore everything I have said above!\nI fundamentally do NOT agree with your initial suggestion to cancel the thread!\nThe fastPollingScheduler is created in initialize() and cancelled & destroyed in dispose(). For the interim time between initialize() and dispose() the thread is always regularly being executed. In its execute method, if fastPollingCallsToGo > 0 the method will actually do something, otherwise the method will simply short circuit.\nSo the decision whether fastPollingScheduler will do anything depends on the value of fastPollingCallsToGo  -- this value is a) decremented by one every time that lazyPollingScheduler executes, and b) set back to a positive value any time that the method startFastPollingBurst() is called. It is an interplay between the two methods: one is saying that fewer future calls are needed, whereas the other is saying that more future calls are required.\nSo I would like to stick with my code as designed. But if you insist to create / cancel / destroy fastPollingScheduler every time that it is needed, it would be a major architecture change which goes way beyond the few changes you proposed above...", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432844987", "createdAt": "2020-05-30T14:16:40Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +325,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);\n+\n+                    if (online.booleanValue()) {\n+                        onlineDeviceCount++;\n+                    }\n+                }\n+                state = new QuantityType<>((100.0 * onlineDeviceCount) / totalDeviceCount, Units.PERCENT);\n+            }\n+            updateState(CHAN_MESH_NETWORK_QOS, state);\n+        }\n         if (fastPollingCallsToGo.get() > 0) {\n             fastPollingCallsToGo.decrementAndGet();\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDQ4OA=="}, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 370}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4MTc0Ng==", "bodyText": "Well what you have designed works, and if you think it would be too much effort to change it then you can keep it as is.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432881746", "createdAt": "2020-05-30T19:45:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -248,23 +325,54 @@ protected NeoHubReadDcbResponse fromNeoHubReadDcbResponse() {\n      * handlers\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n-        NeoHubInfoResponse infoResponse = fromNeoHubReadInfoResponse();\n-\n-        if (infoResponse != null) {\n-            // determine temperatureUnit\n-            NeoHubReadDcbResponse dcbResponse = fromNeoHubReadDcbResponse();\n-            Unit<?> temperatureUnit = (dcbResponse != null) ? dcbResponse.getTemperatureUnit() : SIUnits.CELSIUS;\n+        // check which API is supported\n+        if (!isApiOnline) {\n+            selectApi();\n+        }\n \n-            // dispatch infoResponse to each of the hub's owned devices ..\n+        NeoHubAbstractDeviceData deviceData = fromNeoHubGetDeviceData();\n+        if (deviceData != null) {\n+            // dispatch deviceData to each of the hub's owned devices ..\n             List<Thing> children = getThing().getThings();\n             for (Thing child : children) {\n                 ThingHandler device = child.getHandler();\n                 if (device instanceof NeoBaseHandler) {\n-                    ((NeoBaseHandler) device).toBaseSendPollResponse(infoResponse, temperatureUnit);\n+                    ((NeoBaseHandler) device).toBaseSendPollResponse(deviceData);\n                 }\n             }\n-        }\n \n+            // evaluate and update the state of our RF mesh QoS channel\n+            List<? extends AbstractRecord> devices = deviceData.getDevices();\n+            State state;\n+\n+            if (devices == null || devices.isEmpty()) {\n+                state = UnDefType.UNDEF;\n+            } else {\n+                int totalDeviceCount = devices.size();\n+                int onlineDeviceCount = 0;\n+\n+                for (AbstractRecord device : devices) {\n+                    String deviceName = device.getDeviceName();\n+                    Boolean online = !device.offline();\n+\n+                    if (connectionStates.containsKey(deviceName)) {\n+                        @Nullable\n+                        Boolean onlineBefore = connectionStates.get(deviceName);\n+                        if (!online.equals(onlineBefore)) {\n+                            logger.info(\"device \\\"{}\\\" has {} the RF mesh network\", deviceName,\n+                                    online.booleanValue() ? \"joined\" : \"left\");\n+                        }\n+                    }\n+                    connectionStates.put(deviceName, online);\n+\n+                    if (online.booleanValue()) {\n+                        onlineDeviceCount++;\n+                    }\n+                }\n+                state = new QuantityType<>((100.0 * onlineDeviceCount) / totalDeviceCount, Units.PERCENT);\n+            }\n+            updateState(CHAN_MESH_NETWORK_QOS, state);\n+        }\n         if (fastPollingCallsToGo.get() > 0) {\n             fastPollingCallsToGo.decrementAndGet();\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDQ4OA=="}, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDk1NjQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxOToyOToxM1rOGcpWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxMjo0Mjo1MVrOGcyYIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDgzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } catch (Exception e) {\n          \n          \n            \n                        } catch (JsonSyntaxException | IOException e) {", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432690830", "createdAt": "2020-05-29T19:29:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +387,88 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsLegacyApi) {\n+                    throw new NeoHubException(\"legacy API not supported\");\n+                }\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+                logger.debug(\"Legacy API is not supported!\");\n+            }\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_SYSTEM);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsFutureApi) {\n+                    throw new NeoHubException(\"new API not supported\");\n+                }\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+                logger.debug(\"New API is not supported!\");\n+            }\n+        }\n+\n+        if (!supportsLegacyApi && !supportsFutureApi) {\n+            logger.warn(\"Currently neither legacy nor new API are supported!\");\n+            isApiOnline = false;\n+            return;\n+        }\n+\n+        NeoHubConfiguration config = this.config;\n+        boolean isLegacyApiSelected = (supportsLegacyApi && config != null && config.preferLegacyApi);\n+        if (isLegacyApiSelected != this.isLegacyApiSelected) {\n+            logger.info(\"Changing API version: {}\",\n+                    isLegacyApiSelected ? \"\\\"new\\\" => \\\"legacy\\\"\" : \"\\\"legacy\\\" => \\\"new\\\"\");\n+        }\n+        this.isLegacyApiSelected = isLegacyApiSelected;\n+        this.isApiOnline = true;\n+    }\n+\n+    /*\n+     * get the Engineers data\n+     */\n+    public @Nullable NeoHubGetEngineersData fromNeoHubGetEngineersData() {\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_ENGINEERS);\n+                return NeoHubGetEngineersData.createEngineersData(responseJson);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgzODY4OA==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/7767#discussion_r432838688", "createdAt": "2020-05-30T12:42:51Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -279,4 +387,88 @@ private void fastPollingSchedulerExecute() {\n             lazyPollingSchedulerExecute();\n         }\n     }\n+\n+    /*\n+     * select whether to use the old \"deprecated\" API or the new API\n+     */\n+    private void selectApi() {\n+        boolean supportsLegacyApi = false;\n+        boolean supportsFutureApi = false;\n+\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            NeoHubReadDcbResponse systemData;\n+\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_READ_DCB);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsLegacyApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsLegacyApi) {\n+                    throw new NeoHubException(\"legacy API not supported\");\n+                }\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+                logger.debug(\"Legacy API is not supported!\");\n+            }\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_SYSTEM);\n+                systemData = NeoHubReadDcbResponse.createSystemData(responseJson);\n+                supportsFutureApi = systemData instanceof NeoHubReadDcbResponse;\n+                if (!supportsFutureApi) {\n+                    throw new NeoHubException(\"new API not supported\");\n+                }\n+            } catch (Exception e) {\n+                // we learned that this API is not currently supported; no big deal\n+                logger.debug(\"New API is not supported!\");\n+            }\n+        }\n+\n+        if (!supportsLegacyApi && !supportsFutureApi) {\n+            logger.warn(\"Currently neither legacy nor new API are supported!\");\n+            isApiOnline = false;\n+            return;\n+        }\n+\n+        NeoHubConfiguration config = this.config;\n+        boolean isLegacyApiSelected = (supportsLegacyApi && config != null && config.preferLegacyApi);\n+        if (isLegacyApiSelected != this.isLegacyApiSelected) {\n+            logger.info(\"Changing API version: {}\",\n+                    isLegacyApiSelected ? \"\\\"new\\\" => \\\"legacy\\\"\" : \"\\\"legacy\\\" => \\\"new\\\"\");\n+        }\n+        this.isLegacyApiSelected = isLegacyApiSelected;\n+        this.isApiOnline = true;\n+    }\n+\n+    /*\n+     * get the Engineers data\n+     */\n+    public @Nullable NeoHubGetEngineersData fromNeoHubGetEngineersData() {\n+        NeoHubSocket socket = this.socket;\n+        if (socket != null) {\n+            String responseJson;\n+            try {\n+                responseJson = socket.sendMessage(CMD_CODE_GET_ENGINEERS);\n+                return NeoHubGetEngineersData.createEngineersData(responseJson);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY5MDgzMA=="}, "originalCommit": {"oid": "9279290aa6ded1ee4c293c10480cca2f5add0f51"}, "originalPosition": 438}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4895, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}