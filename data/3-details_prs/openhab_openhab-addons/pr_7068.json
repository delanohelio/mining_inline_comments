{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzg4MTk4", "number": 7068, "title": "[goecharger] Initial contribution", "bodyText": "Forum post for this binding:\nhttps://community.openhab.org/t/go-e-charger-wallbox-binding/\nProduct:\nhttps://go-e.co/go-echarger-home/\nThis binding is for reading and configuring the go echarger mobile wallbox. My goal is to implement  PV charging with openhab and this binding, so i can charge as much solar energy as possible.\nSample sitemap that shows values you can get from wallbox:\n\nBinding .jar zipped:\norg.openhab.binding.goecharger-2.5.3-SNAPSHOT.zip", "createdAt": "2020-02-26T16:40:31Z", "url": "https://github.com/openhab/openhab-addons/pull/7068", "merged": true, "mergeCommit": {"oid": "84c9d488664acea2b2e9bdfba0a4ad07541640d6"}, "closed": true, "closedAt": "2020-03-10T10:38:16Z", "author": {"login": "SamuelBrucksch"}, "timelineItems": {"totalCount": 100, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKckIgAFqTM2OTA0NzgwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMQEEfAFqTM3MTgzODQ4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDQ3ODAw", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-369047800", "createdAt": "2020-03-04T19:11:49Z", "commit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMTo1MFrOFx6DcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDowMDo1NFrOFx7tOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTY5Nw==", "bodyText": "Please use a new line for each sentence. This is automatically put on one line when the documentation is compiled.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387875697", "createdAt": "2020-03-04T19:11:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/). It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NjIzMQ==", "bodyText": "Please add a column for \"required yes/no\"", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387876231", "createdAt": "2020-03-04T19:12:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/). It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery\n+\n+There is no auto discovery. You need to get the IP from the Go-eCharger and put it into the configuration.\n+\n+## Thing Configuration\n+\n+The thing has two configuration parameters:\n+\n+| Parameter | Description                                                              |\n+|-----------|------------------------------------------------------------------------- |\n+| ip        | the ip-address of your go-eCharger |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3Njc4Ng==", "bodyText": "Please make use of UoM (i.e. Number:Current), also applies to the other channels", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387876786", "createdAt": "2020-03-04T19:13:59Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/). It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery\n+\n+There is no auto discovery. You need to get the IP from the Go-eCharger and put it into the configuration.\n+\n+## Thing Configuration\n+\n+The thing has two configuration parameters:\n+\n+| Parameter | Description                                                              |\n+|-----------|------------------------------------------------------------------------- |\n+| ip        | the ip-address of your go-eCharger |\n+| refreshInterval  | Interval to read data (in seconds) |\n+\n+## Channels\n+\n+Currently available channels are \n+| Channel ID | Item Type    | Description              |\n+|------------|--------------|------------------------- |\n+| maxAmpere | Number | Max ampere allowed to use for charging |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3Nzg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerBindingConstants {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerBindingConstants {\n          \n      \n    \n    \n  \n\nplease also annotate the other classes", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387877872", "createdAt": "2020-03-04T19:15:58Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerBindingConstants.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link GoEChargerBindingConstants} class defines common constants, which\n+ * are used across the whole binding.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerBindingConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODI5MQ==", "bodyText": "No need to add that here. Add it in the configuration class.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878291", "createdAt": "2020-03-04T19:16:40Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerBindingConstants.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link GoEChargerBindingConstants} class defines common constants, which\n+ * are used across the whole binding.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerBindingConstants {\n+\n+    private static final String BINDING_ID = \"goecharger\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_GOE = new ThingTypeUID(BINDING_ID, \"goe\");\n+\n+    // List of all Channel ids\n+    public static final String MAX_AMPERE       = \"maxAmpere\";\n+    public static final String ACCESS_STATE       = \"accessState\";\n+    public static final String PWM_SIGNAL       = \"pwmSignal\";\n+    public static final String ERROR            = \"error\";\n+    public static final String VOLTAGE_L1       = \"voltageL1\";\n+    public static final String VOLTAGE_L2       = \"voltageL2\";\n+    public static final String VOLTAGE_L3       = \"voltageL3\";\n+    public static final String CURRENT_L1       = \"currentL1\";\n+    public static final String CURRENT_L2       = \"currentL2\";\n+    public static final String CURRENT_L3       = \"currentL3\";\n+    public static final String POWER_L1         = \"powerL1\";\n+    public static final String POWER_L2         = \"powerL2\";\n+    public static final String POWER_L3         = \"powerL3\";\n+    public static final String ALLOW_CHARGING   = \"allowCharging\";\n+    public static final String CABLE_ENCODING   = \"cableEncoding\";\n+    public static final String PHASES           = \"phases\";\n+    public static final String TEMPERATURE      = \"temperature\";\n+    public static final String SESSION_CHARGE_CONSUMPTION = \"sessionChargeConsumption\";\n+    public static final String SESSION_CHARGE_CONSUMPTION_LIMIT = \"sessionChargeConsumptionLimit\";\n+    public static final String TOTAL_CONSUMPTION = \"totalConsumption\";\n+    public static final String FIRMWARE         = \"firmware\";\n+\n+    // default values\n+    public static final int DEFAULT_REFRESH_INTERVAL = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODQwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Integer refreshInterval;\n          \n          \n            \n                public Integer refreshInterval = 5;", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878400", "createdAt": "2020-03-04T19:16:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {\n+\n+    public String ip;\n+    public Integer refreshInterval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODcxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878716", "createdAt": "2020-03-04T19:17:27Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.goecharger.internal.handler.GoEChargerHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link GoEChargerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.goecharger\", service = ThingHandlerFactory.class)\n+public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODkxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerConfiguration {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerConfiguration {", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878910", "createdAt": "2020-03-04T19:17:46Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3OTE2Nw==", "bodyText": "Either provide a default or add @Nullable.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387879167", "createdAt": "2020-03-04T19:18:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {\n+\n+    public String ip;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MjUyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Object getValue(String channelId) {\n          \n          \n            \n                public State getValue(String channelId) {\n          \n      \n    \n    \n  \n\nThat makes it easier to use UoM", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387882520", "createdAt": "2020-03-04T19:24:22Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NDExMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return goeResponse.getMaxChargeAmps();\n          \n          \n            \n                                return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmarthomeUnits.AMPERE);\n          \n      \n    \n    \n  \n\nI only added some examples. For additional information check https://www.openhab.org/docs/concepts/units-of-measurement.html", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387884112", "createdAt": "2020-03-04T19:27:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NTM5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return goeResponse.getTemperature();\n          \n          \n            \n                                return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387885393", "createdAt": "2020-03-04T19:29:31Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODEwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object value = getValue(channelId);\n          \n          \n            \n                    State value = getValue(channelId);\n          \n      \n    \n    \n  \n\nand remove the conversion below", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888104", "createdAt": "2020-03-04T19:34:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODQyNA==", "bodyText": "Not needed", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888424", "createdAt": "2020-03-04T19:34:54Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODgxMQ==", "bodyText": "The framework makes sure that this is non-null if you set the paramater to required", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888811", "createdAt": "2020-03-04T19:35:37Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NjE2MA==", "bodyText": "Please use our shared HttpClient \"jetty\". You get it in the HandlerFactory as injected service (see e.g. the darksky binding) and for usage \n  \n    \n      openhab-addons/bundles/org.openhab.binding.darksky/src/main/java/org/openhab/binding/darksky/internal/connection/DarkSkyConnection.java\n    \n    \n         Line 179\n      in\n      a99e209\n    \n    \n    \n    \n\n        \n          \n           ContentResponse contentResponse = httpClient.newRequest(url).method(GET).timeout(10, TimeUnit.SECONDS)", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387896160", "createdAt": "2020-03-04T19:48:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NjkyNw==", "bodyText": "Please make this Runnable a method (e.g. private void refresh() {...}) and reference that below", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387896927", "createdAt": "2020-03-04T19:50:19Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 371}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzQ0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (Channel channel : getThing().getChannels()) {\n          \n          \n            \n                                    updateChannel(channel.getUID().getId());\n          \n          \n            \n                                }\n          \n          \n            \n                                getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897441", "createdAt": "2020-03-04T19:51:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 380}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzcxOA==", "bodyText": "Please do not catch Exception. What exceptions do you expect here?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897718", "createdAt": "2020-03-04T19:51:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5Nzg0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n          \n          \n            \n                                logger.warn(\"Exception occurred during execution: {}\", e.getMessage(), e);", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897840", "createdAt": "2020-03-04T19:51:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 382}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODIyMQ==", "bodyText": "not needed if you set the default in the configuration class", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387898221", "createdAt": "2020-03-04T19:52:30Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 387}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODM5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n          \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, delay, TimeUnit.SECONDS);\n          \n      \n    \n    \n  \n\nafter you move the runnable to a method", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387898397", "createdAt": "2020-03-04T19:52:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 389}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTIwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {\n          \n          \n            \n                    final ScheduledFuture<?> refreshJob = this.refreshJob;\n          \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901209", "createdAt": "2020-03-04T19:58:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the Go-E Charger handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 397}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTMxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshJob = null;\n          \n          \n            \n                        this.refreshJob = null;", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901310", "createdAt": "2020-03-04T19:58:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the Go-E Charger handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTYzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Current</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901631", "createdAt": "2020-03-04T19:58:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTgwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Max Ampere</label>\n          \n          \n            \n            \t\t<label>Maximum Current</label>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901802", "createdAt": "2020-03-04T19:59:06Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjE3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<state pattern=\"%d A\" readOnly=\"false\"></state>\n          \n          \n            \n            \t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n          \n      \n    \n    \n  \n\nThis is not read-only? So the user can set that channel?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387902179", "createdAt": "2020-03-04T19:59:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"false\"></state>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjUyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Temperature</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387902520", "createdAt": "2020-03-04T20:00:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Signal status for PWM signal</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>\n+\t</channel-type>\n+\t<channel-type id=\"vl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L1</label>\n+\t\t<description>Voltage on L1</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L2</label>\n+\t\t<description>Voltage on L2</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L3</label>\n+\t\t<description>Voltage on L3</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L1</label>\n+\t\t<description>Current on L1</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L2</label>\n+\t\t<description>Current on L2</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L3</label>\n+\t\t<description>Current on L3</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L1</label>\n+\t\t<description>Power on L1</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L2</label>\n+\t\t<description>Power on L2</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L3</label>\n+\t\t<description>Power on L3</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pha\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Phases</label>\n+\t\t<description>Amount of phases currently used for charging</description>\n+\t</channel-type>\n+\t<channel-type id=\"scl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Limit</label>\n+\t\t<description>Wallbox stops charging after defined value, deactivate with value 0</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"scs\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged in this session</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eto\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Total Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged since installation</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"alw\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Allow Charging</label>\n+\t\t<description>If true charging is allowed</description>\n+\t</channel-type>\n+\t<channel-type id=\"cbl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cable Encoding</label>\n+\t\t<description>Specifies the max amps that can be charged with that cable</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"tmp\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjc3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<state pattern=\"%d \u00b0C\" readOnly=\"true\"></state>\n          \n          \n            \n            \t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n          \n      \n    \n    \n  \n\nis this only provided as integer?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387902776", "createdAt": "2020-03-04T20:00:54Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Signal status for PWM signal</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>\n+\t</channel-type>\n+\t<channel-type id=\"vl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L1</label>\n+\t\t<description>Voltage on L1</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L2</label>\n+\t\t<description>Voltage on L2</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L3</label>\n+\t\t<description>Voltage on L3</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L1</label>\n+\t\t<description>Current on L1</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L2</label>\n+\t\t<description>Current on L2</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L3</label>\n+\t\t<description>Current on L3</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L1</label>\n+\t\t<description>Power on L1</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L2</label>\n+\t\t<description>Power on L2</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L3</label>\n+\t\t<description>Power on L3</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pha\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Phases</label>\n+\t\t<description>Amount of phases currently used for charging</description>\n+\t</channel-type>\n+\t<channel-type id=\"scl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Limit</label>\n+\t\t<description>Wallbox stops charging after defined value, deactivate with value 0</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"scs\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged in this session</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eto\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Total Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged since installation</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"alw\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Allow Charging</label>\n+\t\t<description>If true charging is allowed</description>\n+\t</channel-type>\n+\t<channel-type id=\"cbl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cable Encoding</label>\n+\t\t<description>Specifies the max amps that can be charged with that cable</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"tmp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature of the Go-eCharger</description>\n+\t\t<state pattern=\"%d \u00b0C\" readOnly=\"true\"></state>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a23ffe853f0159da82d70892d4cae65866fd03a", "author": {"user": {"login": "J-N-K", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/2a23ffe853f0159da82d70892d4cae65866fd03a", "committedDate": "2020-03-05T20:37:39Z", "message": "fix updating presence channel (#7050)\n\nSigned-off-by: Jan N. Klug <jan.n.klug@rub.de>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01956b0e7bc11b50afcdf8d074f43f4fc59613e2", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/01956b0e7bc11b50afcdf8d074f43f4fc59613e2", "committedDate": "2020-03-05T20:37:39Z", "message": "[nanoleaf] Fixed: Http 400 handling / NPE in logging. Reduced logging. (#7058)\n\n* [nanoleaf] Fixed: Http 400 handling / NPE in logging. Reduced logging.\r\n\r\nSigned-off-by: Stefan H\u00f6hn <stefan@andreaundstefanhoehn.de>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa8beba4c0c864ff2a0573b59ee0ee5e276e0abf", "author": {"user": {"login": "fruggy83", "name": "Daniel Weber"}}, "url": "https://github.com/openhab/openhab-addons/commit/aa8beba4c0c864ff2a0573b59ee0ee5e276e0abf", "committedDate": "2020-03-05T20:37:39Z", "message": "[enocean] Added support for Smoke Detectors (#6929) (#6930)\n\n* [enocean] Added support for Smoke Detectors (#6929)\r\n\r\n * Implemented EEP F6_05_02 and D2_14_30\r\n * Added new thing MultiFunctionSmokeDetector\r\n * Added new smoke detector specific channels\r\n\r\nFixes #6929\r\n\r\nSigned-off-by: Daniel Weber <uni@fruggy.de>\r\n\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "704a4165f3f4832055ca5c9e56ab75ef7c33a026", "author": {"user": {"login": "druciak", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/704a4165f3f4832055ca5c9e56ab75ef7c33a026", "committedDate": "2020-03-05T20:37:39Z", "message": "[satel] Event log changes (#7027)\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "611d36483307d76772146c37fd950325cff4186c", "author": {"user": {"login": "gs4711", "name": "Guenther Schreiner"}}, "url": "https://github.com/openhab/openhab-addons/commit/611d36483307d76772146c37fd950325cff4186c", "committedDate": "2020-03-05T20:37:39Z", "message": "[velux] Initial contribution (#2531)\n\nInitial contribution\r\n\r\nSigned-off-by: Guenther Schreiner <guenther.schreiner@smile.de>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7186dfdc7f242ecebd40a4950879ba399f57b373", "author": {"user": {"login": "mehoekstra", "name": "Matt Hoekstra"}}, "url": "https://github.com/openhab/openhab-addons/commit/7186dfdc7f242ecebd40a4950879ba399f57b373", "committedDate": "2020-03-05T20:37:39Z", "message": "[mqtt.homeassistant] Bugfix in ComponentLight (#7033)\n\n* Fixed bugs in ComponentLight\r\n\r\nSigned-off-by: Matt Hoekstra <matthew.e.hoekstra@gmail.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13c187c8c9c646c0d81db03f5512635ba37fbb08", "author": {"user": {"login": "cpmeister", "name": "Connor Petty"}}, "url": "https://github.com/openhab/openhab-addons/commit/13c187c8c9c646c0d81db03f5512635ba37fbb08", "committedDate": "2020-03-05T20:37:39Z", "message": "[bluetooth.bluez] Fix for bluez discovery scheduler death (#7072) (#7073)\n\n* Fix for issue #7072\r\n\r\nSigned-off-by: Connor Petty <cpmeister@users.noreply.github.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2593d70019d0494e04a7ace096cd34a93609084", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e2593d70019d0494e04a7ace096cd34a93609084", "committedDate": "2020-03-05T20:37:39Z", "message": "[yeelight] Add support for yeelight 650 with ambient light (Closes #6\u2026 (#6749)\n\n* [yeelight] Add support for yeelight 650 with ambient light (Closes #6227)\r\n\r\nSigned-off-by: Viktor Koop <viktor.koop@googlemail.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbc92dd26aa803b0027c6917f985e4100cf3745e", "author": {"user": {"login": "ssalonen", "name": "Sami Salonen"}}, "url": "https://github.com/openhab/openhab-addons/commit/cbc92dd26aa803b0027c6917f985e4100cf3745e", "committedDate": "2020-03-05T20:37:40Z", "message": "[modbus] Log more information on unexpected (uncatched) exceptions (#7085)\n\nSigned-off-by: Sami Salonen <ssalonen@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16b6441e05f6808b8d8568ea11c2c43e078b401e", "author": {"user": {"login": "marcelrv", "name": "Marcel"}}, "url": "https://github.com/openhab/openhab-addons/commit/16b6441e05f6808b8d8568ea11c2c43e078b401e", "committedDate": "2020-03-05T20:37:40Z", "message": "[miio] Prevent unneeded pings (#7083)\n\nSigned-off-by: Marcel Verpaalen <marcel@verpaalen.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8220e0d62676a3911dfcc3fa7cb480ef8c177930", "author": {"user": {"login": "gwimmel", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/8220e0d62676a3911dfcc3fa7cb480ef8c177930", "committedDate": "2020-03-05T20:37:40Z", "message": "[tradfri] correct sitemap example (#7084)\n\nsitemap does not seem to support \"Rollershutter\" element types (at least not for me, gives me an error \"mismatched input\"), suggesting to replace it with \"Switch\" and displaying the position value\r\n\r\nSigned-off-by: Guido Wimmel <guido_99@gmx.de>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "869fe8bbbd43436e70092b73c05bc4b226403d0e", "author": {"user": {"login": "radokristof", "name": "Kristof Rado"}}, "url": "https://github.com/openhab/openhab-addons/commit/869fe8bbbd43436e70092b73c05bc4b226403d0e", "committedDate": "2020-03-05T20:37:40Z", "message": "[icloud] Fix NPE in AccountBridgeHandler (#7087)\n\n* Fix NPE in AccountBridgeHandler\r\n\r\nSigned-off-by: Kristof Rado <rado.krisi@gmail.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11cfd454f429bbb68044f7c8d85a0145f663622e", "author": {"user": {"login": "cpmeister", "name": "Connor Petty"}}, "url": "https://github.com/openhab/openhab-addons/commit/11cfd454f429bbb68044f7c8d85a0145f663622e", "committedDate": "2020-03-05T20:37:40Z", "message": "[bluetooth.bluez] disable discovery service by default (#6965)\n\nDiscovery for bluez adapter should be disabled by default to prevent\r\noverwhelming users when they first add a bluez thing. Since the user can\r\ndo manual scans when they need to there is no reason for discovery to be\r\nenabled all the time.\r\n\r\nSigned-off-by: Connor Petty <cpmeister@users.noreply.github.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73245bed0cf9fbbdc95b4f8905c5a3f47a54bc66", "author": {"user": {"login": "9037568", "name": "Chris Carman"}}, "url": "https://github.com/openhab/openhab-addons/commit/73245bed0cf9fbbdc95b4f8905c5a3f47a54bc66", "committedDate": "2020-03-05T20:37:40Z", "message": "Fix wind speed units and clean up compiler warnings (#7078)\n\nSigned-off-by: 9037568 <namraccr@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b456b1321e0be18e058e300e7c18adc6b72cacbb", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/b456b1321e0be18e058e300e7c18adc6b72cacbb", "committedDate": "2020-03-05T20:37:40Z", "message": "Initial commit\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "184a585abc46d79de56640f7402281cf34f5e5be", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/184a585abc46d79de56640f7402281cf34f5e5be", "committedDate": "2020-03-05T20:37:40Z", "message": "header and docs\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0764d75658dd6af746626658c2b98887f679fda7", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/0764d75658dd6af746626658c2b98887f679fda7", "committedDate": "2020-03-05T20:37:40Z", "message": "added nrg property\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf593cec02fe25d35ee7d44ef892069c33729d91", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/bf593cec02fe25d35ee7d44ef892069c33729d91", "committedDate": "2020-03-05T20:37:40Z", "message": "Added energy readings\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0ca2c403db5c1db7c38ad6530838fc483fe16a2", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/c0ca2c403db5c1db7c38ad6530838fc483fe16a2", "committedDate": "2020-03-05T20:37:40Z", "message": "Added channels and modified API\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b97a0255c51a9290497a6f16e67e09495053956", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/0b97a0255c51a9290497a6f16e67e09495053956", "committedDate": "2020-03-05T20:37:40Z", "message": "added more thing types\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3fdf4141ad8a039f63a23021d58d353491144e6", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f3fdf4141ad8a039f63a23021d58d353491144e6", "committedDate": "2020-03-05T20:37:40Z", "message": "more thing channels\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fb7e0189b5a54530d42be9dc07bbea8b10f7402", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/3fb7e0189b5a54530d42be9dc07bbea8b10f7402", "committedDate": "2020-03-05T20:37:40Z", "message": "fixed xml\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e33ec1165bdd58e97b18dd94e5c0b6a8f3a9a9c8", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e33ec1165bdd58e97b18dd94e5c0b6a8f3a9a9c8", "committedDate": "2020-03-05T20:37:40Z", "message": "fixed xml\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3c17124ec85274d942b0e0e2e98fa6d4e6d949c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e3c17124ec85274d942b0e0e2e98fa6d4e6d949c", "committedDate": "2020-03-05T20:37:40Z", "message": "fixed xml (final)\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ed32386b3ea42fe0b010268b09e1dce04f1cd0", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/a1ed32386b3ea42fe0b010268b09e1dce04f1cd0", "committedDate": "2020-03-05T20:37:40Z", "message": "fixed gson types\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cefc5fd9c0b0b626469f5d8143421705539bc1a", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/1cefc5fd9c0b0b626469f5d8143421705539bc1a", "committedDate": "2020-03-05T20:37:40Z", "message": "fixed xml type id\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a7a44b08d837dc543bfeb642208dd026e990c75", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/6a7a44b08d837dc543bfeb642208dd026e990c75", "committedDate": "2020-03-05T20:37:40Z", "message": "fixed bool values\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cd50860510216938b4eead600ee7057eed5f923", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/9cd50860510216938b4eead600ee7057eed5f923", "committedDate": "2020-03-05T20:37:40Z", "message": "formatting\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96e44e5406f48d135c104bda65be89aa3253ecb2", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/96e44e5406f48d135c104bda65be89aa3253ecb2", "committedDate": "2020-03-05T20:37:40Z", "message": "cleaned up\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55689b6ef201e2f133f80dad50302fa34bb3f8b3", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/55689b6ef201e2f133f80dad50302fa34bb3f8b3", "committedDate": "2020-03-05T20:37:40Z", "message": "removed error messages from debugging\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f746262be5519fb835dddb31f89338e692fe1fe4", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f746262be5519fb835dddb31f89338e692fe1fe4", "committedDate": "2020-03-05T20:37:40Z", "message": "added post implementation\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d08c102ec09fc9095f9f34aedbfaf36558e539", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f7d08c102ec09fc9095f9f34aedbfaf36558e539", "committedDate": "2020-03-05T20:37:40Z", "message": "added more fields to update command\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29a72294f765f6ad474fe378cfd33af52d954be4", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/29a72294f765f6ad474fe378cfd33af52d954be4", "committedDate": "2020-03-05T20:37:40Z", "message": "more fixes\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "215e1a7b5f8303d190bb25c4cf01c1a4cdd6b491", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/215e1a7b5f8303d190bb25c4cf01c1a4cdd6b491", "committedDate": "2020-03-05T20:37:41Z", "message": "fix cast\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c944042f56a28ff4a784391de161e22497b268c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/5c944042f56a28ff4a784391de161e22497b268c", "committedDate": "2020-03-05T20:37:41Z", "message": "fixed key for stop state\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "313f66e0e921abeea514dc735c8ccdcbb5e2cda3", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/313f66e0e921abeea514dc735c8ccdcbb5e2cda3", "committedDate": "2020-03-05T20:37:41Z", "message": "fixed sent value for stop state\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e60c40a991b607c20674526ed9d397bcda508459", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e60c40a991b607c20674526ed9d397bcda508459", "committedDate": "2020-03-05T20:37:41Z", "message": "more documentation\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6a33d8b5fee1388cbf2dacf7101925fa8b33ec1", "author": {"user": {"login": "SamuelBrucksch", "name": "Samuel Brucksch"}}, "url": "https://github.com/openhab/openhab-addons/commit/a6a33d8b5fee1388cbf2dacf7101925fa8b33ec1", "committedDate": "2020-03-05T20:37:41Z", "message": "added goecharger to pom.xml\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c81e6df5fdf4067dba5c277085bc34c573767cbe", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/c81e6df5fdf4067dba5c277085bc34c573767cbe", "committedDate": "2020-03-05T20:37:41Z", "message": "fixed docs\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6f7eb3457f1bf1e616c621837ddbf81c99b28a3", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/b6f7eb3457f1bf1e616c621837ddbf81c99b28a3", "committedDate": "2020-03-05T20:37:41Z", "message": "formatting\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f9d1cc5a9fbe53824c15d1b0c06af2ee41c7d1e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/8f9d1cc5a9fbe53824c15d1b0c06af2ee41c7d1e", "committedDate": "2020-03-05T20:37:41Z", "message": "more docs\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ba5a2d15a3ffa59389d263558f3c05ec35aed14", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/9ba5a2d15a3ffa59389d263558f3c05ec35aed14", "committedDate": "2020-03-05T20:37:41Z", "message": "adopted writing of Go-eCharger\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f7c4c4a55b39e69e5fe2a67ee11f316ec6ddf0", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/87f7c4c4a55b39e69e5fe2a67ee11f316ec6ddf0", "committedDate": "2020-03-05T20:37:41Z", "message": "project and classpath file\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a53389e0cbf8cc0589417970ee04fabba546b72", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/3a53389e0cbf8cc0589417970ee04fabba546b72", "committedDate": "2020-03-05T20:37:41Z", "message": "Timeout and nulling values\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "149ea358fe206e368e1dc0b6d8b2ecd905eff382", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/149ea358fe206e368e1dc0b6d8b2ecd905eff382", "committedDate": "2020-03-05T20:37:41Z", "message": "Calculated phases based on voltage\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f26e75ef3a430e772555d20196bf556bc1bf3799", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f26e75ef3a430e772555d20196bf556bc1bf3799", "committedDate": "2020-03-05T20:37:41Z", "message": "Adjustments of API and code after testing\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "414006205dadc90dfb8f0ea3ba7a59469b5bc2a1", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/414006205dadc90dfb8f0ea3ba7a59469b5bc2a1", "committedDate": "2020-03-05T20:37:41Z", "message": "Fixed readme\n\nSigned-off-by: Samuel Brucksch <samuel.brucksch@sap.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbeb1112bb61ff2881b8fe6a3677822a5b203ffb", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/bbeb1112bb61ff2881b8fe6a3677822a5b203ffb", "committedDate": "2020-03-05T20:37:41Z", "message": "Added access state\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f50ab99bf72fcd058723e236bb4ec8a4cb81624", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/6f50ab99bf72fcd058723e236bb4ec8a4cb81624", "committedDate": "2020-03-05T20:37:41Z", "message": "[weathercompany] Increase decimal precision for PWS Observations (#7070)\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4568945fc92d4afe5373f34d388498836a49def", "author": {"user": {"login": "cpmeister", "name": "Connor Petty"}}, "url": "https://github.com/openhab/openhab-addons/commit/b4568945fc92d4afe5373f34d388498836a49def", "committedDate": "2020-03-05T20:37:41Z", "message": "Prevent going offline for \"in progress\" exceptions (#7091)\n\nSigned-off-by: Connor Petty <cpmeister@users.noreply.github.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f254b602bf51dcd2e46f098ec161a185710ffcf6", "author": {"user": {"login": "mehoekstra", "name": "Matt Hoekstra"}}, "url": "https://github.com/openhab/openhab-addons/commit/f254b602bf51dcd2e46f098ec161a185710ffcf6", "committedDate": "2020-03-05T20:37:41Z", "message": "[mqtt.homeassistant] Bugfix in HomeAssistantThingHandler (#7035)\n\n* fixed bugs in ComponentLight and HomeAssistantThingHandler\r\n\r\nSigned-off-by: Matt Hoekstra <matthew.e.hoekstra@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ec1846016794f4f0fede6dbc1e50298e863377", "author": {"user": {"login": "cpmeister", "name": "Connor Petty"}}, "url": "https://github.com/openhab/openhab-addons/commit/05ec1846016794f4f0fede6dbc1e50298e863377", "committedDate": "2020-03-05T20:37:41Z", "message": "[bluetooth.am43] AM43 Binding initial contribution (#6979)\n\n* Initial commit of AM43 Binding\r\n\r\nSigned-off-by: Connor Petty <cpmeister@users.noreply.github.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38707462bf6db50d5777f889ab38ef8f07343886", "author": {"user": {"login": "marbon87", "name": "Mark Bonnekessel"}}, "url": "https://github.com/openhab/openhab-addons/commit/38707462bf6db50d5777f889ab38ef8f07343886", "committedDate": "2020-03-05T20:37:41Z", "message": "[hueemulation] Consider property discoveryIps if configured (#6662) (#6967)\n\n* [hueemulation] Consider property discoveryIps if configured (#6662)\r\n\r\nSigned-off-by: Mark Bonnekessel <bonnekessel@mailbox.org>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e51fb0c4f69ec1b557d2d5b98504740c589e64e3", "author": {"user": {"login": "druciak", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/e51fb0c4f69ec1b557d2d5b98504740c589e64e3", "committedDate": "2020-03-05T20:37:41Z", "message": "[satel] Command and events refactoring, communication improvements (#7086)\n\nSigned-off-by: Krzysztof Goworek <krzysztof.goworek@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f946585a68195b99800268eb09526984ed346768", "author": {"user": {"login": "octa22", "name": "Ondrej Pecta"}}, "url": "https://github.com/openhab/openhab-addons/commit/f946585a68195b99800268eb09526984ed346768", "committedDate": "2020-03-05T20:37:41Z", "message": "[somfytahoma] added dynamic RSSI and status channels (#6993)\n\n* [somfytahoma] added dynamic rssi channel\r\n* [somfytahoma] added extra channels for sensor things\r\n\r\nSigned-off-by: Ondrej Pecta <opecta@gmail.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55dba381009c384c07cdaabfe48084508b9cddab", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/55dba381009c384c07cdaabfe48084508b9cddab", "committedDate": "2020-03-05T20:37:41Z", "message": "removed jsonfile\n\nSigned-off-by: Samuel Brucksch <samuel.brucksch@sap.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5569ef110456ed2c4d9457322b3b2707a294b612", "author": {"user": {"login": "9037568", "name": "Chris Carman"}}, "url": "https://github.com/openhab/openhab-addons/commit/5569ef110456ed2c4d9457322b3b2707a294b612", "committedDate": "2020-03-05T20:37:41Z", "message": "Don't treat the ActiveLow setting as if it's required (#7092)\n\nSigned-off-by: 9037568 <namraccr@gmail.com>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86126182002f60c66a112c1049f5ca655b117b79", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/86126182002f60c66a112c1049f5ca655b117b79", "committedDate": "2020-03-05T20:37:42Z", "message": "fixed version in pom.xml (#7094)\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2920a54e2aaf6d6b3a37648525abde1ce3af646f", "author": {"user": {"login": "J-N-K", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/2920a54e2aaf6d6b3a37648525abde1ce3af646f", "committedDate": "2020-03-05T20:37:42Z", "message": "[mcp23017] Allow choosing I2C bus numbers other than 0 and 1 (#6825)\n\nIf additional I2C bit banging busses are used, those addtional bus numbers are nescessary\r\n\r\nSigned-off-by: Jockra <59808296+Jockra@users.noreply.github.com>\r\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c94eecafffe2ee01f398bc2fd98f1afd2c8086", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/d1c94eecafffe2ee01f398bc2fd98f1afd2c8086", "committedDate": "2020-03-05T20:37:42Z", "message": "[volvooncall] Add missing channels and update documentation (#6880) (#6934)\n\n* [volvooncall] Added channels to the VolvoOnCall binding (#6880)\r\n\r\nAdded:\r\n- Tyre pressure\r\n- Plugin Hybrid (PHEV) / Twin engine data\r\n- Preclimatization next to Remote heater\r\n- Average speed\r\n- Brake fluid level\r\n\r\nAlso updated the readme file\r\n\r\nSigned-off-by: Arie van der Lee <arie@soleetions.nl>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c228512191598720284cbfd1624e6e16260bff65", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/c228512191598720284cbfd1624e6e16260bff65", "committedDate": "2020-03-05T20:37:42Z", "message": "fixed connection problem on post\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d08261c4324c1d07dc9b012a141256a992b1508", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/6d08261c4324c1d07dc9b012a141256a992b1508", "committedDate": "2020-03-05T20:37:42Z", "message": "First set of changes for review\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc8acca45267da8a72d1c759cd70c9a74e0e6c48", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/fc8acca45267da8a72d1c759cd70c9a74e0e6c48", "committedDate": "2020-03-05T20:37:42Z", "message": "removed catching exception\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b3203802c68d9eaf2f631de703cefd66d35188b", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/5b3203802c68d9eaf2f631de703cefd66d35188b", "committedDate": "2020-03-05T20:37:42Z", "message": "changes related to refresh\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f53c4b8258167d411f7a61f268b802b74faca58d", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f53c4b8258167d411f7a61f268b802b74faca58d", "committedDate": "2020-03-05T20:37:42Z", "message": "fixed some nullable annotations\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb7494d54d6f15010c8f307c73dda61bd68f1cd1", "author": {"user": {"login": "J-N-K", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/fb7494d54d6f15010c8f307c73dda61bd68f1cd1", "committedDate": "2020-03-05T20:37:42Z", "message": "[pjlinkdevice] Apply spotless codestyle plugin (#7100)\n\nSigned-off-by: Nils Schnabel <github@to.nilsschnabel.de>\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f71a3831b74dc69f92c2b10f3301b4fd41103fe", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/2f71a3831b74dc69f92c2b10f3301b4fd41103fe", "committedDate": "2020-03-05T20:37:42Z", "message": "http client and final remarks from review\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "638efcda6a72205c7fc0478e3ef1711127718da4", "author": {"user": {"login": "SamuelBrucksch", "name": "Samuel Brucksch"}}, "url": "https://github.com/openhab/openhab-addons/commit/638efcda6a72205c7fc0478e3ef1711127718da4", "committedDate": "2020-03-05T20:37:42Z", "message": "UoM in demo.items\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6099df97cd109a691ed70e2c693d7308b4f61c15", "author": {"user": {"login": "SamuelBrucksch", "name": "Samuel Brucksch"}}, "url": "https://github.com/openhab/openhab-addons/commit/6099df97cd109a691ed70e2c693d7308b4f61c15", "committedDate": "2020-03-05T20:37:42Z", "message": "Update README.md\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a21b93b9c1022e8672b27741595ed7e1903c18d", "author": {"user": {"login": "SamuelBrucksch", "name": "Samuel Brucksch"}}, "url": "https://github.com/openhab/openhab-addons/commit/7a21b93b9c1022e8672b27741595ed7e1903c18d", "committedDate": "2020-03-05T20:37:42Z", "message": "Update README.md\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "author": {"user": {"login": "SamuelBrucksch", "name": "Samuel Brucksch"}}, "url": "https://github.com/openhab/openhab-addons/commit/dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27", "committedDate": "2020-03-06T05:38:22Z", "message": "Merge branch '2.5.x' into goecharger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNDkwNDgy", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370490482", "createdAt": "2020-03-06T17:15:21Z", "commit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNToyMVrOFzAtfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowOToyNVrOFzCXBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMzM0Mw==", "bodyText": "You can remove the whole section if discovery is not supported", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389033343", "createdAt": "2020-03-06T17:15:21Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/).\n+It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzNDE1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public String ip;\n          \n          \n            \n                public @Nullable String ip;\n          \n      \n    \n    \n  \n\nwe use the inline style", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389034154", "createdAt": "2020-03-06T17:16:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerConfiguration {\n+\n+    @Nullable\n+    public String ip;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzNDU2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n          \n          \n            \n                        final @Reference LocaleProvider localeProvider, final @Reference LocationProvider locationProvider,\n          \n          \n            \n                        final @Reference TranslationProvider i18nProvider) {\n          \n          \n            \n                public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\n          \n      \n    \n    \n  \n\nsince you don't need the other providers, you don't need to wait for them to be available", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389034567", "createdAt": "2020-03-06T17:17:42Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.i18n.LocaleProvider;\n+import org.eclipse.smarthome.core.i18n.LocationProvider;\n+import org.eclipse.smarthome.core.i18n.TranslationProvider;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.goecharger.internal.handler.GoEChargerHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link GoEChargerHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.goecharger\", service = ThingHandlerFactory.class)\n+public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_GOE);\n+    private HttpClient httpClient;\n+\n+    @Activate\n+    public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n+            final @Reference LocaleProvider localeProvider, final @Reference LocationProvider locationProvider,\n+            final @Reference TranslationProvider i18nProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTA3OQ==", "bodyText": "I have a questions here. This is only used for de-serialization of the response, right? GSON does not use setters and if it's a DTO anyway, we allow using public fields and you could omit the getters, too.\nIf you name it GoEStatusResponseDTO, teher will be no warning regarding the null-annotation. WDYT`?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389039079", "createdAt": "2020-03-06T17:26:30Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTkyMw==", "bodyText": "I guess this is never used. At least I didn't find a hint in your code and GSON is not using that. That aside, if you want to keep it, please check the array size before you access fields, this is a food candidate for IndexOutOfBoundsException otherwise.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389039923", "createdAt": "2020-03-06T17:28:04Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponse {\n+\n+  \n+  @SerializedName(\"version\")\n+  private String version;\n+\n+  \n+  @SerializedName(\"car\")\n+  private Integer pwmSignal;\n+\n+  \n+  @SerializedName(\"ast\")\n+  private Integer accessState;\n+\n+  \n+  @SerializedName(\"amp\")\n+  private Integer maxChargeAmps;\n+\n+  \n+  @SerializedName(\"nrg\")\n+  private Integer[] energy;\n+\n+  \n+  @SerializedName(\"err\")\n+  private Integer errorCode;\n+\n+  \n+  @SerializedName(\"alw\")\n+  private Integer allowCharging;\n+\n+  \n+  @SerializedName(\"cbl\")\n+  private Integer cableEncoding;\n+\n+  \n+  @SerializedName(\"pha\")\n+  private Integer phases;\n+\n+  \n+  @SerializedName(\"tmp\")\n+  private Integer temperature;\n+\n+  \n+  @SerializedName(\"dws\")\n+  private Long sessionChargeConsumption;\n+\n+  \n+  @SerializedName(\"dwo\")\n+  private Integer sessionChargeConsumptionLimit;\n+\n+  \n+  @SerializedName(\"eto\")\n+  private Long totalChargeConsumption;\n+\n+  \n+  @SerializedName(\"fwv\")\n+  private String firmware;\n+\n+  public  String getVersion() {\n+    return version;\n+  }\n+\n+  public void setVersion( String version) {\n+    this.version = version;\n+  }\n+\n+  public  Integer getPwmSignal() {\n+    return pwmSignal;\n+  }\n+\n+  public void setPwmSignal( Integer pwmSignal) {\n+    this.pwmSignal = pwmSignal;\n+  }\n+\n+  public  Integer getMaxChargeAmps() {\n+    return maxChargeAmps;\n+  }\n+\n+  public void setMaxChargeAmps( Integer maxChargeAmps) {\n+    this.maxChargeAmps = maxChargeAmps;\n+  }\n+\n+  public  Integer getErrorCode() {\n+    return errorCode;\n+  }\n+\n+  public void setErrorCode( Integer errorCode) {\n+    this.errorCode = errorCode;\n+  }\n+\n+  public  Integer getAllowCharging() {\n+    return allowCharging;\n+  }\n+\n+  public void setAllowCharging( Integer allowCharging) {\n+    this.allowCharging = allowCharging;\n+  }\n+\n+  public  Integer getCableEncoding() {\n+    return cableEncoding;\n+  }\n+\n+  public void setCableEncoding( Integer cableEncoding) {\n+    this.cableEncoding = cableEncoding;\n+  }\n+\n+  public  Integer getPhases() {\n+    return phases;\n+  }\n+\n+  public void setPhases( Integer phases) {\n+    this.phases = phases;\n+  }\n+\n+  public  Integer getTemperature() {\n+    return temperature;\n+  }\n+\n+  public void setTemperature( Integer temperature) {\n+    this.temperature = temperature;\n+  }\n+\n+  public  Long getSessionChargeConsumption() {\n+    return sessionChargeConsumption;\n+  }\n+\n+  public void setSessionChargeConsumption( Long sessionChargeConsumption) {\n+    this.sessionChargeConsumption = sessionChargeConsumption;\n+  }\n+\n+  public  Integer getSessionChargeConsumptionLimit() {\n+    return sessionChargeConsumptionLimit;\n+  }\n+\n+  public void setSessionChargeConsumptionLimit( Integer sessionChargeConsumptionLimit) {\n+    this.sessionChargeConsumptionLimit = sessionChargeConsumptionLimit;\n+  }\n+\n+  public  Long getTotalChargeConsumption() {\n+    return totalChargeConsumption;\n+  }\n+\n+  public void setTotalChargeConsumption( Long totalChargeConsumption) {\n+    this.totalChargeConsumption = totalChargeConsumption;\n+  }\n+\n+  public  String getFirmware() {\n+    return firmware;\n+  }\n+\n+  public void setFirmware( String firmware) {\n+    this.firmware = firmware;\n+  }\n+\n+  public  Integer[] getEnergy() {\n+    return energy;\n+  }\n+\n+  public void setEnergy( Integer[] energy) {\n+    this.energy = energy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MDExOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private HttpClient httpClient;\n          \n          \n            \n                private final HttpClient httpClient;", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389040118", "createdAt": "2020-03-06T17:28:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MDMzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Gson gson;\n          \n          \n            \n                private final Gson gson = new Gson();", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389040338", "createdAt": "2020-03-06T17:28:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MTY1Nw==", "bodyText": "Why do you split here? If you don't use channel groups there should be no # in the channel id\nI would also suggest to add a check if the array returned by getEnergy() (the array if you go the way with the public fields) has the correct size (see above for reason).", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389041657", "createdAt": "2020-03-06T17:31:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MjcxNw==", "bodyText": "You can skip the return here, two lines later you return UndefType.NULL anyway. Why did you decide to use NULL instead of UNDEF?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389042717", "createdAt": "2020-03-06T17:33:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0ODI5OA==", "bodyText": "isLinked is very expensive, getValue is cheap, so I would suggest to remove that check for performance reasons.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389048298", "createdAt": "2020-03-06T17:43:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDI4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                @SuppressWarnings(\"unchecked\")\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389050284", "createdAt": "2020-03-06T17:47:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDUyOQ==", "bodyText": "You don't need to break on default", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389050529", "createdAt": "2020-03-06T17:48:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NTA2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        errorMsg = e.getMessage();\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (InterruptedException | TimeoutException | ExecutionException e) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nTwo remarks: no need to log a warning, thing status updates are already logged and do not catch Exception if you can be more specific.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389055066", "createdAt": "2020-03-06T17:57:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NjUzMQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389056531", "createdAt": "2020-03-06T18:01:10Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NjkxMg==", "bodyText": "can be removed", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389056912", "createdAt": "2020-03-06T18:01:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NzIwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n          \n          \n            \n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n          \n          \n            \n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"no response received on command\");", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389057206", "createdAt": "2020-03-06T18:02:36Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MDM1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));\n          \n          \n            \n                    getThing().getChannels().map(channel -> channel.getUID().getId()).forEach(id -> updateState(id, getValue(id)));\n          \n      \n    \n    \n  \n\nYou can the remove the updateState method. If you check null on goeReponse (and return if empty) above and add it as parameter to getValue (making it private State getValue(String id, GoEStatusResponse goeResponse), you can also remove the field, making the whole thing a bit more thread-safe.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389060356", "createdAt": "2020-03-06T18:09:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        retryCounter++;\n+        if (retryCounter == 1) {\n+            logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+            return getGoEData();\n+        }\n+        logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        goeResponse = getGoEData();\n+\n+        // Update all channels from the updated GoE data\n+        getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 334}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTQ2MTA3", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370546107", "createdAt": "2020-03-06T18:46:54Z", "commit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo0Njo1NFrOFzDcow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOToxOTowN1rOFzEX3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3ODE3OQ==", "bodyText": "You can use https://www.tablesgenerator.com/markdown_tables to adjust column width.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389078179", "createdAt": "2020-03-06T18:46:54Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/).\n+It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery\n+\n+There is no auto discovery.\n+You need to get the IP from the Go-eCharger and put it into the configuration.\n+\n+## Thing Configuration\n+\n+The thing has two configuration parameters:\n+\n+| Parameter | Description                                                              | Required |\n+|-----------|------------------------------------------------------------------------- |----------|\n+| ip        | the ip-address of your go-eCharger | yes |\n+| refreshInterval  | Interval to read data, default 5 (in seconds) | no |\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NTA4Mg==", "bodyText": "I might be wrong, but I think the purpose of this command is to retrieve current value for given channel directly from the device, so I would call refresh() here.\n@J-N-K  WDYT?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389085082", "createdAt": "2020-03-06T19:01:28Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MzM0Mw==", "bodyText": "I don't think you need this. Just pass response data from GetGoEData to other methods as a parameter.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389093343", "createdAt": "2020-03-06T19:19:07Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTk3NTcz", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370597573", "createdAt": "2020-03-06T20:12:07Z", "commit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxMjowN1rOFzGECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMTo0NDowMFrOFzL0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTAzMw==", "bodyText": "Please state the units.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389121033", "createdAt": "2020-03-06T20:12:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTg1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n          \n          \n            \n                            value = command == OnOffType.ON ? \"1\" : \"0\";", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389121859", "createdAt": "2020-03-06T20:14:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNTI4OQ==", "bodyText": "Why would you need to retry immediately? Your refreshJob does retries just by virtue that it is periodic.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389215289", "createdAt": "2020-03-07T01:44:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        retryCounter++;\n+        if (retryCounter == 1) {\n+            logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+            return getGoEData();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 321}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "026b0183894bb412ca07272a67f6d873ed384af5", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/026b0183894bb412ca07272a67f6d873ed384af5", "committedDate": "2020-03-07T07:37:58Z", "message": "remarks from review\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/18638888322ded97c886da6c7fbfd21591f938fe", "committedDate": "2020-03-07T07:38:29Z", "message": "Merge branch 'goecharger' of https://github.com/SamuelBrucksch/openhab-addons into goecharger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzMwMjUw", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370730250", "createdAt": "2020-03-07T07:52:13Z", "commit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1MjoxM1rOFzNGkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1OTo1MVrOFzNH_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjM3MA==", "bodyText": "remove at least one empty line", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236370", "createdAt": "2020-03-07T07:52:13Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponseDTO.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponseDTO {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjM5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Gson gson;\n          \n          \n            \n                private final Gson gson = new Gson();", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236395", "createdAt": "2020-03-07T07:52:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gson = new Gson();", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236413", "createdAt": "2020-03-07T07:53:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQ1Nw==", "bodyText": "Cannot be null here", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236457", "createdAt": "2020-03-07T07:53:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjU2Mg==", "bodyText": "REFRESH is only triggered once when the channel is linked. Bindings should support REFRESH but in this case I think we can ignore it. There is no additional benefit of refreshing and you can't refresh a single channel anyway. This would require quite some logic to get it right, so better remove it.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236562", "createdAt": "2020-03-07T07:56:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NTA4Mg=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjU5Ng==", "bodyText": "the default case is needed,only the break is not needed.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236596", "createdAt": "2020-03-07T07:56:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDUyOQ=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjczMg==", "bodyText": "check for null here, this has two benefits: the null-check is only done once (not everytime getValue is called) and second the null-annotation is correct (non-null for the parameter of getValue)", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236732", "createdAt": "2020-03-07T07:59:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        GoEStatusResponseDTO goeResponse = getGoEData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 308}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef0bb9615896e13007653167d842d3872d31c355", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/ef0bb9615896e13007653167d842d3872d31c355", "committedDate": "2020-03-07T08:58:03Z", "message": "removed unused imports\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/911db7af5bde18d6a297da971ee775d94c29d01e", "committedDate": "2020-03-07T08:58:56Z", "message": "removed empty lines\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzMyNzY3", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370732767", "createdAt": "2020-03-07T08:56:50Z", "commit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwODo1Njo1MFrOFzNTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTowMzowNFrOFzNUyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTcxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            private List<String> allChannels = new ArrayList<>();", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239715", "createdAt": "2020-03-07T08:56:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTgwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId()).collect(Collectors.toList());", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239807", "createdAt": "2020-03-07T08:58:37Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MDAwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            if (goeResponse == null) {\n          \n          \n            \n                allChannels.forEach(channel -> updateState(channel, UndefType.UNDEF));\n          \n          \n            \n            } else {\n          \n          \n            \n               allChannels.forEach(channel -> updateState(channel, getValue(channel, goeResponse)));\n          \n          \n            \n            }", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389240009", "createdAt": "2020-03-07T09:03:04Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        GoEStatusResponseDTO goeResponse = getGoEData();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 309}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e1e2a9b724d7b9ca764c196e71479c830772218", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/0e1e2a9b724d7b9ca764c196e71479c830772218", "committedDate": "2020-03-07T09:15:28Z", "message": "final changes to updateState\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6758e5d2c726637b2c7d869e9429312d5455bead", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/6758e5d2c726637b2c7d869e9429312d5455bead", "committedDate": "2020-03-07T09:22:35Z", "message": "codestyle fixes\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzM0MTQz", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370734143", "createdAt": "2020-03-07T09:30:50Z", "commit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTozMDo1MFrOFzNamg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo0MDo1MVrOFzNckQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTQ5OA==", "bodyText": "I would use Collections.emptyList() here.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241498", "createdAt": "2020-03-07T09:30:50Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTcxNQ=="}, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA==", "bodyText": "Can you be sure the command here will be always of QuantityType type? I would split this switch into two if checks: if (command instanceof QuantityType) and if (command instanceof OnOffType).", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241748", "createdAt": "2020-03-07T09:35:37Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc2MA==", "bodyText": "I would remove that if and check the type for each channel. See my comment below.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241760", "createdAt": "2020-03-07T09:35:50Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTk1NA==", "bodyText": "I really don't like this. Just return null value in case an error and handle retry in refresh method. Also I wouldn't do a retry in case of InterruptedException. And remove retryCounter completely.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241954", "createdAt": "2020-03-07T09:39:27Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTk5Mg==", "bodyText": "Imo better would be to move it to refresh method.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241992", "createdAt": "2020-03-07T09:40:40Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 299}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjAwMQ==", "bodyText": "Imo better would be to move it to refresh method.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242001", "createdAt": "2020-03-07T09:40:51Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 293}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3d4633d276d2deb201a155c80b9be901780435e", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/b3d4633d276d2deb201a155c80b9be901780435e", "committedDate": "2020-03-07T10:08:41Z", "message": "removed retry\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77c8aa6dca02e2994c3fa105659abf60ad1a123", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/f77c8aa6dca02e2994c3fa105659abf60ad1a123", "committedDate": "2020-03-07T10:09:55Z", "message": "cleanup counter variable\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0c21359f3e4636138c752782ec83a9bc0a6681", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/df0c21359f3e4636138c752782ec83a9bc0a6681", "committedDate": "2020-03-07T10:41:51Z", "message": "correct command type cast\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzQzMDA4", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370743008", "createdAt": "2020-03-07T13:02:23Z", "commit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMzowMjoyNFrOFzOIqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMzowMjoyNFrOFzOIqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                @SuppressWarnings(\"unchecked\")\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                    if (command instanceof RefreshType) {\n          \n          \n            \n                        refresh();\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    String key = null;\n          \n          \n            \n                    String value = null;\n          \n          \n            \n                    switch (channelUID.getId()) {\n          \n          \n            \n                        case MAX_AMPERE:\n          \n          \n            \n                            key = \"amp\";\n          \n          \n            \n                            value = ((QuantityType<?>)command).intValue() + \"\";\n          \n          \n            \n                            break;\n          \n          \n            \n                @Override\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                    String key = null;\n          \n          \n            \n                    String value = null;\n          \n          \n            \n                    switch (channelUID.getId()) {\n          \n          \n            \n                        case MAX_AMPERE:\n          \n          \n            \n                            key = \"amp\";\n          \n          \n            \n                            if (command instanceof DecimalType) {\n          \n          \n            \n                                value = String.valueOf(((DecimalType) command).intValue());\n          \n          \n            \n                            } else if (command instanceof QuantityType<?>) {\n          \n          \n            \n                                value = String.valueOf((QuantityType<ElectricalCurrent>) command).toUnit(SmarthomeUnits.AMPERE).intValue());\n          \n          \n            \n                            }\n          \n          \n            \n                            break;\n          \n      \n    \n    \n  \n\nSomething like this would be the correct way to do it. This also makes sure that QuantityType commands have the correct unit. Imagine someone sends a command  10000 mA (makes no sense, but you never now). You would probably send something like 10 for 10 amps instead of 10000 (which would happen if you take the intValue before conversion.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389253290", "createdAt": "2020-03-07T13:02:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e24b37c67c94c7e97e509d66cc2720962374f24b", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/e24b37c67c94c7e97e509d66cc2720962374f24b", "committedDate": "2020-03-07T18:03:55Z", "message": "added instance of checks for commands\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eacc122159fc59a7b8c86f45018dbe0de153538", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/1eacc122159fc59a7b8c86f45018dbe0de153538", "committedDate": "2020-03-07T18:05:52Z", "message": "checkstyle corrections\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/8ce222935670593bd7546637b4034bb1fcf38f4d", "committedDate": "2020-03-07T18:08:02Z", "message": "fixed wrong quantity type\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzgwNzc1", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370780775", "createdAt": "2020-03-07T18:13:24Z", "commit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxMzoyNFrOFzREHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxNDoyMFrOFzREXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTI3OA==", "bodyText": "I think you can remove this comment. If you did not receive an error, you can assume that it worked.  And the next refresh will show the updated state.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // TODO check if value really changed", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301278", "createdAt": "2020-03-07T18:13:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTMyMw==", "bodyText": "Can be removed since you now check the instance\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @SuppressWarnings(\"unchecked\")", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301323", "createdAt": "2020-03-07T18:13:54Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTM0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n          \n          \n            \n                private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n          \n      \n    \n    \n  \n\nno need to have this public", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301343", "createdAt": "2020-03-07T18:14:20Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/16a9bfdb35e750d3fa2f9f64e20d13d587476bf8", "committedDate": "2020-03-07T19:03:53Z", "message": "last changesfrom PR review\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODEwNjk3", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370810697", "createdAt": "2020-03-08T07:42:56Z", "commit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODE3NzA0", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-370817704", "createdAt": "2020-03-08T09:52:19Z", "commit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwOTo1MjoxOVrOFzUO7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDo0MDoyOFrOFzUb8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzE5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Go-eCharger Binding Thing</label>\n          \n          \n            \n            \t\t<label>Go-eCharger</label>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389353199", "createdAt": "2020-03-08T09:52:19Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzY4Mg==", "bodyText": "It's better to avoid using units where possible in naming or descriptions (also applies to the other channels/descriptions), e.g.:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n          \n          \n            \n            \t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389353682", "createdAt": "2020-03-08T09:58:46Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1Mzg3Mw==", "bodyText": "Please also add:\n<context>network-address</context>\nSee: https://www.eclipse.org/smarthome/documentation/development/bindings/xml-reference.html#supported-contexts", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389353873", "createdAt": "2020-03-08T10:01:13Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1Mzk5Mg==", "bodyText": "You can add a unit for UIs here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n          \n      \n    \n    \n  \n\nand also add a unitLabel e.g.:\n<unitLabel>s</unitLabel>\nSee: https://www.eclipse.org/smarthome/documentation/development/bindings/xml-reference.html#xml-structure-for-configuration-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389353992", "createdAt": "2020-03-08T10:02:55Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NDI5NA==", "bodyText": "The description allows for explaining what this abbreviation stands for so people uncommon to it don't have to look it up:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<description>Signal status for PWM signal</description>\n          \n          \n            \n            \t\t<description>Pulse-width modulation signal status</description>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389354294", "createdAt": "2020-03-08T10:07:14Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Maximum Current</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Signal status for PWM signal</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NDQxNQ==", "bodyText": "Please also add the artifact to the BOM in bom/openhab-addons/pom.xml", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389354415", "createdAt": "2020-03-08T10:09:14Z", "author": {"login": "wborn"}, "path": "bundles/pom.xml", "diffHunk": "@@ -87,6 +87,7 @@\n     <module>org.openhab.binding.fsinternetradio</module>\n     <module>org.openhab.binding.ftpupload</module>\n     <module>org.openhab.binding.gardena</module>\n+    <module>org.openhab.binding.goecharger</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NDg4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>IP Adress</label>\n          \n          \n            \n            \t\t\t\t<label>IP Address</label>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389354885", "createdAt": "2020-03-08T10:15:25Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NDg5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<description>The IP adress of the Go-eCharger</description>\n          \n          \n            \n            \t\t\t\t<description>The IP address of the Go-eCharger</description>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389354897", "createdAt": "2020-03-08T10:15:36Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTAyMw==", "bodyText": "Is this TODO still relevant?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355023", "createdAt": "2020-03-08T10:17:25Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTI1MA==", "bodyText": "You can use the type parameter straight away instead of first assigning it to urlStr or rename it from type to urlStr.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n          \n          \n            \n                    return type.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355250", "createdAt": "2020-03-08T10:20:54Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTM5MQ==", "bodyText": "Please remove commented code or uncomment it and make it conditional logger.isDebugEnabled()", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355391", "createdAt": "2020-03-08T10:23:02Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NjUzMQ==", "bodyText": "The TODO is still there. Looks like result is only used for logging and getContentAsString could be relatively expensive. The code would be more compact when you move everything into the try block, e.g.:\n        try {\n            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n                    .timeout(5, TimeUnit.SECONDS).send();\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n            }\n            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                    \"No response received on command\");\n        }", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389356531", "createdAt": "2020-03-08T10:40:28Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 271}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a35df76a0907c36e8b9e372e9983983ab42a5621", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/a35df76a0907c36e8b9e372e9983983ab42a5621", "committedDate": "2020-03-08T19:51:26Z", "message": "renaming and review adoptions\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/2480f64648dc7fa847b0ea9f916ffd65705b1a41", "committedDate": "2020-03-08T19:56:42Z", "message": "fixed readme\n\nSigned-off-by: Samuel Brucksch <sasliga@freenet.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTc0NTEw", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-371574510", "createdAt": "2020-03-09T22:37:06Z", "commit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozNzowNlrOFz7rjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0Mjo0OFrOFz7y6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTUwMA==", "bodyText": "Since all String states are known, you can add state options for these. That makes them translatable and it allows them to show up nicer in UIs:\n\t\t<state readOnly=\"true\">\n\t\t\t<options>\n\t\t\t\t<option value=\"OPEN\">Open</option>\n\t\t\t\t<option value=\"RFID\">RFID</option>\n\t\t\t\t<option value=\"TIMER\">Timer</option>\n\t\t\t\t<option value=\"AWATTAR\">aWATTar</option>\n\t\t\t\t<option value=\"UNKNOWN\">Unknown</option>\n\t\t\t</options>\n\t\t</state>\nSee also: https://www.openhab.org/docs/developer/bindings/thing-xml.html#state-description", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389999500", "createdAt": "2020-03-09T22:37:06Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeEnergyLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargedEnergy\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalChargedEnergy\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableCurrent\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>The IP address of the Go-eCharger</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t\t<unitLabel>s</unitLabel>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDczMA==", "bodyText": "Same here:\n\t\t<state readOnly=\"true\">\n\t\t\t<options>\n\t\t\t\t<option value=\"READY_NO_CAR\">Ready (no car)</option>\n\t\t\t\t<option value=\"CHARGING\">Charging</option>\n\t\t\t\t<option value=\"WAITING_FOR_CAR\">Waiting for car</option>\n\t\t\t\t<option value=\"CHARGING_DONE_CAR_CONNECTED\">Charging done (car connected)</option>\n\t\t\t</options>\n\t\t</state>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r390000730", "createdAt": "2020-03-09T22:40:51Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeEnergyLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargedEnergy\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalChargedEnergy\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableCurrent\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>The IP address of the Go-eCharger</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t\t<unitLabel>s</unitLabel>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"current\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Maximum Current</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Pulse-width modulation signal status</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDg3Mg==", "bodyText": "<state readOnly=\"true\">\n\t\t\t<options>\n\t\t\t\t<option value=\"NONE\">None</option>\n\t\t\t\t<option value=\"RCCB\">RCCB</option>\n\t\t\t\t<option value=\"NO_GROUND\">No ground</option>\n\t\t\t\t<option value=\"INTERNAL\">Internal</option>\n\t\t\t</options>\n\t\t</state>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r390000872", "createdAt": "2020-03-09T22:41:19Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeEnergyLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargedEnergy\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalChargedEnergy\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableCurrent\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>The IP address of the Go-eCharger</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t\t<unitLabel>s</unitLabel>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"current\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Maximum Current</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Pulse-width modulation signal status</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMTM4NQ==", "bodyText": "Seems to be read only so you can add:\n<state readOnly=\"true\" />", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r390001385", "createdAt": "2020-03-09T22:42:48Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeEnergyLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargedEnergy\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalChargedEnergy\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableCurrent\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>The IP address of the Go-eCharger</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t\t<unitLabel>s</unitLabel>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"current\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Maximum Current</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Pulse-width modulation signal status</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>\n+\t</channel-type>\n+\t<channel-type id=\"vl1\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage L1</label>\n+\t\t<description>Voltage on L1</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl2\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage L2</label>\n+\t\t<description>Voltage on L2</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl3\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage L3</label>\n+\t\t<description>Voltage on L3</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl1\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current L1</label>\n+\t\t<description>Current on L1</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl2\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current L2</label>\n+\t\t<description>Current on L2</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl3\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current L3</label>\n+\t\t<description>Current on L3</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl1\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power L1</label>\n+\t\t<description>Power on L1</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl2\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power L2</label>\n+\t\t<description>Power on L2</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl3\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power L3</label>\n+\t\t<description>Power on L3</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pha\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Phases</label>\n+\t\t<description>Amount of phases currently used for charging</description>\n+\t</channel-type>\n+\t<channel-type id=\"scl\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Current Session Charge Energy Limit</label>\n+\t\t<description>Wallbox stops charging after defined value, deactivate with value 0</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"scs\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Current Session Charged Energy</label>\n+\t\t<description>Amount of energy that has been charged in this session</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eto\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Total Charged Energy</label>\n+\t\t<description>Amount of energy that has been charged since installation</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"alw\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Allow Charging</label>\n+\t\t<description>If true charging is allowed</description>\n+\t</channel-type>\n+\t<channel-type id=\"cbl\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Cable Encoding</label>\n+\t\t<description>Specifies the max amps that can be charged with that cable</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"tmp\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature of the Go-eCharger</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"fmw\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Firmware</label>\n+\t\t<description>Firmware Version</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "originalPosition": 167}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69b2ea12ad24435d635a317d7b2c5acde77ef399", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/69b2ea12ad24435d635a317d7b2c5acde77ef399", "committedDate": "2020-03-10T08:03:04Z", "message": "improved thing-types and accessState\n\nSigned-off-by: Samuel Brucksch <samuel.brucksch@sap.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODM4NDg2", "url": "https://github.com/openhab/openhab-addons/pull/7068#pullrequestreview-371838486", "createdAt": "2020-03-10T10:36:06Z", "commit": {"oid": "69b2ea12ad24435d635a317d7b2c5acde77ef399"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1526, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}