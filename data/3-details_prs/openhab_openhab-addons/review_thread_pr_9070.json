{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNzgxNTUx", "number": 9070, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxNDoyNlrOE83PGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxNzozMFrOE83UCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjU1MDAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerPanel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxNDoyNlrOH5PV9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxNDoyNlrOH5PV9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4MjI2MA==", "bodyText": "You could've used ExpiringCache here. Next time...", "url": "https://github.com/openhab/openhab-addons/pull/9070#discussion_r529782260", "createdAt": "2020-11-24T18:14:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerPanel.java", "diffHunk": "@@ -77,17 +73,19 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n         }\n \n         if (command instanceof RefreshType) {\n-            if (CaddxBindingConstants.PANEL_FIRMWARE_VERSION.equals(channelUID.getId())) {\n-                cmd = CaddxBindingConstants.PANEL_INTERFACE_CONFIGURATION_REQUEST;\n-                data = \"\";\n-            } else if (CaddxBindingConstants.PANEL_LOG_MESSAGE_N_0.equals(channelUID.getId())) {\n+            if (CaddxBindingConstants.PANEL_LOG_MESSAGE_N_0.equals(channelUID.getId())) {\n                 cmd = CaddxBindingConstants.PANEL_SYSTEM_STATUS_REQUEST;\n                 data = \"\";\n+            } else if (System.currentTimeMillis() - lastRefreshTime > 2000) {\n+                // Refresh only if 2 seconds have passed from the last refresh\n+                cmd = CaddxBindingConstants.PANEL_INTERFACE_CONFIGURATION_REQUEST;\n+                data = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c7be32f921711b7eb1db7bb9aa44782d170e2b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjU2MjY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.caddx/src/test/java/org/openhab/binding/caddx/internal/CaddxMessageReaderUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODoxNzozMFrOH5PdZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1MjozMVrOH5Qvlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4NDE2Nw==", "bodyText": "The BufferedReader and InputStreamReader should also be part of the try. Can you file a follow-up PR, as the 3.x PR is already merged?", "url": "https://github.com/openhab/openhab-addons/pull/9070#discussion_r529784167", "createdAt": "2020-11-24T18:17:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.caddx/src/test/java/org/openhab/binding/caddx/internal/CaddxMessageReaderUtil.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.caddx.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+\n+/**\n+ * Util class to read test input messages.\n+ *\n+ * @author Georgios Moutsos - Initial contribution\n+ */\n+@NonNullByDefault\n+public final class CaddxMessageReaderUtil {\n+    private static final String MESSAGE_EXT = \".msg\";\n+\n+    private CaddxMessageReaderUtil() {\n+        // Util class\n+    }\n+\n+    /**\n+     * Reads the raw bytes of the message given the file relative to this package and returns the objects.\n+     *\n+     * @param messageName name of the telegram file to read\n+     * @return The raw bytes of a telegram\n+     */\n+    public static byte[] readRawMessage(String messageName) {\n+        try (InputStream is = CaddxMessageReaderUtil.class.getResourceAsStream(messageName + MESSAGE_EXT)) {\n+            String hexString = new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c7be32f921711b7eb1db7bb9aa44782d170e2b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNTIwNw==", "bodyText": "yes will do.", "url": "https://github.com/openhab/openhab-addons/pull/9070#discussion_r529805207", "createdAt": "2020-11-24T18:52:31Z", "author": {"login": "jossuar"}, "path": "bundles/org.openhab.binding.caddx/src/test/java/org/openhab/binding/caddx/internal/CaddxMessageReaderUtil.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.caddx.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.util.HexUtils;\n+\n+/**\n+ * Util class to read test input messages.\n+ *\n+ * @author Georgios Moutsos - Initial contribution\n+ */\n+@NonNullByDefault\n+public final class CaddxMessageReaderUtil {\n+    private static final String MESSAGE_EXT = \".msg\";\n+\n+    private CaddxMessageReaderUtil() {\n+        // Util class\n+    }\n+\n+    /**\n+     * Reads the raw bytes of the message given the file relative to this package and returns the objects.\n+     *\n+     * @param messageName name of the telegram file to read\n+     * @return The raw bytes of a telegram\n+     */\n+    public static byte[] readRawMessage(String messageName) {\n+        try (InputStream is = CaddxMessageReaderUtil.class.getResourceAsStream(messageName + MESSAGE_EXT)) {\n+            String hexString = new BufferedReader(new InputStreamReader(is)).lines().collect(Collectors.joining(\"\\n\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc4NDE2Nw=="}, "originalCommit": {"oid": "06c7be32f921711b7eb1db7bb9aa44782d170e2b"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3941, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}