{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTE0MTQ4", "number": 8021, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1Mzo0MVrOENuPGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo1NToxNlrOEQT1rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI0NDc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1Mzo0MVrOGwfLTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1Mzo0MVrOGwfLTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTYyOA==", "bodyText": "Why LOGGER in uppercase ?", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453495628", "createdAt": "2020-07-13T08:53:41Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(AstroActions.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb1a2304653de5e9d5cdb368b8b76b84c94d416"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODI0NjMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODo1NDowM1rOGwfMPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoyNDozOVrOGwihyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTg2OA==", "bodyText": "DEBUG level is probably enough here.", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453495868", "createdAt": "2020-07-13T08:54:03Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        LOGGER.info(\"Astro actions service instanciated\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cb1a2304653de5e9d5cdb368b8b76b84c94d416"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzMDk0MA==", "bodyText": "And this one ?", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453530940", "createdAt": "2020-07-13T09:50:32Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        LOGGER.info(\"Astro actions service instanciated\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTg2OA=="}, "originalCommit": {"oid": "1cb1a2304653de5e9d5cdb368b8b76b84c94d416"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1MDUzNg==", "bodyText": "Oups :) ...done.", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453550536", "createdAt": "2020-07-13T10:24:39Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        LOGGER.info(\"Astro actions service instanciated\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NTg2OA=="}, "originalCommit": {"oid": "1cb1a2304653de5e9d5cdb368b8b76b84c94d416"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTY3ODk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTowMzoyMVrOGwso-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNTowMzoyMVrOGwso-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcxNjIxOQ==", "bodyText": "AstroActions instead of LightActions", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r453716219", "createdAt": "2020-07-13T15:03:21Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ * <p>\n+ * <b>Note:</b>The static method <b>invokeMethodOf</b> handles the case where\n+ * the test <i>actions instanceof AstroActions</i> fails. This test can fail\n+ * due to an issue in openHAB core v2.5.0 where the {@link AstroActions} class\n+ * can be loaded by a different classloader than the <i>actions</i> instance.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions, IAstroActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        logger.debug(\"Astro actions service instanciated\");\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof AstroThingHandler) {\n+            this.handler = (AstroThingHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the sun Azimuth at a given moment\")\n+    public @Nullable @ActionOutput(name = \"getAzimuth\", label = \"Azimuth\", type = \"org.eclipse.smarthome.core.library.types.QuantityType<javax.measure.quantity.Angle>\") QuantityType<Angle> getAzimuth(\n+            @ActionInput(name = \"date\", label = \"Date\", required = false, description = \"Considered date\") @Nullable ZonedDateTime date) {\n+        logger.debug(\"Astro action 'getAzimuth' called\");\n+        AstroThingHandler theHandler = this.handler;\n+        if (theHandler != null) {\n+            return theHandler.getAzimuth(date != null ? date : ZonedDateTime.now());\n+        } else {\n+            logger.info(\"Astro Action service ThingHandler is null!\");\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Elevation\", description = \"Get the sun Elevation at a given moment\")\n+    public @Nullable @ActionOutput(name = \"getElevation\", label = \"Elevation\", type = \"org.eclipse.smarthome.core.library.types.QuantityType<javax.measure.quantity.Angle>\") QuantityType<Angle> getElevation(\n+            @ActionInput(name = \"date\", label = \"Date\", required = false, description = \"Considered date\") @Nullable ZonedDateTime date) {\n+        logger.debug(\"Astro action 'getElevation' called\");\n+        AstroThingHandler theHandler = this.handler;\n+        if (theHandler != null) {\n+            return theHandler.getElevation(date != null ? date : ZonedDateTime.now());\n+        } else {\n+            logger.info(\"Astro Action service ThingHandler is null!\");\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Sun : Get Event Time\", description = \"Get the date time of a given planet event\")\n+    public @Nullable @ActionOutput(name = \"getEventTime\", type = \"java.time.ZonedDateTime\") ZonedDateTime getEventTime(\n+            @ActionInput(name = \"phaseName\", label = \"Phase\", required = true, description = \"Requested phase\") String phaseName,\n+            @ActionInput(name = \"date\", label = \"Date\", required = false, description = \"Considered date\") @Nullable ZonedDateTime date,\n+            @ActionInput(name = \"moment\", label = \"Moment\", required = false, defaultValue = \"START\", description = \"Either START or END\") @Nullable String moment) {\n+        logger.debug(\"Sun action 'getEventTime' called\");\n+        try {\n+            if (handler instanceof SunHandler) {\n+                SunHandler handler = (SunHandler) this.handler;\n+                SunPhaseName phase = SunPhaseName.valueOf(phaseName.toUpperCase());\n+                return handler.getEventTime(phase, date != null ? date : ZonedDateTime.now(),\n+                        moment == null || AstroBindingConstants.EVENT_START.equalsIgnoreCase(moment));\n+            } else {\n+                logger.info(\"Astro Action service ThingHandler is not a SunHandler!\");\n+            }\n+        } catch (IllegalArgumentException e) {\n+            logger.info(\"Parameter {} is not a valid phase name\", phaseName);\n+        }\n+        return null;\n+    }\n+\n+    public static @Nullable QuantityType<Angle> getElevation(@Nullable ThingActions actions,\n+            @Nullable ZonedDateTime date) {\n+        return invokeMethodOf(actions).getElevation(date);\n+    }\n+\n+    public static @Nullable QuantityType<Angle> getAzimuth(@Nullable ThingActions actions,\n+            @Nullable ZonedDateTime date) {\n+        return invokeMethodOf(actions).getAzimuth(date);\n+    }\n+\n+    public static @Nullable ZonedDateTime getEventTime(@Nullable ThingActions actions, @Nullable String phaseName,\n+            @Nullable ZonedDateTime date, @Nullable String moment) {\n+        if (phaseName != null) {\n+            return invokeMethodOf(actions).getEventTime(phaseName, date, moment);\n+        } else {\n+            throw new IllegalArgumentException(\"phaseName can not be null\");\n+        }\n+    }\n+\n+    private static IAstroActions invokeMethodOf(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        if (actions.getClass().getName().equals(AstroActions.class.getName())) {\n+            if (actions instanceof IAstroActions) {\n+                return (IAstroActions) actions;\n+            } else {\n+                return (IAstroActions) Proxy.newProxyInstance(IAstroActions.class.getClassLoader(),\n+                        new Class[] { IAstroActions.class }, (Object proxy, Method method, Object[] args) -> {\n+                            Method m = actions.getClass().getDeclaredMethod(method.getName(),\n+                                    method.getParameterTypes());\n+                            return m.invoke(actions, args);\n+                        });\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Actions is not an instance of LightActions\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd34ce8b013cc64e9593b75295c35bf3f262a035"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTM0MzgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0NjoyMlrOG0YyJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0NjoyMlrOG0YyJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NTE4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the sun Azimuth at a given moment\")\n          \n          \n            \n                @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the azimuth of the sun for a given time\")", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r457585188", "createdAt": "2020-07-20T17:46:22Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ * <p>\n+ * <b>Note:</b>The static method <b>invokeMethodOf</b> handles the case where\n+ * the test <i>actions instanceof AstroActions</i> fails. This test can fail\n+ * due to an issue in openHAB core v2.5.0 where the {@link AstroActions} class\n+ * can be loaded by a different classloader than the <i>actions</i> instance.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions, IAstroActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        logger.debug(\"Astro actions service instanciated\");\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof AstroThingHandler) {\n+            this.handler = (AstroThingHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the sun Azimuth at a given moment\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62c8a581624353383e4008e8be7ade91fd83b95"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTM1NTcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0OTo0MlrOG0Y5ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo0OTo0MlrOG0Y5ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU4NzA2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @RuleAction(label = \"Astro : Get Elevation\", description = \"Get the sun Elevation at a given moment\")\n          \n          \n            \n                @RuleAction(label = \"Astro : Get Elevation\", description = \"Get the Elevation of the sun for a given time\")", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r457587067", "createdAt": "2020-07-20T17:49:42Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/action/AstroActions.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.astro.internal.action;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Angle;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.astro.internal.AstroBindingConstants;\n+import org.openhab.binding.astro.internal.handler.AstroThingHandler;\n+import org.openhab.binding.astro.internal.handler.SunHandler;\n+import org.openhab.binding.astro.internal.model.SunPhaseName;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {AstroActions } defines rule actions for the Astro binding.\n+ * <p>\n+ * <b>Note:</b>The static method <b>invokeMethodOf</b> handles the case where\n+ * the test <i>actions instanceof AstroActions</i> fails. This test can fail\n+ * due to an issue in openHAB core v2.5.0 where the {@link AstroActions} class\n+ * can be loaded by a different classloader than the <i>actions</i> instance.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@ThingActionsScope(name = \"astro\")\n+@NonNullByDefault\n+public class AstroActions implements ThingActions, IAstroActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(AstroActions.class);\n+    protected @Nullable AstroThingHandler handler;\n+\n+    public AstroActions() {\n+        logger.debug(\"Astro actions service instanciated\");\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof AstroThingHandler) {\n+            this.handler = (AstroThingHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Azimuth\", description = \"Get the sun Azimuth at a given moment\")\n+    public @Nullable @ActionOutput(name = \"getAzimuth\", label = \"Azimuth\", type = \"org.eclipse.smarthome.core.library.types.QuantityType<javax.measure.quantity.Angle>\") QuantityType<Angle> getAzimuth(\n+            @ActionInput(name = \"date\", label = \"Date\", required = false, description = \"Considered date\") @Nullable ZonedDateTime date) {\n+        logger.debug(\"Astro action 'getAzimuth' called\");\n+        AstroThingHandler theHandler = this.handler;\n+        if (theHandler != null) {\n+            return theHandler.getAzimuth(date != null ? date : ZonedDateTime.now());\n+        } else {\n+            logger.info(\"Astro Action service ThingHandler is null!\");\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @RuleAction(label = \"Astro : Get Elevation\", description = \"Get the sun Elevation at a given moment\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62c8a581624353383e4008e8be7ade91fd83b95"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTM3NzA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/config/AstroThingConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNzo1NToxNlrOG0ZGXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyNjo1M1rOG0rfAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5MDM2Ng==", "bodyText": "What is the benefit of this change?", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r457590366", "createdAt": "2020-07-20T17:55:16Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/config/AstroThingConfig.java", "diffHunk": "@@ -25,10 +25,11 @@\n  */\n @NonNullByDefault\n public class AstroThingConfig {\n+    public static double UNDEFINED = Double.NaN;\n     public @Nullable String geolocation;\n-    public @Nullable Double altitude;\n-    public @Nullable Double latitude;\n-    public @Nullable Double longitude;\n+    private double altitude = UNDEFINED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f62c8a581624353383e4008e8be7ade91fd83b95"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MTU4Ng==", "bodyText": "Reverted", "url": "https://github.com/openhab/openhab-addons/pull/8021#discussion_r457891586", "createdAt": "2020-07-21T07:26:53Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/config/AstroThingConfig.java", "diffHunk": "@@ -25,10 +25,11 @@\n  */\n @NonNullByDefault\n public class AstroThingConfig {\n+    public static double UNDEFINED = Double.NaN;\n     public @Nullable String geolocation;\n-    public @Nullable Double altitude;\n-    public @Nullable Double latitude;\n-    public @Nullable Double longitude;\n+    private double altitude = UNDEFINED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU5MDM2Ng=="}, "originalCommit": {"oid": "f62c8a581624353383e4008e8be7ade91fd83b95"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4876, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}