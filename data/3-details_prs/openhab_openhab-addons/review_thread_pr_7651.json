{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODAzMDQ3", "number": 7651, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToxNjowOVrOEMqFCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTowOToxM1rOEfr4kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzA3Nzg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToxNjowOVrOGu5hNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMjowMDoyN1rOGvnb6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMDA3MQ==", "bodyText": "Is the empty point intended?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451830071", "createdAt": "2020-07-08T21:16:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/README.md", "diffHunk": "@@ -0,0 +1,394 @@\n+# Nuvo Grand Concerto & Essentia G Binding\n+\n+This binding can be used to control the Nuvo Grand Concerto or Essentia G whole house multi-zone amplifier.\n+Up to 20 keypad zones can be controlled when zone expansion modules are used (if not all zones on the amp are used they can be excluded via configuration).\n+\n+The binding supports two different kinds of connections:\n+\n+* serial connection,\n+* serial over IP connection\n+\n+For users without serial connector on server side, you can use a serial to USB adapter.\n+\n+You don't need to have your Grand Concerto or Essentia G whole house amplifier device directly connected to your openHAB server.\n+You can connect it for example to a Raspberry Pi and use [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) to make the serial connection available on LAN (serial over IP).\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the amplifier controller.\n+It has the `amplifier` id.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+You have to add all things manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter Label         | Parameter ID | Description                                                                                                                        | Accepted values          |\n+|-------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|--------------------------|\n+| Serial Port             | serialPort   | Serial port to use for connecting to the Nuvo whole house amplifier device                                                         | a comm port name       | |\n+| Address                 | host         | Host name or IP address of the machine connected to the Nuvo whole house amplifier device (serial over IP)                         | host name or ip        | |\n+| Port                    | port         | Communication port (serial over IP).                                                                                               | ip port number         | |\n+| Number of Zones         | numZones     | (Optional) Number of zones on the amplifier to utilize in the binding (up to 20 zones when zone expansion modules are used)        | (1-20; default 6)      | |\n+| Sync Clock on GConcerto | clockSync    | (Optional) If set to true, the binding will sync the internal clock on the Grand Concerto to match the openHAB host's system clock | Boolean; default false | |\n+\n+Some notes:\n+\n+* If a zone has a maximum volume limit configured by the Nuvo configurator, the volume slider will automatically drop back to that level if set above the configured limit.\n+* Source display_line1 thru 4 can only be updated on non NuvoNet sources.\n+* The track_position channel does not update continuously for NuvoNet sources. It only changes when the track changes or playback is paused/unpaused.\n+*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5NzA1OA==", "bodyText": "wanted to do a line break, but that does not work in markdown. removed.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451897058", "createdAt": "2020-07-09T00:28:48Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/README.md", "diffHunk": "@@ -0,0 +1,394 @@\n+# Nuvo Grand Concerto & Essentia G Binding\n+\n+This binding can be used to control the Nuvo Grand Concerto or Essentia G whole house multi-zone amplifier.\n+Up to 20 keypad zones can be controlled when zone expansion modules are used (if not all zones on the amp are used they can be excluded via configuration).\n+\n+The binding supports two different kinds of connections:\n+\n+* serial connection,\n+* serial over IP connection\n+\n+For users without serial connector on server side, you can use a serial to USB adapter.\n+\n+You don't need to have your Grand Concerto or Essentia G whole house amplifier device directly connected to your openHAB server.\n+You can connect it for example to a Raspberry Pi and use [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) to make the serial connection available on LAN (serial over IP).\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the amplifier controller.\n+It has the `amplifier` id.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+You have to add all things manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter Label         | Parameter ID | Description                                                                                                                        | Accepted values          |\n+|-------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|--------------------------|\n+| Serial Port             | serialPort   | Serial port to use for connecting to the Nuvo whole house amplifier device                                                         | a comm port name       | |\n+| Address                 | host         | Host name or IP address of the machine connected to the Nuvo whole house amplifier device (serial over IP)                         | host name or ip        | |\n+| Port                    | port         | Communication port (serial over IP).                                                                                               | ip port number         | |\n+| Number of Zones         | numZones     | (Optional) Number of zones on the amplifier to utilize in the binding (up to 20 zones when zone expansion modules are used)        | (1-20; default 6)      | |\n+| Sync Clock on GConcerto | clockSync    | (Optional) If set to true, the binding will sync the internal clock on the Grand Concerto to match the openHAB host's system clock | Boolean; default false | |\n+\n+Some notes:\n+\n+* If a zone has a maximum volume limit configured by the Nuvo configurator, the volume slider will automatically drop back to that level if set above the configured limit.\n+* Source display_line1 thru 4 can only be updated on non NuvoNet sources.\n+* The track_position channel does not update continuously for NuvoNet sources. It only changes when the track changes or playback is paused/unpaused.\n+*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMDA3MQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNzgwNQ==", "bodyText": "In normal text, you can add two spaces at the end of the line to insert a line break. Maybe that helps here, too.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452017805", "createdAt": "2020-07-09T07:28:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/README.md", "diffHunk": "@@ -0,0 +1,394 @@\n+# Nuvo Grand Concerto & Essentia G Binding\n+\n+This binding can be used to control the Nuvo Grand Concerto or Essentia G whole house multi-zone amplifier.\n+Up to 20 keypad zones can be controlled when zone expansion modules are used (if not all zones on the amp are used they can be excluded via configuration).\n+\n+The binding supports two different kinds of connections:\n+\n+* serial connection,\n+* serial over IP connection\n+\n+For users without serial connector on server side, you can use a serial to USB adapter.\n+\n+You don't need to have your Grand Concerto or Essentia G whole house amplifier device directly connected to your openHAB server.\n+You can connect it for example to a Raspberry Pi and use [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) to make the serial connection available on LAN (serial over IP).\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the amplifier controller.\n+It has the `amplifier` id.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+You have to add all things manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter Label         | Parameter ID | Description                                                                                                                        | Accepted values          |\n+|-------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|--------------------------|\n+| Serial Port             | serialPort   | Serial port to use for connecting to the Nuvo whole house amplifier device                                                         | a comm port name       | |\n+| Address                 | host         | Host name or IP address of the machine connected to the Nuvo whole house amplifier device (serial over IP)                         | host name or ip        | |\n+| Port                    | port         | Communication port (serial over IP).                                                                                               | ip port number         | |\n+| Number of Zones         | numZones     | (Optional) Number of zones on the amplifier to utilize in the binding (up to 20 zones when zone expansion modules are used)        | (1-20; default 6)      | |\n+| Sync Clock on GConcerto | clockSync    | (Optional) If set to true, the binding will sync the internal clock on the Grand Concerto to match the openHAB host's system clock | Boolean; default false | |\n+\n+Some notes:\n+\n+* If a zone has a maximum volume limit configured by the Nuvo configurator, the volume slider will automatically drop back to that level if set above the configured limit.\n+* Source display_line1 thru 4 can only be updated on non NuvoNet sources.\n+* The track_position channel does not update continuously for NuvoNet sources. It only changes when the track changes or playback is paused/unpaused.\n+*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMDA3MQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MjM3Ng==", "bodyText": "I tried that but did it did not work since it is part of a list. It will be fine here without a line break. I did make improvements to all my bindings' markdown.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452582376", "createdAt": "2020-07-10T02:00:27Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/README.md", "diffHunk": "@@ -0,0 +1,394 @@\n+# Nuvo Grand Concerto & Essentia G Binding\n+\n+This binding can be used to control the Nuvo Grand Concerto or Essentia G whole house multi-zone amplifier.\n+Up to 20 keypad zones can be controlled when zone expansion modules are used (if not all zones on the amp are used they can be excluded via configuration).\n+\n+The binding supports two different kinds of connections:\n+\n+* serial connection,\n+* serial over IP connection\n+\n+For users without serial connector on server side, you can use a serial to USB adapter.\n+\n+You don't need to have your Grand Concerto or Essentia G whole house amplifier device directly connected to your openHAB server.\n+You can connect it for example to a Raspberry Pi and use [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) to make the serial connection available on LAN (serial over IP).\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the amplifier controller.\n+It has the `amplifier` id.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+You have to add all things manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter Label         | Parameter ID | Description                                                                                                                        | Accepted values          |\n+|-------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|--------------------------|\n+| Serial Port             | serialPort   | Serial port to use for connecting to the Nuvo whole house amplifier device                                                         | a comm port name       | |\n+| Address                 | host         | Host name or IP address of the machine connected to the Nuvo whole house amplifier device (serial over IP)                         | host name or ip        | |\n+| Port                    | port         | Communication port (serial over IP).                                                                                               | ip port number         | |\n+| Number of Zones         | numZones     | (Optional) Number of zones on the amplifier to utilize in the binding (up to 20 zones when zone expansion modules are used)        | (1-20; default 6)      | |\n+| Sync Clock on GConcerto | clockSync    | (Optional) If set to true, the binding will sync the internal clock on the Grand Concerto to match the openHAB host's system clock | Boolean; default false | |\n+\n+Some notes:\n+\n+* If a zone has a maximum volume limit configured by the Nuvo configurator, the volume slider will automatically drop back to that level if set above the configured limit.\n+* Source display_line1 thru 4 can only be updated on non NuvoNet sources.\n+* The track_position channel does not update continuously for NuvoNet sources. It only changes when the track changes or playback is paused/unpaused.\n+*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMDA3MQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzA4NzU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToxOTozOVrOGu5nTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDozNzozNFrOGu9vyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMTYyOA==", "bodyText": "You might want to put a link above.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451831628", "createdAt": "2020-07-08T21:19:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/README.md", "diffHunk": "@@ -0,0 +1,394 @@\n+# Nuvo Grand Concerto & Essentia G Binding\n+\n+This binding can be used to control the Nuvo Grand Concerto or Essentia G whole house multi-zone amplifier.\n+Up to 20 keypad zones can be controlled when zone expansion modules are used (if not all zones on the amp are used they can be excluded via configuration).\n+\n+The binding supports two different kinds of connections:\n+\n+* serial connection,\n+* serial over IP connection\n+\n+For users without serial connector on server side, you can use a serial to USB adapter.\n+\n+You don't need to have your Grand Concerto or Essentia G whole house amplifier device directly connected to your openHAB server.\n+You can connect it for example to a Raspberry Pi and use [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) to make the serial connection available on LAN (serial over IP).\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the amplifier controller.\n+It has the `amplifier` id.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+You have to add all things manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter Label         | Parameter ID | Description                                                                                                                        | Accepted values          |\n+|-------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|--------------------------|\n+| Serial Port             | serialPort   | Serial port to use for connecting to the Nuvo whole house amplifier device                                                         | a comm port name       | |\n+| Address                 | host         | Host name or IP address of the machine connected to the Nuvo whole house amplifier device (serial over IP)                         | host name or ip        | |\n+| Port                    | port         | Communication port (serial over IP).                                                                                               | ip port number         | |\n+| Number of Zones         | numZones     | (Optional) Number of zones on the amplifier to utilize in the binding (up to 20 zones when zone expansion modules are used)        | (1-20; default 6)      | |\n+| Sync Clock on GConcerto | clockSync    | (Optional) If set to true, the binding will sync the internal clock on the Grand Concerto to match the openHAB host's system clock | Boolean; default false | |\n+\n+Some notes:\n+\n+* If a zone has a maximum volume limit configured by the Nuvo configurator, the volume slider will automatically drop back to that level if set above the configured limit.\n+* Source display_line1 thru 4 can only be updated on non NuvoNet sources.\n+* The track_position channel does not update continuously for NuvoNet sources. It only changes when the track changes or playback is paused/unpaused.\n+*\n+* On Linux, you may get an error stating the serial port cannot be opened when the Nuvo binding tries to load.\n+* You can get around this by adding the `openhab` user to the `dialout` group like this: `usermod -a -G dialout openhab`.\n+* Also on Linux you may have issues with the USB if using two serial USB devices e.g. Nuvo and RFXcom. See the [general documentation about serial port configuration](/docs/administration/serial.html) for more on symlinking the USB ports.\n+* Here is an example of ser2net.conf you can use to share your serial port /dev/ttyUSB0 on IP port 4444 using [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) (take care, the baud rate is specific to the Nuvo amplifier):\n+\n+```\n+4444:raw:0:/dev/ttyUSB0:57600 8DATABITS NONE 1STOPBIT LOCAL\n+```\n+\n+## Channels\n+\n+The following channels are available:\n+\n+| Channel ID                           | Item Type   | Description                                                                                                   |\n+|--------------------------------------|-------------|---------------------------------------------------------------------------------------------------------------|\n+| system#alloff                        | Switch      | Turn all zones off simultaneously                                                                             |\n+| system#allmute                       | Switch      | Mute or unmute all zones simultaneously                                                                       |\n+| system#page                          | Switch      | Turn on or off the Page All Zones feature (while on the amplifier switches to source 6)                       |\n+| zoneN#power (where N= 1-20)          | Switch      | Turn the power for a zone on or off                                                                           |\n+| zoneN#source (where N= 1-20)         | Number      | Select the source input for a zone (1-6)                                                                      |\n+| zoneN#volume (where N= 1-20)         | Dimmer      | Control the volume for a zone (0-100%) [translates to 0-79]                                                   |\n+| zoneN#mute (where N= 1-20)           | Switch      | Mute or unmute a zone                                                                                         |\n+| zoneN#control (where N= 1-20)        | Player      | Simulate pressing the transport control buttons on the keypad e.g. play/pause/next/previous                   |\n+| zoneN#treble (where N= 1-20)         | Number      | Adjust the treble control for a zone (-18 to 18 [in increments of 2]) -18=none, 0=flat, 18=full               |\n+| zoneN#bass (where N= 1-20)           | Number      | Adjust the bass control for a zone (-18 to 18 [in increments of 2]) -18=none, 0=flat, 18=full                 |\n+| zoneN#balance (where N= 1-20)        | Number      | Adjust the balance control for a zone (-18 to 18 [in increments of 2]) -18=left, 0=center, 18=right           |\n+| zoneN#loudness (where N= 1-20)       | Switch      | Turn on or off the loudness compensation setting for the zone                                                 |\n+| zoneN#dnd (where N= 1-20)            | Switch      | Turn on or off the Do Not Disturb for the zone (for when the amplifiers's Page All Zones feature is activated)|\n+| zoneN#lock (where N= 1-20)           | Contact     | Indicates if this zone is currently locked                                                                    |\n+| zoneN#party (where N= 1-20)          | Switch      | Turn on or off the party mode feature with this zone as the host                                              |\n+| sourceN#display_line1 (where N= 1-6) | String      | 1st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#display_line2 (where N= 1-6) | String      | 2st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#display_line3 (where N= 1-6) | String      | 3st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#display_line4 (where N= 1-6) | String      | 4st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#play_mode (where N= 1-6)     | String      | The current playback mode of the source, ie: Playing, Paused, etc. (ReadOnly) See rules example for updating  |\n+| sourceN#track_length (where N= 1-6)  | Number:Time | The total running time of the current playing track (ReadOnly) See rules example for updating                 |\n+| sourceN#track_position (where N= 1-6)| Number:Time | The running time elapsed of the current playing track (ReadOnly) See rules example for updating               |\n+| sourceN#button_press (where N= 1-6)  | String      | Indicates the last button pressed on the keypad for a non NuvoNet source (ReadOnly)                           |\n+\n+## Full Example\n+\n+nuvo.things:\n+\n+```java\n+//serial port connection\n+nuvo:amplifier:myamp \"Nuvo WHA\" [ serialPort=\"COM5\", numZones=6, clockSync=false]\n+\n+// serial over IP connection\n+nuvo:amplifier:myamp \"Nuvo WHA\" [ host=\"192.168.0.10\", port=4444, numZones=6, clockSync=false]\n+\n+```\n+\n+nuvo.items:\n+\n+```java\n+// system\n+Switch nuvo_system_alloff \"All Zones Off\" { channel=\"nuvo:amplifier:myamp:system#alloff\" }\n+Switch nuvo_system_allmute \"All Zones Mute\" { channel=\"nuvo:amplifier:myamp:system#allmute\" }\n+Switch nuvo_system_page \"Page All Zones\" { channel=\"nuvo:amplifier:myamp:system#page\" }\n+\n+// zones\n+Switch nuvo_z1_power \"Power\" { channel=\"nuvo:amplifier:myamp:zone1#power\" }\n+Number nuvo_z1_source \"Source Input [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#source\" }\n+Dimmer nuvo_z1_volume \"Volume [%d %%]\" { channel=\"nuvo:amplifier:myamp:zone1#volume\" }\n+Switch nuvo_z1_mute \"Mute\" { channel=\"nuvo:amplifier:myamp:zone1#mute\" }\n+Player nuvo_z1_control \"Control\" { channel=\"nuvo:amplifier:myamp:zone1#control\" }\n+Number nuvo_z1_treble \"Treble Adjustment [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#treble\" }\n+Number nuvo_z1_bass \"Bass Adjustment [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#bass\" }\n+Number nuvo_z1_balance \"Balance Adjustment [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#balance\" }\n+Switch nuvo_z1_loudness \"Loudness\" { channel=\"nuvo:amplifier:myamp:zone1#loudness\" }\n+Switch nuvo_z1_dnd \"Do Not Disturb\" { channel=\"nuvo:amplifier:myamp:zone1#dnd\" }\n+Switch nuvo_z1_lock \"Zone Locked [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#lock\" }\n+Switch nuvo_z1_party \"Party Mode\" { channel=\"nuvo:amplifier:myamp:zone1#party\" }\n+\n+// > repeat for zones 2-20 (substitute z1 and zone1) < //\n+\n+// sources\n+String nuvo_s1_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#display_line1\" }\n+String nuvo_s1_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#display_line2\" }\n+String nuvo_s1_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#display_line3\" }\n+String nuvo_s1_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#display_line4\" }\n+String nuvo_s1_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#play_mode\" }\n+Number:Time nuvo_s1_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source1#track_length\" }\n+Number:Time nuvo_s1_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source1#track_position\" }\n+String nuvo_s1_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#button_press\" }\n+\n+String nuvo_s2_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#display_line1\" }\n+String nuvo_s2_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#display_line2\" }\n+String nuvo_s2_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#display_line3\" }\n+String nuvo_s2_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#display_line4\" }\n+String nuvo_s2_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#play_mode\" }\n+Number:Time nuvo_s2_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source2#track_length\" }\n+Number:Time nuvo_s2_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source2#track_position\" }\n+String nuvo_s2_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#button_press\" }\n+\n+String nuvo_s3_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#display_line1\" }\n+String nuvo_s3_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#display_line2\" }\n+String nuvo_s3_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#display_line3\" }\n+String nuvo_s3_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#display_line4\" }\n+String nuvo_s3_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#play_mode\" }\n+Number:Time nuvo_s3_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source3#track_length\" }\n+Number:Time nuvo_s3_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source3#track_position\" }\n+String nuvo_s3_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#button_press\" }\n+\n+String nuvo_s4_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#display_line1\" }\n+String nuvo_s4_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#display_line2\" }\n+String nuvo_s4_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#display_line3\" }\n+String nuvo_s4_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#display_line4\" }\n+String nuvo_s4_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#play_mode\" }\n+Number:Time nuvo_s4_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source4#track_length\" }\n+Number:Time nuvo_s4_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source4#track_position\" }\n+String nuvo_s4_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#button_press\" }\n+\n+String nuvo_s5_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#display_line1\" }\n+String nuvo_s5_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#display_line2\" }\n+String nuvo_s5_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#display_line3\" }\n+String nuvo_s5_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#display_line4\" }\n+String nuvo_s5_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#play_mode\" }\n+Number:Time nuvo_s5_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source5#track_length\" }\n+Number:Time nuvo_s5_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source5#track_position\" }\n+String nuvo_s5_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#button_press\" }\n+\n+String nuvo_s6_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#display_line1\" }\n+String nuvo_s6_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#display_line2\" }\n+String nuvo_s6_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#display_line3\" }\n+String nuvo_s6_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#display_line4\" }\n+String nuvo_s6_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#play_mode\" }\n+Number:Time nuvo_s6_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source6#track_length\" }\n+Number:Time nuvo_s6_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source6#track_position\" }\n+String nuvo_s6_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#button_press\" }\n+\n+```\n+\n+nuvo.sitemap:\n+\n+```perl\n+sitemap nuvo label=\"Audio Control\" {\n+    Frame label=\"System\" {\n+        Switch item=nuvo_system_alloff mappings=[ON=\" \"]\n+        Switch item=nuvo_system_allmute\n+        Switch item=nuvo_system_page\n+    }\n+\n+    Frame label=\"Zone 1\"\n+        Switch item=nuvo_z1_power visibility=[nuvo_z1_lock!=\"1\"]\n+        Selection item=nuvo_z1_source visibility=[nuvo_z1_power==ON] icon=\"player\"\n+        //Volume can be a Setpoint also\n+        Slider item=nuvo_z1_volume minValue=0 maxValue=100 step=1 visibility=[nuvo_z1_power==ON] icon=\"soundvolume\"\n+        Switch item=nuvo_z1_mute visibility=[nuvo_z1_power==ON] icon=\"soundvolume_mute\"\n+        Default item=nuvo_z1_control visibility=[nuvo_z1_power==ON]\n+\n+        Text item=nuvo_s1_display_line1 visibility=[nuvo_z1_source==\"1\"] icon=\"zoom\"\n+        Text item=nuvo_s1_display_line2 visibility=[nuvo_z1_source==\"1\"] icon=\"zoom\"\n+        Text item=nuvo_s1_display_line3 visibility=[nuvo_z1_source==\"1\"] icon=\"zoom\"\n+        Text item=nuvo_s1_display_line4 visibility=[nuvo_z1_source==\"1\"] icon=\"zoom\"\n+        Text item=nuvo_s1_play_mode visibility=[nuvo_z1_source==\"1\"] icon=\"player\"\n+        Text item=nuvo_s1_track_length visibility=[nuvo_z1_source==\"1\"]\n+        Text item=nuvo_s1_track_position visibility=[nuvo_z1_source==\"1\"]\n+        Text item=nuvo_s1_button_press visibility=[nuvo_z1_source==\"1\"] icon=\"none\"\n+\n+        Text item=nuvo_s2_display_line1 visibility=[nuvo_z1_source==\"2\"] icon=\"zoom\"\n+        Text item=nuvo_s2_display_line2 visibility=[nuvo_z1_source==\"2\"] icon=\"zoom\"\n+        Text item=nuvo_s2_display_line3 visibility=[nuvo_z1_source==\"2\"] icon=\"zoom\"\n+        Text item=nuvo_s2_display_line4 visibility=[nuvo_z1_source==\"2\"] icon=\"zoom\"\n+        Text item=nuvo_s2_play_mode visibility=[nuvo_z1_source==\"2\"] icon=\"player\"\n+        Text item=nuvo_s2_track_length visibility=[nuvo_z1_source==\"2\"]\n+        Text item=nuvo_s2_track_position visibility=[nuvo_z1_source==\"2\"]\n+        Text item=nuvo_s2_button_press visibility=[nuvo_z1_source==\"2\"] icon=\"none\"\n+\n+        Text item=nuvo_s3_display_line1 visibility=[nuvo_z1_source==\"3\"] icon=\"zoom\"\n+        Text item=nuvo_s3_display_line2 visibility=[nuvo_z1_source==\"3\"] icon=\"zoom\"\n+        Text item=nuvo_s3_display_line3 visibility=[nuvo_z1_source==\"3\"] icon=\"zoom\"\n+        Text item=nuvo_s3_display_line4 visibility=[nuvo_z1_source==\"3\"] icon=\"zoom\"\n+        Text item=nuvo_s3_play_mode visibility=[nuvo_z1_source==\"3\"] icon=\"player\"\n+        Text item=nuvo_s3_track_length visibility=[nuvo_z1_source==\"3\"]\n+        Text item=nuvo_s3_track_position visibility=[nuvo_z1_source==\"3\"]\n+        Text item=nuvo_s3_button_press visibility=[nuvo_z1_source==\"3\"] icon=\"none\"\n+\n+        Text item=nuvo_s4_display_line1 visibility=[nuvo_z1_source==\"4\"] icon=\"zoom\"\n+        Text item=nuvo_s4_display_line2 visibility=[nuvo_z1_source==\"4\"] icon=\"zoom\"\n+        Text item=nuvo_s4_display_line3 visibility=[nuvo_z1_source==\"4\"] icon=\"zoom\"\n+        Text item=nuvo_s4_display_line4 visibility=[nuvo_z1_source==\"4\"] icon=\"zoom\"\n+        Text item=nuvo_s4_play_mode visibility=[nuvo_z1_source==\"4\"] icon=\"player\"\n+        Text item=nuvo_s4_track_length visibility=[nuvo_z1_source==\"4\"]\n+        Text item=nuvo_s4_track_position visibility=[nuvo_z1_source==\"4\"]\n+        Text item=nuvo_s4_button_press visibility=[nuvo_z1_source==\"4\"] icon=\"none\"\n+\n+        Text item=nuvo_s5_display_line1 visibility=[nuvo_z1_source==\"5\"] icon=\"zoom\"\n+        Text item=nuvo_s5_display_line2 visibility=[nuvo_z1_source==\"5\"] icon=\"zoom\"\n+        Text item=nuvo_s5_display_line3 visibility=[nuvo_z1_source==\"5\"] icon=\"zoom\"\n+        Text item=nuvo_s5_display_line4 visibility=[nuvo_z1_source==\"5\"] icon=\"zoom\"\n+        Text item=nuvo_s5_play_mode visibility=[nuvo_z1_source==\"5\"] icon=\"player\"\n+        Text item=nuvo_s5_track_length visibility=[nuvo_z1_source==\"5\"]\n+        Text item=nuvo_s5_track_position visibility=[nuvo_z1_source==\"5\"]\n+        Text item=nuvo_s5_button_press visibility=[nuvo_z1_source==\"5\"] icon=\"none\"\n+\n+        Text item=nuvo_s6_display_line1 visibility=[nuvo_z1_source==\"6\"] icon=\"zoom\"\n+        Text item=nuvo_s6_display_line2 visibility=[nuvo_z1_source==\"6\"] icon=\"zoom\"\n+        Text item=nuvo_s6_display_line3 visibility=[nuvo_z1_source==\"6\"] icon=\"zoom\"\n+        Text item=nuvo_s6_display_line4 visibility=[nuvo_z1_source==\"6\"] icon=\"zoom\"\n+        Text item=nuvo_s6_play_mode visibility=[nuvo_z1_source==\"6\"] icon=\"player\"\n+        Text item=nuvo_s6_track_length visibility=[nuvo_z1_source==\"6\"]\n+        Text item=nuvo_s6_track_position visibility=[nuvo_z1_source==\"6\"]\n+        Text item=nuvo_s6_button_press visibility=[nuvo_z1_source==\"6\"] icon=\"none\"\n+\n+        Setpoint item=nuvo_z1_treble label=\"Treble Adjustment [%d]\" minValue=-18 maxValue=18 step=2 visibility=[nuvo_z1_power==ON]\n+        Setpoint item=nuvo_z1_bass label=\"Bass Adjustment [%d]\" minValue=-18 maxValue=18 step=2 visibility=[nuvo_z1_power==ON]\n+        Setpoint item=nuvo_z1_balance label=\"Balance Adjustment [%d]\" minValue=-18 maxValue=18 step=2 visibility=[nuvo_z1_power==ON]\n+        Switch item=nuvo_z1_loudness visibility=[nuvo_z1_power==ON]\n+        Switch item=nuvo_z1_dnd visibility=[nuvo_z1_power==ON]\n+        Text item=nuvo_z1_lock label=\"Zone Locked: [%s]\" icon=\"lock\"\n+        Switch item=nuvo_z1_party visibility=[nuvo_z1_power==ON]\n+    }\n+    \n+    //repeat for zones 2-20 (substitute z1)\n+}\n+\n+```\n+\n+nuvo.rules:\n+\n+```java\n+import java.text.Normalizer\n+\n+val actions = getActions(\"nuvo\",\"nuvo:amplifier:myamp\")\n+\n+// send command a custom command to the Nuvo Amplifier\n+// see 'NuVo Grand Concerto Serial Control Protocol.pdf' for more command examples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5OTMzNg==", "bodyText": "done. it may not be a permanent link but they can always search for it.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451899336", "createdAt": "2020-07-09T00:37:34Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/README.md", "diffHunk": "@@ -0,0 +1,394 @@\n+# Nuvo Grand Concerto & Essentia G Binding\n+\n+This binding can be used to control the Nuvo Grand Concerto or Essentia G whole house multi-zone amplifier.\n+Up to 20 keypad zones can be controlled when zone expansion modules are used (if not all zones on the amp are used they can be excluded via configuration).\n+\n+The binding supports two different kinds of connections:\n+\n+* serial connection,\n+* serial over IP connection\n+\n+For users without serial connector on server side, you can use a serial to USB adapter.\n+\n+You don't need to have your Grand Concerto or Essentia G whole house amplifier device directly connected to your openHAB server.\n+You can connect it for example to a Raspberry Pi and use [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) to make the serial connection available on LAN (serial over IP).\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the amplifier controller.\n+It has the `amplifier` id.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+You have to add all things manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter Label         | Parameter ID | Description                                                                                                                        | Accepted values          |\n+|-------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|--------------------------|\n+| Serial Port             | serialPort   | Serial port to use for connecting to the Nuvo whole house amplifier device                                                         | a comm port name       | |\n+| Address                 | host         | Host name or IP address of the machine connected to the Nuvo whole house amplifier device (serial over IP)                         | host name or ip        | |\n+| Port                    | port         | Communication port (serial over IP).                                                                                               | ip port number         | |\n+| Number of Zones         | numZones     | (Optional) Number of zones on the amplifier to utilize in the binding (up to 20 zones when zone expansion modules are used)        | (1-20; default 6)      | |\n+| Sync Clock on GConcerto | clockSync    | (Optional) If set to true, the binding will sync the internal clock on the Grand Concerto to match the openHAB host's system clock | Boolean; default false | |\n+\n+Some notes:\n+\n+* If a zone has a maximum volume limit configured by the Nuvo configurator, the volume slider will automatically drop back to that level if set above the configured limit.\n+* Source display_line1 thru 4 can only be updated on non NuvoNet sources.\n+* The track_position channel does not update continuously for NuvoNet sources. It only changes when the track changes or playback is paused/unpaused.\n+*\n+* On Linux, you may get an error stating the serial port cannot be opened when the Nuvo binding tries to load.\n+* You can get around this by adding the `openhab` user to the `dialout` group like this: `usermod -a -G dialout openhab`.\n+* Also on Linux you may have issues with the USB if using two serial USB devices e.g. Nuvo and RFXcom. See the [general documentation about serial port configuration](/docs/administration/serial.html) for more on symlinking the USB ports.\n+* Here is an example of ser2net.conf you can use to share your serial port /dev/ttyUSB0 on IP port 4444 using [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) (take care, the baud rate is specific to the Nuvo amplifier):\n+\n+```\n+4444:raw:0:/dev/ttyUSB0:57600 8DATABITS NONE 1STOPBIT LOCAL\n+```\n+\n+## Channels\n+\n+The following channels are available:\n+\n+| Channel ID                           | Item Type   | Description                                                                                                   |\n+|--------------------------------------|-------------|---------------------------------------------------------------------------------------------------------------|\n+| system#alloff                        | Switch      | Turn all zones off simultaneously                                                                             |\n+| system#allmute                       | Switch      | Mute or unmute all zones simultaneously                                                                       |\n+| system#page                          | Switch      | Turn on or off the Page All Zones feature (while on the amplifier switches to source 6)                       |\n+| zoneN#power (where N= 1-20)          | Switch      | Turn the power for a zone on or off                                                                           |\n+| zoneN#source (where N= 1-20)         | Number      | Select the source input for a zone (1-6)                                                                      |\n+| zoneN#volume (where N= 1-20)         | Dimmer      | Control the volume for a zone (0-100%) [translates to 0-79]                                                   |\n+| zoneN#mute (where N= 1-20)           | Switch      | Mute or unmute a zone                                                                                         |\n+| zoneN#control (where N= 1-20)        | Player      | Simulate pressing the transport control buttons on the keypad e.g. play/pause/next/previous                   |\n+| zoneN#treble (where N= 1-20)         | Number      | Adjust the treble control for a zone (-18 to 18 [in increments of 2]) -18=none, 0=flat, 18=full               |\n+| zoneN#bass (where N= 1-20)           | Number      | Adjust the bass control for a zone (-18 to 18 [in increments of 2]) -18=none, 0=flat, 18=full                 |\n+| zoneN#balance (where N= 1-20)        | Number      | Adjust the balance control for a zone (-18 to 18 [in increments of 2]) -18=left, 0=center, 18=right           |\n+| zoneN#loudness (where N= 1-20)       | Switch      | Turn on or off the loudness compensation setting for the zone                                                 |\n+| zoneN#dnd (where N= 1-20)            | Switch      | Turn on or off the Do Not Disturb for the zone (for when the amplifiers's Page All Zones feature is activated)|\n+| zoneN#lock (where N= 1-20)           | Contact     | Indicates if this zone is currently locked                                                                    |\n+| zoneN#party (where N= 1-20)          | Switch      | Turn on or off the party mode feature with this zone as the host                                              |\n+| sourceN#display_line1 (where N= 1-6) | String      | 1st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#display_line2 (where N= 1-6) | String      | 2st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#display_line3 (where N= 1-6) | String      | 3st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#display_line4 (where N= 1-6) | String      | 4st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#play_mode (where N= 1-6)     | String      | The current playback mode of the source, ie: Playing, Paused, etc. (ReadOnly) See rules example for updating  |\n+| sourceN#track_length (where N= 1-6)  | Number:Time | The total running time of the current playing track (ReadOnly) See rules example for updating                 |\n+| sourceN#track_position (where N= 1-6)| Number:Time | The running time elapsed of the current playing track (ReadOnly) See rules example for updating               |\n+| sourceN#button_press (where N= 1-6)  | String      | Indicates the last button pressed on the keypad for a non NuvoNet source (ReadOnly)                           |\n+\n+## Full Example\n+\n+nuvo.things:\n+\n+```java\n+//serial port connection\n+nuvo:amplifier:myamp \"Nuvo WHA\" [ serialPort=\"COM5\", numZones=6, clockSync=false]\n+\n+// serial over IP connection\n+nuvo:amplifier:myamp \"Nuvo WHA\" [ host=\"192.168.0.10\", port=4444, numZones=6, clockSync=false]\n+\n+```\n+\n+nuvo.items:\n+\n+```java\n+// system\n+Switch nuvo_system_alloff \"All Zones Off\" { channel=\"nuvo:amplifier:myamp:system#alloff\" }\n+Switch nuvo_system_allmute \"All Zones Mute\" { channel=\"nuvo:amplifier:myamp:system#allmute\" }\n+Switch nuvo_system_page \"Page All Zones\" { channel=\"nuvo:amplifier:myamp:system#page\" }\n+\n+// zones\n+Switch nuvo_z1_power \"Power\" { channel=\"nuvo:amplifier:myamp:zone1#power\" }\n+Number nuvo_z1_source \"Source Input [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#source\" }\n+Dimmer nuvo_z1_volume \"Volume [%d %%]\" { channel=\"nuvo:amplifier:myamp:zone1#volume\" }\n+Switch nuvo_z1_mute \"Mute\" { channel=\"nuvo:amplifier:myamp:zone1#mute\" }\n+Player nuvo_z1_control \"Control\" { channel=\"nuvo:amplifier:myamp:zone1#control\" }\n+Number nuvo_z1_treble \"Treble Adjustment [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#treble\" }\n+Number nuvo_z1_bass \"Bass Adjustment [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#bass\" }\n+Number nuvo_z1_balance \"Balance Adjustment [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#balance\" }\n+Switch nuvo_z1_loudness \"Loudness\" { channel=\"nuvo:amplifier:myamp:zone1#loudness\" }\n+Switch nuvo_z1_dnd \"Do Not Disturb\" { channel=\"nuvo:amplifier:myamp:zone1#dnd\" }\n+Switch nuvo_z1_lock \"Zone Locked [%s]\" { channel=\"nuvo:amplifier:myamp:zone1#lock\" }\n+Switch nuvo_z1_party \"Party Mode\" { channel=\"nuvo:amplifier:myamp:zone1#party\" }\n+\n+// > repeat for zones 2-20 (substitute z1 and zone1) < //\n+\n+// sources\n+String nuvo_s1_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#display_line1\" }\n+String nuvo_s1_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#display_line2\" }\n+String nuvo_s1_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#display_line3\" }\n+String nuvo_s1_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#display_line4\" }\n+String nuvo_s1_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#play_mode\" }\n+Number:Time nuvo_s1_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source1#track_length\" }\n+Number:Time nuvo_s1_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source1#track_position\" }\n+String nuvo_s1_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source1#button_press\" }\n+\n+String nuvo_s2_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#display_line1\" }\n+String nuvo_s2_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#display_line2\" }\n+String nuvo_s2_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#display_line3\" }\n+String nuvo_s2_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#display_line4\" }\n+String nuvo_s2_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#play_mode\" }\n+Number:Time nuvo_s2_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source2#track_length\" }\n+Number:Time nuvo_s2_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source2#track_position\" }\n+String nuvo_s2_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source2#button_press\" }\n+\n+String nuvo_s3_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#display_line1\" }\n+String nuvo_s3_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#display_line2\" }\n+String nuvo_s3_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#display_line3\" }\n+String nuvo_s3_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#display_line4\" }\n+String nuvo_s3_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#play_mode\" }\n+Number:Time nuvo_s3_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source3#track_length\" }\n+Number:Time nuvo_s3_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source3#track_position\" }\n+String nuvo_s3_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source3#button_press\" }\n+\n+String nuvo_s4_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#display_line1\" }\n+String nuvo_s4_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#display_line2\" }\n+String nuvo_s4_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#display_line3\" }\n+String nuvo_s4_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#display_line4\" }\n+String nuvo_s4_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#play_mode\" }\n+Number:Time nuvo_s4_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source4#track_length\" }\n+Number:Time nuvo_s4_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source4#track_position\" }\n+String nuvo_s4_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source4#button_press\" }\n+\n+String nuvo_s5_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#display_line1\" }\n+String nuvo_s5_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#display_line2\" }\n+String nuvo_s5_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#display_line3\" }\n+String nuvo_s5_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#display_line4\" }\n+String nuvo_s5_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#play_mode\" }\n+Number:Time nuvo_s5_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source5#track_length\" }\n+Number:Time nuvo_s5_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source5#track_position\" }\n+String nuvo_s5_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source5#button_press\" }\n+\n+String nuvo_s6_display_line1 \"Line 1: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#display_line1\" }\n+String nuvo_s6_display_line2 \"Line 2: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#display_line2\" }\n+String nuvo_s6_display_line3 \"Line 3: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#display_line3\" }\n+String nuvo_s6_display_line4 \"Line 4: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#display_line4\" }\n+String nuvo_s6_play_mode \"Play Mode: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#play_mode\" }\n+Number:Time nuvo_s6_track_length \"Track Length: [%s s]\" { channel=\"nuvo:amplifier:myamp:source6#track_length\" }\n+Number:Time nuvo_s6_track_position \"Track Position: [%s s]\" { channel=\"nuvo:amplifier:myamp:source6#track_position\" }\n+String nuvo_s6_button_press \"Button: [%s]\" { channel=\"nuvo:amplifier:myamp:source6#button_press\" }\n+\n+```\n+\n+nuvo.sitemap:\n+\n+```perl\n+sitemap nuvo label=\"Audio Control\" {\n+    Frame label=\"System\" {\n+        Switch item=nuvo_system_alloff mappings=[ON=\" \"]\n+        Switch item=nuvo_system_allmute\n+        Switch item=nuvo_system_page\n+    }\n+\n+    Frame label=\"Zone 1\"\n+        Switch item=nuvo_z1_power visibility=[nuvo_z1_lock!=\"1\"]\n+        Selection item=nuvo_z1_source visibility=[nuvo_z1_power==ON] icon=\"player\"\n+        //Volume can be a Setpoint also\n+        Slider item=nuvo_z1_volume minValue=0 maxValue=100 step=1 visibility=[nuvo_z1_power==ON] icon=\"soundvolume\"\n+        Switch item=nuvo_z1_mute visibility=[nuvo_z1_power==ON] icon=\"soundvolume_mute\"\n+        Default item=nuvo_z1_control visibility=[nuvo_z1_power==ON]\n+\n+        Text item=nuvo_s1_display_line1 visibility=[nuvo_z1_source==\"1\"] icon=\"zoom\"\n+        Text item=nuvo_s1_display_line2 visibility=[nuvo_z1_source==\"1\"] icon=\"zoom\"\n+        Text item=nuvo_s1_display_line3 visibility=[nuvo_z1_source==\"1\"] icon=\"zoom\"\n+        Text item=nuvo_s1_display_line4 visibility=[nuvo_z1_source==\"1\"] icon=\"zoom\"\n+        Text item=nuvo_s1_play_mode visibility=[nuvo_z1_source==\"1\"] icon=\"player\"\n+        Text item=nuvo_s1_track_length visibility=[nuvo_z1_source==\"1\"]\n+        Text item=nuvo_s1_track_position visibility=[nuvo_z1_source==\"1\"]\n+        Text item=nuvo_s1_button_press visibility=[nuvo_z1_source==\"1\"] icon=\"none\"\n+\n+        Text item=nuvo_s2_display_line1 visibility=[nuvo_z1_source==\"2\"] icon=\"zoom\"\n+        Text item=nuvo_s2_display_line2 visibility=[nuvo_z1_source==\"2\"] icon=\"zoom\"\n+        Text item=nuvo_s2_display_line3 visibility=[nuvo_z1_source==\"2\"] icon=\"zoom\"\n+        Text item=nuvo_s2_display_line4 visibility=[nuvo_z1_source==\"2\"] icon=\"zoom\"\n+        Text item=nuvo_s2_play_mode visibility=[nuvo_z1_source==\"2\"] icon=\"player\"\n+        Text item=nuvo_s2_track_length visibility=[nuvo_z1_source==\"2\"]\n+        Text item=nuvo_s2_track_position visibility=[nuvo_z1_source==\"2\"]\n+        Text item=nuvo_s2_button_press visibility=[nuvo_z1_source==\"2\"] icon=\"none\"\n+\n+        Text item=nuvo_s3_display_line1 visibility=[nuvo_z1_source==\"3\"] icon=\"zoom\"\n+        Text item=nuvo_s3_display_line2 visibility=[nuvo_z1_source==\"3\"] icon=\"zoom\"\n+        Text item=nuvo_s3_display_line3 visibility=[nuvo_z1_source==\"3\"] icon=\"zoom\"\n+        Text item=nuvo_s3_display_line4 visibility=[nuvo_z1_source==\"3\"] icon=\"zoom\"\n+        Text item=nuvo_s3_play_mode visibility=[nuvo_z1_source==\"3\"] icon=\"player\"\n+        Text item=nuvo_s3_track_length visibility=[nuvo_z1_source==\"3\"]\n+        Text item=nuvo_s3_track_position visibility=[nuvo_z1_source==\"3\"]\n+        Text item=nuvo_s3_button_press visibility=[nuvo_z1_source==\"3\"] icon=\"none\"\n+\n+        Text item=nuvo_s4_display_line1 visibility=[nuvo_z1_source==\"4\"] icon=\"zoom\"\n+        Text item=nuvo_s4_display_line2 visibility=[nuvo_z1_source==\"4\"] icon=\"zoom\"\n+        Text item=nuvo_s4_display_line3 visibility=[nuvo_z1_source==\"4\"] icon=\"zoom\"\n+        Text item=nuvo_s4_display_line4 visibility=[nuvo_z1_source==\"4\"] icon=\"zoom\"\n+        Text item=nuvo_s4_play_mode visibility=[nuvo_z1_source==\"4\"] icon=\"player\"\n+        Text item=nuvo_s4_track_length visibility=[nuvo_z1_source==\"4\"]\n+        Text item=nuvo_s4_track_position visibility=[nuvo_z1_source==\"4\"]\n+        Text item=nuvo_s4_button_press visibility=[nuvo_z1_source==\"4\"] icon=\"none\"\n+\n+        Text item=nuvo_s5_display_line1 visibility=[nuvo_z1_source==\"5\"] icon=\"zoom\"\n+        Text item=nuvo_s5_display_line2 visibility=[nuvo_z1_source==\"5\"] icon=\"zoom\"\n+        Text item=nuvo_s5_display_line3 visibility=[nuvo_z1_source==\"5\"] icon=\"zoom\"\n+        Text item=nuvo_s5_display_line4 visibility=[nuvo_z1_source==\"5\"] icon=\"zoom\"\n+        Text item=nuvo_s5_play_mode visibility=[nuvo_z1_source==\"5\"] icon=\"player\"\n+        Text item=nuvo_s5_track_length visibility=[nuvo_z1_source==\"5\"]\n+        Text item=nuvo_s5_track_position visibility=[nuvo_z1_source==\"5\"]\n+        Text item=nuvo_s5_button_press visibility=[nuvo_z1_source==\"5\"] icon=\"none\"\n+\n+        Text item=nuvo_s6_display_line1 visibility=[nuvo_z1_source==\"6\"] icon=\"zoom\"\n+        Text item=nuvo_s6_display_line2 visibility=[nuvo_z1_source==\"6\"] icon=\"zoom\"\n+        Text item=nuvo_s6_display_line3 visibility=[nuvo_z1_source==\"6\"] icon=\"zoom\"\n+        Text item=nuvo_s6_display_line4 visibility=[nuvo_z1_source==\"6\"] icon=\"zoom\"\n+        Text item=nuvo_s6_play_mode visibility=[nuvo_z1_source==\"6\"] icon=\"player\"\n+        Text item=nuvo_s6_track_length visibility=[nuvo_z1_source==\"6\"]\n+        Text item=nuvo_s6_track_position visibility=[nuvo_z1_source==\"6\"]\n+        Text item=nuvo_s6_button_press visibility=[nuvo_z1_source==\"6\"] icon=\"none\"\n+\n+        Setpoint item=nuvo_z1_treble label=\"Treble Adjustment [%d]\" minValue=-18 maxValue=18 step=2 visibility=[nuvo_z1_power==ON]\n+        Setpoint item=nuvo_z1_bass label=\"Bass Adjustment [%d]\" minValue=-18 maxValue=18 step=2 visibility=[nuvo_z1_power==ON]\n+        Setpoint item=nuvo_z1_balance label=\"Balance Adjustment [%d]\" minValue=-18 maxValue=18 step=2 visibility=[nuvo_z1_power==ON]\n+        Switch item=nuvo_z1_loudness visibility=[nuvo_z1_power==ON]\n+        Switch item=nuvo_z1_dnd visibility=[nuvo_z1_power==ON]\n+        Text item=nuvo_z1_lock label=\"Zone Locked: [%s]\" icon=\"lock\"\n+        Switch item=nuvo_z1_party visibility=[nuvo_z1_power==ON]\n+    }\n+    \n+    //repeat for zones 2-20 (substitute z1)\n+}\n+\n+```\n+\n+nuvo.rules:\n+\n+```java\n+import java.text.Normalizer\n+\n+val actions = getActions(\"nuvo\",\"nuvo:amplifier:myamp\")\n+\n+// send command a custom command to the Nuvo Amplifier\n+// see 'NuVo Grand Concerto Serial Control Protocol.pdf' for more command examples", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMTYyOA=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzA5NzIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/NuvoHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToyMzowOFrOGu5tLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToyMzowOFrOGu5tLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzEzMg==", "bodyText": "You could remove disabling the null annotations without any effect, since you injected them in the constructor.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451833132", "createdAt": "2020-07-08T21:23:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/NuvoHandlerFactory.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.handler.NuvoHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link NuvoHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.nuvo\", service = ThingHandlerFactory.class)\n+public class NuvoHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_AMP);\n+\n+    private final @NonNullByDefault({}) SerialPortManager serialPortManager;\n+\n+    private final @NonNullByDefault({}) NuvoStateDescriptionOptionProvider stateDescriptionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzA5OTgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/NuvoThingActions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToyNDoxMVrOGu5u1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToyNDoxMVrOGu5u1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzU1Nw==", "bodyText": "handler could be null at this point.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451833557", "createdAt": "2020-07-08T21:24:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/NuvoThingActions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.nuvo.internal.handler.NuvoHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Some automation actions to be used with a {@link NuvoThingActions}\n+ *\n+ * @author Michael Lobstein - initial contribution\n+ *\n+ */\n+@ThingActionsScope(name = \"nuvo\")\n+@NonNullByDefault\n+public class NuvoThingActions implements ThingActions {\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoThingActions.class);\n+\n+    private @Nullable NuvoHandler handler;\n+\n+    @RuleAction(label = \"sendNuvoCommand\", description = \"Action that sends raw command to the amplifer\")\n+    public void sendNuvoCommand(@ActionInput(name = \"sendNuvoCommand\") @Nullable String rawCommand) {\n+        handler.handleRawCommand(rawCommand);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzEwOTEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToyNjo1M1rOGu50KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMjowMTowOFrOGvncog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNDkyMQ==", "bodyText": "Do you mean 5000?\nIf yes:\nSince this is called very often (and concurrently), better schedule a job to not clog openHAB's thread pools.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451834921", "createdAt": "2020-07-08T21:26:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})(S\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;\n+        }\n+    }\n+\n+    /**\n+     * Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes\n+     * actually read is returned as an integer.\n+     *\n+     * @param dataBuffer the buffer into which the data is read.\n+     *\n+     * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the\n+     *         stream has been reached.\n+     *\n+     * @throws NuvoException - If the input stream is null, if the first byte cannot be read for any reason\n+     *             other than the end of the file, if the input stream has been closed, or if some other I/O error\n+     *             occurs.\n+     */\n+    protected int readInput(byte[] dataBuffer) throws NuvoException {\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn == null) {\n+            throw new NuvoException(\"readInput failed: input stream is null\");\n+        }\n+        try {\n+            return dataIn.read(dataBuffer);\n+        } catch (IOException e) {\n+            throw new NuvoException(\"readInput failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute an inquiry command\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendQuery(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + QUERY);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone that takes no arguments (ie power on, power off,\n+     * etc.)\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for volume, source, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a configuration command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for bass, treble, balance, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCfgCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getConfigId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a system command the does not specify a zone or value\n+     *\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoCommand cmd) throws NuvoException {\n+        sendCommand(cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a raw command string\n+     *\n+     * @param command the command string to run\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(String command) throws NuvoException {\n+        String messageStr = BEGIN_CMD + command + END_CMD;\n+\n+        logger.debug(\"sending command: {}\", messageStr);\n+\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut == null) {\n+            throw new NuvoException(\"Send command \\\"\" + messageStr + \"\\\" failed: output stream is null\");\n+        }\n+        try {\n+            // Essentia G needs time to wake up when in standby mode\n+            // I don't want to track that in the binding, so just do this always\n+            if (this.isEssentia) {\n+                dataOut.write(WAKE_STR);\n+                dataOut.flush();\n+                Thread.sleep(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg3NjA4NQ==", "bodyText": "This device's spec document explicitly mention 5ms for sleep wakeup and 50 milliseconds between commands. It this going to be a problem with the thread pools?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451876085", "createdAt": "2020-07-08T23:17:07Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})(S\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;\n+        }\n+    }\n+\n+    /**\n+     * Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes\n+     * actually read is returned as an integer.\n+     *\n+     * @param dataBuffer the buffer into which the data is read.\n+     *\n+     * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the\n+     *         stream has been reached.\n+     *\n+     * @throws NuvoException - If the input stream is null, if the first byte cannot be read for any reason\n+     *             other than the end of the file, if the input stream has been closed, or if some other I/O error\n+     *             occurs.\n+     */\n+    protected int readInput(byte[] dataBuffer) throws NuvoException {\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn == null) {\n+            throw new NuvoException(\"readInput failed: input stream is null\");\n+        }\n+        try {\n+            return dataIn.read(dataBuffer);\n+        } catch (IOException e) {\n+            throw new NuvoException(\"readInput failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute an inquiry command\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendQuery(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + QUERY);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone that takes no arguments (ie power on, power off,\n+     * etc.)\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for volume, source, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a configuration command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for bass, treble, balance, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCfgCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getConfigId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a system command the does not specify a zone or value\n+     *\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoCommand cmd) throws NuvoException {\n+        sendCommand(cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a raw command string\n+     *\n+     * @param command the command string to run\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(String command) throws NuvoException {\n+        String messageStr = BEGIN_CMD + command + END_CMD;\n+\n+        logger.debug(\"sending command: {}\", messageStr);\n+\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut == null) {\n+            throw new NuvoException(\"Send command \\\"\" + messageStr + \"\\\" failed: output stream is null\");\n+        }\n+        try {\n+            // Essentia G needs time to wake up when in standby mode\n+            // I don't want to track that in the binding, so just do this always\n+            if (this.isEssentia) {\n+                dataOut.write(WAKE_STR);\n+                dataOut.flush();\n+                Thread.sleep(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNDkyMQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxNzAxOQ==", "bodyText": "No, that won't be a problem. But values shorter than 100ms can be ignored by the JVM completely. To increase the probability for the JVM to respect the sleeps, you should set them to 100ms.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452017019", "createdAt": "2020-07-09T07:26:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})(S\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;\n+        }\n+    }\n+\n+    /**\n+     * Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes\n+     * actually read is returned as an integer.\n+     *\n+     * @param dataBuffer the buffer into which the data is read.\n+     *\n+     * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the\n+     *         stream has been reached.\n+     *\n+     * @throws NuvoException - If the input stream is null, if the first byte cannot be read for any reason\n+     *             other than the end of the file, if the input stream has been closed, or if some other I/O error\n+     *             occurs.\n+     */\n+    protected int readInput(byte[] dataBuffer) throws NuvoException {\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn == null) {\n+            throw new NuvoException(\"readInput failed: input stream is null\");\n+        }\n+        try {\n+            return dataIn.read(dataBuffer);\n+        } catch (IOException e) {\n+            throw new NuvoException(\"readInput failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute an inquiry command\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendQuery(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + QUERY);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone that takes no arguments (ie power on, power off,\n+     * etc.)\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for volume, source, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a configuration command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for bass, treble, balance, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCfgCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getConfigId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a system command the does not specify a zone or value\n+     *\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoCommand cmd) throws NuvoException {\n+        sendCommand(cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a raw command string\n+     *\n+     * @param command the command string to run\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(String command) throws NuvoException {\n+        String messageStr = BEGIN_CMD + command + END_CMD;\n+\n+        logger.debug(\"sending command: {}\", messageStr);\n+\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut == null) {\n+            throw new NuvoException(\"Send command \\\"\" + messageStr + \"\\\" failed: output stream is null\");\n+        }\n+        try {\n+            // Essentia G needs time to wake up when in standby mode\n+            // I don't want to track that in the binding, so just do this always\n+            if (this.isEssentia) {\n+                dataOut.write(WAKE_STR);\n+                dataOut.flush();\n+                Thread.sleep(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNDkyMQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2MTUzNw==", "bodyText": "Would it be better to do something with wait() instead of Thread.sleep()?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452461537", "createdAt": "2020-07-09T20:09:05Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})(S\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;\n+        }\n+    }\n+\n+    /**\n+     * Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes\n+     * actually read is returned as an integer.\n+     *\n+     * @param dataBuffer the buffer into which the data is read.\n+     *\n+     * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the\n+     *         stream has been reached.\n+     *\n+     * @throws NuvoException - If the input stream is null, if the first byte cannot be read for any reason\n+     *             other than the end of the file, if the input stream has been closed, or if some other I/O error\n+     *             occurs.\n+     */\n+    protected int readInput(byte[] dataBuffer) throws NuvoException {\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn == null) {\n+            throw new NuvoException(\"readInput failed: input stream is null\");\n+        }\n+        try {\n+            return dataIn.read(dataBuffer);\n+        } catch (IOException e) {\n+            throw new NuvoException(\"readInput failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute an inquiry command\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendQuery(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + QUERY);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone that takes no arguments (ie power on, power off,\n+     * etc.)\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for volume, source, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a configuration command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for bass, treble, balance, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCfgCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getConfigId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a system command the does not specify a zone or value\n+     *\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoCommand cmd) throws NuvoException {\n+        sendCommand(cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a raw command string\n+     *\n+     * @param command the command string to run\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(String command) throws NuvoException {\n+        String messageStr = BEGIN_CMD + command + END_CMD;\n+\n+        logger.debug(\"sending command: {}\", messageStr);\n+\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut == null) {\n+            throw new NuvoException(\"Send command \\\"\" + messageStr + \"\\\" failed: output stream is null\");\n+        }\n+        try {\n+            // Essentia G needs time to wake up when in standby mode\n+            // I don't want to track that in the binding, so just do this always\n+            if (this.isEssentia) {\n+                dataOut.write(WAKE_STR);\n+                dataOut.flush();\n+                Thread.sleep(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNDkyMQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ2OTc3Mw==", "bodyText": "No, that won't make things better. I would try if the sleeps are necessary at all. 5ms might be the overall system-to-system latency. Otherwise, it's ok to go with the 100ms delays.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452469773", "createdAt": "2020-07-09T20:25:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})(S\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;\n+        }\n+    }\n+\n+    /**\n+     * Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes\n+     * actually read is returned as an integer.\n+     *\n+     * @param dataBuffer the buffer into which the data is read.\n+     *\n+     * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the\n+     *         stream has been reached.\n+     *\n+     * @throws NuvoException - If the input stream is null, if the first byte cannot be read for any reason\n+     *             other than the end of the file, if the input stream has been closed, or if some other I/O error\n+     *             occurs.\n+     */\n+    protected int readInput(byte[] dataBuffer) throws NuvoException {\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn == null) {\n+            throw new NuvoException(\"readInput failed: input stream is null\");\n+        }\n+        try {\n+            return dataIn.read(dataBuffer);\n+        } catch (IOException e) {\n+            throw new NuvoException(\"readInput failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute an inquiry command\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendQuery(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + QUERY);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone that takes no arguments (ie power on, power off,\n+     * etc.)\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for volume, source, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a configuration command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for bass, treble, balance, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCfgCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getConfigId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a system command the does not specify a zone or value\n+     *\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoCommand cmd) throws NuvoException {\n+        sendCommand(cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a raw command string\n+     *\n+     * @param command the command string to run\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(String command) throws NuvoException {\n+        String messageStr = BEGIN_CMD + command + END_CMD;\n+\n+        logger.debug(\"sending command: {}\", messageStr);\n+\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut == null) {\n+            throw new NuvoException(\"Send command \\\"\" + messageStr + \"\\\" failed: output stream is null\");\n+        }\n+        try {\n+            // Essentia G needs time to wake up when in standby mode\n+            // I don't want to track that in the binding, so just do this always\n+            if (this.isEssentia) {\n+                dataOut.write(WAKE_STR);\n+                dataOut.flush();\n+                Thread.sleep(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNDkyMQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MjU2Mg==", "bodyText": "I removed it and the device still wakes up properly.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452582562", "createdAt": "2020-07-10T02:01:08Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})(S\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;\n+        }\n+    }\n+\n+    /**\n+     * Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes\n+     * actually read is returned as an integer.\n+     *\n+     * @param dataBuffer the buffer into which the data is read.\n+     *\n+     * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the\n+     *         stream has been reached.\n+     *\n+     * @throws NuvoException - If the input stream is null, if the first byte cannot be read for any reason\n+     *             other than the end of the file, if the input stream has been closed, or if some other I/O error\n+     *             occurs.\n+     */\n+    protected int readInput(byte[] dataBuffer) throws NuvoException {\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn == null) {\n+            throw new NuvoException(\"readInput failed: input stream is null\");\n+        }\n+        try {\n+            return dataIn.read(dataBuffer);\n+        } catch (IOException e) {\n+            throw new NuvoException(\"readInput failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute an inquiry command\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendQuery(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + QUERY);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone that takes no arguments (ie power on, power off,\n+     * etc.)\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for volume, source, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a configuration command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for bass, treble, balance, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCfgCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getConfigId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a system command the does not specify a zone or value\n+     *\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoCommand cmd) throws NuvoException {\n+        sendCommand(cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a raw command string\n+     *\n+     * @param command the command string to run\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(String command) throws NuvoException {\n+        String messageStr = BEGIN_CMD + command + END_CMD;\n+\n+        logger.debug(\"sending command: {}\", messageStr);\n+\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut == null) {\n+            throw new NuvoException(\"Send command \\\"\" + messageStr + \"\\\" failed: output stream is null\");\n+        }\n+        try {\n+            // Essentia G needs time to wake up when in standby mode\n+            // I don't want to track that in the binding, so just do this always\n+            if (this.isEssentia) {\n+                dataOut.write(WAKE_STR);\n+                dataOut.flush();\n+                Thread.sleep(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzNDkyMQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzEzMjI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozNDo1NlrOGu6CgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo0MDowMFrOGu9yOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzODU5Mw==", "bodyText": "Do these log messages make sense? If I see correctly, they are repeatedly logged when one message is received.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451838593", "createdAt": "2020-07-08T21:34:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})(S\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;\n+        }\n+    }\n+\n+    /**\n+     * Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes\n+     * actually read is returned as an integer.\n+     *\n+     * @param dataBuffer the buffer into which the data is read.\n+     *\n+     * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the\n+     *         stream has been reached.\n+     *\n+     * @throws NuvoException - If the input stream is null, if the first byte cannot be read for any reason\n+     *             other than the end of the file, if the input stream has been closed, or if some other I/O error\n+     *             occurs.\n+     */\n+    protected int readInput(byte[] dataBuffer) throws NuvoException {\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn == null) {\n+            throw new NuvoException(\"readInput failed: input stream is null\");\n+        }\n+        try {\n+            return dataIn.read(dataBuffer);\n+        } catch (IOException e) {\n+            throw new NuvoException(\"readInput failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute an inquiry command\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendQuery(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + QUERY);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone that takes no arguments (ie power on, power off,\n+     * etc.)\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for volume, source, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a configuration command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for bass, treble, balance, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCfgCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getConfigId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a system command the does not specify a zone or value\n+     *\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoCommand cmd) throws NuvoException {\n+        sendCommand(cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a raw command string\n+     *\n+     * @param command the command string to run\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(String command) throws NuvoException {\n+        String messageStr = BEGIN_CMD + command + END_CMD;\n+\n+        logger.debug(\"sending command: {}\", messageStr);\n+\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut == null) {\n+            throw new NuvoException(\"Send command \\\"\" + messageStr + \"\\\" failed: output stream is null\");\n+        }\n+        try {\n+            // Essentia G needs time to wake up when in standby mode\n+            // I don't want to track that in the binding, so just do this always\n+            if (this.isEssentia) {\n+                dataOut.write(WAKE_STR);\n+                dataOut.flush();\n+                Thread.sleep(5);\n+            }\n+            dataOut.write(messageStr.getBytes(StandardCharsets.US_ASCII));\n+            dataOut.flush();\n+        } catch (IOException | InterruptedException e) {\n+            throw new NuvoException(\"Send command \\\"\" + command + \"\\\" failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Add a listener to the list of listeners to be notified with events\n+     *\n+     * @param listener the listener\n+     */\n+    public void addEventListener(NuvoMessageEventListener listener) {\n+        listeners.add(listener);\n+    }\n+\n+    /**\n+     * Remove a listener from the list of listeners to be notified with events\n+     *\n+     * @param listener the listener\n+     */\n+    public void removeEventListener(NuvoMessageEventListener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+    /**\n+     * Analyze an incoming message and dispatch corresponding (type, key, value) to the event listeners\n+     *\n+     * @param incomingMessage the received message\n+     */\n+    public void handleIncomingMessage(byte[] incomingMessage) {\n+        String message = new String(incomingMessage, StandardCharsets.US_ASCII).trim();\n+\n+        logger.debug(\"handleIncomingMessage: {}\", message);\n+\n+        if (COMMAND_ERROR.equals(message) || COMMAND_OK.equals(message)) {\n+            // ignore\n+            return;\n+        }\n+\n+        if (message.contains(VER_STR)) {\n+            // example: #VER\"NV-E6G FWv2.66 HWv0\"\n+            // split on \" and return the version number\n+            dispatchKeyValue(TYPE_VERSION, \"\", message.split(\"\\\"\")[1]);\n+            return;\n+        }\n+\n+        if (message.equals(ALL_OFF)) {\n+            dispatchKeyValue(TYPE_ALLOFF, BLANK, BLANK);\n+            return;\n+        }\n+\n+        if (message.contains(MUTE)) {\n+            dispatchKeyValue(TYPE_ALLMUTE, BLANK, message.substring(message.length() - 1));\n+            return;\n+        }\n+\n+        if (message.contains(PAGE)) {\n+            dispatchKeyValue(TYPE_PAGE, BLANK, message.substring(message.length() - 1));\n+            return;\n+        }\n+\n+        // Amp controller send a source update ie: #S2DISPINFO,DUR3380,POS3090,STATUS2\n+        // or #S2DISPLINE1,\"1 of 17\"\n+        Matcher matcher = SRC_PATTERN.matcher(message);\n+        if (matcher.find()) {\n+            // pull out the source id and the remainder of the message\n+            dispatchKeyValue(TYPE_SOURCE_UPDATE, matcher.group(1), matcher.group(2));\n+            return;\n+        } else {\n+            logger.debug(\"no match on message: {}\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 338}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg5OTk2Mg==", "bodyText": "removed", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451899962", "createdAt": "2020-07-09T00:40:00Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})(S\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;\n+        }\n+    }\n+\n+    /**\n+     * Reads some number of bytes from the input stream and stores them into the buffer array b. The number of bytes\n+     * actually read is returned as an integer.\n+     *\n+     * @param dataBuffer the buffer into which the data is read.\n+     *\n+     * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the\n+     *         stream has been reached.\n+     *\n+     * @throws NuvoException - If the input stream is null, if the first byte cannot be read for any reason\n+     *             other than the end of the file, if the input stream has been closed, or if some other I/O error\n+     *             occurs.\n+     */\n+    protected int readInput(byte[] dataBuffer) throws NuvoException {\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn == null) {\n+            throw new NuvoException(\"readInput failed: input stream is null\");\n+        }\n+        try {\n+            return dataIn.read(dataBuffer);\n+        } catch (IOException e) {\n+            throw new NuvoException(\"readInput failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute an inquiry command\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendQuery(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + QUERY);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone that takes no arguments (ie power on, power off,\n+     * etc.)\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for volume, source, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a configuration command for a zone and pass in a value\n+     *\n+     * @param zone the zone for which the command is to be run\n+     * @param cmd the command to execute\n+     * @param value the string value to consider for bass, treble, balance, etc.\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCfgCommand(NuvoEnum zone, NuvoCommand cmd, @Nullable String value) throws NuvoException {\n+        sendCommand(zone.getConfigId() + cmd.getValue() + value);\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a system command the does not specify a zone or value\n+     *\n+     * @param cmd the command to execute\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(NuvoCommand cmd) throws NuvoException {\n+        sendCommand(cmd.getValue());\n+    }\n+\n+    /**\n+     * Request the Nuvo controller to execute a raw command string\n+     *\n+     * @param command the command string to run\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public void sendCommand(String command) throws NuvoException {\n+        String messageStr = BEGIN_CMD + command + END_CMD;\n+\n+        logger.debug(\"sending command: {}\", messageStr);\n+\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut == null) {\n+            throw new NuvoException(\"Send command \\\"\" + messageStr + \"\\\" failed: output stream is null\");\n+        }\n+        try {\n+            // Essentia G needs time to wake up when in standby mode\n+            // I don't want to track that in the binding, so just do this always\n+            if (this.isEssentia) {\n+                dataOut.write(WAKE_STR);\n+                dataOut.flush();\n+                Thread.sleep(5);\n+            }\n+            dataOut.write(messageStr.getBytes(StandardCharsets.US_ASCII));\n+            dataOut.flush();\n+        } catch (IOException | InterruptedException e) {\n+            throw new NuvoException(\"Send command \\\"\" + command + \"\\\" failed: \" + e.getMessage(), e);\n+        }\n+    }\n+\n+    /**\n+     * Add a listener to the list of listeners to be notified with events\n+     *\n+     * @param listener the listener\n+     */\n+    public void addEventListener(NuvoMessageEventListener listener) {\n+        listeners.add(listener);\n+    }\n+\n+    /**\n+     * Remove a listener from the list of listeners to be notified with events\n+     *\n+     * @param listener the listener\n+     */\n+    public void removeEventListener(NuvoMessageEventListener listener) {\n+        listeners.remove(listener);\n+    }\n+\n+    /**\n+     * Analyze an incoming message and dispatch corresponding (type, key, value) to the event listeners\n+     *\n+     * @param incomingMessage the received message\n+     */\n+    public void handleIncomingMessage(byte[] incomingMessage) {\n+        String message = new String(incomingMessage, StandardCharsets.US_ASCII).trim();\n+\n+        logger.debug(\"handleIncomingMessage: {}\", message);\n+\n+        if (COMMAND_ERROR.equals(message) || COMMAND_OK.equals(message)) {\n+            // ignore\n+            return;\n+        }\n+\n+        if (message.contains(VER_STR)) {\n+            // example: #VER\"NV-E6G FWv2.66 HWv0\"\n+            // split on \" and return the version number\n+            dispatchKeyValue(TYPE_VERSION, \"\", message.split(\"\\\"\")[1]);\n+            return;\n+        }\n+\n+        if (message.equals(ALL_OFF)) {\n+            dispatchKeyValue(TYPE_ALLOFF, BLANK, BLANK);\n+            return;\n+        }\n+\n+        if (message.contains(MUTE)) {\n+            dispatchKeyValue(TYPE_ALLMUTE, BLANK, message.substring(message.length() - 1));\n+            return;\n+        }\n+\n+        if (message.contains(PAGE)) {\n+            dispatchKeyValue(TYPE_PAGE, BLANK, message.substring(message.length() - 1));\n+            return;\n+        }\n+\n+        // Amp controller send a source update ie: #S2DISPINFO,DUR3380,POS3090,STATUS2\n+        // or #S2DISPLINE1,\"1 of 17\"\n+        Matcher matcher = SRC_PATTERN.matcher(message);\n+        if (matcher.find()) {\n+            // pull out the source id and the remainder of the message\n+            dispatchKeyValue(TYPE_SOURCE_UPDATE, matcher.group(1), matcher.group(2));\n+            return;\n+        } else {\n+            logger.debug(\"no match on message: {}\", message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzODU5Mw=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 338}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzE0MDY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoIpConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozNzo0NlrOGu6Hew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo0MDozOFrOGu9yzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzOTg2Nw==", "bodyText": "There is a compiler null warning left.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451839867", "createdAt": "2020-07-08T21:37:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoIpConnector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class for communicating with the Nuvo device through a serial over IP connection\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public class NuvoIpConnector extends NuvoConnector {\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoIpConnector.class);\n+\n+    private @Nullable String address;\n+    private int port;\n+\n+    private @Nullable Socket clientSocket;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param address the IP address of the serial over ip adapter\n+     * @param port the TCP port to be used\n+     */\n+    public NuvoIpConnector(@Nullable String address, @Nullable Integer port) {\n+        this.address = address;\n+        this.port = port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMDEwOA==", "bodyText": "fixed all \ud83d\udc4d", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451900108", "createdAt": "2020-07-09T00:40:38Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoIpConnector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.Socket;\n+import java.net.SocketTimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class for communicating with the Nuvo device through a serial over IP connection\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public class NuvoIpConnector extends NuvoConnector {\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoIpConnector.class);\n+\n+    private @Nullable String address;\n+    private int port;\n+\n+    private @Nullable Socket clientSocket;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param address the IP address of the serial over ip adapter\n+     * @param port the TCP port to be used\n+     */\n+    public NuvoIpConnector(@Nullable String address, @Nullable Integer port) {\n+        this.address = address;\n+        this.port = port;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzOTg2Nw=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzE0NjA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoStatusCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozOTo1N1rOGu6KyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTozOTo1N1rOGu6KyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MDcxMg==", "bodyText": "Same for below.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return (L + Integer.toString(value * -1));\n          \n          \n            \n                        return (L + (value * -1));", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451840712", "createdAt": "2020-07-08T21:39:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoStatusCodes.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Provides mapping of various Nuvo status codes to plain language meanings\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class NuvoStatusCodes {\n+    private static final String L = \"L\";\n+    private static final String C = \"C\";\n+    private static final String R = \"R\";\n+    private static final String DASH = \"-\";\n+    private static final String ZERO = \"0\";\n+\n+    // map to lookup play mode\n+    public static final Map<String, String> PLAY_MODE = new HashMap<>();\n+    static {\n+        PLAY_MODE.put(\"0\", \"Normal\");\n+        PLAY_MODE.put(\"1\", \"Idle\");\n+        PLAY_MODE.put(\"2\", \"Playing\");\n+        PLAY_MODE.put(\"3\", \"Paused\");\n+        PLAY_MODE.put(\"4\", \"Fast Forward\");\n+        PLAY_MODE.put(\"5\", \"Rewind\");\n+        PLAY_MODE.put(\"6\", \"Play Shuffle\");\n+        PLAY_MODE.put(\"7\", \"Play Repeat\");\n+        PLAY_MODE.put(\"8\", \"Play Shuffle Repeat\");\n+        PLAY_MODE.put(\"9\", \"unknown-9\");\n+        PLAY_MODE.put(\"10\", \"unknown-10\");\n+        PLAY_MODE.put(\"11\", \"Radio\"); // undocumented\n+        PLAY_MODE.put(\"12\", \"unknown-12\");\n+    }\n+\n+    /*\n+     * This looks broken because the controller is seriously broken...\n+     * On the keypad when adjusting the balance to \"Left 18\", the serial data reports R18 \u00af\\_(\u30c4)_/\u00af\n+     * So on top of the weird translation, the value needs to be reversed by the binding\n+     * to ensure that it will match what is displayed on the keypad.\n+     * For display purposes we want -18 to be full left, 0 = center, and +18 to be full right\n+     */\n+    public static String getBalanceFromStr(String value) {\n+        // example L2; return 2 | C; return 0 | R10; return -10\n+        if (value.substring(0, 1).equals(L)) {\n+            return (value.substring(1));\n+        } else if (value.equals(C)) {\n+            return ZERO;\n+        } else if (value.substring(0, 1).equals(R)) {\n+            return (DASH + value.substring(1));\n+        }\n+        return ZERO;\n+    }\n+\n+    // see above comment\n+    public static String getBalanceFromInt(Integer value) {\n+        if (value < 0) {\n+            return (L + Integer.toString(value * -1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzE0NzgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo0MDozNVrOGu6L1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo0MzozNFrOGu91rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MDk4MA==", "bodyText": "It's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451840980", "createdAt": "2020-07-08T21:40:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMDg0Ng==", "bodyText": "done for all.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451900846", "createdAt": "2020-07-09T00:43:34Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MDk4MA=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzE1NTQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo0MzoyNlrOGu6Qag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo0NDowMVrOGu92Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MjE1NA==", "bodyText": "After the thing status is set to unknown, the framework starts to work with this Thing: handleCommand() and dispose() can be invoked (concurrently). If dispose() is invoked before the jobs are scheduled, the jobs won't be cancelled.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451842154", "createdAt": "2020-07-08T21:43:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMDk1MQ==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451900951", "createdAt": "2020-07-09T00:44:01Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MjE1NA=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzE2NTUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo0NzowOVrOGu6Wlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMzo0Njo1MlrOGxC8Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MzczNA==", "bodyText": "Is it worth to translate odd values to even values, instead of ignoring them?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451843734", "createdAt": "2020-07-08T21:47:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMzQ2Ng==", "bodyText": "The device is weird in that it only accepts even values (from -18 to 18). So this was done to along with step=2 in the channel configuration to have the binding values match the device. I noted it in the readme also.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451903466", "createdAt": "2020-07-09T00:54:05Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MzczNA=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg5Njg0Ng==", "bodyText": "I had something like this in mind:\nif(value % 2 == 1) value++;", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r453896846", "createdAt": "2020-07-13T19:58:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MzczNA=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 284}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4MTYzOA==", "bodyText": "good idea, it will automatically become a compatible value.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r454081638", "createdAt": "2020-07-14T03:46:52Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0MzczNA=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzE2NzQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo0Nzo1M1rOGu6XyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo0NjozN1rOGu94vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0NDA0MQ==", "bodyText": "Syntactical sugar. Same for below.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        connector.sendCommand(target, NuvoCommand.DISPLINE1, \"\\\"\" + command.toString() + \"\\\"\");\n          \n          \n            \n                                        connector.sendCommand(target, NuvoCommand.DISPLINE1, \"\\\"\" + command + \"\\\"\");", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451844041", "createdAt": "2020-07-08T21:47:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got treble command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.TREBLE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BASS:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got bass command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BASS, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BALANCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got balance command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BALANCE,\n+                                        NuvoStatusCodes.getBalanceFromInt(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_LOUDNESS:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCfgCommand(target, NuvoCommand.LOUDNESS,\n+                                    command == OnOffType.ON ? ONE : ZERO);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_CONTROL:\n+                        handleControlCommand(target, command);\n+                        break;\n+                    case CHANNEL_TYPE_DND:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.DND_ON : NuvoCommand.DND_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PARTY:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PARTY_ON : NuvoCommand.PARTY_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE1:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE1, \"\\\"\" + command.toString() + \"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 332}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwMTYyOA==", "bodyText": "I got rid of all of them. thanks.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451901628", "createdAt": "2020-07-09T00:46:37Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got treble command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.TREBLE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BASS:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got bass command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BASS, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BALANCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got balance command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BALANCE,\n+                                        NuvoStatusCodes.getBalanceFromInt(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_LOUDNESS:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCfgCommand(target, NuvoCommand.LOUDNESS,\n+                                    command == OnOffType.ON ? ONE : ZERO);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_CONTROL:\n+                        handleControlCommand(target, command);\n+                        break;\n+                    case CHANNEL_TYPE_DND:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.DND_ON : NuvoCommand.DND_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PARTY:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PARTY_ON : NuvoCommand.PARTY_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE1:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE1, \"\\\"\" + command.toString() + \"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0NDA0MQ=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 332}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzE3NDA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo1MDoyMFrOGu6bqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTo1MDoyMFrOGu6bqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg0NTAzMg==", "bodyText": "Syntactical sugar. Same for below.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum.toString()), CHANNEL_TYPE_POWER, OFF);\n          \n          \n            \n                                updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum), CHANNEL_TYPE_POWER, OFF);", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451845032", "createdAt": "2020-07-08T21:50:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got treble command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.TREBLE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BASS:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got bass command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BASS, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BALANCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got balance command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BALANCE,\n+                                        NuvoStatusCodes.getBalanceFromInt(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_LOUDNESS:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCfgCommand(target, NuvoCommand.LOUDNESS,\n+                                    command == OnOffType.ON ? ONE : ZERO);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_CONTROL:\n+                        handleControlCommand(target, command);\n+                        break;\n+                    case CHANNEL_TYPE_DND:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.DND_ON : NuvoCommand.DND_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PARTY:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PARTY_ON : NuvoCommand.PARTY_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE1:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE1, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE2:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE2, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE3:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE3, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE4:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE4, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_ALLOFF:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(NuvoCommand.ALLOFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_ALLMUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.ALLMUTE_ON : NuvoCommand.ALLMUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PAGE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PAGE_ON : NuvoCommand.PAGE_OFF);\n+                        }\n+                        break;\n+                }\n+            } catch (NuvoException e) {\n+                logger.warn(\"Command {} from channel {} failed: {}\", command, channel, e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Sending command failed\");\n+                closeConnection();\n+                scheduleReconnectJob();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @return true if the connection is opened successfully or false if not\n+     */\n+    private synchronized boolean openConnection() {\n+        connector.addEventListener(this);\n+        try {\n+            connector.open();\n+        } catch (NuvoException e) {\n+            logger.debug(\"openConnection() failed: {}\", e.getMessage());\n+        }\n+        logger.debug(\"openConnection(): {}\", connector.isConnected() ? \"connected\" : \"disconnected\");\n+        return connector.isConnected();\n+    }\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    private synchronized void closeConnection() {\n+        if (connector.isConnected()) {\n+            connector.close();\n+            connector.removeEventListener(this);\n+            logger.debug(\"closeConnection(): disconnected\");\n+        }\n+    }\n+\n+    /**\n+     * Handle an event received from the Nuvo device\n+     *\n+     * @param event the event to process\n+     */\n+    @Override\n+    public void onNewMessageEvent(NuvoMessageEvent evt) {\n+        logger.debug(\"onNewMessageEvent: key {} = {}\", evt.getKey(), evt.getValue());\n+        lastEventReceived = System.currentTimeMillis();\n+\n+        String type = evt.getType();\n+        String key = evt.getKey();\n+        String updateData = evt.getValue().trim();\n+        if (this.getThing().getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, this.versionString);\n+        }\n+\n+        switch (type) {\n+            case TYPE_VERSION:\n+                this.versionString = updateData;\n+                // Determine if we are a Grand Concerto or not\n+                if (this.versionString.contains(GC_STR)) {\n+                    this.isGConcerto = true;\n+                    connector.setEssentia(false);\n+                }\n+                break;\n+            case TYPE_ALLOFF:\n+                activeZones.forEach(zoneNum -> {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum.toString()), CHANNEL_TYPE_POWER, OFF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 432}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzIwOTcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjowNDoxOFrOGu6xog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwMDo1ODo1NlrOGu-Eig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MDY1OA==", "bodyText": "Did you try this with different system timezones and configuring the timezone in PaperUI? I saw an example retrieving a zoned datetime service or so via @Reference in an openHAB binding, but I can't find it again.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451850658", "createdAt": "2020-07-08T22:04:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got treble command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.TREBLE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BASS:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got bass command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BASS, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BALANCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got balance command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BALANCE,\n+                                        NuvoStatusCodes.getBalanceFromInt(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_LOUDNESS:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCfgCommand(target, NuvoCommand.LOUDNESS,\n+                                    command == OnOffType.ON ? ONE : ZERO);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_CONTROL:\n+                        handleControlCommand(target, command);\n+                        break;\n+                    case CHANNEL_TYPE_DND:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.DND_ON : NuvoCommand.DND_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PARTY:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PARTY_ON : NuvoCommand.PARTY_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE1:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE1, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE2:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE2, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE3:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE3, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE4:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE4, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_ALLOFF:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(NuvoCommand.ALLOFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_ALLMUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.ALLMUTE_ON : NuvoCommand.ALLMUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PAGE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PAGE_ON : NuvoCommand.PAGE_OFF);\n+                        }\n+                        break;\n+                }\n+            } catch (NuvoException e) {\n+                logger.warn(\"Command {} from channel {} failed: {}\", command, channel, e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Sending command failed\");\n+                closeConnection();\n+                scheduleReconnectJob();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @return true if the connection is opened successfully or false if not\n+     */\n+    private synchronized boolean openConnection() {\n+        connector.addEventListener(this);\n+        try {\n+            connector.open();\n+        } catch (NuvoException e) {\n+            logger.debug(\"openConnection() failed: {}\", e.getMessage());\n+        }\n+        logger.debug(\"openConnection(): {}\", connector.isConnected() ? \"connected\" : \"disconnected\");\n+        return connector.isConnected();\n+    }\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    private synchronized void closeConnection() {\n+        if (connector.isConnected()) {\n+            connector.close();\n+            connector.removeEventListener(this);\n+            logger.debug(\"closeConnection(): disconnected\");\n+        }\n+    }\n+\n+    /**\n+     * Handle an event received from the Nuvo device\n+     *\n+     * @param event the event to process\n+     */\n+    @Override\n+    public void onNewMessageEvent(NuvoMessageEvent evt) {\n+        logger.debug(\"onNewMessageEvent: key {} = {}\", evt.getKey(), evt.getValue());\n+        lastEventReceived = System.currentTimeMillis();\n+\n+        String type = evt.getType();\n+        String key = evt.getKey();\n+        String updateData = evt.getValue().trim();\n+        if (this.getThing().getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, this.versionString);\n+        }\n+\n+        switch (type) {\n+            case TYPE_VERSION:\n+                this.versionString = updateData;\n+                // Determine if we are a Grand Concerto or not\n+                if (this.versionString.contains(GC_STR)) {\n+                    this.isGConcerto = true;\n+                    connector.setEssentia(false);\n+                }\n+                break;\n+            case TYPE_ALLOFF:\n+                activeZones.forEach(zoneNum -> {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum.toString()), CHANNEL_TYPE_POWER, OFF);\n+                });\n+                break;\n+            case TYPE_ALLMUTE:\n+                updateChannelState(NuvoEnum.SYSTEM, CHANNEL_TYPE_ALLMUTE, ONE.equals(updateData) ? ON : OFF);\n+                activeZones.forEach(zoneNum -> {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum.toString()), CHANNEL_TYPE_MUTE,\n+                            ONE.equals(updateData) ? ON : OFF);\n+                });\n+                break;\n+            case TYPE_PAGE:\n+                updateChannelState(NuvoEnum.SYSTEM, CHANNEL_TYPE_PAGE, ONE.equals(updateData) ? ON : OFF);\n+                break;\n+            case TYPE_SOURCE_UPDATE:\n+                logger.debug(\"Source update: Source: {} - Value: {}\", key, updateData);\n+                NuvoEnum targetSource = NuvoEnum.valueOf(SOURCE + key);\n+\n+                if (updateData.contains(DISPLINE)) {\n+                    // example: DISPLINE2,\"Play My Song (Featuring Dee Ajayi)\"\n+                    Matcher matcher = DISP_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetSource, CHANNEL_DISPLAY_LINE + matcher.group(1), matcher.group(2));\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                } else if (updateData.contains(DISPINFO)) {\n+                    // example: DISPINFO,DUR0,POS70,STATUS2 (DUR and POS are expressed in tenths of a second)\n+                    // 6 places(tenths of a second)-> max 999,999 /10/60/60/24 = 1.15 days\n+                    Matcher matcher = DISP_INFO_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetSource, CHANNEL_TRACK_LENGTH, matcher.group(1));\n+                        updateChannelState(targetSource, CHANNEL_TRACK_POSITION, matcher.group(2));\n+                        updateChannelState(targetSource, CHANNEL_PLAY_MODE, matcher.group(3));\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                } else if (updateData.contains(NAME_QUOTE) && sourceLabels.size() <= MAX_SRC) {\n+                    // example: NAME\"Ipod\"\n+                    String name = updateData.split(\"\\\"\")[1];\n+                    sourceLabels.add(new StateOption(key, name));\n+                }\n+                break;\n+            case TYPE_ZONE_UPDATE:\n+                logger.debug(\"Zone update: Zone: {} - Value: {}\", key, updateData);\n+                // example : OFF\n+                // or: ON,SRC3,VOL63,DND0,LOCK0\n+                // or: ON,SRC3,MUTE,DND0,LOCK0\n+\n+                NuvoEnum targetZone = NuvoEnum.valueOf(ZONE + key);\n+\n+                if (OFF.equals(updateData)) {\n+                    updateChannelState(targetZone, CHANNEL_TYPE_POWER, OFF);\n+                    updateChannelState(targetZone, CHANNEL_TYPE_SOURCE, UNDEF);\n+                } else {\n+                    Matcher matcher = ZONE_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetZone, CHANNEL_TYPE_POWER, ON);\n+                        updateChannelState(targetZone, CHANNEL_TYPE_SOURCE, matcher.group(1));\n+\n+                        if (MUTE.equals(matcher.group(2))) {\n+                            updateChannelState(targetZone, CHANNEL_TYPE_MUTE, ON);\n+                        } else {\n+                            updateChannelState(targetZone, CHANNEL_TYPE_MUTE, NuvoCommand.OFF.getValue());\n+                            updateChannelState(targetZone, CHANNEL_TYPE_VOLUME, matcher.group(2).replace(VOL, BLANK));\n+                        }\n+\n+                        updateChannelState(targetZone, CHANNEL_TYPE_DND, ONE.equals(matcher.group(3)) ? ON : OFF);\n+                        updateChannelState(targetZone, CHANNEL_TYPE_LOCK, ONE.equals(matcher.group(4)) ? ON : OFF);\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                }\n+                break;\n+            case TYPE_ZONE_BUTTON:\n+                logger.debug(\"Zone Button pressed: Source: {} - Button: {}\", key, updateData);\n+                updateChannelState(NuvoEnum.valueOf(SOURCE + key), CHANNEL_BUTTON_PRESS, updateData);\n+                break;\n+            case TYPE_ZONE_CONFIG:\n+                logger.debug(\"Zone Configuration: Zone: {} - Value: {}\", key, updateData);\n+                // example: BASS1,TREB-2,BALR2,LOUDCMP1\n+                Matcher matcher = ZONE_CFG_PATTERN.matcher(updateData);\n+                if (matcher.find()) {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_BASS, matcher.group(1));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_TREBLE, matcher.group(2));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_BALANCE,\n+                            NuvoStatusCodes.getBalanceFromStr(matcher.group(3)));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_LOUDNESS,\n+                            ONE.equals(matcher.group(4)) ? ON : OFF);\n+                } else {\n+                    logger.debug(\"no match on message: {}\", updateData);\n+                }\n+                break;\n+            default:\n+                logger.debug(\"onNewMessageEvent: unhandled key {}\", key);\n+                break;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the reconnection job\n+     */\n+    private void scheduleReconnectJob() {\n+        logger.debug(\"Schedule reconnect job\");\n+        cancelReconnectJob();\n+        reconnectJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (!connector.isConnected()) {\n+                logger.debug(\"Trying to reconnect...\");\n+                closeConnection();\n+                String error = null;\n+                if (openConnection()) {\n+                    synchronized (sequenceLock) {\n+                        try {\n+                            long prevUpdateTime = lastEventReceived;\n+\n+                            connector.sendCommand(NuvoCommand.GET_CONTROLLER_VERSION);\n+\n+                            NuvoEnum.VALID_SOURCES.forEach(source -> {\n+                                try {\n+                                    connector.sendQuery(NuvoEnum.valueOf(NuvoEnum.class, source), NuvoCommand.NAME);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                    connector.sendQuery(NuvoEnum.valueOf(NuvoEnum.class, source), NuvoCommand.DISPINFO);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                    connector.sendQuery(NuvoEnum.valueOf(NuvoEnum.class, source), NuvoCommand.DISPLINE);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                } catch (NuvoException | InterruptedException e) {\n+                                    logger.debug(\"Error Querying Source data: {}\", e.getMessage());\n+                                }\n+                            });\n+\n+                            // Query all active zones to get their current status and eq configuration\n+                            activeZones.forEach(zoneNum -> {\n+                                try {\n+                                    connector.sendQuery(NuvoEnum.valueOf(ZONE + zoneNum), NuvoCommand.STATUS);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                    connector.sendCfgCommand(NuvoEnum.valueOf(ZONE + zoneNum), NuvoCommand.EQ_QUERY,\n+                                            BLANK);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                } catch (NuvoException | InterruptedException e) {\n+                                    logger.debug(\"Error Querying Zone data: {}\", e.getMessage());\n+                                }\n+                            });\n+\n+                            // prevUpdateTime should have changed if a zone update was received\n+                            if (prevUpdateTime == lastEventReceived) {\n+                                error = \"Controller not responding to status requests\";\n+                            } else {\n+                                // Put the source labels on all active zones\n+                                activeZones.forEach(zoneNum -> {\n+                                    stateDescriptionProvider.setStateOptions(\n+                                            new ChannelUID(getThing().getUID(), ZONE.toLowerCase() + zoneNum.toString()\n+                                                    + CHANNEL_DELIMIT + CHANNEL_TYPE_SOURCE),\n+                                            sourceLabels);\n+                                });\n+                            }\n+                        } catch (NuvoException e) {\n+                            error = \"First command after connection failed\";\n+                            logger.debug(\"{}: {}\", error, e.getMessage());\n+                        }\n+                    }\n+                } else {\n+                    error = \"Reconnection failed\";\n+                }\n+                if (error != null) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, error);\n+                    closeConnection();\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, this.versionString);\n+                }\n+            }\n+        }, 1, RECON_POLLING_INTERVAL, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the reconnection job\n+     */\n+    private void cancelReconnectJob() {\n+        ScheduledFuture<?> reconnectJob = this.reconnectJob;\n+        if (reconnectJob != null) {\n+            reconnectJob.cancel(true);\n+            this.reconnectJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the polling job\n+     */\n+    private void schedulePollingJob() {\n+        logger.debug(\"Schedule polling job\");\n+        cancelPollingJob();\n+\n+        // when the Nuvo amp is off, this will keep the connection (esp Serial over IP) alive and detect if the\n+        // connection goes down\n+        pollingJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (connector.isConnected()) {\n+                logger.debug(\"Polling the component for updated status...\");\n+\n+                synchronized (sequenceLock) {\n+                    try {\n+                        connector.sendCommand(NuvoCommand.GET_CONTROLLER_VERSION);\n+                    } catch (NuvoException e) {\n+                        logger.debug(\"Polling error: {}\", e.getMessage());\n+                    }\n+\n+                    // if the last event received was more than 1.25 intervals ago,\n+                    // the component is not responding even though the connection is still good\n+                    if ((System.currentTimeMillis() - lastEventReceived) > (POLLING_INTERVAL * 1.25 * 1000)) {\n+                        logger.debug(\"Component not responding to status requests\");\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Component not responding to status requests\");\n+                        closeConnection();\n+                        scheduleReconnectJob();\n+                    }\n+                }\n+            }\n+        }, INITIAL_POLLING_DELAY, POLLING_INTERVAL, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the polling job\n+     */\n+    private void cancelPollingJob() {\n+        ScheduledFuture<?> pollingJob = this.pollingJob;\n+        if (pollingJob != null) {\n+            pollingJob.cancel(true);\n+            this.pollingJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the clock sync job\n+     */\n+    private void scheduleClockSyncJob() {\n+        logger.debug(\"Schedule clock sync job\");\n+        cancelClockSyncJob();\n+        clockSyncJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (this.isGConcerto) {\n+                try {\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy,MM,dd,HH,mm\");\n+                    connector.sendCommand(NuvoCommand.CFGTIME.getValue() + simpleDateFormat.format(new Date()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 670}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkwNDY1MA==", "bodyText": "I did not. It was just intended to use whatever the system time is regardless of time zone. I think this will be fine since most users set the host system to their local time.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451904650", "createdAt": "2020-07-09T00:58:56Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,776 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL = 60;\n+    private static final long POLLING_INTERVAL = 30;\n+    private static final long CLOCK_SYNC_INTERVAL = 3600;\n+    private static final long INITIAL_POLLING_DELAY = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<Integer>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((config.serialPort == null || config.serialPort.isEmpty())\n+                && (config.host == null || config.host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (config.host == null || config.host.isEmpty()) {\n+            if (config.serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (config.port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (config.port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (config.serialPort != null) {\n+            String serialPort = config.serialPort;\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else {\n+            connector = new NuvoIpConnector(config.host, config.port);\n+        }\n+\n+        numZones = config.numZones;\n+        activeZones = IntStream.range((1), (numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone.toString())));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        try {\n+            connector.sendCommand(command.toString());\n+        } catch (NuvoException e) {\n+            logger.warn(\"Nuvo Command: {} failed\", command);\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.warn(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got treble command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.TREBLE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BASS:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got bass command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BASS, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BALANCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ && value % 2 == 0) {\n+                                logger.debug(\"Got balance command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BALANCE,\n+                                        NuvoStatusCodes.getBalanceFromInt(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_LOUDNESS:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCfgCommand(target, NuvoCommand.LOUDNESS,\n+                                    command == OnOffType.ON ? ONE : ZERO);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_CONTROL:\n+                        handleControlCommand(target, command);\n+                        break;\n+                    case CHANNEL_TYPE_DND:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.DND_ON : NuvoCommand.DND_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PARTY:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PARTY_ON : NuvoCommand.PARTY_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE1:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE1, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE2:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE2, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE3:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE3, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE4:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE4, \"\\\"\" + command.toString() + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_ALLOFF:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(NuvoCommand.ALLOFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_ALLMUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.ALLMUTE_ON : NuvoCommand.ALLMUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PAGE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PAGE_ON : NuvoCommand.PAGE_OFF);\n+                        }\n+                        break;\n+                }\n+            } catch (NuvoException e) {\n+                logger.warn(\"Command {} from channel {} failed: {}\", command, channel, e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Sending command failed\");\n+                closeConnection();\n+                scheduleReconnectJob();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @return true if the connection is opened successfully or false if not\n+     */\n+    private synchronized boolean openConnection() {\n+        connector.addEventListener(this);\n+        try {\n+            connector.open();\n+        } catch (NuvoException e) {\n+            logger.debug(\"openConnection() failed: {}\", e.getMessage());\n+        }\n+        logger.debug(\"openConnection(): {}\", connector.isConnected() ? \"connected\" : \"disconnected\");\n+        return connector.isConnected();\n+    }\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    private synchronized void closeConnection() {\n+        if (connector.isConnected()) {\n+            connector.close();\n+            connector.removeEventListener(this);\n+            logger.debug(\"closeConnection(): disconnected\");\n+        }\n+    }\n+\n+    /**\n+     * Handle an event received from the Nuvo device\n+     *\n+     * @param event the event to process\n+     */\n+    @Override\n+    public void onNewMessageEvent(NuvoMessageEvent evt) {\n+        logger.debug(\"onNewMessageEvent: key {} = {}\", evt.getKey(), evt.getValue());\n+        lastEventReceived = System.currentTimeMillis();\n+\n+        String type = evt.getType();\n+        String key = evt.getKey();\n+        String updateData = evt.getValue().trim();\n+        if (this.getThing().getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, this.versionString);\n+        }\n+\n+        switch (type) {\n+            case TYPE_VERSION:\n+                this.versionString = updateData;\n+                // Determine if we are a Grand Concerto or not\n+                if (this.versionString.contains(GC_STR)) {\n+                    this.isGConcerto = true;\n+                    connector.setEssentia(false);\n+                }\n+                break;\n+            case TYPE_ALLOFF:\n+                activeZones.forEach(zoneNum -> {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum.toString()), CHANNEL_TYPE_POWER, OFF);\n+                });\n+                break;\n+            case TYPE_ALLMUTE:\n+                updateChannelState(NuvoEnum.SYSTEM, CHANNEL_TYPE_ALLMUTE, ONE.equals(updateData) ? ON : OFF);\n+                activeZones.forEach(zoneNum -> {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum.toString()), CHANNEL_TYPE_MUTE,\n+                            ONE.equals(updateData) ? ON : OFF);\n+                });\n+                break;\n+            case TYPE_PAGE:\n+                updateChannelState(NuvoEnum.SYSTEM, CHANNEL_TYPE_PAGE, ONE.equals(updateData) ? ON : OFF);\n+                break;\n+            case TYPE_SOURCE_UPDATE:\n+                logger.debug(\"Source update: Source: {} - Value: {}\", key, updateData);\n+                NuvoEnum targetSource = NuvoEnum.valueOf(SOURCE + key);\n+\n+                if (updateData.contains(DISPLINE)) {\n+                    // example: DISPLINE2,\"Play My Song (Featuring Dee Ajayi)\"\n+                    Matcher matcher = DISP_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetSource, CHANNEL_DISPLAY_LINE + matcher.group(1), matcher.group(2));\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                } else if (updateData.contains(DISPINFO)) {\n+                    // example: DISPINFO,DUR0,POS70,STATUS2 (DUR and POS are expressed in tenths of a second)\n+                    // 6 places(tenths of a second)-> max 999,999 /10/60/60/24 = 1.15 days\n+                    Matcher matcher = DISP_INFO_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetSource, CHANNEL_TRACK_LENGTH, matcher.group(1));\n+                        updateChannelState(targetSource, CHANNEL_TRACK_POSITION, matcher.group(2));\n+                        updateChannelState(targetSource, CHANNEL_PLAY_MODE, matcher.group(3));\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                } else if (updateData.contains(NAME_QUOTE) && sourceLabels.size() <= MAX_SRC) {\n+                    // example: NAME\"Ipod\"\n+                    String name = updateData.split(\"\\\"\")[1];\n+                    sourceLabels.add(new StateOption(key, name));\n+                }\n+                break;\n+            case TYPE_ZONE_UPDATE:\n+                logger.debug(\"Zone update: Zone: {} - Value: {}\", key, updateData);\n+                // example : OFF\n+                // or: ON,SRC3,VOL63,DND0,LOCK0\n+                // or: ON,SRC3,MUTE,DND0,LOCK0\n+\n+                NuvoEnum targetZone = NuvoEnum.valueOf(ZONE + key);\n+\n+                if (OFF.equals(updateData)) {\n+                    updateChannelState(targetZone, CHANNEL_TYPE_POWER, OFF);\n+                    updateChannelState(targetZone, CHANNEL_TYPE_SOURCE, UNDEF);\n+                } else {\n+                    Matcher matcher = ZONE_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetZone, CHANNEL_TYPE_POWER, ON);\n+                        updateChannelState(targetZone, CHANNEL_TYPE_SOURCE, matcher.group(1));\n+\n+                        if (MUTE.equals(matcher.group(2))) {\n+                            updateChannelState(targetZone, CHANNEL_TYPE_MUTE, ON);\n+                        } else {\n+                            updateChannelState(targetZone, CHANNEL_TYPE_MUTE, NuvoCommand.OFF.getValue());\n+                            updateChannelState(targetZone, CHANNEL_TYPE_VOLUME, matcher.group(2).replace(VOL, BLANK));\n+                        }\n+\n+                        updateChannelState(targetZone, CHANNEL_TYPE_DND, ONE.equals(matcher.group(3)) ? ON : OFF);\n+                        updateChannelState(targetZone, CHANNEL_TYPE_LOCK, ONE.equals(matcher.group(4)) ? ON : OFF);\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                }\n+                break;\n+            case TYPE_ZONE_BUTTON:\n+                logger.debug(\"Zone Button pressed: Source: {} - Button: {}\", key, updateData);\n+                updateChannelState(NuvoEnum.valueOf(SOURCE + key), CHANNEL_BUTTON_PRESS, updateData);\n+                break;\n+            case TYPE_ZONE_CONFIG:\n+                logger.debug(\"Zone Configuration: Zone: {} - Value: {}\", key, updateData);\n+                // example: BASS1,TREB-2,BALR2,LOUDCMP1\n+                Matcher matcher = ZONE_CFG_PATTERN.matcher(updateData);\n+                if (matcher.find()) {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_BASS, matcher.group(1));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_TREBLE, matcher.group(2));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_BALANCE,\n+                            NuvoStatusCodes.getBalanceFromStr(matcher.group(3)));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_LOUDNESS,\n+                            ONE.equals(matcher.group(4)) ? ON : OFF);\n+                } else {\n+                    logger.debug(\"no match on message: {}\", updateData);\n+                }\n+                break;\n+            default:\n+                logger.debug(\"onNewMessageEvent: unhandled key {}\", key);\n+                break;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the reconnection job\n+     */\n+    private void scheduleReconnectJob() {\n+        logger.debug(\"Schedule reconnect job\");\n+        cancelReconnectJob();\n+        reconnectJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (!connector.isConnected()) {\n+                logger.debug(\"Trying to reconnect...\");\n+                closeConnection();\n+                String error = null;\n+                if (openConnection()) {\n+                    synchronized (sequenceLock) {\n+                        try {\n+                            long prevUpdateTime = lastEventReceived;\n+\n+                            connector.sendCommand(NuvoCommand.GET_CONTROLLER_VERSION);\n+\n+                            NuvoEnum.VALID_SOURCES.forEach(source -> {\n+                                try {\n+                                    connector.sendQuery(NuvoEnum.valueOf(NuvoEnum.class, source), NuvoCommand.NAME);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                    connector.sendQuery(NuvoEnum.valueOf(NuvoEnum.class, source), NuvoCommand.DISPINFO);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                    connector.sendQuery(NuvoEnum.valueOf(NuvoEnum.class, source), NuvoCommand.DISPLINE);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                } catch (NuvoException | InterruptedException e) {\n+                                    logger.debug(\"Error Querying Source data: {}\", e.getMessage());\n+                                }\n+                            });\n+\n+                            // Query all active zones to get their current status and eq configuration\n+                            activeZones.forEach(zoneNum -> {\n+                                try {\n+                                    connector.sendQuery(NuvoEnum.valueOf(ZONE + zoneNum), NuvoCommand.STATUS);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                    connector.sendCfgCommand(NuvoEnum.valueOf(ZONE + zoneNum), NuvoCommand.EQ_QUERY,\n+                                            BLANK);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD);\n+                                } catch (NuvoException | InterruptedException e) {\n+                                    logger.debug(\"Error Querying Zone data: {}\", e.getMessage());\n+                                }\n+                            });\n+\n+                            // prevUpdateTime should have changed if a zone update was received\n+                            if (prevUpdateTime == lastEventReceived) {\n+                                error = \"Controller not responding to status requests\";\n+                            } else {\n+                                // Put the source labels on all active zones\n+                                activeZones.forEach(zoneNum -> {\n+                                    stateDescriptionProvider.setStateOptions(\n+                                            new ChannelUID(getThing().getUID(), ZONE.toLowerCase() + zoneNum.toString()\n+                                                    + CHANNEL_DELIMIT + CHANNEL_TYPE_SOURCE),\n+                                            sourceLabels);\n+                                });\n+                            }\n+                        } catch (NuvoException e) {\n+                            error = \"First command after connection failed\";\n+                            logger.debug(\"{}: {}\", error, e.getMessage());\n+                        }\n+                    }\n+                } else {\n+                    error = \"Reconnection failed\";\n+                }\n+                if (error != null) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, error);\n+                    closeConnection();\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, this.versionString);\n+                }\n+            }\n+        }, 1, RECON_POLLING_INTERVAL, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the reconnection job\n+     */\n+    private void cancelReconnectJob() {\n+        ScheduledFuture<?> reconnectJob = this.reconnectJob;\n+        if (reconnectJob != null) {\n+            reconnectJob.cancel(true);\n+            this.reconnectJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the polling job\n+     */\n+    private void schedulePollingJob() {\n+        logger.debug(\"Schedule polling job\");\n+        cancelPollingJob();\n+\n+        // when the Nuvo amp is off, this will keep the connection (esp Serial over IP) alive and detect if the\n+        // connection goes down\n+        pollingJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (connector.isConnected()) {\n+                logger.debug(\"Polling the component for updated status...\");\n+\n+                synchronized (sequenceLock) {\n+                    try {\n+                        connector.sendCommand(NuvoCommand.GET_CONTROLLER_VERSION);\n+                    } catch (NuvoException e) {\n+                        logger.debug(\"Polling error: {}\", e.getMessage());\n+                    }\n+\n+                    // if the last event received was more than 1.25 intervals ago,\n+                    // the component is not responding even though the connection is still good\n+                    if ((System.currentTimeMillis() - lastEventReceived) > (POLLING_INTERVAL * 1.25 * 1000)) {\n+                        logger.debug(\"Component not responding to status requests\");\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Component not responding to status requests\");\n+                        closeConnection();\n+                        scheduleReconnectJob();\n+                    }\n+                }\n+            }\n+        }, INITIAL_POLLING_DELAY, POLLING_INTERVAL, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the polling job\n+     */\n+    private void cancelPollingJob() {\n+        ScheduledFuture<?> pollingJob = this.pollingJob;\n+        if (pollingJob != null) {\n+            pollingJob.cancel(true);\n+            this.pollingJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the clock sync job\n+     */\n+    private void scheduleClockSyncJob() {\n+        logger.debug(\"Schedule clock sync job\");\n+        cancelClockSyncJob();\n+        clockSyncJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (this.isGConcerto) {\n+                try {\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy,MM,dd,HH,mm\");\n+                    connector.sendCommand(NuvoCommand.CFGTIME.getValue() + simpleDateFormat.format(new Date()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MDY1OA=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 670}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzIyMDQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMjowODowNlrOGu63zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwOTozMzoyN1rOGwLumw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjIzNg==", "bodyText": "This formatting is a bit strange.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451852236", "createdAt": "2020-07-08T22:08:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">\n+\t\t\t\t<label>Zone 1</label>\n+\t\t\t\t<description>The Controls for Zone 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone2\" typeId=\"zone2\">\n+\t\t\t\t<label>Zone 2</label>\n+\t\t\t\t<description>The Controls for Zone 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone3\" typeId=\"zone3\">\n+\t\t\t\t<label>Zone 3</label>\n+\t\t\t\t<description>The Controls for Zone 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone4\" typeId=\"zone4\">\n+\t\t\t\t<label>Zone 4</label>\n+\t\t\t\t<description>The Controls for Zone 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone5\" typeId=\"zone5\">\n+\t\t\t\t<label>Zone 5</label>\n+\t\t\t\t<description>The Controls for Zone 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone6\" typeId=\"zone6\">\n+\t\t\t\t<label>Zone 6</label>\n+\t\t\t\t<description>The Controls for Zone 6</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone7\" typeId=\"zone7\">\n+\t\t\t\t<label>Zone 7</label>\n+\t\t\t\t<description>The Controls for Zone 7</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone8\" typeId=\"zone8\">\n+\t\t\t\t<label>Zone 8</label>\n+\t\t\t\t<description>The Controls for Zone 8</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone9\" typeId=\"zone9\">\n+\t\t\t\t<label>Zone 9</label>\n+\t\t\t\t<description>The Controls for Zone 9</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone10\" typeId=\"zone10\">\n+\t\t\t\t<label>Zone 10</label>\n+\t\t\t\t<description>The Controls for Zone 10</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone11\" typeId=\"zone11\">\n+\t\t\t\t<label>Zone 11</label>\n+\t\t\t\t<description>The Controls for Zone 11</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone12\" typeId=\"zone12\">\n+\t\t\t\t<label>Zone 12</label>\n+\t\t\t\t<description>The Controls for Zone 12</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone13\" typeId=\"zone13\">\n+\t\t\t\t<label>Zone 13</label>\n+\t\t\t\t<description>The Controls for Zone 13</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone14\" typeId=\"zone14\">\n+\t\t\t\t<label>Zone 14</label>\n+\t\t\t\t<description>The Controls for Zone 14</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone15\" typeId=\"zone15\">\n+\t\t\t\t<label>Zone 15</label>\n+\t\t\t\t<description>The Controls for Zone 15</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone16\" typeId=\"zone16\">\n+\t\t\t\t<label>Zone 16</label>\n+\t\t\t\t<description>The Controls for Zone 16</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone17\" typeId=\"zone17\">\n+\t\t\t\t<label>Zone 17</label>\n+\t\t\t\t<description>The Controls for Zone 17</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone18\" typeId=\"zone18\">\n+\t\t\t\t<label>Zone 18</label>\n+\t\t\t\t<description>The Controls for Zone 18</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source1\" typeId=\"source1\">\n+\t\t\t\t<label>Source 1</label>\n+\t\t\t\t<description>The Display Information for Source 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source2\" typeId=\"source2\">\n+\t\t\t\t<label>Source 2</label>\n+\t\t\t\t<description>The Display Information for Source 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source3\" typeId=\"source3\">\n+\t\t\t\t<label>Source 3</label>\n+\t\t\t\t<description>The Display Information for Source 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source4\" typeId=\"source4\">\n+\t\t\t\t<label>Source 4</label>\n+\t\t\t\t<description>The Display Information for Source 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source5\" typeId=\"source5\">\n+\t\t\t\t<label>Source 5</label>\n+\t\t\t\t<description>The Display Information for Source 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source6\" typeId=\"source6\">\n+\t\t\t\t<label>Source 6</label>\n+\t\t\t\t<description>The Display Information for Source 6</description>\n+\t\t\t</channel-group>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the Nuvo Amplifier</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Host Name or IP Address of the Machine Connected to the Nuvo Amplifier (Serial over IP)</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Communication Port (serial over IP). For IP Connection to the Nuvo Amplifier</description>\n+\t\t\t\t<default>4444</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"numZones\" type=\"integer\" min=\"1\" max=\"20\" required=\"true\">\n+\t\t\t\t<label>Number of Zones</label>\n+\t\t\t\t<description>Number of Zones On the Amplifier to Utilize in the Binding (Up to 20 Zones When Using Expansion Module)</description>\n+\t\t\t\t<default>6</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"clockSync\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Sync Clock On GConcerto</label>\n+\t\t\t\t<description>If Set to true, the Binding Will Sync the Internal Clock On the Grand Concerto to Match the openHAB\n+\t\t\t\t\tHost's\n+\t\t\t\t\tSystem Clock. The Sync Job Runs at Binding Startup and Once an Hour Thereafter. The Essentia G Has No RTC, So\n+\t\t\t\t\tThis\n+\t\t\t\t\tSetting Has No Effect On That Component.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg4MjU4NQ==", "bodyText": "Spotless did that :(", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r451882585", "createdAt": "2020-07-08T23:37:34Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">\n+\t\t\t\t<label>Zone 1</label>\n+\t\t\t\t<description>The Controls for Zone 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone2\" typeId=\"zone2\">\n+\t\t\t\t<label>Zone 2</label>\n+\t\t\t\t<description>The Controls for Zone 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone3\" typeId=\"zone3\">\n+\t\t\t\t<label>Zone 3</label>\n+\t\t\t\t<description>The Controls for Zone 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone4\" typeId=\"zone4\">\n+\t\t\t\t<label>Zone 4</label>\n+\t\t\t\t<description>The Controls for Zone 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone5\" typeId=\"zone5\">\n+\t\t\t\t<label>Zone 5</label>\n+\t\t\t\t<description>The Controls for Zone 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone6\" typeId=\"zone6\">\n+\t\t\t\t<label>Zone 6</label>\n+\t\t\t\t<description>The Controls for Zone 6</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone7\" typeId=\"zone7\">\n+\t\t\t\t<label>Zone 7</label>\n+\t\t\t\t<description>The Controls for Zone 7</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone8\" typeId=\"zone8\">\n+\t\t\t\t<label>Zone 8</label>\n+\t\t\t\t<description>The Controls for Zone 8</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone9\" typeId=\"zone9\">\n+\t\t\t\t<label>Zone 9</label>\n+\t\t\t\t<description>The Controls for Zone 9</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone10\" typeId=\"zone10\">\n+\t\t\t\t<label>Zone 10</label>\n+\t\t\t\t<description>The Controls for Zone 10</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone11\" typeId=\"zone11\">\n+\t\t\t\t<label>Zone 11</label>\n+\t\t\t\t<description>The Controls for Zone 11</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone12\" typeId=\"zone12\">\n+\t\t\t\t<label>Zone 12</label>\n+\t\t\t\t<description>The Controls for Zone 12</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone13\" typeId=\"zone13\">\n+\t\t\t\t<label>Zone 13</label>\n+\t\t\t\t<description>The Controls for Zone 13</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone14\" typeId=\"zone14\">\n+\t\t\t\t<label>Zone 14</label>\n+\t\t\t\t<description>The Controls for Zone 14</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone15\" typeId=\"zone15\">\n+\t\t\t\t<label>Zone 15</label>\n+\t\t\t\t<description>The Controls for Zone 15</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone16\" typeId=\"zone16\">\n+\t\t\t\t<label>Zone 16</label>\n+\t\t\t\t<description>The Controls for Zone 16</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone17\" typeId=\"zone17\">\n+\t\t\t\t<label>Zone 17</label>\n+\t\t\t\t<description>The Controls for Zone 17</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone18\" typeId=\"zone18\">\n+\t\t\t\t<label>Zone 18</label>\n+\t\t\t\t<description>The Controls for Zone 18</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source1\" typeId=\"source1\">\n+\t\t\t\t<label>Source 1</label>\n+\t\t\t\t<description>The Display Information for Source 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source2\" typeId=\"source2\">\n+\t\t\t\t<label>Source 2</label>\n+\t\t\t\t<description>The Display Information for Source 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source3\" typeId=\"source3\">\n+\t\t\t\t<label>Source 3</label>\n+\t\t\t\t<description>The Display Information for Source 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source4\" typeId=\"source4\">\n+\t\t\t\t<label>Source 4</label>\n+\t\t\t\t<description>The Display Information for Source 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source5\" typeId=\"source5\">\n+\t\t\t\t<label>Source 5</label>\n+\t\t\t\t<description>The Display Information for Source 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source6\" typeId=\"source6\">\n+\t\t\t\t<label>Source 6</label>\n+\t\t\t\t<description>The Display Information for Source 6</description>\n+\t\t\t</channel-group>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the Nuvo Amplifier</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Host Name or IP Address of the Machine Connected to the Nuvo Amplifier (Serial over IP)</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Communication Port (serial over IP). For IP Connection to the Nuvo Amplifier</description>\n+\t\t\t\t<default>4444</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"numZones\" type=\"integer\" min=\"1\" max=\"20\" required=\"true\">\n+\t\t\t\t<label>Number of Zones</label>\n+\t\t\t\t<description>Number of Zones On the Amplifier to Utilize in the Binding (Up to 20 Zones When Using Expansion Module)</description>\n+\t\t\t\t<default>6</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"clockSync\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Sync Clock On GConcerto</label>\n+\t\t\t\t<description>If Set to true, the Binding Will Sync the Internal Clock On the Grand Concerto to Match the openHAB\n+\t\t\t\t\tHost's\n+\t\t\t\t\tSystem Clock. The Sync Job Runs at Binding Startup and Once an Hour Thereafter. The Essentia G Has No RTC, So\n+\t\t\t\t\tThis\n+\t\t\t\t\tSetting Has No Effect On That Component.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjIzNg=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4Mjc2Mg==", "bodyText": "I tried to improve it and committed the change but spotless is still not happy about it.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452582762", "createdAt": "2020-07-10T02:01:57Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">\n+\t\t\t\t<label>Zone 1</label>\n+\t\t\t\t<description>The Controls for Zone 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone2\" typeId=\"zone2\">\n+\t\t\t\t<label>Zone 2</label>\n+\t\t\t\t<description>The Controls for Zone 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone3\" typeId=\"zone3\">\n+\t\t\t\t<label>Zone 3</label>\n+\t\t\t\t<description>The Controls for Zone 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone4\" typeId=\"zone4\">\n+\t\t\t\t<label>Zone 4</label>\n+\t\t\t\t<description>The Controls for Zone 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone5\" typeId=\"zone5\">\n+\t\t\t\t<label>Zone 5</label>\n+\t\t\t\t<description>The Controls for Zone 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone6\" typeId=\"zone6\">\n+\t\t\t\t<label>Zone 6</label>\n+\t\t\t\t<description>The Controls for Zone 6</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone7\" typeId=\"zone7\">\n+\t\t\t\t<label>Zone 7</label>\n+\t\t\t\t<description>The Controls for Zone 7</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone8\" typeId=\"zone8\">\n+\t\t\t\t<label>Zone 8</label>\n+\t\t\t\t<description>The Controls for Zone 8</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone9\" typeId=\"zone9\">\n+\t\t\t\t<label>Zone 9</label>\n+\t\t\t\t<description>The Controls for Zone 9</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone10\" typeId=\"zone10\">\n+\t\t\t\t<label>Zone 10</label>\n+\t\t\t\t<description>The Controls for Zone 10</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone11\" typeId=\"zone11\">\n+\t\t\t\t<label>Zone 11</label>\n+\t\t\t\t<description>The Controls for Zone 11</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone12\" typeId=\"zone12\">\n+\t\t\t\t<label>Zone 12</label>\n+\t\t\t\t<description>The Controls for Zone 12</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone13\" typeId=\"zone13\">\n+\t\t\t\t<label>Zone 13</label>\n+\t\t\t\t<description>The Controls for Zone 13</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone14\" typeId=\"zone14\">\n+\t\t\t\t<label>Zone 14</label>\n+\t\t\t\t<description>The Controls for Zone 14</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone15\" typeId=\"zone15\">\n+\t\t\t\t<label>Zone 15</label>\n+\t\t\t\t<description>The Controls for Zone 15</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone16\" typeId=\"zone16\">\n+\t\t\t\t<label>Zone 16</label>\n+\t\t\t\t<description>The Controls for Zone 16</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone17\" typeId=\"zone17\">\n+\t\t\t\t<label>Zone 17</label>\n+\t\t\t\t<description>The Controls for Zone 17</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone18\" typeId=\"zone18\">\n+\t\t\t\t<label>Zone 18</label>\n+\t\t\t\t<description>The Controls for Zone 18</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source1\" typeId=\"source1\">\n+\t\t\t\t<label>Source 1</label>\n+\t\t\t\t<description>The Display Information for Source 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source2\" typeId=\"source2\">\n+\t\t\t\t<label>Source 2</label>\n+\t\t\t\t<description>The Display Information for Source 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source3\" typeId=\"source3\">\n+\t\t\t\t<label>Source 3</label>\n+\t\t\t\t<description>The Display Information for Source 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source4\" typeId=\"source4\">\n+\t\t\t\t<label>Source 4</label>\n+\t\t\t\t<description>The Display Information for Source 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source5\" typeId=\"source5\">\n+\t\t\t\t<label>Source 5</label>\n+\t\t\t\t<description>The Display Information for Source 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source6\" typeId=\"source6\">\n+\t\t\t\t<label>Source 6</label>\n+\t\t\t\t<description>The Display Information for Source 6</description>\n+\t\t\t</channel-group>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the Nuvo Amplifier</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Host Name or IP Address of the Machine Connected to the Nuvo Amplifier (Serial over IP)</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Communication Port (serial over IP). For IP Connection to the Nuvo Amplifier</description>\n+\t\t\t\t<default>4444</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"numZones\" type=\"integer\" min=\"1\" max=\"20\" required=\"true\">\n+\t\t\t\t<label>Number of Zones</label>\n+\t\t\t\t<description>Number of Zones On the Amplifier to Utilize in the Binding (Up to 20 Zones When Using Expansion Module)</description>\n+\t\t\t\t<default>6</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"clockSync\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Sync Clock On GConcerto</label>\n+\t\t\t\t<description>If Set to true, the Binding Will Sync the Internal Clock On the Grand Concerto to Match the openHAB\n+\t\t\t\t\tHost's\n+\t\t\t\t\tSystem Clock. The Sync Job Runs at Binding Startup and Once an Hour Thereafter. The Essentia G Has No RTC, So\n+\t\t\t\t\tThis\n+\t\t\t\t\tSetting Has No Effect On That Component.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjIzNg=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0ODYyMw==", "bodyText": "Did you try removing all line breaks in the description tag and then apply spotless?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452748623", "createdAt": "2020-07-10T10:01:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">\n+\t\t\t\t<label>Zone 1</label>\n+\t\t\t\t<description>The Controls for Zone 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone2\" typeId=\"zone2\">\n+\t\t\t\t<label>Zone 2</label>\n+\t\t\t\t<description>The Controls for Zone 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone3\" typeId=\"zone3\">\n+\t\t\t\t<label>Zone 3</label>\n+\t\t\t\t<description>The Controls for Zone 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone4\" typeId=\"zone4\">\n+\t\t\t\t<label>Zone 4</label>\n+\t\t\t\t<description>The Controls for Zone 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone5\" typeId=\"zone5\">\n+\t\t\t\t<label>Zone 5</label>\n+\t\t\t\t<description>The Controls for Zone 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone6\" typeId=\"zone6\">\n+\t\t\t\t<label>Zone 6</label>\n+\t\t\t\t<description>The Controls for Zone 6</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone7\" typeId=\"zone7\">\n+\t\t\t\t<label>Zone 7</label>\n+\t\t\t\t<description>The Controls for Zone 7</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone8\" typeId=\"zone8\">\n+\t\t\t\t<label>Zone 8</label>\n+\t\t\t\t<description>The Controls for Zone 8</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone9\" typeId=\"zone9\">\n+\t\t\t\t<label>Zone 9</label>\n+\t\t\t\t<description>The Controls for Zone 9</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone10\" typeId=\"zone10\">\n+\t\t\t\t<label>Zone 10</label>\n+\t\t\t\t<description>The Controls for Zone 10</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone11\" typeId=\"zone11\">\n+\t\t\t\t<label>Zone 11</label>\n+\t\t\t\t<description>The Controls for Zone 11</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone12\" typeId=\"zone12\">\n+\t\t\t\t<label>Zone 12</label>\n+\t\t\t\t<description>The Controls for Zone 12</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone13\" typeId=\"zone13\">\n+\t\t\t\t<label>Zone 13</label>\n+\t\t\t\t<description>The Controls for Zone 13</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone14\" typeId=\"zone14\">\n+\t\t\t\t<label>Zone 14</label>\n+\t\t\t\t<description>The Controls for Zone 14</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone15\" typeId=\"zone15\">\n+\t\t\t\t<label>Zone 15</label>\n+\t\t\t\t<description>The Controls for Zone 15</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone16\" typeId=\"zone16\">\n+\t\t\t\t<label>Zone 16</label>\n+\t\t\t\t<description>The Controls for Zone 16</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone17\" typeId=\"zone17\">\n+\t\t\t\t<label>Zone 17</label>\n+\t\t\t\t<description>The Controls for Zone 17</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone18\" typeId=\"zone18\">\n+\t\t\t\t<label>Zone 18</label>\n+\t\t\t\t<description>The Controls for Zone 18</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source1\" typeId=\"source1\">\n+\t\t\t\t<label>Source 1</label>\n+\t\t\t\t<description>The Display Information for Source 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source2\" typeId=\"source2\">\n+\t\t\t\t<label>Source 2</label>\n+\t\t\t\t<description>The Display Information for Source 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source3\" typeId=\"source3\">\n+\t\t\t\t<label>Source 3</label>\n+\t\t\t\t<description>The Display Information for Source 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source4\" typeId=\"source4\">\n+\t\t\t\t<label>Source 4</label>\n+\t\t\t\t<description>The Display Information for Source 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source5\" typeId=\"source5\">\n+\t\t\t\t<label>Source 5</label>\n+\t\t\t\t<description>The Display Information for Source 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source6\" typeId=\"source6\">\n+\t\t\t\t<label>Source 6</label>\n+\t\t\t\t<description>The Display Information for Source 6</description>\n+\t\t\t</channel-group>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the Nuvo Amplifier</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Host Name or IP Address of the Machine Connected to the Nuvo Amplifier (Serial over IP)</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Communication Port (serial over IP). For IP Connection to the Nuvo Amplifier</description>\n+\t\t\t\t<default>4444</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"numZones\" type=\"integer\" min=\"1\" max=\"20\" required=\"true\">\n+\t\t\t\t<label>Number of Zones</label>\n+\t\t\t\t<description>Number of Zones On the Amplifier to Utilize in the Binding (Up to 20 Zones When Using Expansion Module)</description>\n+\t\t\t\t<default>6</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"clockSync\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Sync Clock On GConcerto</label>\n+\t\t\t\t<description>If Set to true, the Binding Will Sync the Internal Clock On the Grand Concerto to Match the openHAB\n+\t\t\t\t\tHost's\n+\t\t\t\t\tSystem Clock. The Sync Job Runs at Binding Startup and Once an Hour Thereafter. The Essentia G Has No RTC, So\n+\t\t\t\t\tThis\n+\t\t\t\t\tSetting Has No Effect On That Component.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjIzNg=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2NTM5Mg==", "bodyText": "It seems to have sorted itself out with the last change. No more spotless errors on this end.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r452865392", "createdAt": "2020-07-10T14:05:54Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">\n+\t\t\t\t<label>Zone 1</label>\n+\t\t\t\t<description>The Controls for Zone 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone2\" typeId=\"zone2\">\n+\t\t\t\t<label>Zone 2</label>\n+\t\t\t\t<description>The Controls for Zone 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone3\" typeId=\"zone3\">\n+\t\t\t\t<label>Zone 3</label>\n+\t\t\t\t<description>The Controls for Zone 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone4\" typeId=\"zone4\">\n+\t\t\t\t<label>Zone 4</label>\n+\t\t\t\t<description>The Controls for Zone 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone5\" typeId=\"zone5\">\n+\t\t\t\t<label>Zone 5</label>\n+\t\t\t\t<description>The Controls for Zone 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone6\" typeId=\"zone6\">\n+\t\t\t\t<label>Zone 6</label>\n+\t\t\t\t<description>The Controls for Zone 6</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone7\" typeId=\"zone7\">\n+\t\t\t\t<label>Zone 7</label>\n+\t\t\t\t<description>The Controls for Zone 7</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone8\" typeId=\"zone8\">\n+\t\t\t\t<label>Zone 8</label>\n+\t\t\t\t<description>The Controls for Zone 8</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone9\" typeId=\"zone9\">\n+\t\t\t\t<label>Zone 9</label>\n+\t\t\t\t<description>The Controls for Zone 9</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone10\" typeId=\"zone10\">\n+\t\t\t\t<label>Zone 10</label>\n+\t\t\t\t<description>The Controls for Zone 10</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone11\" typeId=\"zone11\">\n+\t\t\t\t<label>Zone 11</label>\n+\t\t\t\t<description>The Controls for Zone 11</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone12\" typeId=\"zone12\">\n+\t\t\t\t<label>Zone 12</label>\n+\t\t\t\t<description>The Controls for Zone 12</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone13\" typeId=\"zone13\">\n+\t\t\t\t<label>Zone 13</label>\n+\t\t\t\t<description>The Controls for Zone 13</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone14\" typeId=\"zone14\">\n+\t\t\t\t<label>Zone 14</label>\n+\t\t\t\t<description>The Controls for Zone 14</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone15\" typeId=\"zone15\">\n+\t\t\t\t<label>Zone 15</label>\n+\t\t\t\t<description>The Controls for Zone 15</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone16\" typeId=\"zone16\">\n+\t\t\t\t<label>Zone 16</label>\n+\t\t\t\t<description>The Controls for Zone 16</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone17\" typeId=\"zone17\">\n+\t\t\t\t<label>Zone 17</label>\n+\t\t\t\t<description>The Controls for Zone 17</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone18\" typeId=\"zone18\">\n+\t\t\t\t<label>Zone 18</label>\n+\t\t\t\t<description>The Controls for Zone 18</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source1\" typeId=\"source1\">\n+\t\t\t\t<label>Source 1</label>\n+\t\t\t\t<description>The Display Information for Source 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source2\" typeId=\"source2\">\n+\t\t\t\t<label>Source 2</label>\n+\t\t\t\t<description>The Display Information for Source 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source3\" typeId=\"source3\">\n+\t\t\t\t<label>Source 3</label>\n+\t\t\t\t<description>The Display Information for Source 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source4\" typeId=\"source4\">\n+\t\t\t\t<label>Source 4</label>\n+\t\t\t\t<description>The Display Information for Source 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source5\" typeId=\"source5\">\n+\t\t\t\t<label>Source 5</label>\n+\t\t\t\t<description>The Display Information for Source 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source6\" typeId=\"source6\">\n+\t\t\t\t<label>Source 6</label>\n+\t\t\t\t<description>The Display Information for Source 6</description>\n+\t\t\t</channel-group>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the Nuvo Amplifier</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Host Name or IP Address of the Machine Connected to the Nuvo Amplifier (Serial over IP)</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Communication Port (serial over IP). For IP Connection to the Nuvo Amplifier</description>\n+\t\t\t\t<default>4444</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"numZones\" type=\"integer\" min=\"1\" max=\"20\" required=\"true\">\n+\t\t\t\t<label>Number of Zones</label>\n+\t\t\t\t<description>Number of Zones On the Amplifier to Utilize in the Binding (Up to 20 Zones When Using Expansion Module)</description>\n+\t\t\t\t<default>6</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"clockSync\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Sync Clock On GConcerto</label>\n+\t\t\t\t<description>If Set to true, the Binding Will Sync the Internal Clock On the Grand Concerto to Match the openHAB\n+\t\t\t\t\tHost's\n+\t\t\t\t\tSystem Clock. The Sync Job Runs at Binding Startup and Once an Hour Thereafter. The Essentia G Has No RTC, So\n+\t\t\t\t\tThis\n+\t\t\t\t\tSetting Has No Effect On That Component.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjIzNg=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5MjA3Ng==", "bodyText": "Spotless is quiet now, but the formatting looks still garbled.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r453092076", "createdAt": "2020-07-10T21:48:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">\n+\t\t\t\t<label>Zone 1</label>\n+\t\t\t\t<description>The Controls for Zone 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone2\" typeId=\"zone2\">\n+\t\t\t\t<label>Zone 2</label>\n+\t\t\t\t<description>The Controls for Zone 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone3\" typeId=\"zone3\">\n+\t\t\t\t<label>Zone 3</label>\n+\t\t\t\t<description>The Controls for Zone 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone4\" typeId=\"zone4\">\n+\t\t\t\t<label>Zone 4</label>\n+\t\t\t\t<description>The Controls for Zone 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone5\" typeId=\"zone5\">\n+\t\t\t\t<label>Zone 5</label>\n+\t\t\t\t<description>The Controls for Zone 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone6\" typeId=\"zone6\">\n+\t\t\t\t<label>Zone 6</label>\n+\t\t\t\t<description>The Controls for Zone 6</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone7\" typeId=\"zone7\">\n+\t\t\t\t<label>Zone 7</label>\n+\t\t\t\t<description>The Controls for Zone 7</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone8\" typeId=\"zone8\">\n+\t\t\t\t<label>Zone 8</label>\n+\t\t\t\t<description>The Controls for Zone 8</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone9\" typeId=\"zone9\">\n+\t\t\t\t<label>Zone 9</label>\n+\t\t\t\t<description>The Controls for Zone 9</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone10\" typeId=\"zone10\">\n+\t\t\t\t<label>Zone 10</label>\n+\t\t\t\t<description>The Controls for Zone 10</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone11\" typeId=\"zone11\">\n+\t\t\t\t<label>Zone 11</label>\n+\t\t\t\t<description>The Controls for Zone 11</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone12\" typeId=\"zone12\">\n+\t\t\t\t<label>Zone 12</label>\n+\t\t\t\t<description>The Controls for Zone 12</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone13\" typeId=\"zone13\">\n+\t\t\t\t<label>Zone 13</label>\n+\t\t\t\t<description>The Controls for Zone 13</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone14\" typeId=\"zone14\">\n+\t\t\t\t<label>Zone 14</label>\n+\t\t\t\t<description>The Controls for Zone 14</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone15\" typeId=\"zone15\">\n+\t\t\t\t<label>Zone 15</label>\n+\t\t\t\t<description>The Controls for Zone 15</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone16\" typeId=\"zone16\">\n+\t\t\t\t<label>Zone 16</label>\n+\t\t\t\t<description>The Controls for Zone 16</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone17\" typeId=\"zone17\">\n+\t\t\t\t<label>Zone 17</label>\n+\t\t\t\t<description>The Controls for Zone 17</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone18\" typeId=\"zone18\">\n+\t\t\t\t<label>Zone 18</label>\n+\t\t\t\t<description>The Controls for Zone 18</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source1\" typeId=\"source1\">\n+\t\t\t\t<label>Source 1</label>\n+\t\t\t\t<description>The Display Information for Source 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source2\" typeId=\"source2\">\n+\t\t\t\t<label>Source 2</label>\n+\t\t\t\t<description>The Display Information for Source 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source3\" typeId=\"source3\">\n+\t\t\t\t<label>Source 3</label>\n+\t\t\t\t<description>The Display Information for Source 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source4\" typeId=\"source4\">\n+\t\t\t\t<label>Source 4</label>\n+\t\t\t\t<description>The Display Information for Source 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source5\" typeId=\"source5\">\n+\t\t\t\t<label>Source 5</label>\n+\t\t\t\t<description>The Display Information for Source 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source6\" typeId=\"source6\">\n+\t\t\t\t<label>Source 6</label>\n+\t\t\t\t<description>The Display Information for Source 6</description>\n+\t\t\t</channel-group>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the Nuvo Amplifier</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Host Name or IP Address of the Machine Connected to the Nuvo Amplifier (Serial over IP)</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Communication Port (serial over IP). For IP Connection to the Nuvo Amplifier</description>\n+\t\t\t\t<default>4444</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"numZones\" type=\"integer\" min=\"1\" max=\"20\" required=\"true\">\n+\t\t\t\t<label>Number of Zones</label>\n+\t\t\t\t<description>Number of Zones On the Amplifier to Utilize in the Binding (Up to 20 Zones When Using Expansion Module)</description>\n+\t\t\t\t<default>6</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"clockSync\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Sync Clock On GConcerto</label>\n+\t\t\t\t<description>If Set to true, the Binding Will Sync the Internal Clock On the Grand Concerto to Match the openHAB\n+\t\t\t\t\tHost's\n+\t\t\t\t\tSystem Clock. The Sync Job Runs at Binding Startup and Once an Hour Thereafter. The Essentia G Has No RTC, So\n+\t\t\t\t\tThis\n+\t\t\t\t\tSetting Has No Effect On That Component.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjIzNg=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEwODMwMQ==", "bodyText": "I am not sure why. It looks OK in the latest commit: a805ed7#diff-4a125a54665ae3eaa126a6939adbbf36", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r453108301", "createdAt": "2020-07-10T22:41:31Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">\n+\t\t\t\t<label>Zone 1</label>\n+\t\t\t\t<description>The Controls for Zone 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone2\" typeId=\"zone2\">\n+\t\t\t\t<label>Zone 2</label>\n+\t\t\t\t<description>The Controls for Zone 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone3\" typeId=\"zone3\">\n+\t\t\t\t<label>Zone 3</label>\n+\t\t\t\t<description>The Controls for Zone 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone4\" typeId=\"zone4\">\n+\t\t\t\t<label>Zone 4</label>\n+\t\t\t\t<description>The Controls for Zone 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone5\" typeId=\"zone5\">\n+\t\t\t\t<label>Zone 5</label>\n+\t\t\t\t<description>The Controls for Zone 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone6\" typeId=\"zone6\">\n+\t\t\t\t<label>Zone 6</label>\n+\t\t\t\t<description>The Controls for Zone 6</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone7\" typeId=\"zone7\">\n+\t\t\t\t<label>Zone 7</label>\n+\t\t\t\t<description>The Controls for Zone 7</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone8\" typeId=\"zone8\">\n+\t\t\t\t<label>Zone 8</label>\n+\t\t\t\t<description>The Controls for Zone 8</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone9\" typeId=\"zone9\">\n+\t\t\t\t<label>Zone 9</label>\n+\t\t\t\t<description>The Controls for Zone 9</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone10\" typeId=\"zone10\">\n+\t\t\t\t<label>Zone 10</label>\n+\t\t\t\t<description>The Controls for Zone 10</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone11\" typeId=\"zone11\">\n+\t\t\t\t<label>Zone 11</label>\n+\t\t\t\t<description>The Controls for Zone 11</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone12\" typeId=\"zone12\">\n+\t\t\t\t<label>Zone 12</label>\n+\t\t\t\t<description>The Controls for Zone 12</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone13\" typeId=\"zone13\">\n+\t\t\t\t<label>Zone 13</label>\n+\t\t\t\t<description>The Controls for Zone 13</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone14\" typeId=\"zone14\">\n+\t\t\t\t<label>Zone 14</label>\n+\t\t\t\t<description>The Controls for Zone 14</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone15\" typeId=\"zone15\">\n+\t\t\t\t<label>Zone 15</label>\n+\t\t\t\t<description>The Controls for Zone 15</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone16\" typeId=\"zone16\">\n+\t\t\t\t<label>Zone 16</label>\n+\t\t\t\t<description>The Controls for Zone 16</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone17\" typeId=\"zone17\">\n+\t\t\t\t<label>Zone 17</label>\n+\t\t\t\t<description>The Controls for Zone 17</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone18\" typeId=\"zone18\">\n+\t\t\t\t<label>Zone 18</label>\n+\t\t\t\t<description>The Controls for Zone 18</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source1\" typeId=\"source1\">\n+\t\t\t\t<label>Source 1</label>\n+\t\t\t\t<description>The Display Information for Source 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source2\" typeId=\"source2\">\n+\t\t\t\t<label>Source 2</label>\n+\t\t\t\t<description>The Display Information for Source 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source3\" typeId=\"source3\">\n+\t\t\t\t<label>Source 3</label>\n+\t\t\t\t<description>The Display Information for Source 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source4\" typeId=\"source4\">\n+\t\t\t\t<label>Source 4</label>\n+\t\t\t\t<description>The Display Information for Source 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source5\" typeId=\"source5\">\n+\t\t\t\t<label>Source 5</label>\n+\t\t\t\t<description>The Display Information for Source 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source6\" typeId=\"source6\">\n+\t\t\t\t<label>Source 6</label>\n+\t\t\t\t<description>The Display Information for Source 6</description>\n+\t\t\t</channel-group>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the Nuvo Amplifier</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Host Name or IP Address of the Machine Connected to the Nuvo Amplifier (Serial over IP)</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Communication Port (serial over IP). For IP Connection to the Nuvo Amplifier</description>\n+\t\t\t\t<default>4444</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"numZones\" type=\"integer\" min=\"1\" max=\"20\" required=\"true\">\n+\t\t\t\t<label>Number of Zones</label>\n+\t\t\t\t<description>Number of Zones On the Amplifier to Utilize in the Binding (Up to 20 Zones When Using Expansion Module)</description>\n+\t\t\t\t<default>6</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"clockSync\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Sync Clock On GConcerto</label>\n+\t\t\t\t<description>If Set to true, the Binding Will Sync the Internal Clock On the Grand Concerto to Match the openHAB\n+\t\t\t\t\tHost's\n+\t\t\t\t\tSystem Clock. The Sync Job Runs at Binding Startup and Once an Hour Thereafter. The Essentia G Has No RTC, So\n+\t\t\t\t\tThis\n+\t\t\t\t\tSetting Has No Effect On That Component.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjIzNg=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE3Njk4Nw==", "bodyText": "Now, it looks fine!", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r453176987", "createdAt": "2020-07-11T09:33:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,758 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">\n+\t\t\t\t<label>Zone 1</label>\n+\t\t\t\t<description>The Controls for Zone 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone2\" typeId=\"zone2\">\n+\t\t\t\t<label>Zone 2</label>\n+\t\t\t\t<description>The Controls for Zone 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone3\" typeId=\"zone3\">\n+\t\t\t\t<label>Zone 3</label>\n+\t\t\t\t<description>The Controls for Zone 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone4\" typeId=\"zone4\">\n+\t\t\t\t<label>Zone 4</label>\n+\t\t\t\t<description>The Controls for Zone 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone5\" typeId=\"zone5\">\n+\t\t\t\t<label>Zone 5</label>\n+\t\t\t\t<description>The Controls for Zone 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone6\" typeId=\"zone6\">\n+\t\t\t\t<label>Zone 6</label>\n+\t\t\t\t<description>The Controls for Zone 6</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone7\" typeId=\"zone7\">\n+\t\t\t\t<label>Zone 7</label>\n+\t\t\t\t<description>The Controls for Zone 7</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone8\" typeId=\"zone8\">\n+\t\t\t\t<label>Zone 8</label>\n+\t\t\t\t<description>The Controls for Zone 8</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone9\" typeId=\"zone9\">\n+\t\t\t\t<label>Zone 9</label>\n+\t\t\t\t<description>The Controls for Zone 9</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone10\" typeId=\"zone10\">\n+\t\t\t\t<label>Zone 10</label>\n+\t\t\t\t<description>The Controls for Zone 10</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone11\" typeId=\"zone11\">\n+\t\t\t\t<label>Zone 11</label>\n+\t\t\t\t<description>The Controls for Zone 11</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone12\" typeId=\"zone12\">\n+\t\t\t\t<label>Zone 12</label>\n+\t\t\t\t<description>The Controls for Zone 12</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone13\" typeId=\"zone13\">\n+\t\t\t\t<label>Zone 13</label>\n+\t\t\t\t<description>The Controls for Zone 13</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone14\" typeId=\"zone14\">\n+\t\t\t\t<label>Zone 14</label>\n+\t\t\t\t<description>The Controls for Zone 14</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone15\" typeId=\"zone15\">\n+\t\t\t\t<label>Zone 15</label>\n+\t\t\t\t<description>The Controls for Zone 15</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone16\" typeId=\"zone16\">\n+\t\t\t\t<label>Zone 16</label>\n+\t\t\t\t<description>The Controls for Zone 16</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone17\" typeId=\"zone17\">\n+\t\t\t\t<label>Zone 17</label>\n+\t\t\t\t<description>The Controls for Zone 17</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone18\" typeId=\"zone18\">\n+\t\t\t\t<label>Zone 18</label>\n+\t\t\t\t<description>The Controls for Zone 18</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source1\" typeId=\"source1\">\n+\t\t\t\t<label>Source 1</label>\n+\t\t\t\t<description>The Display Information for Source 1</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source2\" typeId=\"source2\">\n+\t\t\t\t<label>Source 2</label>\n+\t\t\t\t<description>The Display Information for Source 2</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source3\" typeId=\"source3\">\n+\t\t\t\t<label>Source 3</label>\n+\t\t\t\t<description>The Display Information for Source 3</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source4\" typeId=\"source4\">\n+\t\t\t\t<label>Source 4</label>\n+\t\t\t\t<description>The Display Information for Source 4</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source5\" typeId=\"source5\">\n+\t\t\t\t<label>Source 5</label>\n+\t\t\t\t<description>The Display Information for Source 5</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"source6\" typeId=\"source6\">\n+\t\t\t\t<label>Source 6</label>\n+\t\t\t\t<description>The Display Information for Source 6</description>\n+\t\t\t</channel-group>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialPort\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>serial-port</context>\n+\t\t\t\t<label>Serial Port</label>\n+\t\t\t\t<description>Serial Port to Use for Connecting to the Nuvo Amplifier</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Host Name or IP Address of the Machine Connected to the Nuvo Amplifier (Serial over IP)</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" min=\"1\" max=\"65535\" required=\"false\">\n+\t\t\t\t<label>Port</label>\n+\t\t\t\t<description>Communication Port (serial over IP). For IP Connection to the Nuvo Amplifier</description>\n+\t\t\t\t<default>4444</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"numZones\" type=\"integer\" min=\"1\" max=\"20\" required=\"true\">\n+\t\t\t\t<label>Number of Zones</label>\n+\t\t\t\t<description>Number of Zones On the Amplifier to Utilize in the Binding (Up to 20 Zones When Using Expansion Module)</description>\n+\t\t\t\t<default>6</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"clockSync\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Sync Clock On GConcerto</label>\n+\t\t\t\t<description>If Set to true, the Binding Will Sync the Internal Clock On the Grand Concerto to Match the openHAB\n+\t\t\t\t\tHost's\n+\t\t\t\t\tSystem Clock. The Sync Job Runs at Binding Startup and Once an Hour Thereafter. The Essentia G Has No RTC, So\n+\t\t\t\t\tThis\n+\t\t\t\t\tSetting Has No Effect On That Component.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg1MjIzNg=="}, "originalCommit": {"oid": "3301ea33fa77cf5d5579ac395fe9e94f94a58155"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDg3ODM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/NuvoThingActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QyMDoxNDoxMlrOGw4JsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMzo0NzoyM1rOGxC80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwNDgxNg==", "bodyText": "The workaround for the mentioned bug should be implemented in all bindings, since there will be no update within the OH2.5 branch. See #8116", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r453904816", "createdAt": "2020-07-13T20:14:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/NuvoThingActions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.nuvo.internal.handler.NuvoHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Some automation actions to be used with a {@link NuvoThingActions}\n+ *\n+ * @author Michael Lobstein - initial contribution\n+ *\n+ */\n+@ThingActionsScope(name = \"nuvo\")\n+@NonNullByDefault\n+public class NuvoThingActions implements ThingActions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a805ed70cb69620f43aeff74e6538eabcbcaa1f3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA4MTc0Ng==", "bodyText": "I added the work around.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r454081746", "createdAt": "2020-07-14T03:47:23Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/NuvoThingActions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.nuvo.internal.handler.NuvoHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Some automation actions to be used with a {@link NuvoThingActions}\n+ *\n+ * @author Michael Lobstein - initial contribution\n+ *\n+ */\n+@ThingActionsScope(name = \"nuvo\")\n+@NonNullByDefault\n+public class NuvoThingActions implements ThingActions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzkwNDgxNg=="}, "originalCommit": {"oid": "a805ed70cb69620f43aeff74e6538eabcbcaa1f3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTg5NjE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoStatusCodes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDoyNzo0MFrOG4PWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDowODo1MFrOHFAu2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyNDkxMA==", "bodyText": "Either this comment is incorrect or the code: it states left is -, while in the code below left is handled as +.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r461624910", "createdAt": "2020-07-28T14:27:40Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoStatusCodes.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Provides mapping of various Nuvo status codes to plain language meanings\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class NuvoStatusCodes {\n+    private static final String L = \"L\";\n+    private static final String C = \"C\";\n+    private static final String R = \"R\";\n+    private static final String DASH = \"-\";\n+    private static final String ZERO = \"0\";\n+\n+    // map to lookup play mode\n+    public static final Map<String, String> PLAY_MODE = new HashMap<>();\n+    static {\n+        PLAY_MODE.put(\"0\", \"Normal\");\n+        PLAY_MODE.put(\"1\", \"Idle\");\n+        PLAY_MODE.put(\"2\", \"Playing\");\n+        PLAY_MODE.put(\"3\", \"Paused\");\n+        PLAY_MODE.put(\"4\", \"Fast Forward\");\n+        PLAY_MODE.put(\"5\", \"Rewind\");\n+        PLAY_MODE.put(\"6\", \"Play Shuffle\");\n+        PLAY_MODE.put(\"7\", \"Play Repeat\");\n+        PLAY_MODE.put(\"8\", \"Play Shuffle Repeat\");\n+        PLAY_MODE.put(\"9\", \"unknown-9\");\n+        PLAY_MODE.put(\"10\", \"unknown-10\");\n+        PLAY_MODE.put(\"11\", \"Radio\"); // undocumented\n+        PLAY_MODE.put(\"12\", \"unknown-12\");\n+    }\n+\n+    /*\n+     * This looks broken because the controller is seriously broken...\n+     * On the keypad when adjusting the balance to \"Left 18\", the serial data reports R18 \u00af\\_(\u30c4)_/\u00af\n+     * So on top of the weird translation, the value needs to be reversed by the binding\n+     * to ensure that it will match what is displayed on the keypad.\n+     * For display purposes we want -18 to be full left, 0 = center, and +18 to be full right", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dc05926217c0a0e69c4b02509c9af54d98fba7"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxNjkyMQ==", "bodyText": "Yes it is confusing, the controller takes (and reports) string values (L[2-18], C, or R[2-18]... So the goal here is to convert those string values into the integer range of -18 to 18 for openhab to use. To make it more confusing, the values reported in the serial api are backwards from what is displayed on the keypads, so everything had to be inverted. But I tested it thoroughly and it works well.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475016921", "createdAt": "2020-08-22T00:08:50Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoStatusCodes.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Provides mapping of various Nuvo status codes to plain language meanings\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class NuvoStatusCodes {\n+    private static final String L = \"L\";\n+    private static final String C = \"C\";\n+    private static final String R = \"R\";\n+    private static final String DASH = \"-\";\n+    private static final String ZERO = \"0\";\n+\n+    // map to lookup play mode\n+    public static final Map<String, String> PLAY_MODE = new HashMap<>();\n+    static {\n+        PLAY_MODE.put(\"0\", \"Normal\");\n+        PLAY_MODE.put(\"1\", \"Idle\");\n+        PLAY_MODE.put(\"2\", \"Playing\");\n+        PLAY_MODE.put(\"3\", \"Paused\");\n+        PLAY_MODE.put(\"4\", \"Fast Forward\");\n+        PLAY_MODE.put(\"5\", \"Rewind\");\n+        PLAY_MODE.put(\"6\", \"Play Shuffle\");\n+        PLAY_MODE.put(\"7\", \"Play Repeat\");\n+        PLAY_MODE.put(\"8\", \"Play Shuffle Repeat\");\n+        PLAY_MODE.put(\"9\", \"unknown-9\");\n+        PLAY_MODE.put(\"10\", \"unknown-10\");\n+        PLAY_MODE.put(\"11\", \"Radio\"); // undocumented\n+        PLAY_MODE.put(\"12\", \"unknown-12\");\n+    }\n+\n+    /*\n+     * This looks broken because the controller is seriously broken...\n+     * On the keypad when adjusting the balance to \"Left 18\", the serial data reports R18 \u00af\\_(\u30c4)_/\u00af\n+     * So on top of the weird translation, the value needs to be reversed by the binding\n+     * to ensure that it will match what is displayed on the keypad.\n+     * For display purposes we want -18 to be full left, 0 = center, and +18 to be full right", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyNDkxMA=="}, "originalCommit": {"oid": "c1dc05926217c0a0e69c4b02509c9af54d98fba7"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTkwNDc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoStatusCodes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDoyOToyNFrOG4Pbqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDoyOToyNFrOG4Pbqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYyNjI4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return (L + (value * -1));\n          \n          \n            \n                        return (L + Math.abs(value));", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r461626283", "createdAt": "2020-07-28T14:29:24Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoStatusCodes.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Provides mapping of various Nuvo status codes to plain language meanings\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public class NuvoStatusCodes {\n+    private static final String L = \"L\";\n+    private static final String C = \"C\";\n+    private static final String R = \"R\";\n+    private static final String DASH = \"-\";\n+    private static final String ZERO = \"0\";\n+\n+    // map to lookup play mode\n+    public static final Map<String, String> PLAY_MODE = new HashMap<>();\n+    static {\n+        PLAY_MODE.put(\"0\", \"Normal\");\n+        PLAY_MODE.put(\"1\", \"Idle\");\n+        PLAY_MODE.put(\"2\", \"Playing\");\n+        PLAY_MODE.put(\"3\", \"Paused\");\n+        PLAY_MODE.put(\"4\", \"Fast Forward\");\n+        PLAY_MODE.put(\"5\", \"Rewind\");\n+        PLAY_MODE.put(\"6\", \"Play Shuffle\");\n+        PLAY_MODE.put(\"7\", \"Play Repeat\");\n+        PLAY_MODE.put(\"8\", \"Play Shuffle Repeat\");\n+        PLAY_MODE.put(\"9\", \"unknown-9\");\n+        PLAY_MODE.put(\"10\", \"unknown-10\");\n+        PLAY_MODE.put(\"11\", \"Radio\"); // undocumented\n+        PLAY_MODE.put(\"12\", \"unknown-12\");\n+    }\n+\n+    /*\n+     * This looks broken because the controller is seriously broken...\n+     * On the keypad when adjusting the balance to \"Left 18\", the serial data reports R18 \u00af\\_(\u30c4)_/\u00af\n+     * So on top of the weird translation, the value needs to be reversed by the binding\n+     * to ensure that it will match what is displayed on the keypad.\n+     * For display purposes we want -18 to be full left, 0 = center, and +18 to be full right\n+     */\n+    public static String getBalanceFromStr(String value) {\n+        // example L2; return 2 | C; return 0 | R10; return -10\n+        if (value.substring(0, 1).equals(L)) {\n+            return (value.substring(1));\n+        } else if (value.equals(C)) {\n+            return ZERO;\n+        } else if (value.substring(0, 1).equals(R)) {\n+            return (DASH + value.substring(1));\n+        }\n+        return ZERO;\n+    }\n+\n+    // see above comment\n+    public static String getBalanceFromInt(Integer value) {\n+        if (value < 0) {\n+            return (L + (value * -1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dc05926217c0a0e69c4b02509c9af54d98fba7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk1NTg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozOTowNFrOG4P6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDozOTowNFrOG4P6ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNDE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String value;\n          \n          \n            \n                private final String value;", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r461634186", "createdAt": "2020-07-28T14:39:04Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoCommand.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Represents the different kinds of commands\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum NuvoCommand {\n+    GET_CONTROLLER_VERSION(\"VER\"),\n+    ALLMUTE_ON(\"MUTE1\"),\n+    ALLMUTE_OFF(\"MUTE0\"),\n+    ALLOFF(\"ALLOFF\"),\n+    PAGE_ON(\"PAGE1\"),\n+    PAGE_OFF(\"PAGE0\"),\n+    CFGTIME(\"CFGTIME\"),\n+    STATUS(\"STATUS\"),\n+    EQ_QUERY(\"EQ?\"),\n+    DISPINFO(\"DISPINFO\"),\n+    DISPLINE(\"DISPLINE\"),\n+    DISPLINE1(\"DISPLINE1\"),\n+    DISPLINE2(\"DISPLINE2\"),\n+    DISPLINE3(\"DISPLINE3\"),\n+    DISPLINE4(\"DISPLINE4\"),\n+    NAME(\"NAME\"),\n+    ON(\"ON\"),\n+    OFF(\"OFF\"),\n+    SOURCE(\"SRC\"),\n+    VOLUME(\"VOL\"),\n+    MUTE_ON(\"MUTEON\"),\n+    MUTE_OFF(\"MUTEOFF\"),\n+    TREBLE(\"TREB\"),\n+    BASS(\"BASS\"),\n+    BALANCE(\"BAL\"),\n+    LOUDNESS(\"LOUDCMP\"),\n+    PLAYPAUSE(\"PLAYPAUSE\"),\n+    PREV(\"PREV\"),\n+    NEXT(\"NEXT\"),\n+    DND_ON(\"DNDON\"),\n+    DND_OFF(\"DNDOFF\"),\n+    PARTY_ON(\"PARTY1\"),\n+    PARTY_OFF(\"PARTY0\");\n+\n+    private String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dc05926217c0a0e69c4b02509c9af54d98fba7"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk2NjMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoEnum.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MDo1OFrOG4QAtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MDo1OFrOG4QAtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTc2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String id;\n          \n          \n            \n                private String cfgId;\n          \n          \n            \n                private final String id;\n          \n          \n            \n                private final String cfgId;", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r461635764", "createdAt": "2020-07-28T14:40:58Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoEnum.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Represents the different internal zone and source IDs of the Nuvo Whole House Amplifier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum NuvoEnum {\n+    SYSTEM(\"SYSTEM\", \"SYSTEM\"),\n+    ZONE1(\"Z1\", \"ZCFG1\"),\n+    ZONE2(\"Z2\", \"ZCFG2\"),\n+    ZONE3(\"Z3\", \"ZCFG3\"),\n+    ZONE4(\"Z4\", \"ZCFG4\"),\n+    ZONE5(\"Z5\", \"ZCFG5\"),\n+    ZONE6(\"Z6\", \"ZCFG6\"),\n+    ZONE7(\"Z7\", \"ZCFG7\"),\n+    ZONE8(\"Z8\", \"ZCFG8\"),\n+    ZONE9(\"Z9\", \"ZCFG9\"),\n+    ZONE10(\"Z10\", \"ZCFG10\"),\n+    ZONE11(\"Z11\", \"ZCFG11\"),\n+    ZONE12(\"Z12\", \"ZCFG12\"),\n+    ZONE13(\"Z13\", \"ZCFG13\"),\n+    ZONE14(\"Z14\", \"ZCFG14\"),\n+    ZONE15(\"Z15\", \"ZCFG15\"),\n+    ZONE16(\"Z16\", \"ZCFG16\"),\n+    ZONE17(\"Z17\", \"ZCFG17\"),\n+    ZONE18(\"Z18\", \"ZCFG18\"),\n+    ZONE19(\"Z19\", \"ZCFG19\"),\n+    ZONE20(\"Z20\", \"ZCFG20\"),\n+    SOURCE1(\"S1\", \"SCFG1\"),\n+    SOURCE2(\"S2\", \"SCFG2\"),\n+    SOURCE3(\"S3\", \"SCFG3\"),\n+    SOURCE4(\"S4\", \"SCFG4\"),\n+    SOURCE5(\"S5\", \"SCFG5\"),\n+    SOURCE6(\"S6\", \"SCFG6\");\n+\n+    private String id;\n+    private String cfgId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dc05926217c0a0e69c4b02509c9af54d98fba7"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk5MTIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoEnum.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NTozNVrOG4QPvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NTozNVrOG4QPvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzOTYxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final List<String> VALID_SOURCES = Arrays.stream(values()).filter(s -> s.name().contains(\"SOURCE\"))\n          \n          \n            \n                        .map(s -> s.name()).collect(Collectors.toList());\n          \n          \n            \n                public static final List<String> VALID_SOURCES = Arrays.stream(values()).map(NuvoEnum::name).filter(s -> s.contains(\"SOURCE\"))\n          \n          \n            \n                        .collect(Collectors.toList());", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r461639615", "createdAt": "2020-07-28T14:45:35Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoEnum.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Represents the different internal zone and source IDs of the Nuvo Whole House Amplifier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum NuvoEnum {\n+    SYSTEM(\"SYSTEM\", \"SYSTEM\"),\n+    ZONE1(\"Z1\", \"ZCFG1\"),\n+    ZONE2(\"Z2\", \"ZCFG2\"),\n+    ZONE3(\"Z3\", \"ZCFG3\"),\n+    ZONE4(\"Z4\", \"ZCFG4\"),\n+    ZONE5(\"Z5\", \"ZCFG5\"),\n+    ZONE6(\"Z6\", \"ZCFG6\"),\n+    ZONE7(\"Z7\", \"ZCFG7\"),\n+    ZONE8(\"Z8\", \"ZCFG8\"),\n+    ZONE9(\"Z9\", \"ZCFG9\"),\n+    ZONE10(\"Z10\", \"ZCFG10\"),\n+    ZONE11(\"Z11\", \"ZCFG11\"),\n+    ZONE12(\"Z12\", \"ZCFG12\"),\n+    ZONE13(\"Z13\", \"ZCFG13\"),\n+    ZONE14(\"Z14\", \"ZCFG14\"),\n+    ZONE15(\"Z15\", \"ZCFG15\"),\n+    ZONE16(\"Z16\", \"ZCFG16\"),\n+    ZONE17(\"Z17\", \"ZCFG17\"),\n+    ZONE18(\"Z18\", \"ZCFG18\"),\n+    ZONE19(\"Z19\", \"ZCFG19\"),\n+    ZONE20(\"Z20\", \"ZCFG20\"),\n+    SOURCE1(\"S1\", \"SCFG1\"),\n+    SOURCE2(\"S2\", \"SCFG2\"),\n+    SOURCE3(\"S3\", \"SCFG3\"),\n+    SOURCE4(\"S4\", \"SCFG4\"),\n+    SOURCE5(\"S5\", \"SCFG5\"),\n+    SOURCE6(\"S6\", \"SCFG6\");\n+\n+    private String id;\n+    private String cfgId;\n+\n+    // make a list of all valid source ids\n+    public static final List<String> VALID_SOURCES = Arrays.stream(values()).filter(s -> s.name().contains(\"SOURCE\"))\n+            .map(s -> s.name()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dc05926217c0a0e69c4b02509c9af54d98fba7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTk5ODgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoMessageEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NzowMVrOG4QUjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0NzowMVrOG4QUjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY0MDg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String type;\n          \n          \n            \n                private String key;\n          \n          \n            \n                private String value;\n          \n          \n            \n                private final String type;\n          \n          \n            \n                private final String key;\n          \n          \n            \n                private final String value;", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r461640844", "createdAt": "2020-07-28T14:47:01Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoMessageEvent.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.EventObject;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * NuvoMessageEvent event used to notify changes coming from messages received from the Nuvo device\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoMessageEvent extends EventObject {\n+    private static final long serialVersionUID = 1L;\n+    private String type;\n+    private String key;\n+    private String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1dc05926217c0a0e69c4b02509c9af54d98fba7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjgzODA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMTo1ODo1M1rOHEqcyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxNDo0N1rOHFA1zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MTg1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | sourceN#display_line2 (where N= 1-6) | String      | 2st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n          \n          \n            \n            | sourceN#display_line2 (where N= 1-6) | String      | 2nd line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n          \n      \n    \n    \n  \n\nand 3rd and 4th\nBut does it make sense to have 4 channels? In other words makes it sense to only configure for example line1 and not line2? or only line2? Or can there be 1 channel called text that contains the concatenated lines?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r474651850", "createdAt": "2020-08-21T11:58:53Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/README.md", "diffHunk": "@@ -0,0 +1,397 @@\n+# Nuvo Grand Concerto & Essentia G Binding\n+\n+![Nuvo logo](doc/nuvo_logo.png)\n+\n+This binding can be used to control the Nuvo Grand Concerto or Essentia G whole house multi-zone amplifier.\n+Up to 20 keypad zones can be controlled when zone expansion modules are used (if not all zones on the amp are used they can be excluded via configuration).\n+\n+The binding supports two different kinds of connections:\n+\n+* serial connection,\n+* serial over IP connection\n+\n+For users without a serial connector on the server side, you can use a serial to USB adapter.\n+\n+You don't need to have your Grand Concerto or Essentia G whole house amplifier device directly connected to your openHAB server.\n+You can connect it for example to a Raspberry Pi and use [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) to make the serial connection available on LAN (serial over IP).\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the amplifier controller.\n+It has the `amplifier` id.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+You have to add all things manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter Label         | Parameter ID | Description                                                                                                                        | Accepted values        |\n+|-------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|------------------------|\n+| Serial Port             | serialPort   | Serial port to use for connecting to the Nuvo whole house amplifier device                                                         | a comm port name       |\n+| Address                 | host         | Host name or IP address of the machine connected to the Nuvo whole house amplifier device (serial over IP)                         | host name or ip        |\n+| Port                    | port         | Communication port (serial over IP).                                                                                               | ip port number         |\n+| Number of Zones         | numZones     | (Optional) Number of zones on the amplifier to utilize in the binding (up to 20 zones when zone expansion modules are used)        | (1-20; default 6)      |\n+| Sync Clock on GConcerto | clockSync    | (Optional) If set to true, the binding will sync the internal clock on the Grand Concerto to match the openHAB host's system clock | Boolean; default false |\n+\n+Some notes:\n+\n+* If a zone has a maximum volume limit configured by the Nuvo configurator, the volume slider will automatically drop back to that level if set above the configured limit.\n+* Source display_line1 thru 4 can only be updated on non NuvoNet sources.\n+* The track_position channel does not update continuously for NuvoNet sources. It only changes when the track changes or playback is paused/unpaused.\n+\n+* On Linux, you may get an error stating the serial port cannot be opened when the Nuvo binding tries to load.\n+* You can get around this by adding the `openhab` user to the `dialout` group like this: `usermod -a -G dialout openhab`.\n+* Also on Linux you may have issues with the USB if using two serial USB devices e.g. Nuvo and RFXcom. See the [general documentation about serial port configuration](/docs/administration/serial.html) for more on symlinking the USB ports.\n+* Here is an example of ser2net.conf you can use to share your serial port /dev/ttyUSB0 on IP port 4444 using [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) (take care, the baud rate is specific to the Nuvo amplifier):\n+\n+```\n+4444:raw:0:/dev/ttyUSB0:57600 8DATABITS NONE 1STOPBIT LOCAL\n+```\n+\n+## Channels\n+\n+The following channels are available:\n+\n+| Channel ID                           | Item Type   | Description                                                                                                   |\n+|--------------------------------------|-------------|---------------------------------------------------------------------------------------------------------------|\n+| system#alloff                        | Switch      | Turn all zones off simultaneously                                                                             |\n+| system#allmute                       | Switch      | Mute or unmute all zones simultaneously                                                                       |\n+| system#page                          | Switch      | Turn on or off the Page All Zones feature (while on the amplifier switches to source 6)                       |\n+| zoneN#power (where N= 1-20)          | Switch      | Turn the power for a zone on or off                                                                           |\n+| zoneN#source (where N= 1-20)         | Number      | Select the source input for a zone (1-6)                                                                      |\n+| zoneN#volume (where N= 1-20)         | Dimmer      | Control the volume for a zone (0-100%) [translates to 0-79]                                                   |\n+| zoneN#mute (where N= 1-20)           | Switch      | Mute or unmute a zone                                                                                         |\n+| zoneN#control (where N= 1-20)        | Player      | Simulate pressing the transport control buttons on the keypad e.g. play/pause/next/previous                   |\n+| zoneN#treble (where N= 1-20)         | Number      | Adjust the treble control for a zone (-18 to 18 [in increments of 2]) -18=none, 0=flat, 18=full               |\n+| zoneN#bass (where N= 1-20)           | Number      | Adjust the bass control for a zone (-18 to 18 [in increments of 2]) -18=none, 0=flat, 18=full                 |\n+| zoneN#balance (where N= 1-20)        | Number      | Adjust the balance control for a zone (-18 to 18 [in increments of 2]) -18=left, 0=center, 18=right           |\n+| zoneN#loudness (where N= 1-20)       | Switch      | Turn on or off the loudness compensation setting for the zone                                                 |\n+| zoneN#dnd (where N= 1-20)            | Switch      | Turn on or off the Do Not Disturb for the zone (for when the amplifiers's Page All Zones feature is activated)|\n+| zoneN#lock (where N= 1-20)           | Contact     | Indicates if this zone is currently locked                                                                    |\n+| zoneN#party (where N= 1-20)          | Switch      | Turn on or off the party mode feature with this zone as the host                                              |\n+| sourceN#display_line1 (where N= 1-6) | String      | 1st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#display_line2 (where N= 1-6) | String      | 2st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODcwMQ==", "bodyText": "Fixed, bad copy-paste! The keypad displays have 4 lines of text that are individually addressable via the api (for sending metadata from openhab). You might use one line for artist, the next for album name, and the next for track name. So it makes sense to be able to update them individually since all will not change every time. Also if using a nuvo source (radio tuner, ipod dock, etc.), these are populated automatically. If that were the only use case, I would have just concatenated them together into one channel.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475018701", "createdAt": "2020-08-22T00:14:47Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/README.md", "diffHunk": "@@ -0,0 +1,397 @@\n+# Nuvo Grand Concerto & Essentia G Binding\n+\n+![Nuvo logo](doc/nuvo_logo.png)\n+\n+This binding can be used to control the Nuvo Grand Concerto or Essentia G whole house multi-zone amplifier.\n+Up to 20 keypad zones can be controlled when zone expansion modules are used (if not all zones on the amp are used they can be excluded via configuration).\n+\n+The binding supports two different kinds of connections:\n+\n+* serial connection,\n+* serial over IP connection\n+\n+For users without a serial connector on the server side, you can use a serial to USB adapter.\n+\n+You don't need to have your Grand Concerto or Essentia G whole house amplifier device directly connected to your openHAB server.\n+You can connect it for example to a Raspberry Pi and use [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) to make the serial connection available on LAN (serial over IP).\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the amplifier controller.\n+It has the `amplifier` id.\n+\n+## Discovery\n+\n+Discovery is not supported.\n+You have to add all things manually.\n+\n+## Binding Configuration\n+\n+There are no overall binding configuration settings that need to be set.\n+All settings are through thing configuration parameters.\n+\n+## Thing Configuration\n+\n+The thing has the following configuration parameters:\n+\n+| Parameter Label         | Parameter ID | Description                                                                                                                        | Accepted values        |\n+|-------------------------|--------------|------------------------------------------------------------------------------------------------------------------------------------|------------------------|\n+| Serial Port             | serialPort   | Serial port to use for connecting to the Nuvo whole house amplifier device                                                         | a comm port name       |\n+| Address                 | host         | Host name or IP address of the machine connected to the Nuvo whole house amplifier device (serial over IP)                         | host name or ip        |\n+| Port                    | port         | Communication port (serial over IP).                                                                                               | ip port number         |\n+| Number of Zones         | numZones     | (Optional) Number of zones on the amplifier to utilize in the binding (up to 20 zones when zone expansion modules are used)        | (1-20; default 6)      |\n+| Sync Clock on GConcerto | clockSync    | (Optional) If set to true, the binding will sync the internal clock on the Grand Concerto to match the openHAB host's system clock | Boolean; default false |\n+\n+Some notes:\n+\n+* If a zone has a maximum volume limit configured by the Nuvo configurator, the volume slider will automatically drop back to that level if set above the configured limit.\n+* Source display_line1 thru 4 can only be updated on non NuvoNet sources.\n+* The track_position channel does not update continuously for NuvoNet sources. It only changes when the track changes or playback is paused/unpaused.\n+\n+* On Linux, you may get an error stating the serial port cannot be opened when the Nuvo binding tries to load.\n+* You can get around this by adding the `openhab` user to the `dialout` group like this: `usermod -a -G dialout openhab`.\n+* Also on Linux you may have issues with the USB if using two serial USB devices e.g. Nuvo and RFXcom. See the [general documentation about serial port configuration](/docs/administration/serial.html) for more on symlinking the USB ports.\n+* Here is an example of ser2net.conf you can use to share your serial port /dev/ttyUSB0 on IP port 4444 using [ser2net Linux tool](https://sourceforge.net/projects/ser2net/) (take care, the baud rate is specific to the Nuvo amplifier):\n+\n+```\n+4444:raw:0:/dev/ttyUSB0:57600 8DATABITS NONE 1STOPBIT LOCAL\n+```\n+\n+## Channels\n+\n+The following channels are available:\n+\n+| Channel ID                           | Item Type   | Description                                                                                                   |\n+|--------------------------------------|-------------|---------------------------------------------------------------------------------------------------------------|\n+| system#alloff                        | Switch      | Turn all zones off simultaneously                                                                             |\n+| system#allmute                       | Switch      | Mute or unmute all zones simultaneously                                                                       |\n+| system#page                          | Switch      | Turn on or off the Page All Zones feature (while on the amplifier switches to source 6)                       |\n+| zoneN#power (where N= 1-20)          | Switch      | Turn the power for a zone on or off                                                                           |\n+| zoneN#source (where N= 1-20)         | Number      | Select the source input for a zone (1-6)                                                                      |\n+| zoneN#volume (where N= 1-20)         | Dimmer      | Control the volume for a zone (0-100%) [translates to 0-79]                                                   |\n+| zoneN#mute (where N= 1-20)           | Switch      | Mute or unmute a zone                                                                                         |\n+| zoneN#control (where N= 1-20)        | Player      | Simulate pressing the transport control buttons on the keypad e.g. play/pause/next/previous                   |\n+| zoneN#treble (where N= 1-20)         | Number      | Adjust the treble control for a zone (-18 to 18 [in increments of 2]) -18=none, 0=flat, 18=full               |\n+| zoneN#bass (where N= 1-20)           | Number      | Adjust the bass control for a zone (-18 to 18 [in increments of 2]) -18=none, 0=flat, 18=full                 |\n+| zoneN#balance (where N= 1-20)        | Number      | Adjust the balance control for a zone (-18 to 18 [in increments of 2]) -18=left, 0=center, 18=right           |\n+| zoneN#loudness (where N= 1-20)       | Switch      | Turn on or off the loudness compensation setting for the zone                                                 |\n+| zoneN#dnd (where N= 1-20)            | Switch      | Turn on or off the Do Not Disturb for the zone (for when the amplifiers's Page All Zones feature is activated)|\n+| zoneN#lock (where N= 1-20)           | Contact     | Indicates if this zone is currently locked                                                                    |\n+| zoneN#party (where N= 1-20)          | Switch      | Turn on or off the party mode feature with this zone as the host                                              |\n+| sourceN#display_line1 (where N= 1-6) | String      | 1st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |\n+| sourceN#display_line2 (where N= 1-6) | String      | 2st line of text being displayed on the keypad. Can be updated for a non NuvoNet source                       |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MTg1MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njg0OTY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowMzoxMVrOHEqj0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxNToxMlrOHFA2JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MzY1MQ==", "bodyText": "This should probably be done before the join. Because if the join does wait and in between a new thread is set it will be set to null here. This might be theoretically now as that flow never can happen (I didn't check the flow), but if the code would change it might become possible in the future.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r474653651", "createdAt": "2020-08-21T12:03:11Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,376 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODc4OQ==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475018789", "createdAt": "2020-08-22T00:15:12Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoConnector.java", "diffHunk": "@@ -0,0 +1,376 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Abstract class for communicating with the Nuvo device\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public abstract class NuvoConnector {\n+    private static final String COMMAND_OK = \"#OK\";\n+    private static final String BEGIN_CMD = \"*\";\n+    private static final String END_CMD = \"\\r\";\n+    private static final String QUERY = \"?\";\n+    private static final String VER_STR = \"#VER\\\"NV-\";\n+    private static final String ALL_OFF = \"#ALLOFF\";\n+    private static final String MUTE = \"#MUTE\";\n+    private static final String PAGE = \"#PAGE\";\n+\n+    private static final byte[] WAKE_STR = \"\\r\".getBytes(StandardCharsets.US_ASCII);\n+\n+    private static final Pattern SRC_PATTERN = Pattern.compile(\"^#S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2}),(.*)$\");\n+    private static final Pattern ZONE_BUTTON_PATTERN = Pattern.compile(\"^#Z(\\\\d{1,2})S(\\\\d{1})(.*)$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^#ZCFG(\\\\d{1,2}),(.*)$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoConnector.class);\n+\n+    protected static final String COMMAND_ERROR = \"#?\";\n+\n+    /** The output stream */\n+    protected @Nullable OutputStream dataOut;\n+\n+    /** The input stream */\n+    protected @Nullable InputStream dataIn;\n+\n+    /** true if the connection is established, false if not */\n+    private boolean connected;\n+\n+    private @Nullable Thread readerThread;\n+\n+    private List<NuvoMessageEventListener> listeners = new ArrayList<>();\n+\n+    private boolean isEssentia = true;\n+\n+    /**\n+     * Get whether the connection is established or not\n+     *\n+     * @return true if the connection is established\n+     */\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    /**\n+     * Set whether the connection is established or not\n+     *\n+     * @param connected true if the connection is established\n+     */\n+    protected void setConnected(boolean connected) {\n+        this.connected = connected;\n+    }\n+\n+    /**\n+     * Tell the connector if the device is an Essentia G or not\n+     *\n+     * @param true if the device is an Essentia G\n+     */\n+    public void setEssentia(boolean isEssentia) {\n+        this.isEssentia = isEssentia;\n+    }\n+\n+    /**\n+     * Set the thread that handles the feedback messages\n+     *\n+     * @param readerThread the thread\n+     */\n+    protected void setReaderThread(Thread readerThread) {\n+        this.readerThread = readerThread;\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @throws NuvoException - In case of any problem\n+     */\n+    public abstract void open() throws NuvoException;\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    public abstract void close();\n+\n+    /**\n+     * Stop the thread that handles the feedback messages and close the opened input and output streams\n+     */\n+    protected void cleanup() {\n+        Thread readerThread = this.readerThread;\n+        OutputStream dataOut = this.dataOut;\n+        if (dataOut != null) {\n+            try {\n+                dataOut.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataOut: {}\", e.getMessage());\n+            }\n+            this.dataOut = null;\n+        }\n+        InputStream dataIn = this.dataIn;\n+        if (dataIn != null) {\n+            try {\n+                dataIn.close();\n+            } catch (IOException e) {\n+                logger.debug(\"Error closing dataIn: {}\", e.getMessage());\n+            }\n+            this.dataIn = null;\n+        }\n+        if (readerThread != null) {\n+            readerThread.interrupt();\n+            try {\n+                readerThread.join(3000);\n+            } catch (InterruptedException e) {\n+                logger.warn(\"Error joining readerThread: {}\", e.getMessage());\n+            }\n+            this.readerThread = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MzY1MQ=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njg2MTgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoReaderThread.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowNzozMlrOHEqrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxNToxOVrOHFA2SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NTUzOA==", "bodyText": "Can you change this to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(NuvoBindingConstants.BINDING_ID + \"-\" + uid);\n          \n          \n            \n                    super(\"OH-binding-\" + NuvoBindingConstants.BINDING_ID + \"-\" + uid);", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r474655538", "createdAt": "2020-08-21T12:07:32Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoReaderThread.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.nuvo.internal.NuvoBindingConstants;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A class that reads messages from the Nuvo device in a dedicated thread\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public class NuvoReaderThread extends Thread {\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoReaderThread.class);\n+\n+    private static final int READ_BUFFER_SIZE = 16;\n+    private static final int SIZE = 256;\n+\n+    private static final char TERM_CHAR = '\\r';\n+\n+    private NuvoConnector connector;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param connector the object that should handle the received message\n+     */\n+    public NuvoReaderThread(NuvoConnector connector, String uid) {\n+        super(NuvoBindingConstants.BINDING_ID + \"-\" + uid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODgyNQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475018825", "createdAt": "2020-08-22T00:15:19Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/communication/NuvoReaderThread.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.communication;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.nuvo.internal.NuvoBindingConstants;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A class that reads messages from the Nuvo device in a dedicated thread\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ * @author Michael Lobstein - Adapted for the Nuvo binding\n+ */\n+@NonNullByDefault\n+public class NuvoReaderThread extends Thread {\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoReaderThread.class);\n+\n+    private static final int READ_BUFFER_SIZE = 16;\n+    private static final int SIZE = 256;\n+\n+    private static final char TERM_CHAR = '\\r';\n+\n+    private NuvoConnector connector;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param connector the object that should handle the received message\n+     */\n+    public NuvoReaderThread(NuvoConnector connector, String uid) {\n+        super(NuvoBindingConstants.BINDING_ID + \"-\" + uid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NTUzOA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njg3MTQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoxMDo1MlrOHEqxJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxNjo0OVrOHFA3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NzA2Mw==", "bodyText": "If these zone groups are all the same you should define just a typeId zone. You already set the label and description here (what differentiates the zones). Same for source.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r474657063", "createdAt": "2020-08-21T12:10:52Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,756 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxOTA3MA==", "bodyText": "fixed. that simplifies the xml file tremendously. thanks!", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475019070", "createdAt": "2020-08-22T00:16:49Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,756 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"nuvo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Nuvo Whole House Amplifier Thing -->\n+\t<thing-type id=\"amplifier\">\n+\t\t<label>Whole House Amplifier</label>\n+\t\t<description>\n+\t\t\tA Multi-zone Whole House Amplifier System\n+\t\t</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"system\" typeId=\"system\">\n+\t\t\t\t<label>System</label>\n+\t\t\t\t<description>System Level Commands</description>\n+\t\t\t</channel-group>\n+\t\t\t<channel-group id=\"zone1\" typeId=\"zone1\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NzA2Mw=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjkwODU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoyMzo0NlrOHErHvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoyMzo0NlrOHErHvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2Mjg0NQ==", "bodyText": "simpleDateFormat can be a static final constant in the class?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r474662845", "createdAt": "2020-08-21T12:23:46Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (serialPort != null) {\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else if (port != null) {\n+            connector = new NuvoIpConnector(host, port);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Either Serial port or Host & Port must be specifed\");\n+            return;\n+        }\n+\n+        if (numZones != null) {\n+            this.numZones = numZones;\n+        }\n+\n+        activeZones = IntStream.range((1), (this.numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (this.numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((this.numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone)));\n+            });\n+            updateThing(editThing().withChannels(channels).build());\n+        }\n+\n+        if (config.clockSync) {\n+            scheduleClockSyncJob();\n+        }\n+\n+        scheduleReconnectJob();\n+        schedulePollingJob();\n+        updateStatus(ThingStatus.UNKNOWN);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelReconnectJob();\n+        cancelPollingJob();\n+        cancelClockSyncJob();\n+        closeConnection();\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singletonList(NuvoThingActions.class);\n+    }\n+\n+    public void handleRawCommand(@Nullable String command) {\n+        synchronized (sequenceLock) {\n+            try {\n+                connector.sendCommand(command);\n+            } catch (NuvoException e) {\n+                logger.warn(\"Nuvo Command: {} failed\", command);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Handle a command the UI\n+     *\n+     * @param channelUID the channel sending the command\n+     * @param command the command received\n+     * \n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channel = channelUID.getId();\n+        String[] channelSplit = channel.split(CHANNEL_DELIMIT);\n+        NuvoEnum target = NuvoEnum.valueOf(channelSplit[0].toUpperCase());\n+\n+        String channelType = channelSplit[1];\n+\n+        if (getThing().getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Thing is not ONLINE; command {} from channel {} is ignored\", command, channel);\n+            return;\n+        }\n+\n+        synchronized (sequenceLock) {\n+            if (!connector.isConnected()) {\n+                logger.warn(\"Command {} from channel {} is ignored: connection not established\", command, channel);\n+                return;\n+            }\n+\n+            try {\n+                switch (channelType) {\n+                    case CHANNEL_TYPE_POWER:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target, command == OnOffType.ON ? NuvoCommand.ON : NuvoCommand.OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_SOURCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= 1 && value <= MAX_SRC) {\n+                                logger.debug(\"Got source command {} zone {}\", value, target);\n+                                connector.sendCommand(target, NuvoCommand.SOURCE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_VOLUME:\n+                        if (command instanceof PercentType) {\n+                            int value = (MAX_VOLUME\n+                                    - (int) Math.round(\n+                                            ((PercentType) command).doubleValue() / 100.0 * (MAX_VOLUME - MIN_VOLUME))\n+                                    + MIN_VOLUME);\n+                            logger.debug(\"Got volume command {} zone {}\", value, target);\n+                            connector.sendCommand(target, NuvoCommand.VOLUME, String.valueOf(value));\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_MUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.MUTE_ON : NuvoCommand.MUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_TREBLE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ) {\n+                                // device can only accept even values\n+                                if (value % 2 == 1)\n+                                    value++;\n+                                logger.debug(\"Got treble command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.TREBLE, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BASS:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ) {\n+                                if (value % 2 == 1)\n+                                    value++;\n+                                logger.debug(\"Got bass command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BASS, String.valueOf(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_BALANCE:\n+                        if (command instanceof DecimalType) {\n+                            int value = ((DecimalType) command).intValue();\n+                            if (value >= MIN_EQ && value <= MAX_EQ) {\n+                                if (value % 2 == 1)\n+                                    value++;\n+                                logger.debug(\"Got balance command {} zone {}\", value, target);\n+                                connector.sendCfgCommand(target, NuvoCommand.BALANCE,\n+                                        NuvoStatusCodes.getBalanceFromInt(value));\n+                            }\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_LOUDNESS:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCfgCommand(target, NuvoCommand.LOUDNESS,\n+                                    command == OnOffType.ON ? ONE : ZERO);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_CONTROL:\n+                        handleControlCommand(target, command);\n+                        break;\n+                    case CHANNEL_TYPE_DND:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.DND_ON : NuvoCommand.DND_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PARTY:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PARTY_ON : NuvoCommand.PARTY_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE1:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE1, \"\\\"\" + command + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE2:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE2, \"\\\"\" + command + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE3:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE3, \"\\\"\" + command + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_DISPLAY_LINE4:\n+                        if (command instanceof StringType) {\n+                            connector.sendCommand(target, NuvoCommand.DISPLINE4, \"\\\"\" + command + \"\\\"\");\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_ALLOFF:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(NuvoCommand.ALLOFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_ALLMUTE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.ALLMUTE_ON : NuvoCommand.ALLMUTE_OFF);\n+                        }\n+                        break;\n+                    case CHANNEL_TYPE_PAGE:\n+                        if (command instanceof OnOffType) {\n+                            connector.sendCommand(target,\n+                                    command == OnOffType.ON ? NuvoCommand.PAGE_ON : NuvoCommand.PAGE_OFF);\n+                        }\n+                        break;\n+                }\n+            } catch (NuvoException e) {\n+                logger.warn(\"Command {} from channel {} failed: {}\", command, channel, e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Sending command failed\");\n+                closeConnection();\n+                scheduleReconnectJob();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Open the connection with the Nuvo device\n+     *\n+     * @return true if the connection is opened successfully or false if not\n+     */\n+    private synchronized boolean openConnection() {\n+        connector.addEventListener(this);\n+        try {\n+            connector.open();\n+        } catch (NuvoException e) {\n+            logger.debug(\"openConnection() failed: {}\", e.getMessage());\n+        }\n+        logger.debug(\"openConnection(): {}\", connector.isConnected() ? \"connected\" : \"disconnected\");\n+        return connector.isConnected();\n+    }\n+\n+    /**\n+     * Close the connection with the Nuvo device\n+     */\n+    private synchronized void closeConnection() {\n+        if (connector.isConnected()) {\n+            connector.close();\n+            connector.removeEventListener(this);\n+            logger.debug(\"closeConnection(): disconnected\");\n+        }\n+    }\n+\n+    /**\n+     * Handle an event received from the Nuvo device\n+     *\n+     * @param event the event to process\n+     */\n+    @Override\n+    public void onNewMessageEvent(NuvoMessageEvent evt) {\n+        logger.debug(\"onNewMessageEvent: key {} = {}\", evt.getKey(), evt.getValue());\n+        lastEventReceived = System.currentTimeMillis();\n+\n+        String type = evt.getType();\n+        String key = evt.getKey();\n+        String updateData = evt.getValue().trim();\n+        if (this.getThing().getStatus() == ThingStatus.OFFLINE) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, this.versionString);\n+        }\n+\n+        switch (type) {\n+            case TYPE_VERSION:\n+                this.versionString = updateData;\n+                // Determine if we are a Grand Concerto or not\n+                if (this.versionString.contains(GC_STR)) {\n+                    this.isGConcerto = true;\n+                    connector.setEssentia(false);\n+                }\n+                break;\n+            case TYPE_ALLOFF:\n+                activeZones.forEach(zoneNum -> {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum), CHANNEL_TYPE_POWER, OFF);\n+                });\n+                break;\n+            case TYPE_ALLMUTE:\n+                updateChannelState(NuvoEnum.SYSTEM, CHANNEL_TYPE_ALLMUTE, ONE.equals(updateData) ? ON : OFF);\n+                activeZones.forEach(zoneNum -> {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + zoneNum), CHANNEL_TYPE_MUTE,\n+                            ONE.equals(updateData) ? ON : OFF);\n+                });\n+                break;\n+            case TYPE_PAGE:\n+                updateChannelState(NuvoEnum.SYSTEM, CHANNEL_TYPE_PAGE, ONE.equals(updateData) ? ON : OFF);\n+                break;\n+            case TYPE_SOURCE_UPDATE:\n+                logger.debug(\"Source update: Source: {} - Value: {}\", key, updateData);\n+                NuvoEnum targetSource = NuvoEnum.valueOf(SOURCE + key);\n+\n+                if (updateData.contains(DISPLINE)) {\n+                    // example: DISPLINE2,\"Play My Song (Featuring Dee Ajayi)\"\n+                    Matcher matcher = DISP_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetSource, CHANNEL_DISPLAY_LINE + matcher.group(1), matcher.group(2));\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                } else if (updateData.contains(DISPINFO)) {\n+                    // example: DISPINFO,DUR0,POS70,STATUS2 (DUR and POS are expressed in tenths of a second)\n+                    // 6 places(tenths of a second)-> max 999,999 /10/60/60/24 = 1.15 days\n+                    Matcher matcher = DISP_INFO_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetSource, CHANNEL_TRACK_LENGTH, matcher.group(1));\n+                        updateChannelState(targetSource, CHANNEL_TRACK_POSITION, matcher.group(2));\n+                        updateChannelState(targetSource, CHANNEL_PLAY_MODE, matcher.group(3));\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                } else if (updateData.contains(NAME_QUOTE) && sourceLabels.size() <= MAX_SRC) {\n+                    // example: NAME\"Ipod\"\n+                    String name = updateData.split(\"\\\"\")[1];\n+                    sourceLabels.add(new StateOption(key, name));\n+                }\n+                break;\n+            case TYPE_ZONE_UPDATE:\n+                logger.debug(\"Zone update: Zone: {} - Value: {}\", key, updateData);\n+                // example : OFF\n+                // or: ON,SRC3,VOL63,DND0,LOCK0\n+                // or: ON,SRC3,MUTE,DND0,LOCK0\n+\n+                NuvoEnum targetZone = NuvoEnum.valueOf(ZONE + key);\n+\n+                if (OFF.equals(updateData)) {\n+                    updateChannelState(targetZone, CHANNEL_TYPE_POWER, OFF);\n+                    updateChannelState(targetZone, CHANNEL_TYPE_SOURCE, UNDEF);\n+                } else {\n+                    Matcher matcher = ZONE_PATTERN.matcher(updateData);\n+                    if (matcher.find()) {\n+                        updateChannelState(targetZone, CHANNEL_TYPE_POWER, ON);\n+                        updateChannelState(targetZone, CHANNEL_TYPE_SOURCE, matcher.group(1));\n+\n+                        if (MUTE.equals(matcher.group(2))) {\n+                            updateChannelState(targetZone, CHANNEL_TYPE_MUTE, ON);\n+                        } else {\n+                            updateChannelState(targetZone, CHANNEL_TYPE_MUTE, NuvoCommand.OFF.getValue());\n+                            updateChannelState(targetZone, CHANNEL_TYPE_VOLUME, matcher.group(2).replace(VOL, BLANK));\n+                        }\n+\n+                        updateChannelState(targetZone, CHANNEL_TYPE_DND, ONE.equals(matcher.group(3)) ? ON : OFF);\n+                        updateChannelState(targetZone, CHANNEL_TYPE_LOCK, ONE.equals(matcher.group(4)) ? ON : OFF);\n+                    } else {\n+                        logger.debug(\"no match on message: {}\", updateData);\n+                    }\n+                }\n+                break;\n+            case TYPE_ZONE_BUTTON:\n+                logger.debug(\"Zone Button pressed: Source: {} - Button: {}\", key, updateData);\n+                updateChannelState(NuvoEnum.valueOf(SOURCE + key), CHANNEL_BUTTON_PRESS, updateData);\n+                break;\n+            case TYPE_ZONE_CONFIG:\n+                logger.debug(\"Zone Configuration: Zone: {} - Value: {}\", key, updateData);\n+                // example: BASS1,TREB-2,BALR2,LOUDCMP1\n+                Matcher matcher = ZONE_CFG_PATTERN.matcher(updateData);\n+                if (matcher.find()) {\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_BASS, matcher.group(1));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_TREBLE, matcher.group(2));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_BALANCE,\n+                            NuvoStatusCodes.getBalanceFromStr(matcher.group(3)));\n+                    updateChannelState(NuvoEnum.valueOf(ZONE + key), CHANNEL_TYPE_LOUDNESS,\n+                            ONE.equals(matcher.group(4)) ? ON : OFF);\n+                } else {\n+                    logger.debug(\"no match on message: {}\", updateData);\n+                }\n+                break;\n+            default:\n+                logger.debug(\"onNewMessageEvent: unhandled key {}\", key);\n+                break;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the reconnection job\n+     */\n+    private void scheduleReconnectJob() {\n+        logger.debug(\"Schedule reconnect job\");\n+        cancelReconnectJob();\n+        reconnectJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (!connector.isConnected()) {\n+                logger.debug(\"Trying to reconnect...\");\n+                closeConnection();\n+                String error = null;\n+                if (openConnection()) {\n+                    synchronized (sequenceLock) {\n+                        try {\n+                            long prevUpdateTime = lastEventReceived;\n+\n+                            connector.sendCommand(NuvoCommand.GET_CONTROLLER_VERSION);\n+\n+                            NuvoEnum.VALID_SOURCES.forEach(source -> {\n+                                try {\n+                                    connector.sendQuery(NuvoEnum.valueOf(source), NuvoCommand.NAME);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD_MS);\n+                                    connector.sendQuery(NuvoEnum.valueOf(source), NuvoCommand.DISPINFO);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD_MS);\n+                                    connector.sendQuery(NuvoEnum.valueOf(source), NuvoCommand.DISPLINE);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD_MS);\n+                                } catch (NuvoException | InterruptedException e) {\n+                                    logger.debug(\"Error Querying Source data: {}\", e.getMessage());\n+                                }\n+                            });\n+\n+                            // Query all active zones to get their current status and eq configuration\n+                            activeZones.forEach(zoneNum -> {\n+                                try {\n+                                    connector.sendQuery(NuvoEnum.valueOf(ZONE + zoneNum), NuvoCommand.STATUS);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD_MS);\n+                                    connector.sendCfgCommand(NuvoEnum.valueOf(ZONE + zoneNum), NuvoCommand.EQ_QUERY,\n+                                            BLANK);\n+                                    Thread.sleep(SLEEP_BETWEEN_CMD_MS);\n+                                } catch (NuvoException | InterruptedException e) {\n+                                    logger.debug(\"Error Querying Zone data: {}\", e.getMessage());\n+                                }\n+                            });\n+\n+                            // prevUpdateTime should have changed if a zone update was received\n+                            if (prevUpdateTime == lastEventReceived) {\n+                                error = \"Controller not responding to status requests\";\n+                            } else {\n+                                // Put the source labels on all active zones\n+                                activeZones.forEach(zoneNum -> {\n+                                    stateDescriptionProvider.setStateOptions(new ChannelUID(getThing().getUID(),\n+                                            ZONE.toLowerCase() + zoneNum + CHANNEL_DELIMIT + CHANNEL_TYPE_SOURCE),\n+                                            sourceLabels);\n+                                });\n+                            }\n+                        } catch (NuvoException e) {\n+                            error = \"First command after connection failed\";\n+                            logger.debug(\"{}: {}\", error, e.getMessage());\n+                        }\n+                    }\n+                } else {\n+                    error = \"Reconnection failed\";\n+                }\n+                if (error != null) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, error);\n+                    closeConnection();\n+                } else {\n+                    updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE, this.versionString);\n+                }\n+            }\n+        }, 1, RECON_POLLING_INTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the reconnection job\n+     */\n+    private void cancelReconnectJob() {\n+        ScheduledFuture<?> reconnectJob = this.reconnectJob;\n+        if (reconnectJob != null) {\n+            reconnectJob.cancel(true);\n+            this.reconnectJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the polling job\n+     */\n+    private void schedulePollingJob() {\n+        logger.debug(\"Schedule polling job\");\n+        cancelPollingJob();\n+\n+        // when the Nuvo amp is off, this will keep the connection (esp Serial over IP) alive and detect if the\n+        // connection goes down\n+        pollingJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (connector.isConnected()) {\n+                logger.debug(\"Polling the component for updated status...\");\n+\n+                synchronized (sequenceLock) {\n+                    try {\n+                        connector.sendCommand(NuvoCommand.GET_CONTROLLER_VERSION);\n+                    } catch (NuvoException e) {\n+                        logger.debug(\"Polling error: {}\", e.getMessage());\n+                    }\n+\n+                    // if the last event received was more than 1.25 intervals ago,\n+                    // the component is not responding even though the connection is still good\n+                    if ((System.currentTimeMillis() - lastEventReceived) > (POLLING_INTERVAL_SEC * 1.25 * 1000)) {\n+                        logger.debug(\"Component not responding to status requests\");\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Component not responding to status requests\");\n+                        closeConnection();\n+                        scheduleReconnectJob();\n+                    }\n+                }\n+            }\n+        }, INITIAL_POLLING_DELAY_SEC, POLLING_INTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Cancel the polling job\n+     */\n+    private void cancelPollingJob() {\n+        ScheduledFuture<?> pollingJob = this.pollingJob;\n+        if (pollingJob != null) {\n+            pollingJob.cancel(true);\n+            this.pollingJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Schedule the clock sync job\n+     */\n+    private void scheduleClockSyncJob() {\n+        logger.debug(\"Schedule clock sync job\");\n+        cancelClockSyncJob();\n+        clockSyncJob = scheduler.scheduleWithFixedDelay(() -> {\n+            if (this.isGConcerto) {\n+                try {\n+                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyy,MM,dd,HH,mm\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 686}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjkxNzIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoyNjoyOVrOHErNMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTowNDozNVrOHMHfVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA==", "bodyText": "The openHAB serial port handler supports rfc2217? Is there a reason not to use it and instead of having implemented a separate ip connector and configuration options?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r474664240", "createdAt": "2020-08-21T12:26:29Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxOTkxOQ==", "bodyText": "I am not sure as this was pulled in from the rotel binding. I seems like rfc2217 (Telnet Com Port) may be supported to some degree. But there were probably issues, so a distinct connector was defined instead and this check was put in place to prevent an unusable configuration. @lolodomo any ideas?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475019919", "createdAt": "2020-08-22T00:22:30Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY3NzEwNQ==", "bodyText": "RFC2217 through the openhab serial layer never worked in bindings I worked on.\nI am not sure of the reason but my hypothesis was it doesn't work if you need to read and write in parallel.\nBut you are welcome to try with any new binding. Maybe I was just not enough clever to make it work.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475677105", "createdAt": "2020-08-24T14:58:27Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY4MDY2OA==", "bodyText": "This is probably a problem in case you have a reader thread that always read data.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475680668", "createdAt": "2020-08-24T15:01:34Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkyMTg2MA==", "bodyText": "That makes sense. But I think I will just stick with what works.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r475921860", "createdAt": "2020-08-24T22:08:15Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4MTkyOA==", "bodyText": "@lolodomo Maybe it was related to the endless sleep 'fix' (that could be and was removed during the review process)? Did you ever test after that change?\n@mlobstein Did you test if it worked at all by using the rfc2217 version?", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r476381928", "createdAt": "2020-08-25T11:39:56Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQzMDMxOA==", "bodyText": "@hillbrand: Honestly I don't remember. I even don't remember if I tested that with this binding in particular. But as I am using serial over IP, I could try again one day.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r476430318", "createdAt": "2020-08-25T13:01:56Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MjY2OA==", "bodyText": "@lolodomo Maybe it was related to the endless sleep 'fix' (that could be and was removed during the review process)? Did you ever test after that change?\n@mlobstein Did you test if it worked at all by using the rfc2217 version?\nI did not test it with rfc2217", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r476492668", "createdAt": "2020-08-25T14:27:50Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTYyOTM3Ng==", "bodyText": "If it's not tested or not known if the rfc2217 configuration way doesn't work I would be in favor of removing the specific ip implementation here and allowing the rfcc2217 configuratiin option for serial. Its always possible to add features, but removing them is hard. This also reduces the amount of copy-pasting of specific code.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r479629376", "createdAt": "2020-08-29T09:14:10Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE5MjE1Nw==", "bodyText": "A couple questions...\n\n\nI tried rfc2217 and it seemed to work connecting to a ser2net endpoint after a few changes to the serial connector. I had to conditionally bypass SerialPort.enableReceiveThreshold(), SerialPort.enableReceiveTimeout() & SerialPort.setFlowControlMode() as the calling those with rfc2217 throws an exception. I also had to catch an IllegalStateException that was being thrown if the remote connection was refused or otherwise failed to connect. That being said, are there any bindings that currently support rfc2217 explicitly (as a reference implementation)? I did a quick scan of the 2.5.x bindings and the only references to rfc2217 were in 6 other bindings that blocked its usage during initialization.\n\n\nIf rfc2217 is to be used, does the user need to make the choice to specify the rfc2217 url string in place of the serial port or can this be handled behind the scenes? There seems to be some controversy with setting limitToOptions=false for the serial port in the configuration. openhab/openhab-core#1029 Once this is set to false, the user can type the url string for the rfc2217 connection (rfc2217://:). I feel this is cumbersome and it would be much easier for the user to give them a place to specify IP and port # for the remote serial port and use those to construct the rfc2217 url in the absence of a physical serial port being selected from the drop down.\n@kaikreuzer", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r480192157", "createdAt": "2020-08-31T15:04:57Z", "author": {"login": "mlobstein"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ2NzY3MQ==", "bodyText": "Thank you for extensive testing this. At least we know it works (besides the exception throwing. In know the dsmr binding does also works once the exceptions would be wrapped.). The openhab-core issue 1029 you mentioned was about the possibility to be able to add a network connection. It doesn't even address the usability of it, which is too bad. I also looked at the other bindings. It looks to me this has grown historically. In the past the gnu serial library was used directly, so no rfc2217 support was availble. So that earlier binding implemented their own version of it. Later versions seem to be made by the same person and he copied that implementation. The other bindings seem to add a bridge for ip configuration. I also noted we already approved your oppo binding that does the same.\nSo I'll guess it should be ok to leave it as is here. What I'm planning, is to see if I can get those quircks fixed in core so it behaves the same as other direct serial connections and than see if this makes it possible to remove the custom implementations for ip connections. For example here you could construct the rfc2217 connection fromt host-port input and then use the rfc2217 of core. The configurations can than still remain (with addition that rfc2217 configuration would be allowed on serialPort configuration). But that would not be available before openHAB 3.0.", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r482467671", "createdAt": "2020-09-02T21:04:35Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDI0MA=="}, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjkxODU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoyNjo1N1rOHErODg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjoyNjo1N1rOHErODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NDQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        zonesToRemove.forEach(zone -> {\n          \n          \n            \n                            channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone)));\n          \n          \n            \n                        });\n          \n          \n            \n                        zonesToRemove.forEach(zone -> \n          \n          \n            \n                            channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone)))\n          \n          \n            \n                        );", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r474664462", "createdAt": "2020-08-21T12:26:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/src/main/java/org/openhab/binding/nuvo/internal/handler/NuvoHandler.java", "diffHunk": "@@ -0,0 +1,793 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.nuvo.internal.handler;\n+\n+import static org.openhab.binding.nuvo.internal.NuvoBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Time;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateOption;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.openhab.binding.nuvo.internal.NuvoException;\n+import org.openhab.binding.nuvo.internal.NuvoStateDescriptionOptionProvider;\n+import org.openhab.binding.nuvo.internal.NuvoThingActions;\n+import org.openhab.binding.nuvo.internal.communication.NuvoCommand;\n+import org.openhab.binding.nuvo.internal.communication.NuvoConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoDefaultConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoEnum;\n+import org.openhab.binding.nuvo.internal.communication.NuvoIpConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEvent;\n+import org.openhab.binding.nuvo.internal.communication.NuvoMessageEventListener;\n+import org.openhab.binding.nuvo.internal.communication.NuvoSerialConnector;\n+import org.openhab.binding.nuvo.internal.communication.NuvoStatusCodes;\n+import org.openhab.binding.nuvo.internal.configuration.NuvoThingConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link NuvoHandler} is responsible for handling commands, which are sent to one of the channels.\n+ *\n+ * Based on the Rotel binding by Laurent Garnier\n+ *\n+ * @author Michael Lobstein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NuvoHandler extends BaseThingHandler implements NuvoMessageEventListener {\n+    private static final long RECON_POLLING_INTERVAL_SEC = 60;\n+    private static final long POLLING_INTERVAL_SEC = 30;\n+    private static final long CLOCK_SYNC_INTERVAL_SEC = 3600;\n+    private static final long INITIAL_POLLING_DELAY_SEC = 30;\n+    private static final long INITIAL_CLOCK_SYNC_DELAY_SEC = 10;\n+    // spec says wait 50ms, min is 100\n+    private static final long SLEEP_BETWEEN_CMD_MS = 100;\n+    private static final Unit<Time> API_SECOND_UNIT = SmartHomeUnits.SECOND;\n+\n+    private static final String ZONE = \"ZONE\";\n+    private static final String SOURCE = \"SOURCE\";\n+    private static final String CHANNEL_DELIMIT = \"#\";\n+    private static final String UNDEF = \"UNDEF\";\n+    private static final String GC_STR = \"NV-IG8\";\n+\n+    private static final int MAX_ZONES = 20;\n+    private static final int MAX_SRC = 6;\n+    private static final int MIN_VOLUME = 0;\n+    private static final int MAX_VOLUME = 79;\n+    private static final int MIN_EQ = -18;\n+    private static final int MAX_EQ = 18;\n+\n+    private static final Pattern ZONE_PATTERN = Pattern\n+            .compile(\"^ON,SRC(\\\\d{1}),(MUTE|VOL\\\\d{1,2}),DND([0-1]),LOCK([0-1])$\");\n+    private static final Pattern DISP_PATTERN = Pattern.compile(\"^DISPLINE(\\\\d{1}),\\\"(.*)\\\"$\");\n+    private static final Pattern DISP_INFO_PATTERN = Pattern\n+            .compile(\"^DISPINFO,DUR(\\\\d{1,6}),POS(\\\\d{1,6}),STATUS(\\\\d{1,2})$\");\n+    private static final Pattern ZONE_CFG_PATTERN = Pattern.compile(\"^BASS(.*),TREB(.*),BAL(.*),LOUDCMP([0-1])$\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(NuvoHandler.class);\n+    private final NuvoStateDescriptionOptionProvider stateDescriptionProvider;\n+    private final SerialPortManager serialPortManager;\n+\n+    private @Nullable ScheduledFuture<?> reconnectJob;\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private @Nullable ScheduledFuture<?> clockSyncJob;\n+\n+    private NuvoConnector connector = new NuvoDefaultConnector();\n+    private long lastEventReceived = System.currentTimeMillis();\n+    private int numZones = 1;\n+    private String versionString = BLANK;\n+    private boolean isGConcerto = false;\n+    private Object sequenceLock = new Object();\n+\n+    Set<Integer> activeZones = new HashSet<>(1);\n+\n+    // A state option list for the source labels\n+    List<StateOption> sourceLabels = new ArrayList<>();\n+\n+    /**\n+     * Constructor\n+     */\n+    public NuvoHandler(Thing thing, NuvoStateDescriptionOptionProvider stateDescriptionProvider,\n+            SerialPortManager serialPortManager) {\n+        super(thing);\n+        this.stateDescriptionProvider = stateDescriptionProvider;\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        NuvoThingConfiguration config = getConfigAs(NuvoThingConfiguration.class);\n+        String serialPort = config.serialPort;\n+        String host = config.host;\n+        Integer port = config.port;\n+        Integer numZones = config.numZones;\n+\n+        // Check configuration settings\n+        String configError = null;\n+        if ((serialPort == null || serialPort.isEmpty()) && (host == null || host.isEmpty())) {\n+            configError = \"undefined serialPort and host configuration settings; please set one of them\";\n+        } else if (serialPort != null && (host == null || host.isEmpty())) {\n+            if (serialPort.toLowerCase().startsWith(\"rfc2217\")) {\n+                configError = \"use host and port configuration settings for a serial over IP connection\";\n+            }\n+        } else {\n+            if (port == null) {\n+                configError = \"undefined port configuration setting\";\n+            } else if (port <= 0) {\n+                configError = \"invalid port configuration setting\";\n+            }\n+        }\n+\n+        if (configError != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configError);\n+            return;\n+        }\n+\n+        if (serialPort != null) {\n+            connector = new NuvoSerialConnector(serialPortManager, serialPort);\n+        } else if (port != null) {\n+            connector = new NuvoIpConnector(host, port);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Either Serial port or Host & Port must be specifed\");\n+            return;\n+        }\n+\n+        if (numZones != null) {\n+            this.numZones = numZones;\n+        }\n+\n+        activeZones = IntStream.range((1), (this.numZones + 1)).boxed().collect(Collectors.toSet());\n+\n+        // remove the channels for the zones we are not using\n+        if (this.numZones < MAX_ZONES) {\n+            List<Channel> channels = new ArrayList<>(this.getThing().getChannels());\n+\n+            List<Integer> zonesToRemove = IntStream.range((this.numZones + 1), (MAX_ZONES + 1)).boxed()\n+                    .collect(Collectors.toList());\n+\n+            zonesToRemove.forEach(zone -> {\n+                channels.removeIf(c -> (c.getUID().getId().contains(\"zone\" + zone)));\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5117f7437ea6e07577cd8f3f3f0579dafb450a1f"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjYwMzA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.nuvo/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTowOToxM1rOHMH2kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTowOToxM1rOHMH2kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ3MzYxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>2.5.8-SNAPSHOT</version>\n          \n          \n            \n                <version>2.5.9-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/7651#discussion_r482473617", "createdAt": "2020-09-02T21:09:13Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.nuvo/pom.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.8-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b24299ab696163c5268501908c56b94ac9e4d6"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 21, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}