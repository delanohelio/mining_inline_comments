{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NzgzMzA2", "number": 7396, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDozMjoxN1rOD4SOmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzowNToyNFrOEJwEwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ1NDk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDozMjoxN1rOGPB2_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMToyODowNFrOGPHpuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjI4Ng==", "bodyText": "Do you really need to add another author tag each time?", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418412286", "createdAt": "2020-05-01T04:32:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "diffHunk": "@@ -68,6 +68,7 @@\n  * @author Patrik Gfeller - Timeout for TTS messages increased from 30 to 90s.\n  * @author Mark Hilbush - Get favorites from server and play favorite\n  * @author Mark Hilbush - Convert sound notification volume from channel to config parameter\n+ * @author Mark Hilbush - Add like/unlike functionality", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNzE5Mw==", "bodyText": "No. I typically do it only for changes of some significance.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418507193", "createdAt": "2020-05-01T11:28:04Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "diffHunk": "@@ -68,6 +68,7 @@\n  * @author Patrik Gfeller - Timeout for TTS messages increased from 30 to 90s.\n  * @author Mark Hilbush - Get favorites from server and play favorite\n  * @author Mark Hilbush - Convert sound notification volume from channel to config parameter\n+ * @author Mark Hilbush - Add like/unlike functionality", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjI4Ng=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ1NzM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDozNDowMFrOGPB4Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTozMToyMFrOGPHsvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjYyMg==", "bodyText": "So the command param isn't used? Shouldn't you confirm that the ON command was sent?", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418412622", "createdAt": "2020-05-01T04:34:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "diffHunk": "@@ -289,6 +296,16 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             case CHANNEL_FAVORITES_PLAY:\n                 squeezeBoxServerHandler.playFavorite(mac, command.toString());\n                 break;\n+            case CHANNEL_LIKE:\n+                if (likeCommand != null) {\n+                    squeezeBoxServerHandler.like(mac, likeCommand);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNzk2NQ==", "bodyText": "Yeah, I thought about that, and I probably should check for ON. OTOH, I was trying to be flexible in allowing any command to trigger the operation. I'll add the check.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418507965", "createdAt": "2020-05-01T11:31:20Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "diffHunk": "@@ -289,6 +296,16 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             case CHANNEL_FAVORITES_PLAY:\n                 squeezeBoxServerHandler.playFavorite(mac, command.toString());\n                 break;\n+            case CHANNEL_LIKE:\n+                if (likeCommand != null) {\n+                    squeezeBoxServerHandler.like(mac, likeCommand);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjYyMg=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ2MTkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDozNzoyNVrOGPB67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTozNToyMlrOGPHwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            scheduler.execute(() -> {\n          \n          \n            \n                                updateCustomButtons(mac);\n          \n          \n            \n                            });\n          \n          \n            \n                            scheduler.execute(() -> updateCustomButtons(mac));", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413292", "createdAt": "2020-05-01T04:37:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -836,6 +865,10 @@ private void handlePlaylistMessage(final String mac, String[] messageParts) {\n             String mode;\n             if (action.equals(\"newsong\")) {\n                 mode = \"play\";\n+                // Execute in separate thread to avoid delaying listener\n+                scheduler.execute(() -> {\n+                    updateCustomButtons(mac);\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwODg0OQ==", "bodyText": "Sure. I forgot you can do that.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418508849", "createdAt": "2020-05-01T11:35:22Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -836,6 +865,10 @@ private void handlePlaylistMessage(final String mac, String[] messageParts) {\n             String mode;\n             if (action.equals(\"newsong\")) {\n                 mode = \"play\";\n+                // Execute in separate thread to avoid delaying listener\n+                scheduler.execute(() -> {\n+                    updateCustomButtons(mac);\n+                });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzI5Mg=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ2MzA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDozODoyNVrOGPB7lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxMjo0MlrOGgzd5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scheduler.schedule(() -> {\n          \n          \n            \n                            requestFavorites();\n          \n          \n            \n                        }, 3L, TimeUnit.SECONDS);\n          \n          \n            \n                        scheduler.schedule(this::requestFavorites, 3L, TimeUnit.SECONDS);", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413463", "createdAt": "2020-05-01T04:38:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1023,64 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(() -> {\n+                requestFavorites();\n+            }, 3L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMTU3OA==", "bodyText": "I had actually tried to do it this way initially. Because the requestFavorites method is in SqueezeBoxServerHandler, not the inner class SqueezeServerListener it generates a compiler error. Is there a better way to handle this?", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418511578", "createdAt": "2020-05-01T11:48:26Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1023,64 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(() -> {\n+                requestFavorites();\n+            }, 3L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxMTQ5MA==", "bodyText": "Here's how you can do it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scheduler.schedule(() -> {\n          \n          \n            \n                            requestFavorites();\n          \n          \n            \n                        }, 3L, TimeUnit.SECONDS);\n          \n          \n            \n                        scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r437011490", "createdAt": "2020-06-08T21:27:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1023,64 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(() -> {\n+                requestFavorites();\n+            }, 3L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDg1Mg==", "bodyText": "Ah, thanks.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r437050852", "createdAt": "2020-06-08T23:12:42Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1023,64 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(() -> {\n+                requestFavorites();\n+            }, 3L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ2NDcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDozOToyNlrOGPB8cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTo1MTozOFrOGPH95g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzY4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n          \n          \n            \n                        button.enabled = value != 0;", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413680", "createdAt": "2020-05-01T04:39:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMjM1OA==", "bodyText": "Yep, simpler.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418512358", "createdAt": "2020-05-01T11:51:38Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzY4MA=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ2NDkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDozOTozOFrOGPB8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTo1MjoyNFrOGPH-eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        button.custom = Boolean.TRUE;\n          \n          \n            \n                        button.custom = true;", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413705", "createdAt": "2020-05-01T04:39:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n+        } else if (jsonElement.isJsonObject()) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMjUwNg==", "bodyText": "Changed above, as well.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418512506", "createdAt": "2020-05-01T11:52:24Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n+        } else if (jsonElement.isJsonObject()) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzcwNQ=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ2OTkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDo0Mzo0OVrOGPB_aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTo1NDoyNFrOGPIAEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNDQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<String> commandList = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n          \n          \n            \n                                .map(JsonElement::getAsString).collect(Collectors.toList());\n          \n          \n            \n                        button.command = StringUtils.join(commandList, \" \");\n          \n          \n            \n                        button.command = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n          \n          \n            \n                                .map(JsonElement::getAsString).collect(Collectors.joining(\" \"));", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418414440", "createdAt": "2020-05-01T04:43:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n+        } else if (jsonElement.isJsonObject()) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.TRUE;\n+            button.icon = jsonObject.get(\"icon\").getAsString();\n+            button.jiveStyle = jsonObject.get(\"jiveStyle\").getAsString();\n+            button.toolTip = jsonObject.get(\"tooltip\").getAsString();\n+            List<String> commandList = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n+                    .map(JsonElement::getAsString).collect(Collectors.toList());\n+            button.command = StringUtils.join(commandList, \" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMjkxNA==", "bodyText": "Yeah. Wish I had thought of that. \ud83d\ude09", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418512914", "createdAt": "2020-05-01T11:54:24Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n+        } else if (jsonElement.isJsonObject()) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.TRUE;\n+            button.icon = jsonObject.get(\"icon\").getAsString();\n+            button.jiveStyle = jsonObject.get(\"jiveStyle\").getAsString();\n+            button.toolTip = jsonObject.get(\"tooltip\").getAsString();\n+            List<String> commandList = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n+                    .map(JsonElement::getAsString).collect(Collectors.toList());\n+            button.command = StringUtils.join(commandList, \" \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNDQ0MA=="}, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjU2NjEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoxMDoxM1rOGgyJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxNDoxNVrOGgzfdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTIyMA==", "bodyText": "After reading the above discussion I agree with representing like/unlike with a single command channel. I understand that there might be UI issues regarding dynamic updating but I think it would be the correct direction to go here. For now you can just always provide the \"like/unlike\" commands and just ignore invalid requests.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r437029220", "createdAt": "2020-06-08T22:10:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -298,4 +300,14 @@\n \t\t<description>Number of playlist tracks</description>\n \t\t<state readOnly=\"true\" pattern=\"%d\"></state>\n \t</channel-type>\n+\t<channel-type id=\"like\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Like Song</label>\n+\t\t<description>Likes the current song (if the service supports it)</description>\n+\t</channel-type>\n+\t<channel-type id=\"unlike\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Unlike Song</label>\n+\t\t<description>Unlikes the current song (if the service supports it)</description>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1365cf02a7e2b5eb1455d430e17c678118965874"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MTI1Mg==", "bodyText": "Ok, I'll change it to one channel. That's not an issue. It could go either way.\nBut, I'm not going to use command options because the UI issues are too severe, and there's no support for it in HABpanel.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r437051252", "createdAt": "2020-06-08T23:14:15Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -298,4 +300,14 @@\n \t\t<description>Number of playlist tracks</description>\n \t\t<state readOnly=\"true\" pattern=\"%d\"></state>\n \t</channel-type>\n+\t<channel-type id=\"like\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Like Song</label>\n+\t\t<description>Likes the current song (if the service supports it)</description>\n+\t</channel-type>\n+\t<channel-type id=\"unlike\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Unlike Song</label>\n+\t\t<description>Unlikes the current song (if the service supports it)</description>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTIyMA=="}, "originalCommit": {"oid": "1365cf02a7e2b5eb1455d430e17c678118965874"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjU5NzU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzowMzo1NlrOGqaHTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowMzo0NVrOGrk-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMTIyOQ==", "bodyText": "You should cancel the future this produces in case this handler gets disposed.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r447121229", "createdAt": "2020-06-29T17:03:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1019,62 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0Nzc3OA==", "bodyText": "Ok, done. The isDone may not be necessary, but I added it for completeness.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r448347778", "createdAt": "2020-07-01T13:03:45Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1019,62 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMTIyOQ=="}, "originalCommit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjYwMjg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzowNToyNFrOGqaKoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjoxNzowNlrOGrjbJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMjA4MQ==", "bodyText": "You should specify the charset used here.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r447122081", "createdAt": "2020-06-29T17:05:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -306,6 +331,8 @@ public void login() {\n         if (StringUtils.isEmpty(userId)) {\n             return;\n         }\n+        // Create basic auth string for jsonrpc interface\n+        basicAuthorization = new String(Base64.getEncoder().encode((userId + \":\" + password).getBytes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMyMjM0Mw==", "bodyText": "Ok. Done. BTW there are quite a few places in the code base that don't specify the charset.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r448322343", "createdAt": "2020-07-01T12:17:06Z", "author": {"login": "mhilbush"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -306,6 +331,8 @@ public void login() {\n         if (StringUtils.isEmpty(userId)) {\n             return;\n         }\n+        // Create basic auth string for jsonrpc interface\n+        basicAuthorization = new String(Base64.getEncoder().encode((userId + \":\" + password).getBytes()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMjA4MQ=="}, "originalCommit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 275, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}