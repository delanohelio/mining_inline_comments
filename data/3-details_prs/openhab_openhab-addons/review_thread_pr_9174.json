{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTYxMDAy", "number": 9174, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNTo1NjoyMlrOE-gXeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNzowMVrOFImLBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTc3NDY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNTo1NjoyMlrOH7s0Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNTo1NjoyMlrOH7s0Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MjMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | pollIntervall | Time between polling the data in ms      | Integer | yes      |\n          \n          \n            \n            | pollInterval | Time between polling the data in ms      | Integer | yes      |", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532362326", "createdAt": "2020-11-30T05:56:22Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/README.md", "diffHunk": "@@ -0,0 +1,75 @@\n+# Modbus Saia Burgess Controls Binding\n+\n+This binding interfaces the energy meter series ALD1 by Saia Burgess Controls (SBC) via Modbus.\n+\n+## Supported Things\n+\n+The following Things are supported:\n+\n+- `ald1Unidirectional`: 1-phase 32A one-way energy meter ALD1D5FD00A3A00\n+- `ald1Bidirectional`:  1-phase 32A two-way energy meter ALD1B5FD00A3A00\n+\n+## Discovery\n+\n+This binding does not support discovery.\n+\n+## Thing Configuration\n+\n+The following configuration parameters apply to `ald1Unidirectional` and `ald1Bidirectional`.\n+\n+| Name          | Description                              | Type    | Required |\n+|---------------|------------------------------------------|---------|----------|\n+| address       | Modbus slave address of the energy meter | Integer | yes      |\n+| pollIntervall | Time between polling the data in ms      | Integer | yes      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTc4MDA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNTo1OToyOFrOH7s3gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoyOTowNVrOH9mJIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw==", "bodyText": "What is the -1 here? Would it be readable to follow the terminology of the modbus binding: \"address\" word would be used to refer zero based indices", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532363137", "createdAt": "2020-11-30T05:59:28Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxODgxMw==", "bodyText": "I'm a bit confused, too. The documentation states \"In accordance with the Modbus protocol, a register R is numbered as R - 1 when transmitted.\" page 5 https://www.meterbuy.com/fileadmin/user_upload/Data_sheets/120102_SAIA_-_Data_sheet_26-529_EN_DS_Energy-Meter-ALD1-with-Modbus.pdf\nIs this common to Modbus devices?", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532418813", "createdAt": "2020-11-30T08:29:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMTk4NQ==", "bodyText": "In modbus binding terminology the register address refers to the address number on the wire, i.e. R-1.\nThis is typical source of confusion with Modbus. I even added section in the documentation clarifying the topic: https://www.openhab.org/addons/bindings/modbus/#comment-on-addressing", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r533931985", "createdAt": "2020-12-02T06:47:28Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxNjMzOA==", "bodyText": "I wasn't aware of this fine difference in wording. Changed it to FIRST_READ_REGISTER.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534316338", "createdAt": "2020-12-02T16:42:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzMjc2Mg==", "bodyText": "I would have suggested to keep everything zero based, similar to the other bindings \ud83d\ude05...adding simply a comment referencing device manual\nI think this is OK as well but perhaps good to add comment for posterity that this is 1-based register number, not the zero based address that goes on the wire.\nAlso note the same naming issue with channel definitions.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534332762", "createdAt": "2020-12-02T17:04:25Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MDExNA==", "bodyText": "Actually I always use zero-based numbers where possible, but my goal here was to use the same numbers in the constants as in the device's documentation. I added a comment and changed the wording in the enum.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534350114", "createdAt": "2020-12-02T17:29:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2MzEzNw=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTc4Njk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjowMjo1NFrOH7s7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoyOTowN1rOH7wRPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA0NQ==", "bodyText": "Unnecessary? You could construct QuantityType using the DecimalType without intermediate conversion to float", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532364045", "createdAt": "2020-11-30T06:02:54Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        registerRegularPoll(localBlueprint, config.pollInterval, 0, this::readSuccessful, this::readError);\n+    }\n+\n+    private void readSuccessful(AsyncModbusReadResult result) {\n+        result.getRegisters().ifPresent(registers -> {\n+            if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            for (ALD1Registers channel : ALD1Registers.values()) {\n+                int index = channel.getRegisterAddress() - FIRST_READ_ADDRESS;\n+\n+                ModbusBitUtilities.extractStateFromRegisters(registers, index, channel.getType())\n+                        .map(DecimalType::floatValue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxODg3Ng==", "bodyText": "I need to apply a multiplier before converting it to QuantityType. Do you have a suggestion?", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532418876", "createdAt": "2020-11-30T08:29:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        registerRegularPoll(localBlueprint, config.pollInterval, 0, this::readSuccessful, this::readError);\n+    }\n+\n+    private void readSuccessful(AsyncModbusReadResult result) {\n+        result.getRegisters().ifPresent(registers -> {\n+            if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            for (ALD1Registers channel : ALD1Registers.values()) {\n+                int index = channel.getRegisterAddress() - FIRST_READ_ADDRESS;\n+\n+                ModbusBitUtilities.extractStateFromRegisters(registers, index, channel.getType())\n+                        .map(DecimalType::floatValue)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDA0NQ=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTc5MjQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjowNTozNVrOH7s-BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoyOToxMlrOH7wRcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDgwNA==", "bodyText": "Same index as above?", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532364804", "createdAt": "2020-11-30T06:05:35Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxODkzMA==", "bodyText": "They are for distinct Thing types. I added a comment.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532418930", "createdAt": "2020-11-30T08:29:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NDgwNA=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTgwNjI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjoxMjoxMVrOH7tFcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwODoyOToxOVrOH7wRrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NjcwNQ==", "bodyText": "This is already specified in the parent serial thing, I think it makes sense to use it from there and remove this parameter.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532366705", "createdAt": "2020-11-30T06:12:11Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/README.md", "diffHunk": "@@ -0,0 +1,75 @@\n+# Modbus Saia Burgess Controls Binding\n+\n+This binding interfaces the energy meter series ALD1 by Saia Burgess Controls (SBC) via Modbus.\n+\n+## Supported Things\n+\n+The following Things are supported:\n+\n+- `ald1Unidirectional`: 1-phase 32A one-way energy meter ALD1D5FD00A3A00\n+- `ald1Bidirectional`:  1-phase 32A two-way energy meter ALD1B5FD00A3A00\n+\n+## Discovery\n+\n+This binding does not support discovery.\n+\n+## Thing Configuration\n+\n+The following configuration parameters apply to `ald1Unidirectional` and `ald1Bidirectional`.\n+\n+| Name          | Description                              | Type    | Required |\n+|---------------|------------------------------------------|---------|----------|\n+| address       | Modbus slave address of the energy meter | Integer | yes      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQxODk5MQ==", "bodyText": "Great hint! To retrieve the slave address I modified the BaseModbusThingHandler. This was missing in the current implementation.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532418991", "createdAt": "2020-11-30T08:29:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/README.md", "diffHunk": "@@ -0,0 +1,75 @@\n+# Modbus Saia Burgess Controls Binding\n+\n+This binding interfaces the energy meter series ALD1 by Saia Burgess Controls (SBC) via Modbus.\n+\n+## Supported Things\n+\n+The following Things are supported:\n+\n+- `ald1Unidirectional`: 1-phase 32A one-way energy meter ALD1D5FD00A3A00\n+- `ald1Bidirectional`:  1-phase 32A two-way energy meter ALD1B5FD00A3A00\n+\n+## Discovery\n+\n+This binding does not support discovery.\n+\n+## Thing Configuration\n+\n+The following configuration parameters apply to `ald1Unidirectional` and `ald1Bidirectional`.\n+\n+| Name          | Description                              | Type    | Required |\n+|---------------|------------------------------------------|---------|----------|\n+| address       | Modbus slave address of the energy meter | Integer | yes      |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NjcwNQ=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTgwOTI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjoxMzo0OFrOH7tHGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjoxMzo0OFrOH7tHGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NzEzMA==", "bodyText": "Remove (see comment above)", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532367130", "createdAt": "2020-11-30T06:13:48Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:modbus-sbc:ald1\">\n+\t\t<parameter name=\"address\" type=\"integer\" required=\"true\" min=\"1\" max=\"247\">\n+\t\t\t<label>Modbus Address</label>\n+\t\t\t<description>Modbus slave address of the energy meter.</description>\n+\t\t\t<default>1</default>\n+\t\t</parameter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzOTgxMDUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjoxNDoyOVrOH7tHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjoxNDoyOVrOH7tHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM2NzI5Ng==", "bodyText": "Add unit information", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r532367296", "createdAt": "2020-11-30T06:14:29Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:modbus-sbc:ald1\">\n+\t\t<parameter name=\"address\" type=\"integer\" required=\"true\" min=\"1\" max=\"247\">\n+\t\t\t<label>Modbus Address</label>\n+\t\t\t<description>Modbus slave address of the energy meter.</description>\n+\t\t\t<default>1</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"pollInterval\" type=\"integer\" required=\"true\" min=\"100\" unit=\"ms\">\n+\t\t\t<label>Poll Interval</label>\n+\t\t\t<description>Time between polling the data.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTk0ODIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1NDoxOVrOH9Mxcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjo1NzoyNVrOH9kxBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDQ1MA==", "bodyText": "Would this work?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .map(DecimalType::floatValue)\n          \n          \n            \n                                    .map(v -> QuantityType.valueOf(v * channel.getMultiplier(), channel.getUnit()))\n          \n          \n            \n                                    .map(decimalState -> new QuantityType(decimalState.toBigDecimal().multiply(new BigDecimal(multiplier)), channel.getUnit()))\n          \n      \n    \n    \n  \n\nIt's a minor cosmetic change to the original but avoids floating point conversions.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r533934450", "createdAt": "2020-12-02T06:54:19Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        registerRegularPoll(localBlueprint, config.pollInterval, 0, this::readSuccessful, this::readError);\n+    }\n+\n+    private void readSuccessful(AsyncModbusReadResult result) {\n+        result.getRegisters().ifPresent(registers -> {\n+            if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            for (ALD1Registers channel : ALD1Registers.values()) {\n+                int index = channel.getRegisterAddress() - FIRST_READ_ADDRESS;\n+\n+                ModbusBitUtilities.extractStateFromRegisters(registers, index, channel.getType())\n+                        .map(DecimalType::floatValue)\n+                        .map(v -> QuantityType.valueOf(v * channel.getMultiplier(), channel.getUnit()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMyNzU1OQ==", "bodyText": "Yes, I'm staying in the BigDecimal domain, now.", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534327559", "createdAt": "2020-12-02T16:57:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Handler.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.modbus.handler.BaseModbusThingHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.io.transport.modbus.AsyncModbusFailure;\n+import org.openhab.io.transport.modbus.AsyncModbusReadResult;\n+import org.openhab.io.transport.modbus.ModbusBitUtilities;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+\n+/**\n+ * The {@link ALD1Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ALD1Handler extends BaseModbusThingHandler {\n+    private static final int FIRST_READ_ADDRESS = 28;\n+    private static final int READ_LENGTH = 13;\n+    private static final int TRIES = 1;\n+    private ALD1Configuration config = new ALD1Configuration();\n+    private @Nullable ModbusReadRequestBlueprint blueprint;\n+\n+    public ALD1Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        ModbusReadRequestBlueprint localBlueprint = blueprint;\n+        if (command instanceof RefreshType && localBlueprint != null) {\n+            submitOneTimePoll(localBlueprint, this::readSuccessful, this::readError);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(ALD1Configuration.class);\n+\n+        if (config.pollInterval <= 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Invalid poll interval: \" + config.pollInterval);\n+            return;\n+        }\n+\n+        ModbusReadRequestBlueprint localBlueprint = blueprint = new ModbusReadRequestBlueprint(config.address,\n+                ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS, FIRST_READ_ADDRESS - 1, READ_LENGTH, TRIES);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        registerRegularPoll(localBlueprint, config.pollInterval, 0, this::readSuccessful, this::readError);\n+    }\n+\n+    private void readSuccessful(AsyncModbusReadResult result) {\n+        result.getRegisters().ifPresent(registers -> {\n+            if (getThing().getStatus() != ThingStatus.ONLINE) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+\n+            for (ALD1Registers channel : ALD1Registers.values()) {\n+                int index = channel.getRegisterAddress() - FIRST_READ_ADDRESS;\n+\n+                ModbusBitUtilities.extractStateFromRegisters(registers, index, channel.getType())\n+                        .map(DecimalType::floatValue)\n+                        .map(v -> QuantityType.valueOf(v * channel.getMultiplier(), channel.getUnit()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDQ1MA=="}, "originalCommit": {"oid": "dcdb2434bbb98ba47aa0d3d87ba3707eb42578a1"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjUzMjg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMjowM1rOH9laig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowNDoxN1rOH9nmGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODE4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n          \n          \n            \n                PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n          \n          \n            \n                FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n          \n          \n            \n                VOLTAGE(1, 36, UINT16, SmartHomeUnits.VOLT),\n          \n          \n            \n                CURRENT(0.1f, 37, UINT16, SmartHomeUnits.AMPERE),\n          \n          \n            \n                ACTIVE_POWER(10, 38, INT16, SmartHomeUnits.WATT),\n          \n          \n            \n                REACTIVE_POWER(10, 39, INT16, SmartHomeUnits.VAR),\n          \n          \n            \n                POWER_FACTOR(0.01f, 40, UINT16, SmartHomeUnits.ONE);\n          \n          \n            \n            \n          \n          \n            \n                private BigDecimal multiplier;\n          \n          \n            \n                private int registerAddress;\n          \n          \n            \n                private ModbusConstants.ValueType type;\n          \n          \n            \n                private Unit<?> unit;\n          \n          \n            \n            \n          \n          \n            \n                private ALD1Registers(float multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n          \n          \n            \n                    this.multiplier = new BigDecimal(multiplier);\n          \n          \n            \n                TOTAL_ENERGY(\"0.01\", 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n          \n          \n            \n                PARTIAL_ENERGY(\"0.01\", 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n          \n          \n            \n                FEEDING_BACK_ENERGY(\"0.01\", 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n          \n          \n            \n                VOLTAGE(\"1\", 36, UINT16, SmartHomeUnits.VOLT),\n          \n          \n            \n                CURRENT(\"0.1\", 37, UINT16, SmartHomeUnits.AMPERE),\n          \n          \n            \n                ACTIVE_POWER(\"10\", 38, INT16, SmartHomeUnits.WATT),\n          \n          \n            \n                REACTIVE_POWER(\"10\", 39, INT16, SmartHomeUnits.VAR),\n          \n          \n            \n                POWER_FACTOR(\"0.01\", 40, UINT16, SmartHomeUnits.ONE);\n          \n          \n            \n            \n          \n          \n            \n                private BigDecimal multiplier;\n          \n          \n            \n                private int registerAddress;\n          \n          \n            \n                private ModbusConstants.ValueType type;\n          \n          \n            \n                private Unit<?> unit;\n          \n          \n            \n            \n          \n          \n            \n                private ALD1Registers(String multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n          \n          \n            \n                    this.multiplier = new BigDecimal(multiplier);\n          \n      \n    \n    \n  \n\nJust a cosmetic suggestion\nWith this change you would have \"neat\" finite numbers since big decimal operate in 10-base. See https://stackoverflow.com/questions/7408566/java-double-value-0-01-changes-to-0-009999999999999787\nFeel free to ignore this comment :)", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534338186", "createdAt": "2020-12-02T17:12:03Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import java.math.BigDecimal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n+    VOLTAGE(1, 36, UINT16, SmartHomeUnits.VOLT),\n+    CURRENT(0.1f, 37, UINT16, SmartHomeUnits.AMPERE),\n+    ACTIVE_POWER(10, 38, INT16, SmartHomeUnits.WATT),\n+    REACTIVE_POWER(10, 39, INT16, SmartHomeUnits.VAR),\n+    POWER_FACTOR(0.01f, 40, UINT16, SmartHomeUnits.ONE);\n+\n+    private BigDecimal multiplier;\n+    private int registerAddress;\n+    private ModbusConstants.ValueType type;\n+    private Unit<?> unit;\n+\n+    private ALD1Registers(float multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n+        this.multiplier = new BigDecimal(multiplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec282de6389adc506a1a865072f3a32ddbb4018"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM0NjA1OQ==", "bodyText": "I understand, but it seems more odd to me to have these numeric constants as strings...", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534346059", "createdAt": "2020-12-02T17:23:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import java.math.BigDecimal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n+    VOLTAGE(1, 36, UINT16, SmartHomeUnits.VOLT),\n+    CURRENT(0.1f, 37, UINT16, SmartHomeUnits.AMPERE),\n+    ACTIVE_POWER(10, 38, INT16, SmartHomeUnits.WATT),\n+    REACTIVE_POWER(10, 39, INT16, SmartHomeUnits.VAR),\n+    POWER_FACTOR(0.01f, 40, UINT16, SmartHomeUnits.ONE);\n+\n+    private BigDecimal multiplier;\n+    private int registerAddress;\n+    private ModbusConstants.ValueType type;\n+    private Unit<?> unit;\n+\n+    private ALD1Registers(float multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n+        this.multiplier = new BigDecimal(multiplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODE4Ng=="}, "originalCommit": {"oid": "3ec282de6389adc506a1a865072f3a32ddbb4018"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MzkxNQ==", "bodyText": "Yup.. No way around the strings really if we want stay fully in BigDecimal domain.\nAs said, feel free to ignore this comment, makes little practical difference really", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r534373915", "createdAt": "2020-12-02T18:04:17Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/java/org/openhab/binding/modbus/sbc/internal/ALD1Registers.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.sbc.internal;\n+\n+import static org.openhab.io.transport.modbus.ModbusConstants.ValueType.*;\n+\n+import java.math.BigDecimal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.io.transport.modbus.ModbusConstants;\n+import org.openhab.io.transport.modbus.ModbusConstants.ValueType;\n+\n+/**\n+ * The {@link ALD1Registers} is responsible for defining Modbus registers and their units.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum ALD1Registers {\n+    TOTAL_ENERGY(0.01f, 28, UINT32, SmartHomeUnits.KILOWATT_HOUR),\n+    PARTIAL_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only unidirectional meters\n+    FEEDING_BACK_ENERGY(0.01f, 30, UINT32, SmartHomeUnits.KILOWATT_HOUR), // only bidirectional meters\n+    VOLTAGE(1, 36, UINT16, SmartHomeUnits.VOLT),\n+    CURRENT(0.1f, 37, UINT16, SmartHomeUnits.AMPERE),\n+    ACTIVE_POWER(10, 38, INT16, SmartHomeUnits.WATT),\n+    REACTIVE_POWER(10, 39, INT16, SmartHomeUnits.VAR),\n+    POWER_FACTOR(0.01f, 40, UINT16, SmartHomeUnits.ONE);\n+\n+    private BigDecimal multiplier;\n+    private int registerAddress;\n+    private ModbusConstants.ValueType type;\n+    private Unit<?> unit;\n+\n+    private ALD1Registers(float multiplier, int registerAddress, ValueType type, Unit<?> unit) {\n+        this.multiplier = new BigDecimal(multiplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODE4Ng=="}, "originalCommit": {"oid": "3ec282de6389adc506a1a865072f3a32ddbb4018"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTU4MzQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNzowMVrOIKmk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNTo1NjowN1rOIdn-1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODcyNQ==", "bodyText": "You may want to consider adding support for the RTU over TCP ( #9435 ) by adding the following here..\n<bridge-type-ref id=\"tcp\"/>", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r547988725", "createdAt": "2020-12-23T14:37:01Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"modbus\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"ald1Unidirectional\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"serial\"/>\n+\t\t</supported-bridge-type-refs>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAwNjg2MQ==", "bodyText": "I agree. People can use serial/ethernet gateways (passing modbus rtu over tcp) or modbus gateways (converting modbus rtu to modbus tcp) with these devices", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r548006861", "createdAt": "2020-12-23T15:15:31Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"modbus\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"ald1Unidirectional\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"serial\"/>\n+\t\t</supported-bridge-type-refs>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODcyNQ=="}, "originalCommit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODAwODUxMQ==", "bodyText": "I wasn't aware this is possible. Thanks!", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r548008511", "createdAt": "2020-12-23T15:18:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"modbus\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"ald1Unidirectional\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"serial\"/>\n+\t\t</supported-bridge-type-refs>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODcyNQ=="}, "originalCommit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NzkzNDY3Nw==", "bodyText": "Is adding tcp bridge something that will be added here?", "url": "https://github.com/openhab/openhab-addons/pull/9174#discussion_r567934677", "createdAt": "2021-02-01T15:56:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.sbc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"modbus\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"ald1Unidirectional\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"serial\"/>\n+\t\t</supported-bridge-type-refs>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODcyNQ=="}, "originalCommit": {"oid": "8bac3909e642c164262def8ae57e63074273dad3"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3750, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}