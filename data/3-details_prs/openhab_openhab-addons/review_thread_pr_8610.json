{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MTc4ODgw", "number": 8610, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTowNjo1MlrOEsMoYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QyMjo1NDowN1rOFSQkSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzc5NzQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTowNjo1MlrOHfYoKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTowNjo1MlrOHfYoKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3MTQwMQ==", "bodyText": "What do you mean by \"two thing types\"?", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r502671401", "createdAt": "2020-10-09T21:06:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# Govee\n+\n+This extension adds support for [Govee](https://www.govee.com/) Bluetooth Devices. \n+\n+## Supported Things\n+\n+Only two thing types are supported by this extension at the moment. More may be added later.\n+\n+| Thing Type ID | Description                                     |\n+|---------------|-------------------------------------------------|\n+| govee_h5051   | Govee Wi-Fi Temperature Humidity Monitor        |\n+| govee_h5052   | Govee Temperature Humidity Monitor              |\n+| govee_h5071   | Govee Temperature Humidity Monitor              |\n+| govee_h5072   | Govee Temperature Humidity Monitor              |\n+| govee_h5074   | Govee Mini Temperature Humidity Monitor         |\n+| govee_h5075   | Govee Temperature Humidity Monitor              |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7f008461ccc90e3cd66c773ca0dc1ee6c55f67"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzgxMjI3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToxMzoxNFrOHfYxAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToxMzoxNFrOHfYxAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3MzY2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(immediate = true, service = BluetoothDiscoveryParticipant.class)\n          \n          \n            \n            @Component(service = BluetoothDiscoveryParticipant.class)", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r502673665", "createdAt": "2020-10-09T21:13:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryDevice;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link GoveeDiscoveryParticipant} handles discovery of Govee bluetooth devices\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true, service = BluetoothDiscoveryParticipant.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7f008461ccc90e3cd66c773ca0dc1ee6c55f67"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzgyODQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMDowM1rOHfY6uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMDowM1rOHfY6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3NjE1Mg==", "bodyText": "Is this Channel used? Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r502676152", "createdAt": "2020-10-09T21:20:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,188 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"govee_H5051\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Thermometer</label>\n+\t\t<description>A Govee Thermometer</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7f008461ccc90e3cd66c773ca0dc1ee6c55f67"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzgzMzk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMjoxOFrOHfY98g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMjoxOFrOHfY98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3Njk3OA==", "bodyText": "You could define a config reference to get rid of the redundant config-descriptions.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r502676978", "createdAt": "2020-10-09T21:22:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,188 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"govee_H5051\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Thermometer</label>\n+\t\t<description>A Govee Thermometer</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee_temperature\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"govee_humidity\"/>\n+\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t</config-description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a7f008461ccc90e3cd66c773ca0dc1ee6c55f67"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTE4NDYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo0MzowN1rOH_dVkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyNTo1NFrOH_l2Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMjk5NQ==", "bodyText": "What's the purpose of the asterisk? Is the offset \u00b0F or \u00b0C?", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536302995", "createdAt": "2020-12-04T18:43:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Govee\n+\n+This extension adds support for [Govee](https://www.govee.com/) Bluetooth Devices. \n+\n+## Supported Things\n+\n+Only two thing types are supported by this extension at the moment.\n+\n+| Thing Type ID          | Description                               | Supported Models                                            |\n+|------------------------|-------------------------------------------|-------------------------------------------------------------|\n+| goveeHygrometer        | Govee Thermo-Hygrometer                   | H5051,H5071                                                 |\n+| goveeHygrometerMonitor | Govee Thermo-Hygrometer w/ Warning Alarms | H5052,H5072,H5074,H5075,H5101,H5102,H5177,H5179,B5175,B5178 |\n+\n+## Discovery\n+\n+As any other Bluetooth device, Govee devices are discovered automatically by the corresponding bridge. \n+\n+## Thing Configuration\n+\n+Govee things have the following configuration parameters:\n+\n+| Thing                  | Parameter               | Required | Default     | Description                                                               |\n+|------------------------|-------------------------|----------|-------------|---------------------------------------------------------------------------|\n+| all                    | address                 | yes      |             | The Bluetooth address of the device (in format \"XX:XX:XX:XX:XX:XX\")       |\n+| all                    | refreshInterval         |          | 300         | How often, in seconds, the sensor data of the device should be refreshed  |\n+| goveeHygrometer*       | temperatureCalibration  | no       |             | Offset to apply to temperature sensor readings                            |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyMzQwNg==", "bodyText": "The asterisk means that the config is available to both goveeHydrometer and the goveeHydrometerMonitor thing types. I'll make it more explicit in the readme.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536423406", "createdAt": "2020-12-04T22:33:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Govee\n+\n+This extension adds support for [Govee](https://www.govee.com/) Bluetooth Devices. \n+\n+## Supported Things\n+\n+Only two thing types are supported by this extension at the moment.\n+\n+| Thing Type ID          | Description                               | Supported Models                                            |\n+|------------------------|-------------------------------------------|-------------------------------------------------------------|\n+| goveeHygrometer        | Govee Thermo-Hygrometer                   | H5051,H5071                                                 |\n+| goveeHygrometerMonitor | Govee Thermo-Hygrometer w/ Warning Alarms | H5052,H5072,H5074,H5075,H5101,H5102,H5177,H5179,B5175,B5178 |\n+\n+## Discovery\n+\n+As any other Bluetooth device, Govee devices are discovered automatically by the corresponding bridge. \n+\n+## Thing Configuration\n+\n+Govee things have the following configuration parameters:\n+\n+| Thing                  | Parameter               | Required | Default     | Description                                                               |\n+|------------------------|-------------------------|----------|-------------|---------------------------------------------------------------------------|\n+| all                    | address                 | yes      |             | The Bluetooth address of the device (in format \"XX:XX:XX:XX:XX:XX\")       |\n+| all                    | refreshInterval         |          | 300         | How often, in seconds, the sensor data of the device should be refreshed  |\n+| goveeHygrometer*       | temperatureCalibration  | no       |             | Offset to apply to temperature sensor readings                            |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMjk5NQ=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjQ2Mg==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536442462", "createdAt": "2020-12-04T23:25:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Govee\n+\n+This extension adds support for [Govee](https://www.govee.com/) Bluetooth Devices. \n+\n+## Supported Things\n+\n+Only two thing types are supported by this extension at the moment.\n+\n+| Thing Type ID          | Description                               | Supported Models                                            |\n+|------------------------|-------------------------------------------|-------------------------------------------------------------|\n+| goveeHygrometer        | Govee Thermo-Hygrometer                   | H5051,H5071                                                 |\n+| goveeHygrometerMonitor | Govee Thermo-Hygrometer w/ Warning Alarms | H5052,H5072,H5074,H5075,H5101,H5102,H5177,H5179,B5175,B5178 |\n+\n+## Discovery\n+\n+As any other Bluetooth device, Govee devices are discovered automatically by the corresponding bridge. \n+\n+## Thing Configuration\n+\n+Govee things have the following configuration parameters:\n+\n+| Thing                  | Parameter               | Required | Default     | Description                                                               |\n+|------------------------|-------------------------|----------|-------------|---------------------------------------------------------------------------|\n+| all                    | address                 | yes      |             | The Bluetooth address of the device (in format \"XX:XX:XX:XX:XX:XX\")       |\n+| all                    | refreshInterval         |          | 300         | How often, in seconds, the sensor data of the device should be refreshed  |\n+| goveeHygrometer*       | temperatureCalibration  | no       |             | Offset to apply to temperature sensor readings                            |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMjk5NQ=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTIwNjI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/feature/feature.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo0ODozMVrOH_dhxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzo0MTo0OFrOH_mJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNjExNg==", "bodyText": "You use \"extension\", \"adapter\" and \"binding\" for this code in different places.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536306116", "createdAt": "2020-12-04T18:48:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+\tCopyright (c) 2010-2020 Contributors to the openHAB project\n+\n+\tSee the NOTICE file(s) distributed with this work for additional\n+\tinformation.\n+\n+\tThis program and the accompanying materials are made available under the\n+\tterms of the Eclipse Public License 2.0 which is available at\n+\thttp://www.eclipse.org/legal/epl-2.0\n+\n+\tSPDX-License-Identifier: EPL-2.0\n+\n+-->\n+<features name=\"org.openhab.binding.bluetooth.govee-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-bluetooth-govee\" description=\"Bluetooth Binding Govee\" version=\"${project.version}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NzI0Mw==", "bodyText": "That is kinda the case for all of the bluetooth bindings...\n\"extension\" refers to the fact that the binding adds functionality to the base bluetooth bindings.\n\"adapter\"  is used the pom.xml as part of the project name. But strictly speaking I don't really think this is appropriate and the word should probably be changed to extension instead. But this standard was in place for all of the other bluetooth bindings so if I'm going to change it it should be a separate PR.\nI do agree with you that these naming conventions are a bit confusing and I would love to change them at some point.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536447243", "createdAt": "2020-12-04T23:41:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+\tCopyright (c) 2010-2020 Contributors to the openHAB project\n+\n+\tSee the NOTICE file(s) distributed with this work for additional\n+\tinformation.\n+\n+\tThis program and the accompanying materials are made available under the\n+\tterms of the Eclipse Public License 2.0 which is available at\n+\thttp://www.eclipse.org/legal/epl-2.0\n+\n+\tSPDX-License-Identifier: EPL-2.0\n+\n+-->\n+<features name=\"org.openhab.binding.bluetooth.govee-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-bluetooth-govee\" description=\"Bluetooth Binding Govee\" version=\"${project.version}\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNjExNg=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTIyMzU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1Mjo1OFrOH_drmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyNTo0NVrOH_l2Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwODYzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int idleDisconnectDelay = 1000;\n          \n          \n            \n                private int idleDisconnectDelayMs = 1000;", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536308632", "createdAt": "2020-12-04T18:52:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjM5OA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536442398", "createdAt": "2020-12-04T23:25:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwODYzMg=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTIyNjkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1Mzo0NVrOH_dtfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyNjowMlrOH_l2gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwOTExNw==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536309117", "createdAt": "2020-12-04T18:53:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;\n+\n+    protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n+    private volatile boolean servicesDiscovered;\n+\n+    public ConnectedBluetoothHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+\n+        // super.initialize adds callbacks that might require the connectionTaskExecutor to be present, so we initialize\n+        // the connectionTaskExecutor first\n+        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1,\n+                new NamedThreadFactory(\"bluetooth-connection-\" + thing.getThingTypeUID(), true));\n+        executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        executor.setRemoveOnCancelPolicy(true);\n+        connectionTaskExecutor = executor;\n+\n+        super.initialize();\n+\n+        // Object connectOnDemandRaw = getConfig().get(BluetoothBindingConstants.CONFIGURATION_CONNECT_ON_DEMAND);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjQ5Nw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536442497", "createdAt": "2020-12-04T23:26:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;\n+\n+    protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n+    private volatile boolean servicesDiscovered;\n+\n+    public ConnectedBluetoothHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+\n+        // super.initialize adds callbacks that might require the connectionTaskExecutor to be present, so we initialize\n+        // the connectionTaskExecutor first\n+        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1,\n+                new NamedThreadFactory(\"bluetooth-connection-\" + thing.getThingTypeUID(), true));\n+        executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        executor.setRemoveOnCancelPolicy(true);\n+        connectionTaskExecutor = executor;\n+\n+        super.initialize();\n+\n+        // Object connectOnDemandRaw = getConfig().get(BluetoothBindingConstants.CONFIGURATION_CONNECT_ON_DEMAND);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwOTExNw=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTI0Mzk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1Nzo1OFrOH_d3SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyNjowOFrOH_l2og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTYyNA==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536311624", "createdAt": "2020-12-04T18:57:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;\n+\n+    protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n+    private volatile boolean servicesDiscovered;\n+\n+    public ConnectedBluetoothHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+\n+        // super.initialize adds callbacks that might require the connectionTaskExecutor to be present, so we initialize\n+        // the connectionTaskExecutor first\n+        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1,\n+                new NamedThreadFactory(\"bluetooth-connection-\" + thing.getThingTypeUID(), true));\n+        executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        executor.setRemoveOnCancelPolicy(true);\n+        connectionTaskExecutor = executor;\n+\n+        super.initialize();\n+\n+        // Object connectOnDemandRaw = getConfig().get(BluetoothBindingConstants.CONFIGURATION_CONNECT_ON_DEMAND);\n+        connectOnDemand = true;\n+\n+        Object idleDisconnectDelayRaw = getConfig().get(\"idleDisconnectDelay\");\n+        idleDisconnectDelay = 1000;\n+        if (idleDisconnectDelayRaw instanceof Number) {\n+            idleDisconnectDelay = ((Number) idleDisconnectDelayRaw).intValue();\n+        }\n+\n+        if (!connectOnDemand) {\n+            reconnectJob = executor.scheduleWithFixedDelay(() -> {\n+                try {\n+                    if (device.getConnectionState() != ConnectionState.CONNECTED) {\n+                        device.connect();\n+                        // we do not set the Thing status here, because we will anyhow receive a call to\n+                        // onConnectionStateChange\n+                    } else {\n+                        // just in case it was already connected to begin with\n+                        updateStatus(ThingStatus.ONLINE);\n+                        if (!servicesDiscovered && !device.discoverServices()) {\n+                            logger.debug(\"Error while discovering services\");\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    logger.warn(\"Unexpected error occurred\", ex);\n+                }\n+            }, 0, 30, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancel(reconnectJob);\n+        reconnectJob = null;\n+        cancel(pendingDisconnect);\n+        pendingDisconnect = null;\n+\n+        super.dispose();\n+\n+        shutdown(connectionTaskExecutor);\n+        connectionTaskExecutor = null;\n+    }\n+\n+    private static void cancel(@Nullable Future<?> future) {\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+    }\n+\n+    private void shutdown(@Nullable ScheduledExecutorService executor) {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    private ScheduledExecutorService getConnectionTaskExecutor() {\n+        var executor = connectionTaskExecutor;\n+        if (executor == null) {\n+            throw new IllegalStateException(\"characteristicScheduler has not been initialized\");\n+        }\n+        return executor;\n+    }\n+\n+    private void scheduleDisconnect() {\n+        cancel(pendingDisconnect);\n+        pendingDisconnect = getConnectionTaskExecutor().schedule(device::disconnect, idleDisconnectDelay,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void connectAndWait() throws ConnectionException, TimeoutException, InterruptedException {\n+        if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+            return;\n+        }\n+        if (device.getConnectionState() != ConnectionState.CONNECTING) {\n+            if (!device.connect()) {\n+                throw new ConnectionException(\"Failed to start connecting\");\n+            }\n+        }\n+        logger.debug(\"waiting for connection\");\n+        if (!awaitConnection(1, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Connection attempt timeout.\");\n+        }\n+        logger.debug(\"connection successful\");\n+        if (!servicesDiscovered) {\n+            logger.debug(\"discovering services\");\n+            device.discoverServices();\n+            if (!awaitServiceDiscovery(20, TimeUnit.SECONDS)) {\n+                throw new TimeoutException(\"Service discovery timeout\");\n+            }\n+            logger.debug(\"service discovery successful\");\n+        }\n+    }\n+\n+    private boolean awaitConnection(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (device.getConnectionState() != ConnectionState.CONNECTED) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = connectionCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private boolean awaitCharacteristicComplete(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (ongoingCharacteristic != null) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = charCompleteCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private boolean awaitServiceDiscovery(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (!servicesDiscovered) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = serviceDiscoveryCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private BluetoothCharacteristic connectAndGetCharacteristic(UUID serviceUUID, UUID characteristicUUID)\n+            throws BluetoothException, TimeoutException, InterruptedException {\n+        connectAndWait();\n+        BluetoothService service = device.getServices(serviceUUID);\n+        if (service == null) {\n+            throw new BluetoothException(\"Service with uuid \" + serviceUUID + \" could not be found\");\n+        }\n+        BluetoothCharacteristic characteristic = service.getCharacteristic(characteristicUUID);\n+        if (characteristic == null) {\n+            throw new BluetoothException(\"Characteristic with uuid \" + characteristicUUID + \" could not be found\");\n+        }\n+        return characteristic;\n+    }\n+\n+    private <T> CompletableFuture<T> executeWithConnection(UUID serviceUUID, UUID characteristicUUID,\n+            CallableFunction<BluetoothCharacteristic, T> callable) {\n+        CompletableFuture<T> future = new CompletableFuture<>();\n+        var executor = connectionTaskExecutor;\n+        if (executor != null) {\n+            executor.execute(() -> {\n+                cancel(pendingDisconnect);\n+                try {\n+                    BluetoothCharacteristic characteristic = connectAndGetCharacteristic(serviceUUID,\n+                            characteristicUUID);\n+                    future.complete(callable.call(characteristic));\n+                } catch (InterruptedException e) {\n+                    future.completeExceptionally(e);\n+                    return;// we don't want to schedule anything if we receive an interrupt\n+                } catch (TimeoutException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                    future.completeExceptionally(e);\n+                } catch (Exception e) {\n+                    future.completeExceptionally(e);\n+                }\n+                if (connectOnDemand) {\n+                    scheduleDisconnect();\n+                }\n+            });\n+        } else {\n+            future.completeExceptionally(new IllegalStateException(\"characteristicScheduler has not been initialized\"));\n+        }\n+        return future;\n+    }\n+\n+    public CompletableFuture<@Nullable Void> enableNotifications(UUID serviceUUID, UUID characteristicUUID) {\n+        return executeWithConnection(serviceUUID, characteristicUUID, characteristic -> {\n+            if (!device.enableNotifications(characteristic)) {\n+                throw new BluetoothException(\n+                        \"Failed to start notifications for characteristic: \" + characteristic.getUuid());\n+            }\n+            return null;\n+        });\n+    }\n+\n+    public CompletableFuture<@Nullable Void> writeCharacteristic(UUID serviceUUID, UUID characteristicUUID, byte[] data,\n+            boolean enableNotification) {\n+        return executeWithConnection(serviceUUID, characteristicUUID, characteristic -> {\n+            if (enableNotification) {\n+                if (!device.enableNotifications(characteristic)) {\n+                    // logger.debug(\"Failed to enable notifications for characteristic {}\", characteristic.getUuid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 285}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjUzMA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536442530", "createdAt": "2020-12-04T23:26:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/ConnectedBluetoothHandler.java", "diffHunk": "@@ -0,0 +1,474 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Condition;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.util.HexUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a base implementation for more specific thing handlers that require constant connection to bluetooth devices.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @deprecated once CompletableFutures are supported in the actual ConnectedBluetoothHandler, this class can be deleted\n+ */\n+@Deprecated\n+@NonNullByDefault\n+public class ConnectedBluetoothHandler extends BeaconBluetoothHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ConnectedBluetoothHandler.class);\n+\n+    private final Condition connectionCondition = deviceLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = deviceLock.newCondition();\n+    private final Condition charCompleteCondition = deviceLock.newCondition();\n+\n+    private @Nullable Future<?> reconnectJob;\n+    private @Nullable Future<?> pendingDisconnect;\n+    private @Nullable BluetoothCharacteristic ongoingCharacteristic;\n+    private @Nullable BluetoothCompletionStatus completeStatus;\n+\n+    private boolean connectOnDemand;\n+    private int idleDisconnectDelay = 1000;\n+\n+    protected @Nullable ScheduledExecutorService connectionTaskExecutor;\n+    private volatile boolean servicesDiscovered;\n+\n+    public ConnectedBluetoothHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+\n+        // super.initialize adds callbacks that might require the connectionTaskExecutor to be present, so we initialize\n+        // the connectionTaskExecutor first\n+        ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(1,\n+                new NamedThreadFactory(\"bluetooth-connection-\" + thing.getThingTypeUID(), true));\n+        executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n+        executor.setRemoveOnCancelPolicy(true);\n+        connectionTaskExecutor = executor;\n+\n+        super.initialize();\n+\n+        // Object connectOnDemandRaw = getConfig().get(BluetoothBindingConstants.CONFIGURATION_CONNECT_ON_DEMAND);\n+        connectOnDemand = true;\n+\n+        Object idleDisconnectDelayRaw = getConfig().get(\"idleDisconnectDelay\");\n+        idleDisconnectDelay = 1000;\n+        if (idleDisconnectDelayRaw instanceof Number) {\n+            idleDisconnectDelay = ((Number) idleDisconnectDelayRaw).intValue();\n+        }\n+\n+        if (!connectOnDemand) {\n+            reconnectJob = executor.scheduleWithFixedDelay(() -> {\n+                try {\n+                    if (device.getConnectionState() != ConnectionState.CONNECTED) {\n+                        device.connect();\n+                        // we do not set the Thing status here, because we will anyhow receive a call to\n+                        // onConnectionStateChange\n+                    } else {\n+                        // just in case it was already connected to begin with\n+                        updateStatus(ThingStatus.ONLINE);\n+                        if (!servicesDiscovered && !device.discoverServices()) {\n+                            logger.debug(\"Error while discovering services\");\n+                        }\n+                    }\n+                } catch (RuntimeException ex) {\n+                    logger.warn(\"Unexpected error occurred\", ex);\n+                }\n+            }, 0, 30, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancel(reconnectJob);\n+        reconnectJob = null;\n+        cancel(pendingDisconnect);\n+        pendingDisconnect = null;\n+\n+        super.dispose();\n+\n+        shutdown(connectionTaskExecutor);\n+        connectionTaskExecutor = null;\n+    }\n+\n+    private static void cancel(@Nullable Future<?> future) {\n+        if (future != null) {\n+            future.cancel(true);\n+        }\n+    }\n+\n+    private void shutdown(@Nullable ScheduledExecutorService executor) {\n+        if (executor != null) {\n+            executor.shutdownNow();\n+        }\n+    }\n+\n+    private ScheduledExecutorService getConnectionTaskExecutor() {\n+        var executor = connectionTaskExecutor;\n+        if (executor == null) {\n+            throw new IllegalStateException(\"characteristicScheduler has not been initialized\");\n+        }\n+        return executor;\n+    }\n+\n+    private void scheduleDisconnect() {\n+        cancel(pendingDisconnect);\n+        pendingDisconnect = getConnectionTaskExecutor().schedule(device::disconnect, idleDisconnectDelay,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void connectAndWait() throws ConnectionException, TimeoutException, InterruptedException {\n+        if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+            return;\n+        }\n+        if (device.getConnectionState() != ConnectionState.CONNECTING) {\n+            if (!device.connect()) {\n+                throw new ConnectionException(\"Failed to start connecting\");\n+            }\n+        }\n+        logger.debug(\"waiting for connection\");\n+        if (!awaitConnection(1, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Connection attempt timeout.\");\n+        }\n+        logger.debug(\"connection successful\");\n+        if (!servicesDiscovered) {\n+            logger.debug(\"discovering services\");\n+            device.discoverServices();\n+            if (!awaitServiceDiscovery(20, TimeUnit.SECONDS)) {\n+                throw new TimeoutException(\"Service discovery timeout\");\n+            }\n+            logger.debug(\"service discovery successful\");\n+        }\n+    }\n+\n+    private boolean awaitConnection(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (device.getConnectionState() != ConnectionState.CONNECTED) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = connectionCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private boolean awaitCharacteristicComplete(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (ongoingCharacteristic != null) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = charCompleteCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private boolean awaitServiceDiscovery(long timeout, TimeUnit unit) throws InterruptedException {\n+        deviceLock.lock();\n+        try {\n+            long nanosTimeout = unit.toNanos(timeout);\n+            while (!servicesDiscovered) {\n+                if (nanosTimeout <= 0L) {\n+                    return false;\n+                }\n+                nanosTimeout = serviceDiscoveryCondition.awaitNanos(nanosTimeout);\n+            }\n+        } finally {\n+            deviceLock.unlock();\n+        }\n+        return true;\n+    }\n+\n+    private BluetoothCharacteristic connectAndGetCharacteristic(UUID serviceUUID, UUID characteristicUUID)\n+            throws BluetoothException, TimeoutException, InterruptedException {\n+        connectAndWait();\n+        BluetoothService service = device.getServices(serviceUUID);\n+        if (service == null) {\n+            throw new BluetoothException(\"Service with uuid \" + serviceUUID + \" could not be found\");\n+        }\n+        BluetoothCharacteristic characteristic = service.getCharacteristic(characteristicUUID);\n+        if (characteristic == null) {\n+            throw new BluetoothException(\"Characteristic with uuid \" + characteristicUUID + \" could not be found\");\n+        }\n+        return characteristic;\n+    }\n+\n+    private <T> CompletableFuture<T> executeWithConnection(UUID serviceUUID, UUID characteristicUUID,\n+            CallableFunction<BluetoothCharacteristic, T> callable) {\n+        CompletableFuture<T> future = new CompletableFuture<>();\n+        var executor = connectionTaskExecutor;\n+        if (executor != null) {\n+            executor.execute(() -> {\n+                cancel(pendingDisconnect);\n+                try {\n+                    BluetoothCharacteristic characteristic = connectAndGetCharacteristic(serviceUUID,\n+                            characteristicUUID);\n+                    future.complete(callable.call(characteristic));\n+                } catch (InterruptedException e) {\n+                    future.completeExceptionally(e);\n+                    return;// we don't want to schedule anything if we receive an interrupt\n+                } catch (TimeoutException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+                    future.completeExceptionally(e);\n+                } catch (Exception e) {\n+                    future.completeExceptionally(e);\n+                }\n+                if (connectOnDemand) {\n+                    scheduleDisconnect();\n+                }\n+            });\n+        } else {\n+            future.completeExceptionally(new IllegalStateException(\"characteristicScheduler has not been initialized\"));\n+        }\n+        return future;\n+    }\n+\n+    public CompletableFuture<@Nullable Void> enableNotifications(UUID serviceUUID, UUID characteristicUUID) {\n+        return executeWithConnection(serviceUUID, characteristicUUID, characteristic -> {\n+            if (!device.enableNotifications(characteristic)) {\n+                throw new BluetoothException(\n+                        \"Failed to start notifications for characteristic: \" + characteristic.getUuid());\n+            }\n+            return null;\n+        });\n+    }\n+\n+    public CompletableFuture<@Nullable Void> writeCharacteristic(UUID serviceUUID, UUID characteristicUUID, byte[] data,\n+            boolean enableNotification) {\n+        return executeWithConnection(serviceUUID, characteristicUUID, characteristic -> {\n+            if (enableNotification) {\n+                if (!device.enableNotifications(characteristic)) {\n+                    // logger.debug(\"Failed to enable notifications for characteristic {}\", characteristic.getUuid());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMTYyNA=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTI2OTUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTowNDo1NFrOH_eGTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozMzo1MFrOH_l_-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNTQ2OA==", "bodyText": "Unit", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536315468", "createdAt": "2020-12-04T19:04:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Govee\n+\n+This extension adds support for [Govee](https://www.govee.com/) Bluetooth Devices. \n+\n+## Supported Things\n+\n+Only two thing types are supported by this extension at the moment.\n+\n+| Thing Type ID          | Description                               | Supported Models                                            |\n+|------------------------|-------------------------------------------|-------------------------------------------------------------|\n+| goveeHygrometer        | Govee Thermo-Hygrometer                   | H5051,H5071                                                 |\n+| goveeHygrometerMonitor | Govee Thermo-Hygrometer w/ Warning Alarms | H5052,H5072,H5074,H5075,H5101,H5102,H5177,H5179,B5175,B5178 |\n+\n+## Discovery\n+\n+As any other Bluetooth device, Govee devices are discovered automatically by the corresponding bridge. \n+\n+## Thing Configuration\n+\n+Govee things have the following configuration parameters:\n+\n+| Thing                  | Parameter               | Required | Default     | Description                                                               |\n+|------------------------|-------------------------|----------|-------------|---------------------------------------------------------------------------|\n+| all                    | address                 | yes      |             | The Bluetooth address of the device (in format \"XX:XX:XX:XX:XX:XX\")       |\n+| all                    | refreshInterval         |          | 300         | How often, in seconds, the sensor data of the device should be refreshed  |\n+| goveeHygrometer*       | temperatureCalibration  | no       |             | Offset to apply to temperature sensor readings                            |\n+| goveeHygrometer*       | humidityCalibration     | no       |             | Offset to apply to humidity sensor readings                               |        \n+| goveeHygrometerMonitor | temperatureWarningAlarm |          | false       | Enables warning alarms to be broadcast when temperature is out of range   |\n+| goveeHygrometerMonitor | temperatureWarningMin   |          | 0           | The lower safe temperature threshold (only applies if alarm is enabled)   |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDkyMw==", "bodyText": "added", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444923", "createdAt": "2020-12-04T23:33:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/README.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Govee\n+\n+This extension adds support for [Govee](https://www.govee.com/) Bluetooth Devices. \n+\n+## Supported Things\n+\n+Only two thing types are supported by this extension at the moment.\n+\n+| Thing Type ID          | Description                               | Supported Models                                            |\n+|------------------------|-------------------------------------------|-------------------------------------------------------------|\n+| goveeHygrometer        | Govee Thermo-Hygrometer                   | H5051,H5071                                                 |\n+| goveeHygrometerMonitor | Govee Thermo-Hygrometer w/ Warning Alarms | H5052,H5072,H5074,H5075,H5101,H5102,H5177,H5179,B5175,B5178 |\n+\n+## Discovery\n+\n+As any other Bluetooth device, Govee devices are discovered automatically by the corresponding bridge. \n+\n+## Thing Configuration\n+\n+Govee things have the following configuration parameters:\n+\n+| Thing                  | Parameter               | Required | Default     | Description                                                               |\n+|------------------------|-------------------------|----------|-------------|---------------------------------------------------------------------------|\n+| all                    | address                 | yes      |             | The Bluetooth address of the device (in format \"XX:XX:XX:XX:XX:XX\")       |\n+| all                    | refreshInterval         |          | 300         | How often, in seconds, the sensor data of the device should be refreshed  |\n+| goveeHygrometer*       | temperatureCalibration  | no       |             | Offset to apply to temperature sensor readings                            |\n+| goveeHygrometer*       | humidityCalibration     | no       |             | Offset to apply to humidity sensor readings                               |        \n+| goveeHygrometerMonitor | temperatureWarningAlarm |          | false       | Enables warning alarms to be broadcast when temperature is out of range   |\n+| goveeHygrometerMonitor | temperatureWarningMin   |          | 0           | The lower safe temperature threshold (only applies if alarm is enabled)   |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNTQ2OA=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTI3NDg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTowNjoyNlrOH_eJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozMTo0OVrOH_l9gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNjIyNg==", "bodyText": "What's the purpose of this?", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536316226", "createdAt": "2020-12-04T19:06:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "diffHunk": "@@ -0,0 +1,429 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import javax.measure.Quantity;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.gattserial.MessageServicer;\n+import org.openhab.binding.bluetooth.gattserial.SimpleGattSocket;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetBatteryCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetTemHumCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GoveeMessage;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.TemHumDTO;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.WarningSettingsDTO;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.openhab.binding.bluetooth.util.HeritableFuture;\n+import org.openhab.binding.bluetooth.util.RetryException;\n+import org.openhab.binding.bluetooth.util.RetryFuture;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n+\n+    private static final UUID SERVICE_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f4857\");\n+    private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n+    private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n+\n+    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoveeHygrometerHandler.class);\n+\n+    private final CommandSocket commandSocket = new CommandSocket();\n+\n+    private GoveeHygrometerConfiguration config = new GoveeHygrometerConfiguration();\n+    private GoveeModel model = GoveeModel.H5074;// we use this as our default model\n+\n+    private CompletableFuture<?> initializeJob = CompletableFuture.completedFuture(null);// initially set to a dummy\n+                                                                                         // future\n+    private Future<?> scanJob = CompletableFuture.completedFuture(null);\n+    private Future<?> keepAliveJob = CompletableFuture.completedFuture(null);\n+\n+    public GoveeHygrometerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(GoveeHygrometerConfiguration.class);\n+\n+        Map<String, String> properties = thing.getProperties();\n+        String modelProp = properties.get(Thing.PROPERTY_MODEL_ID);\n+        model = GoveeModel.H5074;\n+        if (modelProp != null) {\n+            try {\n+                model = GoveeModel.valueOf(modelProp);\n+            } catch (IllegalArgumentException ex) {\n+                // ignore\n+            }\n+        }\n+\n+        logger.debug(\"Initializing Govee Hygrometer {} model: {}\", address, model);\n+        initializeJob = RetryFuture.composeWithRetry(this::createInitSettingsJob, scheduler)//\n+                .thenRun(() -> {\n+                    updateStatus(ThingStatus.ONLINE);\n+                });\n+        scanJob = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                if (initializeJob.isDone() && !initializeJob.isCompletedExceptionally()) {\n+                    logger.debug(\"refreshing temperature, humidity, and battery\");\n+                    refreshBattery().join();\n+                    refreshTemperatureAndHumidity().join();\n+                    connectionTaskExecutor.execute(device::disconnect);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (RuntimeException ex) {\n+                logger.warn(\"unable to refresh\", ex);\n+            }\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+        keepAliveJob = connectionTaskExecutor.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                try {\n+                    GoveeMessage message = new GoveeMessage((byte) 0xAA, (byte) 1, null);\n+                    writeCharacteristic(SERVICE_UUID, KEEP_ALIVE_CHAR_UUID, message.getPayload(), false);\n+                } catch (RuntimeException ex) {\n+                    logger.warn(\"unable to send keep alive\", ex);\n+                }\n+            }\n+        }, 1, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            throw new Exception();\n+        } catch (Exception ex) {\n+            logger.debug(\"Disposing Govee Hygrometer {} model: {}\", address, model, ex);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNTE5Ng==", "bodyText": "wow, I totally forgot to remove that. It was strictly for debugging.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536425196", "createdAt": "2020-12-04T22:38:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "diffHunk": "@@ -0,0 +1,429 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import javax.measure.Quantity;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.gattserial.MessageServicer;\n+import org.openhab.binding.bluetooth.gattserial.SimpleGattSocket;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetBatteryCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetTemHumCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GoveeMessage;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.TemHumDTO;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.WarningSettingsDTO;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.openhab.binding.bluetooth.util.HeritableFuture;\n+import org.openhab.binding.bluetooth.util.RetryException;\n+import org.openhab.binding.bluetooth.util.RetryFuture;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n+\n+    private static final UUID SERVICE_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f4857\");\n+    private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n+    private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n+\n+    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoveeHygrometerHandler.class);\n+\n+    private final CommandSocket commandSocket = new CommandSocket();\n+\n+    private GoveeHygrometerConfiguration config = new GoveeHygrometerConfiguration();\n+    private GoveeModel model = GoveeModel.H5074;// we use this as our default model\n+\n+    private CompletableFuture<?> initializeJob = CompletableFuture.completedFuture(null);// initially set to a dummy\n+                                                                                         // future\n+    private Future<?> scanJob = CompletableFuture.completedFuture(null);\n+    private Future<?> keepAliveJob = CompletableFuture.completedFuture(null);\n+\n+    public GoveeHygrometerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(GoveeHygrometerConfiguration.class);\n+\n+        Map<String, String> properties = thing.getProperties();\n+        String modelProp = properties.get(Thing.PROPERTY_MODEL_ID);\n+        model = GoveeModel.H5074;\n+        if (modelProp != null) {\n+            try {\n+                model = GoveeModel.valueOf(modelProp);\n+            } catch (IllegalArgumentException ex) {\n+                // ignore\n+            }\n+        }\n+\n+        logger.debug(\"Initializing Govee Hygrometer {} model: {}\", address, model);\n+        initializeJob = RetryFuture.composeWithRetry(this::createInitSettingsJob, scheduler)//\n+                .thenRun(() -> {\n+                    updateStatus(ThingStatus.ONLINE);\n+                });\n+        scanJob = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                if (initializeJob.isDone() && !initializeJob.isCompletedExceptionally()) {\n+                    logger.debug(\"refreshing temperature, humidity, and battery\");\n+                    refreshBattery().join();\n+                    refreshTemperatureAndHumidity().join();\n+                    connectionTaskExecutor.execute(device::disconnect);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (RuntimeException ex) {\n+                logger.warn(\"unable to refresh\", ex);\n+            }\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+        keepAliveJob = connectionTaskExecutor.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                try {\n+                    GoveeMessage message = new GoveeMessage((byte) 0xAA, (byte) 1, null);\n+                    writeCharacteristic(SERVICE_UUID, KEEP_ALIVE_CHAR_UUID, message.getPayload(), false);\n+                } catch (RuntimeException ex) {\n+                    logger.warn(\"unable to send keep alive\", ex);\n+                }\n+            }\n+        }, 1, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            throw new Exception();\n+        } catch (Exception ex) {\n+            logger.debug(\"Disposing Govee Hygrometer {} model: {}\", address, model, ex);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNjIyNg=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDI5MA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444290", "createdAt": "2020-12-04T23:31:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "diffHunk": "@@ -0,0 +1,429 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import javax.measure.Quantity;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.gattserial.MessageServicer;\n+import org.openhab.binding.bluetooth.gattserial.SimpleGattSocket;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetBatteryCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetTemHumCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GoveeMessage;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.TemHumDTO;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.WarningSettingsDTO;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.openhab.binding.bluetooth.util.HeritableFuture;\n+import org.openhab.binding.bluetooth.util.RetryException;\n+import org.openhab.binding.bluetooth.util.RetryFuture;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n+\n+    private static final UUID SERVICE_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f4857\");\n+    private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n+    private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n+\n+    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoveeHygrometerHandler.class);\n+\n+    private final CommandSocket commandSocket = new CommandSocket();\n+\n+    private GoveeHygrometerConfiguration config = new GoveeHygrometerConfiguration();\n+    private GoveeModel model = GoveeModel.H5074;// we use this as our default model\n+\n+    private CompletableFuture<?> initializeJob = CompletableFuture.completedFuture(null);// initially set to a dummy\n+                                                                                         // future\n+    private Future<?> scanJob = CompletableFuture.completedFuture(null);\n+    private Future<?> keepAliveJob = CompletableFuture.completedFuture(null);\n+\n+    public GoveeHygrometerHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(GoveeHygrometerConfiguration.class);\n+\n+        Map<String, String> properties = thing.getProperties();\n+        String modelProp = properties.get(Thing.PROPERTY_MODEL_ID);\n+        model = GoveeModel.H5074;\n+        if (modelProp != null) {\n+            try {\n+                model = GoveeModel.valueOf(modelProp);\n+            } catch (IllegalArgumentException ex) {\n+                // ignore\n+            }\n+        }\n+\n+        logger.debug(\"Initializing Govee Hygrometer {} model: {}\", address, model);\n+        initializeJob = RetryFuture.composeWithRetry(this::createInitSettingsJob, scheduler)//\n+                .thenRun(() -> {\n+                    updateStatus(ThingStatus.ONLINE);\n+                });\n+        scanJob = scheduler.scheduleWithFixedDelay(() -> {\n+            try {\n+                if (initializeJob.isDone() && !initializeJob.isCompletedExceptionally()) {\n+                    logger.debug(\"refreshing temperature, humidity, and battery\");\n+                    refreshBattery().join();\n+                    refreshTemperatureAndHumidity().join();\n+                    connectionTaskExecutor.execute(device::disconnect);\n+                    updateStatus(ThingStatus.ONLINE);\n+                }\n+            } catch (RuntimeException ex) {\n+                logger.warn(\"unable to refresh\", ex);\n+            }\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+        keepAliveJob = connectionTaskExecutor.scheduleWithFixedDelay(() -> {\n+            if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                try {\n+                    GoveeMessage message = new GoveeMessage((byte) 0xAA, (byte) 1, null);\n+                    writeCharacteristic(SERVICE_UUID, KEEP_ALIVE_CHAR_UUID, message.getPayload(), false);\n+                } catch (RuntimeException ex) {\n+                    logger.warn(\"unable to send keep alive\", ex);\n+                }\n+            }\n+        }, 1, 2, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            throw new Exception();\n+        } catch (Exception ex) {\n+            logger.debug(\"Disposing Govee Hygrometer {} model: {}\", address, model, ex);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNjIyNg=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTI5NDg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetTemHumCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToxMTo1NlrOH_eUsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozNDo1MFrOH_mBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxOTE1NA==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536319154", "createdAt": "2020-12-04T19:11:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetTemHumCommand.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GetTemHumCommand extends GetCommand {\n+\n+    private CompletableFuture<@Nullable TemHumDTO> resultHandler;\n+    // private BiConsumer<@Nullable QuantityType<Temperature>, @Nullable QuantityType<Dimensionless>> resultHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NTIzNw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536445237", "createdAt": "2020-12-04T23:34:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetTemHumCommand.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GetTemHumCommand extends GetCommand {\n+\n+    private CompletableFuture<@Nullable TemHumDTO> resultHandler;\n+    // private BiConsumer<@Nullable QuantityType<Temperature>, @Nullable QuantityType<Dimensionless>> resultHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxOTE1NA=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTMxODAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToxNTowN1rOH_ehuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozMjoyM1rOH_l-cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyMjQ5MQ==", "bodyText": "Strange line break.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536322491", "createdAt": "2020-12-04T19:15:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,194 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\n+\t<thing-type id=\"goveeHygrometer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Hygrometer</label>\n+\t\t<description>Govee Thermo-Hygrometer</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee-temperature\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"system.atmospheric-humidity\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>address</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter-group name=\"calibration\">\n+\t\t\t\t<label>Calibration</label>\n+\t\t\t\t<description>Sensor calibration settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The frequency at which battery, temperature, and humidity data will refresh</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"temperatureCalibration\" type=\"decimal\" min=\"-1.6\" max=\"1.6\" groupName=\"calibration\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Temperature Calibration</label>\n+\t\t\t\t<description>Adds offset to reported temperature</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityCalibration\" type=\"decimal\" min=\"-9\" max=\"9\" groupName=\"calibration\" unit=\"%\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Humidity Calibration</label>\n+\t\t\t\t<description>Adds offset to reported humidity</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"goveeHygrometerMonitor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Monitoring Hygrometer</label>\n+\t\t<description>Govee Thermo-Hygrometer w/ Warning Alarms</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee-temperature\"/>\n+\t\t\t<channel id=\"temperatureAlarm\" typeId=\"govee-temperature-alarm\"/>\n+\n+\t\t\t<channel id=\"humidity\" typeId=\"system.atmospheric-humidity\"/>\n+\t\t\t<channel id=\"humidityAlarm\" typeId=\"govee-humidity-alarm\"/>\n+\n+\t\t</channels>\n+\n+\t\t<representation-property>address</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter-group name=\"calibration\">\n+\t\t\t\t<label>Calibration</label>\n+\t\t\t\t<description>Sensor calibration settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\t\t\t<parameter-group name=\"alarms\">\n+\t\t\t\t<label>Alarm</label>\n+\t\t\t\t<description>Alarm settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\n+\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The frequency at which battery, temperature, and humidity data will refresh</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"temperatureCalibration\" type=\"decimal\" min=\"-1.6\" max=\"1.6\" groupName=\"calibration\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Temperature Calibration</label>\n+\t\t\t\t<description>Adds offset to reported temperature</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningAlarm\" type=\"boolean\" groupName=\"alarms\">\n+\t\t\t\t<label>Broadcast Temperature Warning</label>\n+\t\t\t\t<description>If enabled, the Govee device will notify openHAB if temperature is out of the specified range</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningMin\" type=\"decimal\" min=\"-20\" max=\"60\" step=\"0.2\" groupName=\"alarms\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<label>Min Warning Temperature</label>\n+\t\t\t\t<description>Sets the lowest acceptable temperature value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningMax\" type=\"decimal\" min=\"-20\" max=\"60\" step=\"0.2\" groupName=\"alarms\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<label>Max Warning Temperature</label>\n+\t\t\t\t<description>Sets the highest acceptable temperature value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"humidityCalibration\" type=\"decimal\" min=\"-9\" max=\"9\" groupName=\"calibration\" unit=\"%\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Humidity Calibration</label>\n+\t\t\t\t<description>Adds offset to reported humidity</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningAlarm\" type=\"boolean\" groupName=\"alarms\">\n+\t\t\t\t<label>Broadcast Humidity Warning</label>\n+\t\t\t\t<description>If enabled, the Govee device will notify openHAB if humidity is out of the specified range</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningMin\" type=\"decimal\" min=\"0\" max=\"100\" step=\"0.1\" groupName=\"alarms\"\n+\t\t\t\tunit=\"%\">\n+\t\t\t\t<label>Min Warning Humidity</label>\n+\t\t\t\t<description>Sets the lowest acceptable humidity value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningMax\" type=\"decimal\" min=\"0\" max=\"100\" step=\"0.1\" groupName=\"alarms\"\n+\t\t\t\tunit=\"%\">\n+\t\t\t\t<label>Max Warning Humidity</label>\n+\t\t\t\t<description>Sets the highest acceptable humidity value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"govee-temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Current Measured Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"govee-temperature-alarm\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Temperature Warning Alarm</label>\n+\t\t<description>If temperature warnings are enabled, then this alarm indicates\n+\t\t\twhether the current temperature is out of\n+\t\t\trange\n+\t\t</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQyNTYxMg==", "bodyText": "blame spotless", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536425612", "createdAt": "2020-12-04T22:39:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,194 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\n+\t<thing-type id=\"goveeHygrometer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Hygrometer</label>\n+\t\t<description>Govee Thermo-Hygrometer</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee-temperature\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"system.atmospheric-humidity\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>address</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter-group name=\"calibration\">\n+\t\t\t\t<label>Calibration</label>\n+\t\t\t\t<description>Sensor calibration settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The frequency at which battery, temperature, and humidity data will refresh</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"temperatureCalibration\" type=\"decimal\" min=\"-1.6\" max=\"1.6\" groupName=\"calibration\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Temperature Calibration</label>\n+\t\t\t\t<description>Adds offset to reported temperature</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityCalibration\" type=\"decimal\" min=\"-9\" max=\"9\" groupName=\"calibration\" unit=\"%\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Humidity Calibration</label>\n+\t\t\t\t<description>Adds offset to reported humidity</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"goveeHygrometerMonitor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Monitoring Hygrometer</label>\n+\t\t<description>Govee Thermo-Hygrometer w/ Warning Alarms</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee-temperature\"/>\n+\t\t\t<channel id=\"temperatureAlarm\" typeId=\"govee-temperature-alarm\"/>\n+\n+\t\t\t<channel id=\"humidity\" typeId=\"system.atmospheric-humidity\"/>\n+\t\t\t<channel id=\"humidityAlarm\" typeId=\"govee-humidity-alarm\"/>\n+\n+\t\t</channels>\n+\n+\t\t<representation-property>address</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter-group name=\"calibration\">\n+\t\t\t\t<label>Calibration</label>\n+\t\t\t\t<description>Sensor calibration settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\t\t\t<parameter-group name=\"alarms\">\n+\t\t\t\t<label>Alarm</label>\n+\t\t\t\t<description>Alarm settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\n+\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The frequency at which battery, temperature, and humidity data will refresh</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"temperatureCalibration\" type=\"decimal\" min=\"-1.6\" max=\"1.6\" groupName=\"calibration\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Temperature Calibration</label>\n+\t\t\t\t<description>Adds offset to reported temperature</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningAlarm\" type=\"boolean\" groupName=\"alarms\">\n+\t\t\t\t<label>Broadcast Temperature Warning</label>\n+\t\t\t\t<description>If enabled, the Govee device will notify openHAB if temperature is out of the specified range</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningMin\" type=\"decimal\" min=\"-20\" max=\"60\" step=\"0.2\" groupName=\"alarms\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<label>Min Warning Temperature</label>\n+\t\t\t\t<description>Sets the lowest acceptable temperature value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningMax\" type=\"decimal\" min=\"-20\" max=\"60\" step=\"0.2\" groupName=\"alarms\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<label>Max Warning Temperature</label>\n+\t\t\t\t<description>Sets the highest acceptable temperature value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"humidityCalibration\" type=\"decimal\" min=\"-9\" max=\"9\" groupName=\"calibration\" unit=\"%\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Humidity Calibration</label>\n+\t\t\t\t<description>Adds offset to reported humidity</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningAlarm\" type=\"boolean\" groupName=\"alarms\">\n+\t\t\t\t<label>Broadcast Humidity Warning</label>\n+\t\t\t\t<description>If enabled, the Govee device will notify openHAB if humidity is out of the specified range</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningMin\" type=\"decimal\" min=\"0\" max=\"100\" step=\"0.1\" groupName=\"alarms\"\n+\t\t\t\tunit=\"%\">\n+\t\t\t\t<label>Min Warning Humidity</label>\n+\t\t\t\t<description>Sets the lowest acceptable humidity value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningMax\" type=\"decimal\" min=\"0\" max=\"100\" step=\"0.1\" groupName=\"alarms\"\n+\t\t\t\tunit=\"%\">\n+\t\t\t\t<label>Max Warning Humidity</label>\n+\t\t\t\t<description>Sets the highest acceptable humidity value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"govee-temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Current Measured Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"govee-temperature-alarm\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Temperature Warning Alarm</label>\n+\t\t<description>If temperature warnings are enabled, then this alarm indicates\n+\t\t\twhether the current temperature is out of\n+\t\t\trange\n+\t\t</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyMjQ5MQ=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDUyOQ==", "bodyText": "tried my best, but there is definitely some kinds of spotless formatting bug at play.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444529", "createdAt": "2020-12-04T23:32:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,194 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\n+\t<thing-type id=\"goveeHygrometer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Hygrometer</label>\n+\t\t<description>Govee Thermo-Hygrometer</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee-temperature\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"system.atmospheric-humidity\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>address</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter-group name=\"calibration\">\n+\t\t\t\t<label>Calibration</label>\n+\t\t\t\t<description>Sensor calibration settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The frequency at which battery, temperature, and humidity data will refresh</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"temperatureCalibration\" type=\"decimal\" min=\"-1.6\" max=\"1.6\" groupName=\"calibration\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Temperature Calibration</label>\n+\t\t\t\t<description>Adds offset to reported temperature</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityCalibration\" type=\"decimal\" min=\"-9\" max=\"9\" groupName=\"calibration\" unit=\"%\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Humidity Calibration</label>\n+\t\t\t\t<description>Adds offset to reported humidity</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"goveeHygrometerMonitor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Monitoring Hygrometer</label>\n+\t\t<description>Govee Thermo-Hygrometer w/ Warning Alarms</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee-temperature\"/>\n+\t\t\t<channel id=\"temperatureAlarm\" typeId=\"govee-temperature-alarm\"/>\n+\n+\t\t\t<channel id=\"humidity\" typeId=\"system.atmospheric-humidity\"/>\n+\t\t\t<channel id=\"humidityAlarm\" typeId=\"govee-humidity-alarm\"/>\n+\n+\t\t</channels>\n+\n+\t\t<representation-property>address</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter-group name=\"calibration\">\n+\t\t\t\t<label>Calibration</label>\n+\t\t\t\t<description>Sensor calibration settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\t\t\t<parameter-group name=\"alarms\">\n+\t\t\t\t<label>Alarm</label>\n+\t\t\t\t<description>Alarm settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\n+\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The frequency at which battery, temperature, and humidity data will refresh</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"temperatureCalibration\" type=\"decimal\" min=\"-1.6\" max=\"1.6\" groupName=\"calibration\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Temperature Calibration</label>\n+\t\t\t\t<description>Adds offset to reported temperature</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningAlarm\" type=\"boolean\" groupName=\"alarms\">\n+\t\t\t\t<label>Broadcast Temperature Warning</label>\n+\t\t\t\t<description>If enabled, the Govee device will notify openHAB if temperature is out of the specified range</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningMin\" type=\"decimal\" min=\"-20\" max=\"60\" step=\"0.2\" groupName=\"alarms\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<label>Min Warning Temperature</label>\n+\t\t\t\t<description>Sets the lowest acceptable temperature value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"temperatureWarningMax\" type=\"decimal\" min=\"-20\" max=\"60\" step=\"0.2\" groupName=\"alarms\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<label>Max Warning Temperature</label>\n+\t\t\t\t<description>Sets the highest acceptable temperature value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"humidityCalibration\" type=\"decimal\" min=\"-9\" max=\"9\" groupName=\"calibration\" unit=\"%\">\n+\t\t\t\t<required>false</required>\n+\t\t\t\t<label>Humidity Calibration</label>\n+\t\t\t\t<description>Adds offset to reported humidity</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningAlarm\" type=\"boolean\" groupName=\"alarms\">\n+\t\t\t\t<label>Broadcast Humidity Warning</label>\n+\t\t\t\t<description>If enabled, the Govee device will notify openHAB if humidity is out of the specified range</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningMin\" type=\"decimal\" min=\"0\" max=\"100\" step=\"0.1\" groupName=\"alarms\"\n+\t\t\t\tunit=\"%\">\n+\t\t\t\t<label>Min Warning Humidity</label>\n+\t\t\t\t<description>Sets the lowest acceptable humidity value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"humidityWarningMax\" type=\"decimal\" min=\"0\" max=\"100\" step=\"0.1\" groupName=\"alarms\"\n+\t\t\t\tunit=\"%\">\n+\t\t\t\t<label>Max Warning Humidity</label>\n+\t\t\t\t<description>Sets the highest acceptable humidity value before a warning should be issued</description>\n+\t\t\t\t<default>0</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"govee-temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Current Measured Temperature</label>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"govee-temperature-alarm\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Temperature Warning Alarm</label>\n+\t\t<description>If temperature warnings are enabled, then this alarm indicates\n+\t\t\twhether the current temperature is out of\n+\t\t\trange\n+\t\t</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyMjQ5MQ=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM0MjEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyMDo1M1rOH_evjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyMDo1M1rOH_evjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNjAyOQ==", "bodyText": "I like this. Love to see this at some more prominent location.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536326029", "createdAt": "2020-12-04T19:20:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.readme;\n+\n+import java.io.FileInputStream;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.openhab.binding.bluetooth.govee.internal.GoveeModel;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+public class ThingTypeTableGenerator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM3MjI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToyOTowNVrOH_fAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozMjozN1rOH_l-tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMDQ0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };\n          \n          \n            \n                private static final byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536330442", "createdAt": "2020-12-04T19:29:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "diffHunk": "@@ -0,0 +1,429 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import javax.measure.Quantity;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.gattserial.MessageServicer;\n+import org.openhab.binding.bluetooth.gattserial.SimpleGattSocket;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetBatteryCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetTemHumCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GoveeMessage;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.TemHumDTO;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.WarningSettingsDTO;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.openhab.binding.bluetooth.util.HeritableFuture;\n+import org.openhab.binding.bluetooth.util.RetryException;\n+import org.openhab.binding.bluetooth.util.RetryFuture;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n+\n+    private static final UUID SERVICE_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f4857\");\n+    private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n+    private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n+\n+    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDU5OA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444598", "createdAt": "2020-12-04T23:32:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/GoveeHygrometerHandler.java", "diffHunk": "@@ -0,0 +1,429 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal;\n+\n+import static org.openhab.binding.bluetooth.govee.internal.GoveeBindingConstants.*;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import javax.measure.Quantity;\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.gattserial.MessageServicer;\n+import org.openhab.binding.bluetooth.gattserial.SimpleGattSocket;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetBatteryCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetHumWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemCaliCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetOrSetTemWarningCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GetTemHumCommand;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.GoveeMessage;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.TemHumDTO;\n+import org.openhab.binding.bluetooth.govee.internal.command.hygrometer.WarningSettingsDTO;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.openhab.binding.bluetooth.util.HeritableFuture;\n+import org.openhab.binding.bluetooth.util.RetryException;\n+import org.openhab.binding.bluetooth.util.RetryFuture;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GoveeHygrometerHandler extends ConnectedBluetoothHandler {\n+\n+    private static final UUID SERVICE_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f4857\");\n+    private static final UUID PROTOCOL_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2011\");\n+    private static final UUID KEEP_ALIVE_CHAR_UUID = UUID.fromString(\"494e5445-4c4c-495f-524f-434b535f2012\");\n+\n+    private static byte[] SCAN_HEADER = { (byte) 0xFF, (byte) 0x88, (byte) 0xEC };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMDQ0Mg=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM4MTU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozMTozMlrOH_fGFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozMzoxOFrOH_l_ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTc5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class GetCommand extends GoveeCommand {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public abstract class GetCommand extends GoveeCommand {", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536331799", "createdAt": "2020-12-04T19:31:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetCommand.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+public abstract class GetCommand extends GoveeCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDc3Mw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444773", "createdAt": "2020-12-04T23:33:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetCommand.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+public abstract class GetCommand extends GoveeCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTc5OQ=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTM4MjMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/SetCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTozMTo0NVrOH_fGiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzozMzoyNVrOH_l_fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTkxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class SetCommand extends GoveeCommand {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public abstract class SetCommand extends GoveeCommand {", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536331912", "createdAt": "2020-12-04T19:31:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/SetCommand.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+public abstract class SetCommand extends GoveeCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0NDc5Nw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r536444797", "createdAt": "2020-12-04T23:33:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/SetCommand.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+public abstract class SetCommand extends GoveeCommand {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMTkxMg=="}, "originalCommit": {"oid": "b495c26f2b594e45ddf3f12c23316a46605bbc52"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MjA0NTIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/feature/feature.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwODo1MDowNFrOIYa0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQwNzozNzoyM1rOIZKKaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ3NjA5Mg==", "bodyText": "Copyright can be removed from feature.xml\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <!--\n          \n          \n            \n            \n          \n          \n            \n            \tCopyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n            \n          \n          \n            \n            \tSee the NOTICE file(s) distributed with this work for additional\n          \n          \n            \n            \tinformation.\n          \n          \n            \n            \n          \n          \n            \n            \tThis program and the accompanying materials are made available under the\n          \n          \n            \n            \tterms of the Eclipse Public License 2.0 which is available at\n          \n          \n            \n            \thttp://www.eclipse.org/legal/epl-2.0\n          \n          \n            \n            \n          \n          \n            \n            \tSPDX-License-Identifier: EPL-2.0\n          \n          \n            \n            \n          \n          \n            \n            -->", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r562476092", "createdAt": "2021-01-22T08:50:04Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+\tCopyright (c) 2010-2020 Contributors to the openHAB project\n+\n+\tSee the NOTICE file(s) distributed with this work for additional\n+\tinformation.\n+\n+\tThis program and the accompanying materials are made available under the\n+\tterms of the Eclipse Public License 2.0 which is available at\n+\thttp://www.eclipse.org/legal/epl-2.0\n+\n+\tSPDX-License-Identifier: EPL-2.0\n+\n+-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI1MTgxOQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563251819", "createdAt": "2021-01-24T07:37:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+\tCopyright (c) 2010-2020 Contributors to the openHAB project\n+\n+\tSee the NOTICE file(s) distributed with this work for additional\n+\tinformation.\n+\n+\tThis program and the accompanying materials are made available under the\n+\tterms of the Eclipse Public License 2.0 which is available at\n+\thttp://www.eclipse.org/legal/epl-2.0\n+\n+\tSPDX-License-Identifier: EPL-2.0\n+\n+-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ3NjA5Mg=="}, "originalCommit": {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NDYwMDM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetOrSetHumCaliCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQyMDowMTowN1rOIYzQOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQwNzozNzo1OVrOIZKKuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg3NjQ3Mg==", "bodyText": "Left over commented out code.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r562876472", "createdAt": "2021-01-22T20:01:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetOrSetHumCaliCommand.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.measure.quantity.Dimensionless;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.Units;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GetOrSetHumCaliCommand extends GoveeCommand {\n+\n+    private final CompletableFuture<@Nullable QuantityType<Dimensionless>> resultHandler;\n+    private final @Nullable QuantityType<Dimensionless> value;\n+\n+    // private @Nullable Integer value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI1MTg5OQ==", "bodyText": "Thanks for finding that. Removed.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563251899", "createdAt": "2021-01-24T07:37:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/java/org/openhab/binding/bluetooth/govee/internal/command/hygrometer/GetOrSetHumCaliCommand.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.command.hygrometer;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.measure.quantity.Dimensionless;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.Units;\n+\n+/**\n+ * @author Connor Petty - Initial Contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class GetOrSetHumCaliCommand extends GoveeCommand {\n+\n+    private final CompletableFuture<@Nullable QuantityType<Dimensionless>> resultHandler;\n+    private final @Nullable QuantityType<Dimensionless> value;\n+\n+    // private @Nullable Integer value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjg3NjQ3Mg=="}, "originalCommit": {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0Njg3NzQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QyMjoyMzowMVrOIZHZ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQwNzozODowOFrOIZKKxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwNjY1MA==", "bodyText": "element required is deprecated. Use attribute. But in this case as it's the same as the default value you can just remove it. Same for other parameter.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563206650", "createdAt": "2021-01-23T22:23:01Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,194 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\n+\t<thing-type id=\"goveeHygrometer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Hygrometer</label>\n+\t\t<description>Govee Thermo-Hygrometer</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee-temperature\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"system.atmospheric-humidity\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>address</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter-group name=\"calibration\">\n+\t\t\t\t<label>Calibration</label>\n+\t\t\t\t<description>Sensor calibration settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The frequency at which battery, temperature, and humidity data will refresh</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"temperatureCalibration\" type=\"decimal\" min=\"-1.6\" max=\"1.6\" groupName=\"calibration\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<required>false</required>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI1MTkxMA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563251910", "createdAt": "2021-01-24T07:38:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,194 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\n+\t<thing-type id=\"goveeHygrometer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"roaming\"/>\n+\t\t\t<bridge-type-ref id=\"bluegiga\"/>\n+\t\t\t<bridge-type-ref id=\"bluez\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Govee Hygrometer</label>\n+\t\t<description>Govee Thermo-Hygrometer</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\"/>\n+\t\t\t<channel id=\"battery\" typeId=\"system.battery-level\"/>\n+\n+\t\t\t<channel id=\"temperature\" typeId=\"govee-temperature\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"system.atmospheric-humidity\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>address</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter-group name=\"calibration\">\n+\t\t\t\t<label>Calibration</label>\n+\t\t\t\t<description>Sensor calibration settings.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter-group>\n+\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The frequency at which battery, temperature, and humidity data will refresh</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"temperatureCalibration\" type=\"decimal\" min=\"-1.6\" max=\"1.6\" groupName=\"calibration\"\n+\t\t\t\tunit=\"Cel\">\n+\t\t\t\t<required>false</required>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwNjY1MA=="}, "originalCommit": {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjkwMTIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QyMjo1NDowN1rOIZHkvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQwNzozODoxMVrOIZKK2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwOTQwNA==", "bodyText": "Maybe not use apache StringUtils as we want to get ride of it.", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563209404", "createdAt": "2021-01-23T22:54:07Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.readme;\n+\n+import java.io.FileInputStream;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.openhab.binding.bluetooth.govee.internal.GoveeModel;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+public class ThingTypeTableGenerator {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        FileInputStream fileIS = new FileInputStream(\"src/main/resources/OH-INF/thing/thing-types.xml\");\n+        DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder = builderFactory.newDocumentBuilder();\n+        Document xmlDocument = builder.parse(fileIS);\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        String expression = \"/*[local-name()='thing-descriptions']/thing-type\";\n+        XPathExpression labelExpression = xPath.compile(\"label/text()\");\n+        XPathExpression descriptionExpression = xPath.compile(\"description/text()\");\n+\n+        NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\n+\n+        List<ThingTypeData> thingTypeDataList = new ArrayList<>();\n+\n+        for (int i = 0; i < nodeList.getLength(); i++) {\n+            Node node = nodeList.item(i);\n+            ThingTypeData data = new ThingTypeData();\n+\n+            data.id = node.getAttributes().getNamedItem(\"id\").getTextContent();\n+            data.label = (String) labelExpression.evaluate(node, XPathConstants.STRING);\n+            data.description = (String) descriptionExpression.evaluate(node, XPathConstants.STRING);\n+\n+            thingTypeDataList.add(data);\n+        }\n+\n+        String[] headerRow = new String[] { \"Thing Type ID\", \"Description\", \"Supported Models\" };\n+\n+        List<String[]> rows = new ArrayList<>();\n+        rows.add(headerRow);\n+        rows.addAll(thingTypeDataList.stream().map(ThingTypeTableGenerator::toRow).collect(Collectors.toList()));\n+\n+        int[] maxColumns = { maxColumnSize(rows, 0), maxColumnSize(rows, 1), maxColumnSize(rows, 2) };\n+\n+        StringWriter writer = new StringWriter();\n+\n+        // write actual rows\n+        rows.forEach(row -> {\n+            writer.append(writeRow(maxColumns, row, ' ')).append('\\n');\n+            if (row == headerRow) {\n+                writer.append(writeRow(maxColumns, new String[] { \"\", \"\", \"\" }, '-')).append('\\n');\n+            }\n+        });\n+\n+        System.out.println(writer.toString());\n+    }\n+\n+    private static String writeRow(int[] maxColumns, String[] row, char paddingChar) {\n+        String prefix = \"|\" + paddingChar;\n+        String infix = paddingChar + \"|\" + paddingChar;\n+        String suffix = paddingChar + \"|\";\n+\n+        return Stream.of(0, 1, 2).map(i -> StringUtils.rightPad(row[i], maxColumns[i], paddingChar))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI1MTkzMQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8610#discussion_r563251931", "createdAt": "2021-01-24T07:38:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.govee/src/test/java/org/openhab/binding/bluetooth/govee/internal/readme/ThingTypeTableGenerator.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.govee.internal.readme;\n+\n+import java.io.FileInputStream;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.openhab.binding.bluetooth.govee.internal.GoveeModel;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+/**\n+ * @author Connor Petty - Initial contribution\n+ *\n+ */\n+public class ThingTypeTableGenerator {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        FileInputStream fileIS = new FileInputStream(\"src/main/resources/OH-INF/thing/thing-types.xml\");\n+        DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n+        DocumentBuilder builder = builderFactory.newDocumentBuilder();\n+        Document xmlDocument = builder.parse(fileIS);\n+        XPath xPath = XPathFactory.newInstance().newXPath();\n+        String expression = \"/*[local-name()='thing-descriptions']/thing-type\";\n+        XPathExpression labelExpression = xPath.compile(\"label/text()\");\n+        XPathExpression descriptionExpression = xPath.compile(\"description/text()\");\n+\n+        NodeList nodeList = (NodeList) xPath.compile(expression).evaluate(xmlDocument, XPathConstants.NODESET);\n+\n+        List<ThingTypeData> thingTypeDataList = new ArrayList<>();\n+\n+        for (int i = 0; i < nodeList.getLength(); i++) {\n+            Node node = nodeList.item(i);\n+            ThingTypeData data = new ThingTypeData();\n+\n+            data.id = node.getAttributes().getNamedItem(\"id\").getTextContent();\n+            data.label = (String) labelExpression.evaluate(node, XPathConstants.STRING);\n+            data.description = (String) descriptionExpression.evaluate(node, XPathConstants.STRING);\n+\n+            thingTypeDataList.add(data);\n+        }\n+\n+        String[] headerRow = new String[] { \"Thing Type ID\", \"Description\", \"Supported Models\" };\n+\n+        List<String[]> rows = new ArrayList<>();\n+        rows.add(headerRow);\n+        rows.addAll(thingTypeDataList.stream().map(ThingTypeTableGenerator::toRow).collect(Collectors.toList()));\n+\n+        int[] maxColumns = { maxColumnSize(rows, 0), maxColumnSize(rows, 1), maxColumnSize(rows, 2) };\n+\n+        StringWriter writer = new StringWriter();\n+\n+        // write actual rows\n+        rows.forEach(row -> {\n+            writer.append(writeRow(maxColumns, row, ' ')).append('\\n');\n+            if (row == headerRow) {\n+                writer.append(writeRow(maxColumns, new String[] { \"\", \"\", \"\" }, '-')).append('\\n');\n+            }\n+        });\n+\n+        System.out.println(writer.toString());\n+    }\n+\n+    private static String writeRow(int[] maxColumns, String[] row, char paddingChar) {\n+        String prefix = \"|\" + paddingChar;\n+        String infix = paddingChar + \"|\" + paddingChar;\n+        String suffix = paddingChar + \"|\";\n+\n+        return Stream.of(0, 1, 2).map(i -> StringUtils.rightPad(row[i], maxColumns[i], paddingChar))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzIwOTQwNA=="}, "originalCommit": {"oid": "5cd88ae90220b2453d8c85704066128cb5f1d267"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4393, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}