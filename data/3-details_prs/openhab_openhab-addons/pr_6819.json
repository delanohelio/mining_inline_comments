{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODE5MzI1", "number": 6819, "title": "[Exec] Properly split command & pipe support", "bodyText": "Implemented @@ manual split (@see https://www.openhab.org/docs/configuration/actions.html#exec-actions)\nPass to shell if not manually split (detect shell via https://stackoverflow.com/a/31547504/7508309, permission by author)\nFixes #6729\nAdded benefit: Pass to shell allows for pipes\n\nSigned-off-by: Constantin Piber cp.piber@gmail.com", "createdAt": "2020-01-12T11:16:14Z", "url": "https://github.com/openhab/openhab-addons/pull/6819", "merged": true, "mergeCommit": {"oid": "fecfacb4342c4fbc74bf1439ea7d9ac72494ad30"}, "closed": true, "closedAt": "2020-01-25T20:29:44Z", "author": {"login": "cpiber"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5lrB7AH2gAyMzYxODE5MzI1OjBiNzA2YWM0NDhiODc5ZTEyMDdlZmUyZWMzOWQ5NTFlM2Y1MmE3YTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb93oTzgFqTM0ODMzNzk5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3", "author": {"user": {"login": "cpiber", "name": "Constantin Piber"}}, "url": "https://github.com/openhab/openhab-addons/commit/0b706ac448b879e1207efe2ec39d951e3f52a7a3", "committedDate": "2020-01-12T11:02:06Z", "message": "[Exec] Properly split command\n\n- Implemented @@ manual split (@see https://www.openhab.org/docs/configuration/actions.html#exec-actions)\n- Pass to shell if not manually split (detect shell via https://stackoverflow.com/a/31547504/7508309, permission by author)\nFixes #6729\nAdded benefit: Pass to shell allows for pipes\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTc2MjUw", "url": "https://github.com/openhab/openhab-addons/pull/6819#pullrequestreview-341576250", "createdAt": "2020-01-12T13:42:42Z", "commit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo0Mjo0M1rOFcpe9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDoyMToxOFrOFcpnrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDExNw==", "bodyText": "\"pass to system\" ? or \"pass to shell\" ? Not always bash.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584117", "createdAt": "2020-01-12T13:42:43Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -52,9 +53,20 @@\n  * sent to one of the channels.\n  *\n  * @author Karel Goderis - Initial contribution\n+ * @author Constantin Piber - Added better argument support (delimiter and pass to bash)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDI3OA==", "bodyText": "Eliminate the unneeded Object[] and just pass commandLine and e.getMessage().\nThis should also be a WARN instead of an ERROR.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584278", "createdAt": "2020-01-12T13:45:42Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDQyMA==", "bodyText": "PatternSyntaxException", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584420", "createdAt": "2020-01-12T13:48:13Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDU2Nw==", "bodyText": "The @@ case above doesn't have a corresponding output. I think this isn't useful.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584567", "createdAt": "2020-01-12T13:50:47Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY2Ng==", "bodyText": "Again, no need for Object[] here.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584666", "createdAt": "2020-01-12T13:52:35Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY3Nw==", "bodyText": "No need for Object[] here.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584677", "createdAt": "2020-01-12T13:52:49Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY5NA==", "bodyText": "No need for Object[] here.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584694", "createdAt": "2020-01-12T13:53:07Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDc3OQ==", "bodyText": "commandLine is already a String.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584779", "createdAt": "2020-01-12T13:54:02Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDg0NQ==", "bodyText": "commandLine is already a String.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584845", "createdAt": "2020-01-12T13:55:26Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDkwMA==", "bodyText": "This should be a WARN instead of an ERROR.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584900", "createdAt": "2020-01-12T13:56:08Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDk0Nw==", "bodyText": "This should be a WARN instead of an ERROR.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584947", "createdAt": "2020-01-12T13:56:38Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDk2NQ==", "bodyText": "No need for Object[] here.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584965", "createdAt": "2020-01-12T13:57:01Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",\n-                            new Object[] { commandLine.toString(), e.getMessage() });\n+                            new Object[] { Arrays.asList(cmdArray), e.getMessage() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTA0Ng==", "bodyText": "Eliminate this block.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585046", "createdAt": "2020-01-12T13:58:31Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",\n-                            new Object[] { commandLine.toString(), e.getMessage() });\n+                            new Object[] { Arrays.asList(cmdArray), e.getMessage() });\n+                    if (!didSplit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTU0Nw==", "bodyText": "I'd recommend making these methods part of the ExecHandler class directly. If not, this class needs to be in a new file.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585547", "createdAt": "2020-01-12T14:07:34Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTU2OQ==", "bodyText": "\"UNKNOWN\"", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585569", "createdAt": "2020-01-12T14:07:50Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTYzMA==", "bodyText": "Recommend eliminating this comment.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585630", "createdAt": "2020-01-12T14:08:39Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTgyMA==", "bodyText": "Recommend renaming this method to getOperatingSystemType()", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585820", "createdAt": "2020-01-12T14:12:09Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.\n+\n+    private static OS os = null;\n+\n+    public static OS getOS() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTgzNg==", "bodyText": "Reommend renaming this method to getOperatingSystemName()", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585836", "createdAt": "2020-01-12T14:12:35Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.\n+\n+    private static OS os = null;\n+\n+    public static OS getOS() {\n+        if (os == null) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOSString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NjM1MQ==", "bodyText": "Don't these changes break the way lastInput is used?", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365586351", "createdAt": "2020-01-12T14:21:18Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -97,9 +109,8 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                     lastInput = command.toString();\n                     if (lastInput != null && !lastInput.equals(previousInput)) {\n                         if (getConfig().get(AUTORUN) != null && ((Boolean) getConfig().get(AUTORUN)).booleanValue()) {\n-                            lastInput = command.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4827bc82b91f29d0cb9cb2ccf986d3e210402605", "author": {"user": {"login": "cpiber", "name": "Constantin Piber"}}, "url": "https://github.com/openhab/openhab-addons/commit/4827bc82b91f29d0cb9cb2ccf986d3e210402605", "committedDate": "2020-01-12T14:58:57Z", "message": "Incorporate suggested changes\n\nChanges as suggested by @9037568\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxNTgwNTYy", "url": "https://github.com/openhab/openhab-addons/pull/6819#pullrequestreview-341580562", "createdAt": "2020-01-12T15:01:50Z", "commit": {"oid": "4827bc82b91f29d0cb9cb2ccf986d3e210402605"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51498e1dcf2460f9bee741fa5b9b3ecc9bee27e5", "author": {"user": {"login": "cpiber", "name": "Constantin Piber"}}, "url": "https://github.com/openhab/openhab-addons/commit/51498e1dcf2460f9bee741fa5b9b3ecc9bee27e5", "committedDate": "2020-01-12T15:04:31Z", "message": "Remove remaining `new Object[] {...}`\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjgxMzk3", "url": "https://github.com/openhab/openhab-addons/pull/6819#pullrequestreview-343681397", "createdAt": "2020-01-16T05:33:55Z", "commit": {"oid": "51498e1dcf2460f9bee741fa5b9b3ecc9bee27e5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "518f06826a42eb27d59b2031cc2fc2dc8eebdb2b", "author": {"user": {"login": "cpiber", "name": "Constantin Piber"}}, "url": "https://github.com/openhab/openhab-addons/commit/518f06826a42eb27d59b2031cc2fc2dc8eebdb2b", "committedDate": "2020-01-16T06:17:45Z", "message": "Fixed logging levels error to warn per standard\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2767d7105978ed0f0f3c2e82052a1cdd393959c", "author": {"user": {"login": "cpiber", "name": "Constantin Piber"}}, "url": "https://github.com/openhab/openhab-addons/commit/d2767d7105978ed0f0f3c2e82052a1cdd393959c", "committedDate": "2020-01-16T06:21:04Z", "message": "Removed redundant .toString() and log\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTIzMDEy", "url": "https://github.com/openhab/openhab-addons/pull/6819#pullrequestreview-344923012", "createdAt": "2020-01-18T03:44:54Z", "commit": {"oid": "d2767d7105978ed0f0f3c2e82052a1cdd393959c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb", "author": {"user": {"login": "cpiber", "name": "Constantin Piber"}}, "url": "https://github.com/openhab/openhab-addons/commit/4b9a0434e1875df5109aca1393f08819c0fe51cb", "committedDate": "2020-01-21T07:50:54Z", "message": "Commands starting with any shell split by spaces\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1ODY4Mjg3", "url": "https://github.com/openhab/openhab-addons/pull/6819#pullrequestreview-345868287", "createdAt": "2020-01-21T13:18:47Z", "commit": {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxODo0N1rOFf5nnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyNTo0MlrOFf50eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NDIwNQ==", "bodyText": "The commandLine has already been determined to be longer than 0, up at line 156, so this statement is not needed.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368994205", "createdAt": "2020-01-21T13:18:47Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh)) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            if (commandLine.length() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NjMxMg==", "bodyText": "boolean startsWithShell = false;", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368996312", "createdAt": "2020-01-21T13:23:06Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NzQ5Nw==", "bodyText": "This will fail for commands like \"shout\", \"show\", etc. Need to have a space after the shell string.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368997497", "createdAt": "2020-01-21T13:25:42Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4", "author": {"user": {"login": "cpiber", "name": "Constantin Piber"}}, "url": "https://github.com/openhab/openhab-addons/commit/44cc86811d333b92299db8acbdf5c5bc27b68bf4", "committedDate": "2020-01-22T06:35:48Z", "message": "Remove redundant checks, better shell checks\n\nonly invoke shell if the first WORD is a shell-program, not just the\nbeginning of the string (ex. shout shouldn't match)\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NTY0MzA1", "url": "https://github.com/openhab/openhab-addons/pull/6819#pullrequestreview-346564305", "createdAt": "2020-01-22T12:54:43Z", "commit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDY1MTI2", "url": "https://github.com/openhab/openhab-addons/pull/6819#pullrequestreview-347465126", "createdAt": "2020-01-23T17:08:23Z", "commit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowODoyM1rOFhF9ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxNTozMVrOFhGLVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NTAwMg==", "bodyText": "I have a question here: Why don't you get the operating system type once and then use the local variable in a switch-statement. Are your sure that everything other than OS.WINDOWS and OS.UNKNOWN is a supported *nix? And please add the unsupported OS-name to the warn-message logger.warn(\"OS '{}' not supported, please split commands manually!\", getOperatingSystemName());).\nEdit: I found it below. But the if-else is not very intuitive here. Please use a switch-statement.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370245002", "createdAt": "2020-01-23T17:08:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -160,21 +172,61 @@ public void run() {\n                         commandLine = String.format(commandLine, Calendar.getInstance().getTime());\n                     }\n                 } catch (IllegalFormatException e) {\n-                    logger.error(\n+                    logger.warn(\n                             \"An exception occurred while formatting the command line with the current time and input values : '{}'\",\n                             e.getMessage());\n                     updateState(RUN, OnOffType.OFF);\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                String[] shell;\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (PatternSyntaxException e) {\n+                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                                commandLine, e.getMessage());\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NzE0Ng==", "bodyText": "Is it necessary to catch Exception here? According to the docs there is a limited number of exceptions, I think we can omit the NPE if we make sure that none of the commands is null (which should be done anyway).", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370247146", "createdAt": "2020-01-23T17:12:44Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -160,21 +172,61 @@ public void run() {\n                         commandLine = String.format(commandLine, Calendar.getInstance().getTime());\n                     }\n                 } catch (IllegalFormatException e) {\n-                    logger.error(\n+                    logger.warn(\n                             \"An exception occurred while formatting the command line with the current time and input values : '{}'\",\n                             e.getMessage());\n                     updateState(RUN, OnOffType.OFF);\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                String[] shell;\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (PatternSyntaxException e) {\n+                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                                commandLine, e.getMessage());\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                        cmdArray = createCmdArray(shell, \"/c\", commandLine);\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n+                        cmdArray = createCmdArray(shell, \"-c\", commandLine);\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n+                        logger.warn(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                if (cmdArray.length == 0) {\n+                    logger.trace(\"Empty command received, not executing\");\n+                    return;\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NzU4MQ==", "bodyText": "And this should be warn, also below. error is reserved for the framework of occasions where the stability of the system may be affected.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370247581", "createdAt": "2020-01-23T17:13:35Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -193,7 +245,7 @@ public void run() {\n                     isr.close();\n                 } catch (IOException e) {\n                     logger.error(\"An exception occurred while reading the stdout when executing '{}' : '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw==", "bodyText": "Please run mvn spotless:apply after the code issues are done.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370248533", "createdAt": "2020-01-23T17:15:31Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -298,4 +350,76 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n-}\n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = false;\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh+\" \")) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            return new String[]{shell[0], cOption, commandLine};\n+        } else {\n+            logger.debug(\"Splitting by spaces\");\n+            try {\n+                return commandLine.split(\" \");\n+            } catch (PatternSyntaxException e) {\n+                logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                        commandLine, e.getMessage());\n+                updateState(RUN, OnOffType.OFF);\n+                updateState(OUTPUT, new StringType(e.getMessage()));\n+                return new String[] {};\n+            }\n+        }\n+    }\n+\n+\n+\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n+\n+    private static OS os = OS.NOT_SET;\n+\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKNOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOperatingSystemName() {\n+        return System.getProperty(\"os.name\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 232}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1dad1337fa0c9cbdc7be159689f55a19b520e56", "author": {"user": {"login": "cpiber", "name": "Constantin Piber"}}, "url": "https://github.com/openhab/openhab-addons/commit/f1dad1337fa0c9cbdc7be159689f55a19b520e56", "committedDate": "2020-01-25T17:26:49Z", "message": "Cosmetic changes, cleanup, spotless\n\nSigned-off-by: Constantin Piber <cp.piber@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzM3OTk4", "url": "https://github.com/openhab/openhab-addons/pull/6819#pullrequestreview-348337998", "createdAt": "2020-01-25T18:13:07Z", "commit": {"oid": "f1dad1337fa0c9cbdc7be159689f55a19b520e56"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1627, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}