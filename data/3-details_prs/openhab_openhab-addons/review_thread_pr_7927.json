{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzQzMjE5", "number": 7927, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMTowMVrOEGDXdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMjoyM1rOEG4Exw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzgyMDcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMTowMVrOGknVUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxMToxM1rOGkraqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NjM1Mw==", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.\nI suggest downgrading this to warning or setting the handler to offline.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441046353", "createdAt": "2020-06-16T18:11:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if(UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        Optional<JSONObject> jsonContent = executeGETRequest(url).map(JSONObject::new);\n+        if(!jsonContent.isPresent()) {\n+            logger.error(\"The request-result could not get retrieved!\");\n+        }\n+        return jsonContent;\n+    }\n+\n+    Optional<String> executeGETRequest(String url) {\n+        try {\n+            String content = HttpUtil.executeUrl(\"GET\", url, 5000);\n+            if (content != null && !content.isEmpty()) {\n+                return Optional.of(content);\n+            }\n+        } catch (IOException | JSONException e) {\n+            logger.error(\"Error on loading local camera url!\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde518f9e8701b767bf71e9afe380d03e90221b3"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMzI1Nw==", "bodyText": "ok, good hint to the guidelines. Thank you.\nDone.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441113257", "createdAt": "2020-06-16T20:11:13Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if(UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        Optional<JSONObject> jsonContent = executeGETRequest(url).map(JSONObject::new);\n+        if(!jsonContent.isPresent()) {\n+            logger.error(\"The request-result could not get retrieved!\");\n+        }\n+        return jsonContent;\n+    }\n+\n+    Optional<String> executeGETRequest(String url) {\n+        try {\n+            String content = HttpUtil.executeUrl(\"GET\", url, 5000);\n+            if (content != null && !content.isEmpty()) {\n+                return Optional.of(content);\n+            }\n+        } catch (IOException | JSONException e) {\n+            logger.error(\"Error on loading local camera url!\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NjM1Mw=="}, "originalCommit": {"oid": "dde518f9e8701b767bf71e9afe380d03e90221b3"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzgyOTAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMzoyN1rOGknalA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDoxMzo0MVrOGkrfPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NzcwMA==", "bodyText": "This should be changed to debug, otherwise you are just double logging what already was logged in executeGETRequest.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441047700", "createdAt": "2020-06-16T18:13:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if(UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        Optional<JSONObject> jsonContent = executeGETRequest(url).map(JSONObject::new);\n+        if(!jsonContent.isPresent()) {\n+            logger.error(\"The request-result could not get retrieved!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde518f9e8701b767bf71e9afe380d03e90221b3"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNDQyOA==", "bodyText": "Ok, I have now refactored the Exception handling and logging a bit, this line doesn't exist anymore.\nDone.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441114428", "createdAt": "2020-06-16T20:13:41Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if(UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        Optional<JSONObject> jsonContent = executeGETRequest(url).map(JSONObject::new);\n+        if(!jsonContent.isPresent()) {\n+            logger.error(\"The request-result could not get retrieved!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NzcwMA=="}, "originalCommit": {"oid": "dde518f9e8701b767bf71e9afe380d03e90221b3"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODY1NzkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjozOToxMlrOGkvkUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNzo1OToxOFrOGlQ9fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MTI2NQ==", "bodyText": "Using getString with throw an exception if it fails to find anything at that field name, use optString instead so it will return null.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441181265", "createdAt": "2020-06-16T22:39:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if (UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e07d1edfeb6ff12fc31b3f6d2b84d754ddc46d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcyODM4MA==", "bodyText": "Good argument and solution. Thank you.\nIt is now fixed.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441728380", "createdAt": "2020-06-17T17:59:18Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if (UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MTI2NQ=="}, "originalCommit": {"oid": "c5e07d1edfeb6ff12fc31b3f6d2b84d754ddc46d"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjEzMzMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyMTo1OVrOGlRvhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNToxMVrOGl5gGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTE5MA==", "bodyText": "== OnOffType.ON could rather ne used I think.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441741190", "createdAt": "2020-06-17T18:21:59Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MjYwMw==", "bodyText": "I don't prefer and wouldn't recommend it, because this can get easily broken without a notice, for example when someone refactors the enum to a class with constants or when a new version of the swagger generator doesn't generate enums anymore. The usages aren't broken but at runtime it would not work anymore. An it's hard to find these usages because you can't search type-safe for \"==\" within big code bases.\nBut I changed it... ;-)\nDone.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r442392603", "createdAt": "2020-06-18T17:35:11Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTE5MA=="}, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjEzNDczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyMjoyNVrOGlRwcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNToyNFrOGl5gtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTQyNg==", "bodyText": "Same", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441741426", "createdAt": "2020-06-17T18:22:25Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5Mjc1Nw==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r442392757", "createdAt": "2020-06-18T17:35:24Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTQyNg=="}, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjEzNjI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyMjo1N1rOGlRxfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNTozMFrOGl5g6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTY5Mg==", "bodyText": "Same", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441741692", "createdAt": "2020-06-17T18:22:57Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MjgxMA==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r442392810", "createdAt": "2020-06-18T17:35:30Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTY5Mg=="}, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjEzNzU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyMzoyMFrOGlRyRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNTozOFrOGl5hKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTg5Mg==", "bodyText": "Same", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441741892", "createdAt": "2020-06-17T18:23:20Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5Mjg3NQ==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r442392875", "createdAt": "2020-06-18T17:35:38Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTg5Mg=="}, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjE0MjI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyNDo1MlrOGlR1eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNTo0NlrOGl5hew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MjcxMw==", "bodyText": "== could be used rather than equals", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441742713", "createdAt": "2020-06-17T18:24:52Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if (UnDefType.UNDEF.equals(floodlightAutoModeState)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5Mjk1NQ==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r442392955", "createdAt": "2020-06-18T17:35:46Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if (UnDefType.UNDEF.equals(floodlightAutoModeState)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MjcxMw=="}, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjQ1NjM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMjoyM1rOGl8ZLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowODoxNFrOGl8kmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzOTk4MA==", "bodyText": "I might have merged too quickly, but just to double check, I don't see you changing NAWelcomeCameraHandler to extend CameraHandler. Was that supposed to be done?", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r442439980", "createdAt": "2020-06-18T19:02:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -145,7 +146,7 @@ protected State getNAThingProperty(String channelId) {\n                     String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n-                        NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n+                        CameraHandler eventCamera = (CameraHandler) thing.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e8f154612e097fb0c099c16ce6d54cc025a8b1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MjkwNg==", "bodyText": "Yes, that is fine. I introduced CameraHandler with a previous pull-request and NAWelcomeCameraHandler and NAPresenceCameraHandler are extending from CameraHandler. It was rather a bug that there was still casted to NAWelcomeCameraHandler (but it was no problem so far, because the Presence was also represented as a NAWelcomeCamera until this new pull-request).", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r442442906", "createdAt": "2020-06-18T19:08:14Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -145,7 +146,7 @@ protected State getNAThingProperty(String channelId) {\n                     String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n-                        NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n+                        CameraHandler eventCamera = (CameraHandler) thing.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzOTk4MA=="}, "originalCommit": {"oid": "16e8f154612e097fb0c099c16ce6d54cc025a8b1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4814, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}