{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDg4MTUw", "number": 9404, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowMjoxNlrOFGdFjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTo0MTozMVrOFGxUvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzEyMzMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowMjoxNlrOIHehBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowMjoxNlrOIHehBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMDkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Set<String> newPythonPathList = new TreeSet<>(\n          \n          \n            \n                                new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n          \n          \n            \n                        Set<String> newPythonPathList = new TreeSet<>(Arrays.asList(existingPythonPath.split(File.pathSeparator)));", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544710917", "createdAt": "2020-12-17T00:02:16Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzEyNTMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowMjo0OFrOIHeiDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODoxNDoxNVrOIHpfVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTE4Mw==", "bodyText": "Not sure why you would need to copy it.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return List.copyOf(scriptTypes);\n          \n          \n            \n                    return scriptTypes;", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544711183", "createdAt": "2020-12-17T00:02:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.add(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);\n+        }\n+\n+        System.setProperty(PYTHON_CACHEDIR,\n+                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n+                        .toString());\n+\n+        logPythonPaths();\n+    }\n+\n+    private void logPythonPaths() {\n+        logger.trace(\"{}: {}, {}: {}, {}: {}\", //\n+                PYTHON_HOME, System.getProperty(PYTHON_HOME), //\n+                PYTHON_PATH, System.getProperty(PYTHON_PATH), //\n+                PYTHON_CACHEDIR, System.getProperty(PYTHON_CACHEDIR));\n+    }\n+\n+    @Override\n+    public List<String> getScriptTypes() {\n+        List<String> scriptTypes = new ArrayList<>();\n+\n+        for (javax.script.ScriptEngineFactory factory : ENGINE_MANAGER.getEngineFactories()) {\n+            List<String> extensions = factory.getExtensions();\n+\n+            if (extensions.contains(SCRIPT_TYPE)) {\n+                scriptTypes.addAll(extensions);\n+                scriptTypes.addAll(factory.getMimeTypes());\n+            }\n+        }\n+        return List.copyOf(scriptTypes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MDcxMQ==", "bodyText": "Applied because it will generate a new result with every call so immutability isn't required.", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544890711", "createdAt": "2020-12-17T08:14:15Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.add(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);\n+        }\n+\n+        System.setProperty(PYTHON_CACHEDIR,\n+                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n+                        .toString());\n+\n+        logPythonPaths();\n+    }\n+\n+    private void logPythonPaths() {\n+        logger.trace(\"{}: {}, {}: {}, {}: {}\", //\n+                PYTHON_HOME, System.getProperty(PYTHON_HOME), //\n+                PYTHON_PATH, System.getProperty(PYTHON_PATH), //\n+                PYTHON_CACHEDIR, System.getProperty(PYTHON_CACHEDIR));\n+    }\n+\n+    @Override\n+    public List<String> getScriptTypes() {\n+        List<String> scriptTypes = new ArrayList<>();\n+\n+        for (javax.script.ScriptEngineFactory factory : ENGINE_MANAGER.getEngineFactories()) {\n+            List<String> extensions = factory.getExtensions();\n+\n+            if (extensions.contains(SCRIPT_TYPE)) {\n+                scriptTypes.addAll(extensions);\n+                scriptTypes.addAll(factory.getMimeTypes());\n+            }\n+        }\n+        return List.copyOf(scriptTypes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTE4Mw=="}, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzEzMDQ2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowNDo0MlrOIHek2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODoxNjowMFrOIHpjkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTg5Nw==", "bodyText": "This looks to be duplicate code from above.", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544711897", "createdAt": "2020-12-17T00:04:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.add(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);\n+        }\n+\n+        System.setProperty(PYTHON_CACHEDIR,\n+                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n+                        .toString());\n+\n+        logPythonPaths();\n+    }\n+\n+    private void logPythonPaths() {\n+        logger.trace(\"{}: {}, {}: {}, {}: {}\", //\n+                PYTHON_HOME, System.getProperty(PYTHON_HOME), //\n+                PYTHON_PATH, System.getProperty(PYTHON_PATH), //\n+                PYTHON_CACHEDIR, System.getProperty(PYTHON_CACHEDIR));\n+    }\n+\n+    @Override\n+    public List<String> getScriptTypes() {\n+        List<String> scriptTypes = new ArrayList<>();\n+\n+        for (javax.script.ScriptEngineFactory factory : ENGINE_MANAGER.getEngineFactories()) {\n+            List<String> extensions = factory.getExtensions();\n+\n+            if (extensions.contains(SCRIPT_TYPE)) {\n+                scriptTypes.addAll(extensions);\n+                scriptTypes.addAll(factory.getMimeTypes());\n+            }\n+        }\n+        return List.copyOf(scriptTypes);\n+    }\n+\n+    @Override\n+    public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n+        ScriptEngine scriptEngine = ENGINE_MANAGER.getEngineByExtension(scriptType);\n+        if (scriptEngine == null) {\n+            scriptEngine = ENGINE_MANAGER.getEngineByMimeType(scriptType);\n+        }\n+        if (scriptEngine == null) {\n+            scriptEngine = ENGINE_MANAGER.getEngineByName(scriptType);\n+        }\n+        return scriptEngine;\n+    }\n+\n+    @Deactivate\n+    public void removePythonPath() {\n+        logger.debug(\"Unloading JythonScriptEngineFactory\");\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath != null && existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.remove(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5MTc5Mg==", "bodyText": "Not exactly. The difference is that one adds and the other removes the path.", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544891792", "createdAt": "2020-12-17T08:16:00Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();\n+\n+    @Activate\n+    public JythonScriptEngineFactory() {\n+        logger.debug(\"Loading JythonScriptEngineFactory\");\n+\n+        String pythonHome = JythonScriptEngineFactory.class.getProtectionDomain().getCodeSource().getLocation()\n+                .toString().replace(\"file:\", \"\");\n+        System.setProperty(PYTHON_HOME, pythonHome);\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath == null || existingPythonPath.isEmpty()) {\n+            System.setProperty(PYTHON_PATH, DEFAULT_PYTHON_PATH);\n+        } else if (!existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.add(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);\n+        }\n+\n+        System.setProperty(PYTHON_CACHEDIR,\n+                Paths.get(OpenHAB.getUserDataFolder(), \"cache\", \"org.openhab.automation.jythonscripting\", \"cachedir\")\n+                        .toString());\n+\n+        logPythonPaths();\n+    }\n+\n+    private void logPythonPaths() {\n+        logger.trace(\"{}: {}, {}: {}, {}: {}\", //\n+                PYTHON_HOME, System.getProperty(PYTHON_HOME), //\n+                PYTHON_PATH, System.getProperty(PYTHON_PATH), //\n+                PYTHON_CACHEDIR, System.getProperty(PYTHON_CACHEDIR));\n+    }\n+\n+    @Override\n+    public List<String> getScriptTypes() {\n+        List<String> scriptTypes = new ArrayList<>();\n+\n+        for (javax.script.ScriptEngineFactory factory : ENGINE_MANAGER.getEngineFactories()) {\n+            List<String> extensions = factory.getExtensions();\n+\n+            if (extensions.contains(SCRIPT_TYPE)) {\n+                scriptTypes.addAll(extensions);\n+                scriptTypes.addAll(factory.getMimeTypes());\n+            }\n+        }\n+        return List.copyOf(scriptTypes);\n+    }\n+\n+    @Override\n+    public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n+        ScriptEngine scriptEngine = ENGINE_MANAGER.getEngineByExtension(scriptType);\n+        if (scriptEngine == null) {\n+            scriptEngine = ENGINE_MANAGER.getEngineByMimeType(scriptType);\n+        }\n+        if (scriptEngine == null) {\n+            scriptEngine = ENGINE_MANAGER.getEngineByName(scriptType);\n+        }\n+        return scriptEngine;\n+    }\n+\n+    @Deactivate\n+    public void removePythonPath() {\n+        logger.debug(\"Unloading JythonScriptEngineFactory\");\n+\n+        String existingPythonPath = System.getProperty(PYTHON_PATH);\n+        if (existingPythonPath != null && existingPythonPath.contains(DEFAULT_PYTHON_PATH)) {\n+            Set<String> newPythonPathList = new TreeSet<>(\n+                    new ArrayList<>(Arrays.asList(existingPythonPath.split(File.pathSeparator))));\n+            newPythonPathList.remove(DEFAULT_PYTHON_PATH);\n+            String newPythonPath = String.join(File.pathSeparator, newPythonPathList);\n+            System.setProperty(PYTHON_PATH, newPythonPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMTg5Nw=="}, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzEzMzYxOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMDowNTo1MVrOIHemjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwODoyNjoyN1rOIHp7zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMjMzMg==", "bodyText": "What do these changes have to do with this PR?", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544712332", "createdAt": "2020-12-17T00:05:51Z", "author": {"login": "cpmeister"}, "path": "pom.xml", "diffHunk": "@@ -153,7 +154,8 @@ Import-Package: \\\\\n   ${bnd.exportpackage}\n -sources: false\n -contract: *\n--includeresource: ${bnd.includeresource}]]></bnd>\n+-includeresource: ${bnd.includeresource}\n+-fixupmessages: ${bnd.fixupmessages}]]></bnd>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5Nzk5Nw==", "bodyText": "The -fixupmessages is required for embedding the jython JAR. Without this config Bnd errors. By adding it this way future add-ons can also use it. The only other way I see to customize the bnd instructions would be to duplicate the whole plugin configuration in each add-on POM.\nIf possible I would prefer to start using bnd.bnd files similarly like we do in the core and osgiify. That would provide an easier and more standard way to customize the bnd instructions per add-on. It might also fix the issue of always having to add all those optional imports for embedded JARs. You can see that in #7208 adding all those optional imports wasn't necessary for the embedded JAR.", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r544897997", "createdAt": "2020-12-17T08:26:27Z", "author": {"login": "wborn"}, "path": "pom.xml", "diffHunk": "@@ -153,7 +154,8 @@ Import-Package: \\\\\n   ${bnd.exportpackage}\n -sources: false\n -contract: *\n--includeresource: ${bnd.includeresource}]]></bnd>\n+-includeresource: ${bnd.includeresource}\n+-fixupmessages: ${bnd.fixupmessages}]]></bnd>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcxMjMzMg=="}, "originalCommit": {"oid": "36ab179f5bb46dead769975154250b1b1146f867"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNjQzOTAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNTo0MTozMVrOIH7rrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozMDo0NlrOIIDHjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ==", "bodyText": "See #7208 (comment)", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545188781", "createdAt": "2020-12-17T15:41:31Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560a6bf9899300c313aab98924db41998a01a746"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMDIzMw==", "bodyText": "Thanks for testing! The issue is that the org.openhab.core.automation.module.script.ScriptEngineFactory.ENGINE_MANAGER has a different classloader. So it only detects engines that are on the boot classpath (like Nashorn). I ran into the same issue with the Groovy add-on. I looked into ways to get engines registered in the ScriptEngineFactory.ENGINE_MANAGER. IIRC it wasn't possible to call methods on ScriptEngineFactory.ENGINE_MANAGER to (un)register engines provided by OSGi bundles.", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545220233", "createdAt": "2020-12-17T16:22:04Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ=="}, "originalCommit": {"oid": "560a6bf9899300c313aab98924db41998a01a746"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyODc4Nw==", "bodyText": "Do you have any concerns regarding SecurityException which might be thrown by this method?\n\nWe don't seem to handle any SecurityExceptions in openhab-core either when modifying System properties:\nhttps://github.com/openhab/openhab-core/search?q=System.setProperty", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545228787", "createdAt": "2020-12-17T16:33:25Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ=="}, "originalCommit": {"oid": "560a6bf9899300c313aab98924db41998a01a746"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5OTYyMA==", "bodyText": "Do we need to handle it?", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545299620", "createdAt": "2020-12-17T18:13:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ=="}, "originalCommit": {"oid": "560a6bf9899300c313aab98924db41998a01a746"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxMDYwNw==", "bodyText": "Ah, okay. Sounds reasonable. Thanks for clarification.\n\nDo we need to handle it?\n\nI think it is okay to not handle it. If the exceptions will be thrown there might be a bigger issue regarding permissions and other stuff will fail too.", "url": "https://github.com/openhab/openhab-addons/pull/9404#discussion_r545310607", "createdAt": "2020-12-17T18:30:46Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.automation.jythonscripting/src/main/java/org/openhab/automation/jythonscripting/JythonScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.automation.jythonscripting;\n+\n+import java.io.File;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import javax.script.ScriptEngine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.automation.module.script.AbstractScriptEngineFactory;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+\n+/**\n+ * This is an implementation of {@link ScriptEngineFactory} for Jython.\n+ *\n+ * @author Scott Rushworth - Initial contribution\n+ * @author Wouter Born - Initial contribution\n+ */\n+@Component(service = ScriptEngineFactory.class)\n+@NonNullByDefault\n+public class JythonScriptEngineFactory extends AbstractScriptEngineFactory {\n+\n+    private static final String PYTHON_CACHEDIR = \"python.cachedir\";\n+    private static final String PYTHON_HOME = \"python.home\";\n+    private static final String PYTHON_PATH = \"python.path\";\n+\n+    private static final String DEFAULT_PYTHON_PATH = Paths\n+            .get(OpenHAB.getConfigFolder(), \"automation\", \"lib\", \"python\").toString();\n+\n+    private static final String SCRIPT_TYPE = \"py\";\n+    private static final javax.script.ScriptEngineManager ENGINE_MANAGER = new javax.script.ScriptEngineManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTE4ODc4MQ=="}, "originalCommit": {"oid": "560a6bf9899300c313aab98924db41998a01a746"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3698, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}