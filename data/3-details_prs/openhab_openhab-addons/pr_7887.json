{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjI1ODE5", "number": 7887, "title": "[homekit] add support for heater/cooler. closes #7759", "bodyText": "it is summer time, so lets add support for cooler (and heater) to HomeKit binding as requested in #7759.\nthis PR:\n\nadd support for heater/cooler with all mandatory and optional characteristics supported by HomeKit specification\nadd support for configurable mapping for string values at item level. e.g. one can define custom mapping for Cooler states.\nimprove some logging in the binding - dont log internal names of characteristics but the actual tag used in the item config\n\ncloses #7759\ncloses #1368\nSigned-off-by: Eugen Freiter freiter@gmx.de", "createdAt": "2020-06-10T18:25:25Z", "url": "https://github.com/openhab/openhab-addons/pull/7887", "merged": true, "mergeCommit": {"oid": "d43edc4de5086762ba6acfcf86473f3c2f9fe737"}, "closed": true, "closedAt": "2020-06-16T22:31:19Z", "author": {"login": "yfre"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp9yG3gH2gAyNDMyNjI1ODE5Ojk3NjAxYTRkN2UzMTBhM2RkOWJiODk3NzQyMjUzMGNlZGNhMTliYmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr7PUAgFqTQzMTg2NDM4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "97601a4d7e310a3dd9bb8977422530cedca19bbd", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/97601a4d7e310a3dd9bb8977422530cedca19bbd", "committedDate": "2020-06-10T18:15:55Z", "message": "add heater/cooler\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/5155ea6e8b9d6654725697b08a6ee6d37da4e145", "committedDate": "2020-06-10T19:42:20Z", "message": "switch back to custom java hap build\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MzczNDY4", "url": "https://github.com/openhab/openhab-addons/pull/7887#pullrequestreview-428373468", "createdAt": "2020-06-10T19:43:22Z", "commit": {"oid": "97601a4d7e310a3dd9bb8977422530cedca19bbd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0MzoyM1rOGiDwvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0MzoyM1rOGiDwvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NjM5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Switch          cooler_active \t\t\t\t\"Cooler Active\" \t\t\t\t    (gCooller) \t\t    {homekit=\"ActiveStatus\"}\n          \n          \n            \n            Switch          cooler_active \t\t\t\t\"Cooler Active\" \t\t\t\t    (gCooler) \t\t    {homekit=\"ActiveStatus\"}\n          \n      \n    \n    \n  \n\nalso below", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438366399", "createdAt": "2020-06-10T19:43:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/README.md", "diffHunk": "@@ -378,6 +389,14 @@ Switch          contactsensor_tampered     \"Contact Sensor Tampered\"\n Group           gSecuritySystem            \"Security System Group\"                                   {homekit=\"SecuritySystem\"}\n String          security_current_state     \"Security Current State\"             (gSecuritySystem)    {homekit=\"SecuritySystem.CurrentSecuritySystemState\"}\n String          security_target_state      \"Security Target State\"              (gSecuritySystem)    {homekit=\"SecuritySystem.TargetSecuritySystemState\"}\n+\n+Group  \t\t\tgCooller    \t\t\t\t\"Cooler Group\"       \t\t\t\t \t                {homekit=\"HeaterCooler\"}\n+Switch          cooler_active \t\t\t\t\"Cooler Active\" \t\t\t\t    (gCooller) \t\t    {homekit=\"ActiveStatus\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97601a4d7e310a3dd9bb8977422530cedca19bbd"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDA0OTAy", "url": "https://github.com/openhab/openhab-addons/pull/7887#pullrequestreview-428404902", "createdAt": "2020-06-10T20:30:57Z", "commit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozMDo1OFrOGiFPRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozMDo1OFrOGiFPRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MDU5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Number \t\t\tcooler_hea_thrs \t        \"Cooler Heat Threshold Temp [%.1f C]\"  \t(gCooller)  \t{homekit=\"HeatingThresholdTemperature\" [minValue=0.5, maxValue=20]}\n          \n          \n            \n            Number \t\t\tcooler_heat_thrs \t        \"Cooler Heat Threshold Temp [%.1f C]\"  \t(gCooller)  \t{homekit=\"HeatingThresholdTemperature\" [minValue=0.5, maxValue=20]}", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438390598", "createdAt": "2020-06-10T20:30:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/README.md", "diffHunk": "@@ -378,6 +389,14 @@ Switch          contactsensor_tampered     \"Contact Sensor Tampered\"\n Group           gSecuritySystem            \"Security System Group\"                                   {homekit=\"SecuritySystem\"}\n String          security_current_state     \"Security Current State\"             (gSecuritySystem)    {homekit=\"SecuritySystem.CurrentSecuritySystemState\"}\n String          security_target_state      \"Security Target State\"              (gSecuritySystem)    {homekit=\"SecuritySystem.TargetSecuritySystemState\"}\n+\n+Group  \t\t\tgCooller    \t\t\t\t\"Cooler Group\"       \t\t\t\t \t                {homekit=\"HeaterCooler\"}\n+Switch          cooler_active \t\t\t\t\"Cooler Active\" \t\t\t\t    (gCooller) \t\t    {homekit=\"ActiveStatus\"}\n+Number \t\t\tcooler_current_temp     \t\"Cooler Current Temp [%.1f C]\"  \t(gCooller)  \t    {homekit=\"CurrentTemperature\"}\n+String \t\t\tcooler_current_mode  \t    \"Cooler Current Mode\" \t\t        (gCooller) \t\t\t{homekit=\"CurrentHeaterCoolerState\" [HEATING=\"HEAT\", COOLING=\"COOL\"]}          \n+String \t\t\tcooler_target_mode  \t    \"Cooler Target Mode\" \t\t\t\t(gCooller)          {homekit=\"TargetHeaterCoolerState\"}  \n+Number \t\t\tcooler_cool_thrs \t        \"Cooler Cool Threshold Temp [%.1f C]\"  \t(gCooller)  \t{homekit=\"CoolingThresholdTemperature\" [minValue=10.5, maxValue=50]}\n+Number \t\t\tcooler_hea_thrs \t        \"Cooler Heat Threshold Temp [%.1f C]\"  \t(gCooller)  \t{homekit=\"HeatingThresholdTemperature\" [minValue=0.5, maxValue=20]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDE5NTY4", "url": "https://github.com/openhab/openhab-addons/pull/7887#pullrequestreview-428419568", "createdAt": "2020-06-10T20:53:03Z", "commit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDo1MzowM1rOGiF65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTowNzoyN1rOGiGXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMTc2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType, HashMap<T, String> mapping,\n          \n          \n            \n                protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType, Map<T, String> mapping,", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438401766", "createdAt": "2020-06-10T20:53:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -209,8 +200,58 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n     protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType,\n             @NonNull String key, @NonNull T defaultValue) {\n         final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n-        return characteristic.isPresent() ? getItemConfiguration(characteristic.get(), key, defaultValue)\n-                : defaultValue;\n+        return characteristic.isPresent() ? characteristic.get().getConfiguration(key, defaultValue) : defaultValue;\n+    }\n+\n+    /**\n+     * update mapping with values from item configuration.\n+     * it checks for all keys from the mapping whether there is configuration at item with the same key and if yes,\n+     * replace the value.\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param map mapping to update\n+     */\n+    protected void updateMapping(HomekitCharacteristicType characteristicType, HashMap<?, String> map) {\n+        getCharacteristic(characteristicType).ifPresent(c -> {\n+            final Map<String, Object> configuration = c.getConfiguration();\n+            if (configuration != null) {\n+                map.replaceAll((k, current_value) -> {\n+                    final Object new_value = configuration.get(current_value);\n+                    return (new_value instanceof String) ? (String) new_value : current_value;\n+                });\n+            }\n+        });\n+    }\n+\n+    /**\n+     * takes item state as value and retrieves the key for that value from mapping.\n+     * e.g. used to map StringItem value to HomeKit Enum\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param mapping mapping\n+     * @param defaultValue default value if nothing found in mapping\n+     * @param <T> type of the result derived from\n+     * @return key for the value\n+     */\n+    protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType, HashMap<T, String> mapping,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwODkzNQ==", "bodyText": "Seems like a perfect place to use an EnumMap instead of a HashMap", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438408935", "createdAt": "2020-06-10T21:07:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final HashMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new HashMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwODk5Mg==", "bodyText": "here too", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438408992", "createdAt": "2020-06-10T21:07:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final HashMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new HashMap() {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final HashMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new HashMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/8051d7133e8f22927ccbe544d7e8f45e5917709c", "committedDate": "2020-06-10T21:45:23Z", "message": "address feedback\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDgyMTg2", "url": "https://github.com/openhab/openhab-addons/pull/7887#pullrequestreview-428482186", "createdAt": "2020-06-10T22:54:13Z", "commit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1NDoxM1rOGiI6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1NjoxNFrOGiI86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MDc3Nw==", "bodyText": "It is best to keep things as broadly defined as possible in order to maximize flexibility.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n          \n            \n                        EnumMap<T, String> mapping, final T defaultValue) {\n          \n          \n            \n                protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n          \n            \n                        Map<T, String> mapping, final T defaultValue) {", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438450777", "createdAt": "2020-06-10T22:54:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -209,8 +200,58 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n     protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType,\n             @NonNull String key, @NonNull T defaultValue) {\n         final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n-        return characteristic.isPresent() ? getItemConfiguration(characteristic.get(), key, defaultValue)\n-                : defaultValue;\n+        return characteristic.isPresent() ? characteristic.get().getConfiguration(key, defaultValue) : defaultValue;\n+    }\n+\n+    /**\n+     * update mapping with values from item configuration.\n+     * it checks for all keys from the mapping whether there is configuration at item with the same key and if yes,\n+     * replace the value.\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param map mapping to update\n+     */\n+    protected void updateMapping(HomekitCharacteristicType characteristicType, EnumMap<?, String> map) {\n+        getCharacteristic(characteristicType).ifPresent(c -> {\n+            final Map<String, Object> configuration = c.getConfiguration();\n+            if (configuration != null) {\n+                map.replaceAll((k, current_value) -> {\n+                    final Object new_value = configuration.get(current_value);\n+                    return (new_value instanceof String) ? (String) new_value : current_value;\n+                });\n+            }\n+        });\n+    }\n+\n+    /**\n+     * takes item state as value and retrieves the key for that value from mapping.\n+     * e.g. used to map StringItem value to HomeKit Enum\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param mapping mapping\n+     * @param defaultValue default value if nothing found in mapping\n+     * @param <T> type of the result derived from\n+     * @return key for the value\n+     */\n+    protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n+            EnumMap<T, String> mapping, final T defaultValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTE3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n          \n          \n            \n                private final Map<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438451178", "createdAt": "2020-06-10T22:55:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTIxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n          \n          \n            \n                private final Map<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438451214", "createdAt": "2020-06-10T22:55:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTQzNQ==", "bodyText": "When do you plan to implement this?", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438451435", "createdAt": "2020-06-10T22:56:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Boolean> isActive() {\n+        final @Nullable State state = getStateAs(HomekitCharacteristicType.ACTIVE_STATUS, OnOffType.class);\n+        return CompletableFuture.completedFuture(state == OnOffType.ON);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setActive(final boolean state) {\n+        final @Nullable SwitchItem item = getItem(HomekitCharacteristicType.ACTIVE_STATUS, SwitchItem.class);\n+        if (item != null) {\n+            item.send(OnOffType.from(state));\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    @Override\n+    public CompletableFuture<CurrentHeaterCoolerStateEnum> getCurrentHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(getKeyFromMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping,\n+                CurrentHeaterCoolerStateEnum.INACTIVE));\n+    }\n+\n+    @Override\n+    public CompletableFuture<TargetHeaterCoolerStateEnum> getTargetHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(\n+                getKeyFromMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping, TargetHeaterCoolerStateEnum.AUTO));\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setTargetHeaterCoolerState(final TargetHeaterCoolerStateEnum state) {\n+        final Optional<HomekitTaggedItem> characteristic = getCharacteristic(\n+                HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE);\n+        if (characteristic.isPresent()) {\n+            ((StringItem) characteristic.get().getItem()).send(new StringType(targetStateMapping.get(state)));\n+        } else {\n+            logger.warn(\"Missing mandatory characteristic {}\",\n+                    HomekitCharacteristicType.TARGET_HEATING_COOLING_STATE.getTag());\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    public CompletableFuture<TemperatureDisplayUnitEnum> getTemperatureDisplayUnit() {\n+        return CompletableFuture\n+                .completedFuture(getSettings().useFahrenheitTemperature ? TemperatureDisplayUnitEnum.FAHRENHEIT\n+                        : TemperatureDisplayUnitEnum.CELSIUS);\n+    }\n+\n+    public void setTemperatureDisplayUnit(final TemperatureDisplayUnitEnum value) throws Exception {\n+        // TODO: add support for display unit change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 143}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5581e33d1d8cf37baac72c056f13ff31b6eab087", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/5581e33d1d8cf37baac72c056f13ff31b6eab087", "committedDate": "2020-06-11T14:38:28Z", "message": "address feedback\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "145ec983784ee2ed06512bc977b1892592704234", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/145ec983784ee2ed06512bc977b1892592704234", "committedDate": "2020-06-11T15:19:37Z", "message": "update README for thermostat. it supports thresholds as well\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b4d36bb1f339cabcd9192608b2762aab96a2ed3", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/9b4d36bb1f339cabcd9192608b2762aab96a2ed3", "committedDate": "2020-06-12T06:54:50Z", "message": "remove TODO\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/de6783c0308cbbe9b18a6a79ea6381150414e859", "committedDate": "2020-06-12T11:40:42Z", "message": "fix copy&paste in README\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTY1NTY3", "url": "https://github.com/openhab/openhab-addons/pull/7887#pullrequestreview-430165567", "createdAt": "2020-06-13T20:37:31Z", "commit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDozNzozMlrOGjZSBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDo0Mzo1N1rOGjZThg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NzU1Nw==", "bodyText": "I don't know why you would need to force the generic type to an enum.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n          \n            \n                protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n      \n    \n    \n  \n\nbut if you really must.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n          \n            \n                protected <T extends Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439767557", "createdAt": "2020-06-13T20:37:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -209,8 +199,58 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n     protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType,\n             @NonNull String key, @NonNull T defaultValue) {\n         final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n-        return characteristic.isPresent() ? getItemConfiguration(characteristic.get(), key, defaultValue)\n-                : defaultValue;\n+        return characteristic.isPresent() ? characteristic.get().getConfiguration(key, defaultValue) : defaultValue;\n+    }\n+\n+    /**\n+     * update mapping with values from item configuration.\n+     * it checks for all keys from the mapping whether there is configuration at item with the same key and if yes,\n+     * replace the value.\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param map mapping to update\n+     */\n+    protected void updateMapping(HomekitCharacteristicType characteristicType, Map<?, String> map) {\n+        getCharacteristic(characteristicType).ifPresent(c -> {\n+            final Map<String, Object> configuration = c.getConfiguration();\n+            if (configuration != null) {\n+                map.replaceAll((k, current_value) -> {\n+                    final Object new_value = configuration.get(current_value);\n+                    return (new_value instanceof String) ? (String) new_value : current_value;\n+                });\n+            }\n+        });\n+    }\n+\n+    /**\n+     * takes item state as value and retrieves the key for that value from mapping.\n+     * e.g. used to map StringItem value to HomeKit Enum\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param mapping mapping\n+     * @param defaultValue default value if nothing found in mapping\n+     * @param <T> type of the result derived from\n+     * @return key for the value\n+     */\n+    protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2Nzk0Mg==", "bodyText": "If the underlying state could be a QuantityType then you should use the QuantityType to handle your unit conversions.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n          \n          \n            \n                    return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);\n          \n          \n            \n                    final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n          \n          \n            \n                    return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439767942", "createdAt": "2020-06-13T20:43:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final Map<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final Map<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22aa63362fe2180d7c1e771366f0adcf18c484c0", "author": {"user": null}, "url": "https://github.com/openhab/openhab-addons/commit/22aa63362fe2180d7c1e771366f0adcf18c484c0", "committedDate": "2020-06-13T21:36:43Z", "message": "make getKeyFromMapping more generic\n\nSigned-off-by: Eugen Freiter <freiter@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTc3NDI4", "url": "https://github.com/openhab/openhab-addons/pull/7887#pullrequestreview-430177428", "createdAt": "2020-06-13T23:58:46Z", "commit": {"oid": "22aa63362fe2180d7c1e771366f0adcf18c484c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODY0Mzgy", "url": "https://github.com/openhab/openhab-addons/pull/7887#pullrequestreview-431864382", "createdAt": "2020-06-16T20:25:57Z", "commit": {"oid": "22aa63362fe2180d7c1e771366f0adcf18c484c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 548, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}