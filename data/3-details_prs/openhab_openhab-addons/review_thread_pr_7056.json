{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NjM1MjQ4", "number": 7056, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMTowMzoyMVrODkE3ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0MTo1NlrODl3RFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MTU1MTA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth.bluez/src/main/java/org/openhab/binding/bluetooth/bluez/handler/BlueZBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxMTowMzoyMVrOFwNkMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToyNzoyM1rOFxTbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODIyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    notifyRemovalListeners(device);\n          \n          \n            \n                                    discoveryListeners.forEach(listener -> listener.deviceRemoved(device));", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r386098227", "createdAt": "2020-03-01T11:03:21Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.bluez/src/main/java/org/openhab/binding/bluetooth/bluez/handler/BlueZBridgeHandler.java", "diffHunk": "@@ -182,6 +182,7 @@ private void refreshDevices() {\n                         logger.debug(\"Removing device '{}' due to inactivity\", device.getAddress());\n                         device.dispose();\n                         devices.remove(device.getAddress());\n+                        notifyRemovalListeners(device);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0Mjg2NA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387242864", "createdAt": "2020-03-03T19:27:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluez/src/main/java/org/openhab/binding/bluetooth/bluez/handler/BlueZBridgeHandler.java", "diffHunk": "@@ -182,6 +182,7 @@ private void refreshDevices() {\n                         logger.debug(\"Removing device '{}' due to inactivity\", device.getAddress());\n                         device.dispose();\n                         devices.remove(device.getAddress());\n+                        notifyRemovalListeners(device);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5ODIyNw=="}, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODQ5MjM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothAddressLocker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzowMjowNFrOFxOh_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1NzoxOFrOFyh8ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2MjYyMA==", "bodyText": "Is this only for keeping track of the number of locks? Wouldn't .getHoldCount() also work? And why are there several  locks for the same object?", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387162620", "createdAt": "2020-03-03T17:02:04Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothAddressLocker.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+\n+/**\n+ * The {@link BluetoothAddressLocker} handles global locking of BluetoothAddress.\n+ * This is used to make sure that devices with handlers are not connected to during discovery.\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+public class BluetoothAddressLocker {\n+\n+    private static Map<BluetoothAddress, LockReference> locks = new ConcurrentHashMap<>();\n+\n+    public static void lock(BluetoothAddress address) {\n+        locks.compute(address, (addr, oldRef) -> {\n+            LockReference ref = oldRef;\n+            if (ref == null) {\n+                ref = new LockReference();\n+            }\n+            ref.count++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3OTE4OQ==", "bodyText": "The counters are meant to keep track of outside references to the lock, so that once there are no references, the lock can be removed from the map and then garbage collected. Since bluetooth address are dynamic and constantly changing, it is necessary to design it like this for long term stability of the runtime.\nThe entire reason I created this was to prevent connection discovery from connecting to a device that has a handler. Since a handler should have de facto control over the device, discovery shouldn't change its state.\nThis locking works in conjunction with BluetoothDevice.hasListeners() to determine whether or not a device is in use.\nAlthough, after taking the time to write this all out has made me realize that there is a flaw in using \"hasListeners\" for this purpose, so I'll have to rewrite my logic.", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387279189", "createdAt": "2020-03-03T20:37:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothAddressLocker.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+\n+/**\n+ * The {@link BluetoothAddressLocker} handles global locking of BluetoothAddress.\n+ * This is used to make sure that devices with handlers are not connected to during discovery.\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+public class BluetoothAddressLocker {\n+\n+    private static Map<BluetoothAddress, LockReference> locks = new ConcurrentHashMap<>();\n+\n+    public static void lock(BluetoothAddress address) {\n+        locks.compute(address, (addr, oldRef) -> {\n+            LockReference ref = oldRef;\n+            if (ref == null) {\n+                ref = new LockReference();\n+            }\n+            ref.count++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2MjYyMA=="}, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1ODgwNg==", "bodyText": "Is this blocking the merge or can it be added alter without breaking something until then", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387858806", "createdAt": "2020-03-04T18:40:41Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothAddressLocker.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+\n+/**\n+ * The {@link BluetoothAddressLocker} handles global locking of BluetoothAddress.\n+ * This is used to make sure that devices with handlers are not connected to during discovery.\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+public class BluetoothAddressLocker {\n+\n+    private static Map<BluetoothAddress, LockReference> locks = new ConcurrentHashMap<>();\n+\n+    public static void lock(BluetoothAddress address) {\n+        locks.compute(address, (addr, oldRef) -> {\n+            LockReference ref = oldRef;\n+            if (ref == null) {\n+                ref = new LockReference();\n+            }\n+            ref.count++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2MjYyMA=="}, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyOTI5MA==", "bodyText": "Not blocking at all, just finished adding it. Would have done so yesterday but was sick \ud83e\udd37\u200d\u2642", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r388529290", "createdAt": "2020-03-05T19:57:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothAddressLocker.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+\n+/**\n+ * The {@link BluetoothAddressLocker} handles global locking of BluetoothAddress.\n+ * This is used to make sure that devices with handlers are not connected to during discovery.\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+public class BluetoothAddressLocker {\n+\n+    private static Map<BluetoothAddress, LockReference> locks = new ConcurrentHashMap<>();\n+\n+    public static void lock(BluetoothAddress address) {\n+        locks.compute(address, (addr, oldRef) -> {\n+            LockReference ref = oldRef;\n+            if (ref == null) {\n+                ref = new LockReference();\n+            }\n+            ref.count++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2MjYyMA=="}, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODUyMTg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzowOTo0NVrOFxO0fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0NzowMVrOFxXuUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2NzM1Nw==", "bodyText": "What can throw an exception here? I did look at BlukiiDiscoveryParticipant? and RuviiTagDiscoveryParticipantand both requiredeviceto be non-null, but NPE seem to be the only exception possible. This should IMO be solved by proper null-checks (and annotations, which seem to be wrong) and not by catchingRuntimeException`.", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387167357", "createdAt": "2020-03-03T17:09:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic.GattCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompanyIdentifiers;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothDeviceListener;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BluetoothDiscoveryProcess} does the work of creating a DiscoveryResult from a set of\n+ * {@link BluetoothDisocveryParticipant}s\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, BluetoothDeviceListener {\n+\n+    private static final int DISCOVERY_TTL = 300;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BluetoothDiscoveryProcess.class);\n+\n+    private final Lock serviceDiscoveryLock = new ReentrantLock();\n+    private final Condition connectionCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition nameDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+\n+    private final Collection<BluetoothDiscoveryParticipant> participants;\n+    private final BluetoothDevice device;\n+\n+    private volatile boolean servicesDiscovered = false;\n+\n+    public BluetoothDiscoveryProcess(BluetoothDevice device, Collection<BluetoothDiscoveryParticipant> participants) {\n+        this.participants = participants;\n+        this.device = device;\n+    }\n+\n+    @Override\n+    public DiscoveryResult get() {\n+        // first see if any of the participants that don't require a connection recognize this device\n+        List<BluetoothDiscoveryParticipant> connectionParticipants = new ArrayList<>();\n+        for (BluetoothDiscoveryParticipant participant : participants) {\n+            if (participant.requiresConnection(device)) {\n+                connectionParticipants.add(participant);\n+                continue;\n+            }\n+            try {\n+                DiscoveryResult result = participant.createResult(device);\n+                if (result != null) {\n+                    return result;\n+                }\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMzIzNA==", "bodyText": "This is more or less legacy code that was copied from DiscoveryService.\nBut my understanding of its purpose is to prevent an error in any one DiscoveryParticipant from prevent discovery from another DiscoveryParticipant or the creation of a default discovery. You are correct that there is no reasonable exception that would be thrown by the current codebase. I think catching runtime exceptions here is useful for future-proofing the eventual creation of potentially complex DiscoveryParticipants which may interact with more than just the bluetooth device and thus may end up causing unintended errors during discovery.\nWhether or not you agree with that sentiment is entirely up to you.", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387313234", "createdAt": "2020-03-03T21:47:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic.GattCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompanyIdentifiers;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothDeviceListener;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BluetoothDiscoveryProcess} does the work of creating a DiscoveryResult from a set of\n+ * {@link BluetoothDisocveryParticipant}s\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, BluetoothDeviceListener {\n+\n+    private static final int DISCOVERY_TTL = 300;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BluetoothDiscoveryProcess.class);\n+\n+    private final Lock serviceDiscoveryLock = new ReentrantLock();\n+    private final Condition connectionCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition nameDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+\n+    private final Collection<BluetoothDiscoveryParticipant> participants;\n+    private final BluetoothDevice device;\n+\n+    private volatile boolean servicesDiscovered = false;\n+\n+    public BluetoothDiscoveryProcess(BluetoothDevice device, Collection<BluetoothDiscoveryParticipant> participants) {\n+        this.participants = participants;\n+        this.device = device;\n+    }\n+\n+    @Override\n+    public DiscoveryResult get() {\n+        // first see if any of the participants that don't require a connection recognize this device\n+        List<BluetoothDiscoveryParticipant> connectionParticipants = new ArrayList<>();\n+        for (BluetoothDiscoveryParticipant participant : participants) {\n+            if (participant.requiresConnection(device)) {\n+                connectionParticipants.add(participant);\n+                continue;\n+            }\n+            try {\n+                DiscoveryResult result = participant.createResult(device);\n+                if (result != null) {\n+                    return result;\n+                }\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2NzM1Nw=="}, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODUyNTMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoxMDo0M1rOFxO2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0NzoxN1rOFxXu5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2NzkwNw==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387167907", "createdAt": "2020-03-03T17:10:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic.GattCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompanyIdentifiers;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothDeviceListener;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BluetoothDiscoveryProcess} does the work of creating a DiscoveryResult from a set of\n+ * {@link BluetoothDisocveryParticipant}s\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, BluetoothDeviceListener {\n+\n+    private static final int DISCOVERY_TTL = 300;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BluetoothDiscoveryProcess.class);\n+\n+    private final Lock serviceDiscoveryLock = new ReentrantLock();\n+    private final Condition connectionCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition nameDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+\n+    private final Collection<BluetoothDiscoveryParticipant> participants;\n+    private final BluetoothDevice device;\n+\n+    private volatile boolean servicesDiscovered = false;\n+\n+    public BluetoothDiscoveryProcess(BluetoothDevice device, Collection<BluetoothDiscoveryParticipant> participants) {\n+        this.participants = participants;\n+        this.device = device;\n+    }\n+\n+    @Override\n+    public DiscoveryResult get() {\n+        // first see if any of the participants that don't require a connection recognize this device\n+        List<BluetoothDiscoveryParticipant> connectionParticipants = new ArrayList<>();\n+        for (BluetoothDiscoveryParticipant participant : participants) {\n+            if (participant.requiresConnection(device)) {\n+                connectionParticipants.add(participant);\n+                continue;\n+            }\n+            try {\n+                DiscoveryResult result = participant.createResult(device);\n+                if (result != null) {\n+                    return result;\n+                }\n+            } catch (RuntimeException e) {\n+                logger.warn(\"Participant '{}' threw an exception\", participant.getClass().getName(), e);\n+            }\n+        }\n+\n+        // Since we couldn't find a result, lets try the connection based participants\n+        DiscoveryResult result = null;\n+        if (!connectionParticipants.isEmpty()) {\n+            BluetoothAddress address = device.getAddress();\n+            try {\n+                BluetoothAddressLocker.lock(address);\n+                if (!device.hasListeners()) {\n+                    result = findConnectionResult(connectionParticipants);\n+                    // make sure to disconnect before letting go of the device\n+                    if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                        try {\n+                            if (!device.disconnect()) {\n+                                logger.debug(\"Failed to disconnect from device {}\", address);\n+                            }\n+                        } catch (RuntimeException ex) {\n+                            logger.warn(\"Error occurred during bluetooth discovery for device {} on adapter {}\",\n+                                    address, device.getAdapter().getAddress(), ex);\n+                        }\n+                    }\n+                }\n+            } finally {\n+                BluetoothAddressLocker.unlock(address);\n+            }\n+        }\n+        if (result == null) {\n+            result = createDefaultResult(device);\n+        }\n+        return result;\n+    }\n+\n+    private DiscoveryResult createDefaultResult(BluetoothDevice device) {\n+        // We did not find a thing type for this device, so let's treat it as a generic one\n+        String label = device.getName();\n+        if (label == null || label.length() == 0 || label.equals(device.getAddress().toString().replace(':', '-'))) {\n+            label = \"Bluetooth Device\";\n+        }\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(BluetoothBindingConstants.CONFIGURATION_ADDRESS, device.getAddress().toString());\n+        Integer txPower = device.getTxPower();\n+        if (txPower != null && txPower > 0) {\n+            properties.put(BluetoothBindingConstants.PROPERTY_TXPOWER, Integer.toString(txPower));\n+        }\n+        String manufacturer = BluetoothCompanyIdentifiers.get(device.getManufacturerId());\n+        if (manufacturer == null) {\n+            logger.debug(\"Unknown manufacturer Id ({}) found on bluetooth device.\", device.getManufacturerId());\n+        } else {\n+            properties.put(Thing.PROPERTY_VENDOR, manufacturer);\n+            label += \" (\" + manufacturer + \")\";\n+        }\n+\n+        ThingUID thingUID = new ThingUID(BluetoothBindingConstants.THING_TYPE_BEACON, device.getAdapter().getUID(),\n+                device.getAddress().toString().toLowerCase().replace(\":\", \"\"));\n+\n+        // Create the discovery result and add to the inbox\n+        return DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                .withRepresentationProperty(BluetoothBindingConstants.CONFIGURATION_ADDRESS).withTTL(DISCOVERY_TTL)\n+                .withBridge(device.getAdapter().getUID()).withLabel(label).build();\n+    }\n+\n+    private @Nullable DiscoveryResult findConnectionResult(List<BluetoothDiscoveryParticipant> connectionParticipants) {\n+        try {\n+            device.addListener(this);\n+            for (BluetoothDiscoveryParticipant participant : connectionParticipants) {\n+                // we call this every time just in case a participant somehow closes the connection\n+                if (device.getConnectionState() != ConnectionState.CONNECTED) {\n+                    if (device.getConnectionState() != ConnectionState.CONNECTING && !device.connect()) {\n+                        logger.debug(\"Connection attempt failed to start for device {}\", device.getAddress());\n+                        // something failed, so we abandon connection discovery\n+                        return null;\n+                    }\n+                    if (!awaitConnection(1, TimeUnit.SECONDS)) {\n+                        logger.debug(\"Connection to device {} timed out\", device.getAddress());\n+                        return null;\n+                    }\n+                    if (!servicesDiscovered) {\n+                        device.discoverServices();\n+                        if (!awaitServiceDiscovery(1, TimeUnit.SECONDS)) {\n+                            logger.debug(\"Service discovery for device {} timed out\", device.getAddress());\n+                            // something failed, so we abandon connection discovery\n+                            return null;\n+                        }\n+                    }\n+                    tryToDiscoverNameIfMissing();\n+                }\n+\n+                try {\n+                    DiscoveryResult result = participant.createResult(device);\n+                    if (result != null) {\n+                        return result;\n+                    }\n+                } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMzM4Mw==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387313383", "createdAt": "2020-03-03T21:47:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic.GattCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompanyIdentifiers;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothDeviceListener;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BluetoothDiscoveryProcess} does the work of creating a DiscoveryResult from a set of\n+ * {@link BluetoothDisocveryParticipant}s\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, BluetoothDeviceListener {\n+\n+    private static final int DISCOVERY_TTL = 300;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BluetoothDiscoveryProcess.class);\n+\n+    private final Lock serviceDiscoveryLock = new ReentrantLock();\n+    private final Condition connectionCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition nameDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+\n+    private final Collection<BluetoothDiscoveryParticipant> participants;\n+    private final BluetoothDevice device;\n+\n+    private volatile boolean servicesDiscovered = false;\n+\n+    public BluetoothDiscoveryProcess(BluetoothDevice device, Collection<BluetoothDiscoveryParticipant> participants) {\n+        this.participants = participants;\n+        this.device = device;\n+    }\n+\n+    @Override\n+    public DiscoveryResult get() {\n+        // first see if any of the participants that don't require a connection recognize this device\n+        List<BluetoothDiscoveryParticipant> connectionParticipants = new ArrayList<>();\n+        for (BluetoothDiscoveryParticipant participant : participants) {\n+            if (participant.requiresConnection(device)) {\n+                connectionParticipants.add(participant);\n+                continue;\n+            }\n+            try {\n+                DiscoveryResult result = participant.createResult(device);\n+                if (result != null) {\n+                    return result;\n+                }\n+            } catch (RuntimeException e) {\n+                logger.warn(\"Participant '{}' threw an exception\", participant.getClass().getName(), e);\n+            }\n+        }\n+\n+        // Since we couldn't find a result, lets try the connection based participants\n+        DiscoveryResult result = null;\n+        if (!connectionParticipants.isEmpty()) {\n+            BluetoothAddress address = device.getAddress();\n+            try {\n+                BluetoothAddressLocker.lock(address);\n+                if (!device.hasListeners()) {\n+                    result = findConnectionResult(connectionParticipants);\n+                    // make sure to disconnect before letting go of the device\n+                    if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                        try {\n+                            if (!device.disconnect()) {\n+                                logger.debug(\"Failed to disconnect from device {}\", address);\n+                            }\n+                        } catch (RuntimeException ex) {\n+                            logger.warn(\"Error occurred during bluetooth discovery for device {} on adapter {}\",\n+                                    address, device.getAdapter().getAddress(), ex);\n+                        }\n+                    }\n+                }\n+            } finally {\n+                BluetoothAddressLocker.unlock(address);\n+            }\n+        }\n+        if (result == null) {\n+            result = createDefaultResult(device);\n+        }\n+        return result;\n+    }\n+\n+    private DiscoveryResult createDefaultResult(BluetoothDevice device) {\n+        // We did not find a thing type for this device, so let's treat it as a generic one\n+        String label = device.getName();\n+        if (label == null || label.length() == 0 || label.equals(device.getAddress().toString().replace(':', '-'))) {\n+            label = \"Bluetooth Device\";\n+        }\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(BluetoothBindingConstants.CONFIGURATION_ADDRESS, device.getAddress().toString());\n+        Integer txPower = device.getTxPower();\n+        if (txPower != null && txPower > 0) {\n+            properties.put(BluetoothBindingConstants.PROPERTY_TXPOWER, Integer.toString(txPower));\n+        }\n+        String manufacturer = BluetoothCompanyIdentifiers.get(device.getManufacturerId());\n+        if (manufacturer == null) {\n+            logger.debug(\"Unknown manufacturer Id ({}) found on bluetooth device.\", device.getManufacturerId());\n+        } else {\n+            properties.put(Thing.PROPERTY_VENDOR, manufacturer);\n+            label += \" (\" + manufacturer + \")\";\n+        }\n+\n+        ThingUID thingUID = new ThingUID(BluetoothBindingConstants.THING_TYPE_BEACON, device.getAdapter().getUID(),\n+                device.getAddress().toString().toLowerCase().replace(\":\", \"\"));\n+\n+        // Create the discovery result and add to the inbox\n+        return DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                .withRepresentationProperty(BluetoothBindingConstants.CONFIGURATION_ADDRESS).withTTL(DISCOVERY_TTL)\n+                .withBridge(device.getAdapter().getUID()).withLabel(label).build();\n+    }\n+\n+    private @Nullable DiscoveryResult findConnectionResult(List<BluetoothDiscoveryParticipant> connectionParticipants) {\n+        try {\n+            device.addListener(this);\n+            for (BluetoothDiscoveryParticipant participant : connectionParticipants) {\n+                // we call this every time just in case a participant somehow closes the connection\n+                if (device.getConnectionState() != ConnectionState.CONNECTED) {\n+                    if (device.getConnectionState() != ConnectionState.CONNECTING && !device.connect()) {\n+                        logger.debug(\"Connection attempt failed to start for device {}\", device.getAddress());\n+                        // something failed, so we abandon connection discovery\n+                        return null;\n+                    }\n+                    if (!awaitConnection(1, TimeUnit.SECONDS)) {\n+                        logger.debug(\"Connection to device {} timed out\", device.getAddress());\n+                        return null;\n+                    }\n+                    if (!servicesDiscovered) {\n+                        device.discoverServices();\n+                        if (!awaitServiceDiscovery(1, TimeUnit.SECONDS)) {\n+                            logger.debug(\"Service discovery for device {} timed out\", device.getAddress());\n+                            // something failed, so we abandon connection discovery\n+                            return null;\n+                        }\n+                    }\n+                    tryToDiscoverNameIfMissing();\n+                }\n+\n+                try {\n+                    DiscoveryResult result = participant.createResult(device);\n+                    if (result != null) {\n+                        return result;\n+                    }\n+                } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2NzkwNw=="}, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODUyNjMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoxMDo1NlrOFxO3Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1NDowMFrOFxX8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2ODA3NQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387168075", "createdAt": "2020-03-03T17:10:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic.GattCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompanyIdentifiers;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothDeviceListener;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BluetoothDiscoveryProcess} does the work of creating a DiscoveryResult from a set of\n+ * {@link BluetoothDisocveryParticipant}s\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, BluetoothDeviceListener {\n+\n+    private static final int DISCOVERY_TTL = 300;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BluetoothDiscoveryProcess.class);\n+\n+    private final Lock serviceDiscoveryLock = new ReentrantLock();\n+    private final Condition connectionCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition nameDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+\n+    private final Collection<BluetoothDiscoveryParticipant> participants;\n+    private final BluetoothDevice device;\n+\n+    private volatile boolean servicesDiscovered = false;\n+\n+    public BluetoothDiscoveryProcess(BluetoothDevice device, Collection<BluetoothDiscoveryParticipant> participants) {\n+        this.participants = participants;\n+        this.device = device;\n+    }\n+\n+    @Override\n+    public DiscoveryResult get() {\n+        // first see if any of the participants that don't require a connection recognize this device\n+        List<BluetoothDiscoveryParticipant> connectionParticipants = new ArrayList<>();\n+        for (BluetoothDiscoveryParticipant participant : participants) {\n+            if (participant.requiresConnection(device)) {\n+                connectionParticipants.add(participant);\n+                continue;\n+            }\n+            try {\n+                DiscoveryResult result = participant.createResult(device);\n+                if (result != null) {\n+                    return result;\n+                }\n+            } catch (RuntimeException e) {\n+                logger.warn(\"Participant '{}' threw an exception\", participant.getClass().getName(), e);\n+            }\n+        }\n+\n+        // Since we couldn't find a result, lets try the connection based participants\n+        DiscoveryResult result = null;\n+        if (!connectionParticipants.isEmpty()) {\n+            BluetoothAddress address = device.getAddress();\n+            try {\n+                BluetoothAddressLocker.lock(address);\n+                if (!device.hasListeners()) {\n+                    result = findConnectionResult(connectionParticipants);\n+                    // make sure to disconnect before letting go of the device\n+                    if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                        try {\n+                            if (!device.disconnect()) {\n+                                logger.debug(\"Failed to disconnect from device {}\", address);\n+                            }\n+                        } catch (RuntimeException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxNjc2NQ==", "bodyText": "The underlying BluetoothDevice implementations are not flawless (especially the BluezBluetoothDevice), and it is very possible an unintended RuntimeException could occur here. But I don't think a failure to disconnect should prevent a device discovery hence we catch any RuntimeExceptions.", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387316765", "createdAt": "2020-03-03T21:54:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.discovery.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.Condition;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.bluetooth.BluetoothAddress;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic.GattCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompanyIdentifiers;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDescriptor;\n+import org.openhab.binding.bluetooth.BluetoothDevice;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothDeviceListener;\n+import org.openhab.binding.bluetooth.discovery.BluetoothDiscoveryParticipant;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.openhab.binding.bluetooth.notification.BluetoothScanNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BluetoothDiscoveryProcess} does the work of creating a DiscoveryResult from a set of\n+ * {@link BluetoothDisocveryParticipant}s\n+ *\n+ * @author Connor Petty - Initial Contribution\n+ */\n+@NonNullByDefault\n+public class BluetoothDiscoveryProcess implements Supplier<DiscoveryResult>, BluetoothDeviceListener {\n+\n+    private static final int DISCOVERY_TTL = 300;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BluetoothDiscoveryProcess.class);\n+\n+    private final Lock serviceDiscoveryLock = new ReentrantLock();\n+    private final Condition connectionCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition serviceDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+    private final Condition nameDiscoveryCondition = serviceDiscoveryLock.newCondition();\n+\n+    private final Collection<BluetoothDiscoveryParticipant> participants;\n+    private final BluetoothDevice device;\n+\n+    private volatile boolean servicesDiscovered = false;\n+\n+    public BluetoothDiscoveryProcess(BluetoothDevice device, Collection<BluetoothDiscoveryParticipant> participants) {\n+        this.participants = participants;\n+        this.device = device;\n+    }\n+\n+    @Override\n+    public DiscoveryResult get() {\n+        // first see if any of the participants that don't require a connection recognize this device\n+        List<BluetoothDiscoveryParticipant> connectionParticipants = new ArrayList<>();\n+        for (BluetoothDiscoveryParticipant participant : participants) {\n+            if (participant.requiresConnection(device)) {\n+                connectionParticipants.add(participant);\n+                continue;\n+            }\n+            try {\n+                DiscoveryResult result = participant.createResult(device);\n+                if (result != null) {\n+                    return result;\n+                }\n+            } catch (RuntimeException e) {\n+                logger.warn(\"Participant '{}' threw an exception\", participant.getClass().getName(), e);\n+            }\n+        }\n+\n+        // Since we couldn't find a result, lets try the connection based participants\n+        DiscoveryResult result = null;\n+        if (!connectionParticipants.isEmpty()) {\n+            BluetoothAddress address = device.getAddress();\n+            try {\n+                BluetoothAddressLocker.lock(address);\n+                if (!device.hasListeners()) {\n+                    result = findConnectionResult(connectionParticipants);\n+                    // make sure to disconnect before letting go of the device\n+                    if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+                        try {\n+                            if (!device.disconnect()) {\n+                                logger.debug(\"Failed to disconnect from device {}\", address);\n+                            }\n+                        } catch (RuntimeException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE2ODA3NQ=="}, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODU0MjY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth/src/test/java/org/openhab/binding/bluetooth/MockBluetoothAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzoxNToxN1rOFxPBoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo1NzozMlrOFxYC8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MDcyMA==", "bodyText": "EOL missing. Please run the spotless-formatter before we merge.", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387170720", "createdAt": "2020-03-03T17:15:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth/src/test/java/org/openhab/binding/bluetooth/MockBluetoothAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+\n+/**\n+ * Mock implementation of a {@link BluetoothAdapter}.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MockBluetoothAdapter implements BluetoothAdapter {\n+\n+    private Map<BluetoothAddress, MockBluetoothDevice> devices = new ConcurrentHashMap<>();\n+    private BluetoothAddress address = TestUtils.randomAddress();\n+    private ThingUID uid = TestUtils.randomThingUID();\n+\n+    @Override\n+    public ThingUID getUID() {\n+        return uid;\n+    }\n+\n+    @Override\n+    public void addDiscoveryListener(BluetoothDiscoveryListener listener) {\n+    }\n+\n+    @Override\n+    public void removeDiscoveryListener(@Nullable BluetoothDiscoveryListener listener) {\n+    }\n+\n+    @Override\n+    public void scanStart() {\n+    }\n+\n+    @Override\n+    public void scanStop() {\n+    }\n+\n+    @Override\n+    public BluetoothAddress getAddress() {\n+        return address;\n+    }\n+\n+    @Override\n+    public MockBluetoothDevice getDevice(BluetoothAddress address) {\n+        return devices.computeIfAbsent(address, addr -> new MockBluetoothDevice(this, addr));\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxODUxMg==", "bodyText": "will do", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r387318512", "createdAt": "2020-03-03T21:57:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/test/java/org/openhab/binding/bluetooth/MockBluetoothAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+\n+/**\n+ * Mock implementation of a {@link BluetoothAdapter}.\n+ *\n+ * @author Connor Petty - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MockBluetoothAdapter implements BluetoothAdapter {\n+\n+    private Map<BluetoothAddress, MockBluetoothDevice> devices = new ConcurrentHashMap<>();\n+    private BluetoothAddress address = TestUtils.randomAddress();\n+    private ThingUID uid = TestUtils.randomThingUID();\n+\n+    @Override\n+    public ThingUID getUID() {\n+        return uid;\n+    }\n+\n+    @Override\n+    public void addDiscoveryListener(BluetoothDiscoveryListener listener) {\n+    }\n+\n+    @Override\n+    public void removeDiscoveryListener(@Nullable BluetoothDiscoveryListener listener) {\n+    }\n+\n+    @Override\n+    public void scanStart() {\n+    }\n+\n+    @Override\n+    public void scanStop() {\n+    }\n+\n+    @Override\n+    public BluetoothAddress getAddress() {\n+        return address;\n+    }\n+\n+    @Override\n+    public MockBluetoothDevice getDevice(BluetoothAddress address) {\n+        return devices.computeIfAbsent(address, addr -> new MockBluetoothDevice(this, addr));\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3MDcyMA=="}, "originalCommit": {"oid": "3fb34b9de42209ce997614a9c4c6aa0898d0befe"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDI5Mzk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0MTo1NlrOFy_eew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo0MTo1NlrOFy_eew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxMzExNQ==", "bodyText": "for the next iteration :-)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .noneMatch(d -> d.hasListeners());\n          \n          \n            \n                            .noneMatch(BluetoothDevice::hasListeners);", "url": "https://github.com/openhab/openhab-addons/pull/7056#discussion_r389013115", "createdAt": "2020-03-06T16:41:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth/src/main/java/org/openhab/binding/bluetooth/discovery/internal/BluetoothDiscoveryProcess.java", "diffHunk": "@@ -122,6 +127,15 @@ public DiscoveryResult get() {\n         return result;\n     }\n \n+    private boolean isAddressAvailable(BluetoothAddress address) {\n+        // if a device with this address has a handler on any of the adapters, we abandon discovery\n+        return adapters.stream().filter(adapter -> adapter.hasDevice(address))\n+                // get adapter's corresponding device\n+                .map(adapter -> adapter.getDevice(address))\n+                // make sure nothing is listening to any of them\n+                .noneMatch(d -> d.hasListeners());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a643c31e87a87d5c2ad6bdffb9784d5149c5a9bb"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 982, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}