{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjMxOTA1", "number": 7514, "title": "[enigma2] Initial Contribution", "bodyText": "This is a PR for adding support of enigma2 set top boxes like a dreambox or a vu+.\nIt is tested on a vu+ solo2 device. For more details see the readme: https://github.com/gdolfen/openhab-addons/blob/enigma2/bundles/org.openhab.binding.enigma2/README.md\nThere ist a snapshot build available here for testing: https://openhab.jfrog.io/openhab/libs-pullrequest-local/org/openhab/addons/bundles/org.openhab.binding.enigma2/2.5.5-SNAPSHOT/\nBecause this ist my first PR to openhab please be so kind and let me know if there is something missing.\nI opened a discussion here: https://community.openhab.org/t/new-enigma2-binding/97887", "createdAt": "2020-05-01T17:55:30Z", "url": "https://github.com/openhab/openhab-addons/pull/7514", "merged": true, "mergeCommit": {"oid": "f485114366df402bd86d6b2c5a3e2b729d3f8bdb"}, "closed": true, "closedAt": "2020-05-25T05:16:50Z", "author": {"login": "gdolfen"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdFlHUgBqjMyOTM5NjEzMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcj2bkWgBqjMzNjU3Njc5Nzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87efbfe0c03027f985efab1eaa21ff5206418ddf", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/87efbfe0c03027f985efab1eaa21ff5206418ddf", "committedDate": "2020-05-01T17:34:43Z", "message": "Added Enigma2"}, "afterCommit": {"oid": "72dd115e758c11c8cc152a69e2029ab7d062745f", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/72dd115e758c11c8cc152a69e2029ab7d062745f", "committedDate": "2020-05-01T17:58:44Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72dd115e758c11c8cc152a69e2029ab7d062745f", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/72dd115e758c11c8cc152a69e2029ab7d062745f", "committedDate": "2020-05-01T17:58:44Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "766620b3b8f65dc5abec1210a7b3bc87975a650e", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/766620b3b8f65dc5abec1210a7b3bc87975a650e", "committedDate": "2020-05-01T18:06:58Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "766620b3b8f65dc5abec1210a7b3bc87975a650e", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/766620b3b8f65dc5abec1210a7b3bc87975a650e", "committedDate": "2020-05-01T18:06:58Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "f7f66a8bb20c3d38e8391829182cd55d54a990b6", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/f7f66a8bb20c3d38e8391829182cd55d54a990b6", "committedDate": "2020-05-01T18:12:18Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7f66a8bb20c3d38e8391829182cd55d54a990b6", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/f7f66a8bb20c3d38e8391829182cd55d54a990b6", "committedDate": "2020-05-01T18:12:18Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "db336908da16e4b524bf3de359993dcf4e638d9f", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/db336908da16e4b524bf3de359993dcf4e638d9f", "committedDate": "2020-05-01T20:42:34Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db336908da16e4b524bf3de359993dcf4e638d9f", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/db336908da16e4b524bf3de359993dcf4e638d9f", "committedDate": "2020-05-01T20:42:34Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "58e78cbb8a656ee44e18363b390566e1a1b50ff9", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/58e78cbb8a656ee44e18363b390566e1a1b50ff9", "committedDate": "2020-05-02T10:07:12Z", "message": "Added Enigma2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a854d24bcd06534f23c96241f0e8eea7e15b40a", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/2a854d24bcd06534f23c96241f0e8eea7e15b40a", "committedDate": "2020-05-03T10:50:49Z", "message": "Added a new configuration parameter for defining a custom read timeout"}, "afterCommit": {"oid": "f3cff09008bb6a98d2a1ffa6bcaebacd0f33dff7", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/f3cff09008bb6a98d2a1ffa6bcaebacd0f33dff7", "committedDate": "2020-05-03T11:43:53Z", "message": "Added a new configuration parameter for defining a custom read timeout\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDUzOTQ0", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-406053944", "createdAt": "2020-05-05T18:35:36Z", "commit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozNTozNlrOGQ2hKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOToyNDoyOFrOGQ4N8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyMzYyNA==", "bodyText": "You can remove this section completely if you do not have a configuration.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420323624", "createdAt": "2020-05-05T18:35:36Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNDEyNg==", "bodyText": "I count 5 :-) maybe omit the number and just say \"has the following configuration parameters\".", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420324126", "createdAt": "2020-05-05T18:36:26Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNDQ5Mg==", "bodyText": "what about \"timeout\"?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420324492", "createdAt": "2020-05-05T18:37:06Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNjM1Ng==", "bodyText": "I think you should remove this channel, because as you already describe and have already implemented, this is rather a \u00b4ThingAction`. It is no information that describes a \"state\" and thus there should be no state channel for it. Also what would be the purpose of having an item linked to it that always shows the last sent value as its state?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420326356", "createdAt": "2020-05-05T18:40:18Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNjQ5OA==", "bodyText": "Please remove, see above.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420326498", "createdAt": "2020-05-05T18:40:34Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |\n+| warning         | String    | Displays a short warning on the TV screen. See also rules section.                           | W          |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNjU0OA==", "bodyText": "Please remove, see above.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420326548", "createdAt": "2020-05-05T18:40:39Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |\n+| warning         | String    | Displays a short warning on the TV screen. See also rules section.                           | W          |\n+| error           | String    | Displays a short error on the TV screen. See also rules section.                             | W          |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNzQwNQ==", "bodyText": "Please remove, see above.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420327405", "createdAt": "2020-05-05T18:42:05Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |\n+| warning         | String    | Displays a short warning on the TV screen. See also rules section.                           | W          |\n+| error           | String    | Displays a short error on the TV screen. See also rules section.                             | W          |\n+| mediaPlayer     | Player    | Media control player                                                                         | W          |\n+| mediaStop       | Switch    | Media control stop                                                                           | W          |\n+| rcButton        | String    | Simulates pressing of a button on the remote control. See below for a list of button names.  | W          |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNzcwNA==", "bodyText": "Isn't this an \"RW\" channel?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420327704", "createdAt": "2020-05-05T18:42:37Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |\n+| warning         | String    | Displays a short warning on the TV screen. See also rules section.                           | W          |\n+| error           | String    | Displays a short error on the TV screen. See also rules section.                             | W          |\n+| mediaPlayer     | Player    | Media control player                                                                         | W          |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyNzc3NQ==", "bodyText": "Isn't this an \"RW\" channel?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420327775", "createdAt": "2020-05-05T18:42:44Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |\n+| warning         | String    | Displays a short warning on the TV screen. See also rules section.                           | W          |\n+| error           | String    | Displays a short error on the TV screen. See also rules section.                             | W          |\n+| mediaPlayer     | Player    | Media control player                                                                         | W          |\n+| mediaStop       | Switch    | Media control stop                                                                           | W          |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyODEyOA==", "bodyText": "This should go into the ThingActions section after you have removed the rcButton channel.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420328128", "createdAt": "2020-05-05T18:43:25Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |\n+| warning         | String    | Displays a short warning on the TV screen. See also rules section.                           | W          |\n+| error           | String    | Displays a short error on the TV screen. See also rules section.                             | W          |\n+| mediaPlayer     | Player    | Media control player                                                                         | W          |\n+| mediaStop       | Switch    | Media control stop                                                                           | W          |\n+| rcButton        | String    | Simulates pressing of a button on the remote control. See below for a list of button names.  | W          |\n+\n+\n+### Remote Control Buttons", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyODc1NQ==", "bodyText": "I guess this parameter is mandatory, what about the others? can you please add a column describing which parameter is optional and which one is mandatory?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420328755", "createdAt": "2020-05-05T18:44:20Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMDc5Mg==", "bodyText": "Shouldn't the parameter be \"receivedCommand.toString\"? Same applies to Warning and Info.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420330792", "createdAt": "2020-05-05T18:47:46Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |\n+| warning         | String    | Displays a short warning on the TV screen. See also rules section.                           | W          |\n+| error           | String    | Displays a short error on the TV screen. See also rules section.                             | W          |\n+| mediaPlayer     | Player    | Media control player                                                                         | W          |\n+| mediaStop       | Switch    | Media control stop                                                                           | W          |\n+| rcButton        | String    | Simulates pressing of a button on the remote control. See below for a list of button names.  | W          |\n+\n+\n+### Remote Control Buttons\n+\n+The rcButton channel has only been tested on a Vu+Solo2 and this is a list of button codes that are known to work with this device.\n+\n+| Code String   |\n+|---------------|\n+| POWER         |\n+| KEY_0         |\n+| KEY_1         |\n+| KEY_2         |\n+| KEY_3         |\n+| KEY_4         |\n+| KEY_5         |\n+| KEY_6         |\n+| KEY_7         |\n+| KEY_8         |\n+| KEY_9         |\n+| ARROW_LEFT    |\n+| ARROW_RIGHT   |\n+| VOLUME_DOWN   |\n+| VOLUME_UP     |\n+| MUTE          |\n+| CHANNEL_UP    |\n+| CHANNEL_DOWN  |\n+| LEFT          |\n+| RIGHT         |\n+| UP            |\n+| DOWN          |\n+| OK            |\n+| EXIT          |\n+| RED           |\n+| GREEN         |\n+| YELLOW        |\n+| BLUE          |\n+| PLAY          |\n+| PAUSE         |\n+| STOP          |\n+| RECORD        |\n+| FAST_FORWARD  |\n+| FAST_BACKWARD |\n+| TV            |\n+| RADIO         |\n+| AUDIO         |\n+| VIDEO         |\n+| TEXT          |\n+| INFO          |\n+| MENU          |\n+| HELP          |\n+| SUBTITLE      |\n+| EPG           |\n+\n+\n+## Example\n+\n+demo.things:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\"]\n+```\n+\n+demo.items:\n+\n+```\n+Switch  Enigma2_Power              \"Power: [%s]\"          <switch>           { channel=\"enigma2:device:192_168_0_3:power\" }\n+Dimmer  Enigma2_Volume             \"Volume: [%d %%]\"      <soundvolume>      { channel=\"enigma2:device:192_168_0_3:volume\" }\n+Switch  Enigma2_Mute               \"Mute: [%s]\"           <soundvolume_mute> { channel=\"enigma2:device:192_168_0_3:mute\" }\n+Switch  Enigma2_Stop               \"Stop: [%s]\"           <mediacontrol>     { channel=\"enigma2:device:192_168_0_3:mediaStop\", autoupdate=\"false\" }\n+Player  Enigma2_PlayerControl      \"Mode: [%s]\"           <mediacontrol>     { channel=\"enigma2:device:192_168_0_3:mediaPlayer\" }\n+String  Enigma2_Channel            \"Channel: [%s]\"        <receiver>         { channel=\"enigma2:device:192_168_0_3:channel\" }\n+String  Enigma2_Title              \"Title: [%s]\"          <receiver>         { channel=\"enigma2:device:192_168_0_3:title\" }\n+String  Enigma2_Description        \"Description: [%s]\"    <receiver>         { channel=\"enigma2:device:192_168_0_3:description\" }\n+String  Enigma2_Error              \"Error: [%s]\"          <receiver>         { channel=\"enigma2:device:192_168_0_3:error\" }\n+String  Enigma2_Warning            \"Warning: [%s]\"        <receiver>         { channel=\"enigma2:device:192_168_0_3:warning\" }\n+String  Enigma2_Info               \"Info: [%s]\"           <receiver>         { channel=\"enigma2:device:192_168_0_3:info\" }\n+String  Enigma2_RemoteKeys         \"[]\"                   <receiver>         { autoupdate=\"false\" }\n+String  Enigma2_SendError          \"Error\"                <text>             { autoupdate=\"false\" }\n+String  Enigma2_SendWarning        \"Warning\"              <text>             { autoupdate=\"false\" }\n+String  Enigma2_SendInfo           \"Info\"                 <text>             { autoupdate=\"false\" }\n+```\n+\n+demo.sitemap:\n+\n+```\n+sitemap demo label=\"Enigma2 Demo\"\n+{\n+  Frame label=\"Enigma2\" { \n+     Switch    item=Enigma2_Power        \n+     Slider    item=Enigma2_Volume step=5 minValue=0 maxValue=100\n+     Setpoint  item=Enigma2_Volume step=5 minValue=0 maxValue=100\n+     Switch    item=Enigma2_Mute\n+     Default   item=Enigma2_PlayerControl\n+     Switch    item=Enigma2_Stop mappings=[ON=\"Stop\"]\n+     Text      item=Enigma2_Channel\n+     Text      item=Enigma2_Title\n+     Text      item=Enigma2_Description\n+  }\n+  Frame label=\"Enigma2 Remote\" {\n+     Switch    item=Enigma2_RemoteKeys mappings=[POWER=\"POWER\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[TEXT=\"[=]\", SUBTITLE=\"[_]\", MUTE=\"MUTE\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[KEY_1=\"1\", KEY_2=\"2\", KEY_3=\"3\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[KEY_4=\"4\", KEY_5=\"5\", KEY_6=\"6\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[KEY_7=\"7\", KEY_8=\"8\", KEY_9=\"9\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[ARROW_LEFT=\"<\", KEY_0=\"0\", ARROW_RIGHT=\">\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[RED=\"R\", GREEN=\"G\", YELLOW=\"Y\", BLUE=\"B\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[UP=\"Up\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[LEFT=\"Left\", OK=\"Ok\", RIGHT=\"Right\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[DOWN=\"Down\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[VOLUME_UP=\"+\", EXIT=\"Exit\", CHANNEL_UP=\"+\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[VOLUME_DOWN=\"-\", EPG=\"Epg\", CHANNEL_DOWN=\"-\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[MENU=\"Menu\", VIDEO=\"[=R]\", AUDIO=\"Audio\", HELP=\"Help\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[FAST_BACKWARD=\"<<\", PLAY=\">\", PAUSE=\"||\", FAST_FORWARD=\">>\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[TV=\"TV\", RECORD=\"O\", STOP=\"[]\", RADIO=\"Radio\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[INFO=\"INFO\"]\n+  }   \n+  Frame label=\"Enigma2 Messages\" {   \n+     Switch    item=Enigma2_SendError mappings=[SEND=\"SEND\"]\n+     Switch    item=Enigma2_SendWarning mappings=[SEND=\"SEND\"]\n+     Switch    item=Enigma2_SendInfo mappings=[SEND=\"SEND\"]\n+  }\n+}\n+```\n+\n+\n+demo.rules:\n+\n+```\n+rule \"Enigma2_KeyS\"\n+when Item Enigma2_RemoteKeys received command\n+then\n+   val actions = getActions(\"enigma2\",\"enigma2:device:192_168_0_3\")\n+   if(null === actions) {\n+      logInfo(\"actions\", \"Actions not found, check thing ID\")\n+      return\n+   }\n+   actions.sendRcCommand(receivedCommand.toString)\n+end\n+\n+rule \"Enigma2_SendError\"\n+when Item Enigma2_SendError received command\n+then\n+   Enigma2_Error.sendCommand(\"This is an error\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzMjA3NA==", "bodyText": "I am not sure if this has to be part of this README because it applies to ALL bindings and addons and is part of the documentation anyway...", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420332074", "createdAt": "2020-05-05T18:49:52Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,357 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.\n+\n+#### Device Settings\n+\n+The Device must be connected to the same network as openHAB.\n+\n+## Binding Configuration\n+\n+The binding has no configuration parameter. \n+\n+## Discovery\n+\n+Devices are auto discovered through HTTP in the local network.\n+\n+If automatic discovery is not possible you may still manually configure a device based on the hostname.\n+\n+## Thing Configuration\n+\n+Enigma2 has four configuration parameters.\n+\n+Parameters:\n+\n+| Name            | Description                                        |\n+|-----------------|----------------------------------------------------|\n+| host            | Hostname or IP address of the Enigma2 device       |\n+| refreshInterval | The refresh interval in seconds                    |\n+| timeout         | The timeout for reading from the device in seconds |\n+| user            | Optional: The Username of the Enigma2 Web API      |\n+| password        | Optional: The Password of the Enigma2 Web API      |\n+\n+### Configuration in .things file\n+\n+Set the parameters as in the following example:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\", user=\"usename\" , password=\"***\"]\n+```\n+\n+## Channels\n+\n+| Channel Type ID | Item Type | Description                                                                                                                                                                                                             | Read/Write |\n+|-----------------|-----------|----------------------------------------------------------------------------------------------|------------|\n+| power           | Switch    | Current power setting.                                                                       | RW         |\n+| mute            | Switch    | Current mute setting.                                                                        | RW         |\n+| volume          | Dimmer    | Current volume setting.                                                                      | RW         |\n+| channel         | String    | Current channel. Use only the channel text as command to update the channel.                 | RW         |\n+| title           | String    | Current program title of the current channel.                                                | R          |\n+| description     | String    | Current program description of the current channel.                                          | R          |\n+| info            | String    | Displays a short info on the TV screen. See also rules section.                              | W          |\n+| warning         | String    | Displays a short warning on the TV screen. See also rules section.                           | W          |\n+| error           | String    | Displays a short error on the TV screen. See also rules section.                             | W          |\n+| mediaPlayer     | Player    | Media control player                                                                         | W          |\n+| mediaStop       | Switch    | Media control stop                                                                           | W          |\n+| rcButton        | String    | Simulates pressing of a button on the remote control. See below for a list of button names.  | W          |\n+\n+\n+### Remote Control Buttons\n+\n+The rcButton channel has only been tested on a Vu+Solo2 and this is a list of button codes that are known to work with this device.\n+\n+| Code String   |\n+|---------------|\n+| POWER         |\n+| KEY_0         |\n+| KEY_1         |\n+| KEY_2         |\n+| KEY_3         |\n+| KEY_4         |\n+| KEY_5         |\n+| KEY_6         |\n+| KEY_7         |\n+| KEY_8         |\n+| KEY_9         |\n+| ARROW_LEFT    |\n+| ARROW_RIGHT   |\n+| VOLUME_DOWN   |\n+| VOLUME_UP     |\n+| MUTE          |\n+| CHANNEL_UP    |\n+| CHANNEL_DOWN  |\n+| LEFT          |\n+| RIGHT         |\n+| UP            |\n+| DOWN          |\n+| OK            |\n+| EXIT          |\n+| RED           |\n+| GREEN         |\n+| YELLOW        |\n+| BLUE          |\n+| PLAY          |\n+| PAUSE         |\n+| STOP          |\n+| RECORD        |\n+| FAST_FORWARD  |\n+| FAST_BACKWARD |\n+| TV            |\n+| RADIO         |\n+| AUDIO         |\n+| VIDEO         |\n+| TEXT          |\n+| INFO          |\n+| MENU          |\n+| HELP          |\n+| SUBTITLE      |\n+| EPG           |\n+\n+\n+## Example\n+\n+demo.things:\n+\n+```\n+Thing enigma2:device:192_168_0_3 [host=\"192.168.1.3\", refreshInterval=\"5\"]\n+```\n+\n+demo.items:\n+\n+```\n+Switch  Enigma2_Power              \"Power: [%s]\"          <switch>           { channel=\"enigma2:device:192_168_0_3:power\" }\n+Dimmer  Enigma2_Volume             \"Volume: [%d %%]\"      <soundvolume>      { channel=\"enigma2:device:192_168_0_3:volume\" }\n+Switch  Enigma2_Mute               \"Mute: [%s]\"           <soundvolume_mute> { channel=\"enigma2:device:192_168_0_3:mute\" }\n+Switch  Enigma2_Stop               \"Stop: [%s]\"           <mediacontrol>     { channel=\"enigma2:device:192_168_0_3:mediaStop\", autoupdate=\"false\" }\n+Player  Enigma2_PlayerControl      \"Mode: [%s]\"           <mediacontrol>     { channel=\"enigma2:device:192_168_0_3:mediaPlayer\" }\n+String  Enigma2_Channel            \"Channel: [%s]\"        <receiver>         { channel=\"enigma2:device:192_168_0_3:channel\" }\n+String  Enigma2_Title              \"Title: [%s]\"          <receiver>         { channel=\"enigma2:device:192_168_0_3:title\" }\n+String  Enigma2_Description        \"Description: [%s]\"    <receiver>         { channel=\"enigma2:device:192_168_0_3:description\" }\n+String  Enigma2_Error              \"Error: [%s]\"          <receiver>         { channel=\"enigma2:device:192_168_0_3:error\" }\n+String  Enigma2_Warning            \"Warning: [%s]\"        <receiver>         { channel=\"enigma2:device:192_168_0_3:warning\" }\n+String  Enigma2_Info               \"Info: [%s]\"           <receiver>         { channel=\"enigma2:device:192_168_0_3:info\" }\n+String  Enigma2_RemoteKeys         \"[]\"                   <receiver>         { autoupdate=\"false\" }\n+String  Enigma2_SendError          \"Error\"                <text>             { autoupdate=\"false\" }\n+String  Enigma2_SendWarning        \"Warning\"              <text>             { autoupdate=\"false\" }\n+String  Enigma2_SendInfo           \"Info\"                 <text>             { autoupdate=\"false\" }\n+```\n+\n+demo.sitemap:\n+\n+```\n+sitemap demo label=\"Enigma2 Demo\"\n+{\n+  Frame label=\"Enigma2\" { \n+     Switch    item=Enigma2_Power        \n+     Slider    item=Enigma2_Volume step=5 minValue=0 maxValue=100\n+     Setpoint  item=Enigma2_Volume step=5 minValue=0 maxValue=100\n+     Switch    item=Enigma2_Mute\n+     Default   item=Enigma2_PlayerControl\n+     Switch    item=Enigma2_Stop mappings=[ON=\"Stop\"]\n+     Text      item=Enigma2_Channel\n+     Text      item=Enigma2_Title\n+     Text      item=Enigma2_Description\n+  }\n+  Frame label=\"Enigma2 Remote\" {\n+     Switch    item=Enigma2_RemoteKeys mappings=[POWER=\"POWER\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[TEXT=\"[=]\", SUBTITLE=\"[_]\", MUTE=\"MUTE\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[KEY_1=\"1\", KEY_2=\"2\", KEY_3=\"3\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[KEY_4=\"4\", KEY_5=\"5\", KEY_6=\"6\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[KEY_7=\"7\", KEY_8=\"8\", KEY_9=\"9\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[ARROW_LEFT=\"<\", KEY_0=\"0\", ARROW_RIGHT=\">\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[RED=\"R\", GREEN=\"G\", YELLOW=\"Y\", BLUE=\"B\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[UP=\"Up\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[LEFT=\"Left\", OK=\"Ok\", RIGHT=\"Right\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[DOWN=\"Down\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[VOLUME_UP=\"+\", EXIT=\"Exit\", CHANNEL_UP=\"+\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[VOLUME_DOWN=\"-\", EPG=\"Epg\", CHANNEL_DOWN=\"-\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[MENU=\"Menu\", VIDEO=\"[=R]\", AUDIO=\"Audio\", HELP=\"Help\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[FAST_BACKWARD=\"<<\", PLAY=\">\", PAUSE=\"||\", FAST_FORWARD=\">>\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[TV=\"TV\", RECORD=\"O\", STOP=\"[]\", RADIO=\"Radio\"]\n+     Switch    item=Enigma2_RemoteKeys mappings=[INFO=\"INFO\"]\n+  }   \n+  Frame label=\"Enigma2 Messages\" {   \n+     Switch    item=Enigma2_SendError mappings=[SEND=\"SEND\"]\n+     Switch    item=Enigma2_SendWarning mappings=[SEND=\"SEND\"]\n+     Switch    item=Enigma2_SendInfo mappings=[SEND=\"SEND\"]\n+  }\n+}\n+```\n+\n+\n+demo.rules:\n+\n+```\n+rule \"Enigma2_KeyS\"\n+when Item Enigma2_RemoteKeys received command\n+then\n+   val actions = getActions(\"enigma2\",\"enigma2:device:192_168_0_3\")\n+   if(null === actions) {\n+      logInfo(\"actions\", \"Actions not found, check thing ID\")\n+      return\n+   }\n+   actions.sendRcCommand(receivedCommand.toString)\n+end\n+\n+rule \"Enigma2_SendError\"\n+when Item Enigma2_SendError received command\n+then\n+   Enigma2_Error.sendCommand(\"This is an error\")\n+end\n+\n+rule \"Enigma2_SendWarning\"\n+when Item Enigma2_SendWarning received command\n+then\n+   Enigma2_Warning.sendCommand(\"This is a warning\")\n+end\n+\n+rule \"Enigma2_SendInfo\"\n+when Item Enigma2_SendInfo received command\n+then\n+   Enigma2_Info.sendCommand(\"This is a info\")\n+end\n+```\n+\n+## Rule Actions\n+\n+Multiple actions are supported by this binding. In classic rules these are accessible as shown in this example (adjust getActions with your ThingId):\n+\n+Example\n+\n+```\n+ val actions = getActions(\"enigma2\",\"enigma2:device:192_168_0_3\")\n+ if(null === actions) {\n+        logInfo(\"actions\", \"Actions not found, check thing ID\")\n+        return\n+ }\n+```\n+\n+### sendInfo(text)\n+\n+Sends an info message to the device with will be shown on the TV screen for 30 seconds.\n+\n+Parameters:\n+\n+| Name    | Description                                                          |\n+|---------|----------------------------------------------------------------------|\n+| text    | The text to display                                                  |\n+\n+Example:\n+\n+```\n+actions.sendInfo(\"Hello World\")\n+```\n+\n+### sendInfo(text, timeout)\n+\n+Sends an info message to the device with will be shown on the TV screen.\n+\n+Parameters:\n+\n+| Name    | Description                                                          |\n+|---------|----------------------------------------------------------------------|\n+| text    | The text to display                                                  |\n+| timeout | The timeout in seconds                                               |\n+\n+Example:\n+\n+```\n+actions.sendInfo(\"Hello World\", 10)\n+```\n+\n+### sendWarning(text)\n+\n+Sends a warning message to the device with will be shown on the TV screen for 30 seconds.\n+\n+Parameters:\n+\n+| Name    | Description                                                          |\n+|---------|----------------------------------------------------------------------|\n+| text    | The text to display                                                  |\n+\n+Example:\n+\n+```\n+actions.sendWarning(\"Hello World\")\n+```\n+\n+### sendWarning(text, timeout)\n+\n+Sends a warning message to the device with will be shown on the TV screen.\n+\n+Parameters:\n+\n+| Name    | Description                                                          |\n+|---------|----------------------------------------------------------------------|\n+| text    | The text to display                                                  |\n+| timeout | The timeout in seconds                                               |\n+\n+Example:\n+\n+```\n+actions.sendWarning(\"Hello World\", 10)\n+```\n+\n+### sendError(text)\n+\n+Sends an error message to the device with will be shown on the TV screen for 30 seconds.\n+\n+Parameters:\n+\n+| Name    | Description                                                          |\n+|---------|----------------------------------------------------------------------|\n+| text    | The text to display                                                  |\n+\n+Example:\n+\n+```\n+actions.sendError(\"Hello World\")\n+```\n+\n+### sendError(text, timeout)\n+\n+Sends an error message to the device with will be shown on the TV screen.\n+\n+Parameters:\n+\n+| Name    | Description                                                          |\n+|---------|----------------------------------------------------------------------|\n+| text    | The text to display                                                  |\n+| timeout | The timeout in seconds                                               |\n+\n+Example:\n+\n+```\n+actions.sendError(\"Hello World\", 10)\n+```\n+\n+### sendRcCommand(button)\n+\n+Sends a button press event to the device.\n+\n+Parameters:\n+\n+| Name    | Description                                                            |\n+|---------|------------------------------------------------------------------------|\n+| button  | see the supported buttons in chapter 'Remote Control Buttons'          |\n+\n+Example:\n+\n+```\n+actions.sendRcCommand(\"KEY_1\")\n+```\n+\n+## Troubleshooting\n+\n+In case of issues you may find it helpful to enable debug level logging and check you log file. Log into openHAB console and enable debug logging for this binding:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 352}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNDkyMg==", "bodyText": "Please add a <context>network-address</context>, see https://www.openhab.org/docs/developer/bindings/config-xml.html", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420334922", "createdAt": "2020-05-05T18:55:04Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"rcButton\" typeId=\"rcButtonType\" />\n+\t\t\t<channel id=\"error\" typeId=\"errorType\" />\n+\t\t\t<channel id=\"warning\" typeId=\"warningType\" />\n+\t\t\t<channel id=\"info\" typeId=\"infoType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host Address</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNTE1Mg==", "bodyText": "Are there any meaningful min/max values?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420335152", "createdAt": "2020-05-05T18:55:29Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"rcButton\" typeId=\"rcButtonType\" />\n+\t\t\t<channel id=\"error\" typeId=\"errorType\" />\n+\t\t\t<channel id=\"warning\" typeId=\"warningType\" />\n+\t\t\t<channel id=\"info\" typeId=\"infoType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjU3OQ==", "bodyText": "Please add at least a \"\", see https://www.openhab.org/docs/developer/bindings/thing-xml.html", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420336579", "createdAt": "2020-05-05T18:58:02Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"rcButton\" typeId=\"rcButtonType\" />\n+\t\t\t<channel id=\"error\" typeId=\"errorType\" />\n+\t\t\t<channel id=\"warning\" typeId=\"warningType\" />\n+\t\t\t<channel id=\"info\" typeId=\"infoType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Timeout</label>\n+\t\t\t\t<description>The timeout for reading from the device in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"user\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The Username of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The Password of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"powerType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Setting the power to on/off.</description>\n+\t</channel-type>\n+\t<channel-type id=\"muteType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Mute</label>\n+\t\t<description>Current Mute Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t</channel-type>\n+\t<channel-type id=\"volumeType\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Volume</label>\n+\t\t<description>Current Volume Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"5\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"channelType\">\n+\t\t<item-type>String</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNjYzMw==", "bodyText": "Please add at least a <state readOnly=\"true\"></state>, see https://www.openhab.org/docs/developer/bindings/thing-xml.html", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420336633", "createdAt": "2020-05-05T18:58:08Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"rcButton\" typeId=\"rcButtonType\" />\n+\t\t\t<channel id=\"error\" typeId=\"errorType\" />\n+\t\t\t<channel id=\"warning\" typeId=\"warningType\" />\n+\t\t\t<channel id=\"info\" typeId=\"infoType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Timeout</label>\n+\t\t\t\t<description>The timeout for reading from the device in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"user\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The Username of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The Password of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"powerType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Setting the power to on/off.</description>\n+\t</channel-type>\n+\t<channel-type id=\"muteType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Mute</label>\n+\t\t<description>Current Mute Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t</channel-type>\n+\t<channel-type id=\"volumeType\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Volume</label>\n+\t\t<description>Current Volume Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"5\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"channelType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Channel</label>\n+\t\t<description>Current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"titleType\">\n+\t\t<item-type>String</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzIwNQ==", "bodyText": "See my comment in the README, please remove in favor to ThingActions.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420337205", "createdAt": "2020-05-05T18:59:09Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"rcButton\" typeId=\"rcButtonType\" />\n+\t\t\t<channel id=\"error\" typeId=\"errorType\" />\n+\t\t\t<channel id=\"warning\" typeId=\"warningType\" />\n+\t\t\t<channel id=\"info\" typeId=\"infoType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Timeout</label>\n+\t\t\t\t<description>The timeout for reading from the device in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"user\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The Username of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The Password of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"powerType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Setting the power to on/off.</description>\n+\t</channel-type>\n+\t<channel-type id=\"muteType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Mute</label>\n+\t\t<description>Current Mute Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t</channel-type>\n+\t<channel-type id=\"volumeType\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Volume</label>\n+\t\t<description>Current Volume Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"5\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"channelType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Channel</label>\n+\t\t<description>Current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"titleType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Title</label>\n+\t\t<description>Current Title of the current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"descriptionType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Description</label>\n+\t\t<description>Current Description of the current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"mediaPlayerType\">\n+\t\t<item-type>Player</item-type>\n+\t\t<label>Media Control</label>\n+\t\t<description>Control media (e.g. audio or video) playback</description>\n+\t\t<category>MediaControl</category>\n+\t</channel-type>\n+\t<channel-type id=\"mediaStopType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Stop</label>\n+\t\t<description>Stop Playback</description>\n+\t</channel-type>\n+\t<channel-type id=\"rcButtonType\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzI2MQ==", "bodyText": "See my comment in the README, please remove in favor to ThingActions.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420337261", "createdAt": "2020-05-05T18:59:14Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"rcButton\" typeId=\"rcButtonType\" />\n+\t\t\t<channel id=\"error\" typeId=\"errorType\" />\n+\t\t\t<channel id=\"warning\" typeId=\"warningType\" />\n+\t\t\t<channel id=\"info\" typeId=\"infoType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Timeout</label>\n+\t\t\t\t<description>The timeout for reading from the device in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"user\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The Username of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The Password of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"powerType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Setting the power to on/off.</description>\n+\t</channel-type>\n+\t<channel-type id=\"muteType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Mute</label>\n+\t\t<description>Current Mute Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t</channel-type>\n+\t<channel-type id=\"volumeType\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Volume</label>\n+\t\t<description>Current Volume Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"5\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"channelType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Channel</label>\n+\t\t<description>Current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"titleType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Title</label>\n+\t\t<description>Current Title of the current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"descriptionType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Description</label>\n+\t\t<description>Current Description of the current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"mediaPlayerType\">\n+\t\t<item-type>Player</item-type>\n+\t\t<label>Media Control</label>\n+\t\t<description>Control media (e.g. audio or video) playback</description>\n+\t\t<category>MediaControl</category>\n+\t</channel-type>\n+\t<channel-type id=\"mediaStopType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Stop</label>\n+\t\t<description>Stop Playback</description>\n+\t</channel-type>\n+\t<channel-type id=\"rcButtonType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>RCButton</label>\n+\t\t<description>Simulate a Remote Control button press</description>\n+\t</channel-type>\n+\t<channel-type id=\"errorType\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzI5OA==", "bodyText": "See my comment in the README, please remove in favor to ThingActions.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420337298", "createdAt": "2020-05-05T18:59:19Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"rcButton\" typeId=\"rcButtonType\" />\n+\t\t\t<channel id=\"error\" typeId=\"errorType\" />\n+\t\t\t<channel id=\"warning\" typeId=\"warningType\" />\n+\t\t\t<channel id=\"info\" typeId=\"infoType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Timeout</label>\n+\t\t\t\t<description>The timeout for reading from the device in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"user\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The Username of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The Password of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"powerType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Setting the power to on/off.</description>\n+\t</channel-type>\n+\t<channel-type id=\"muteType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Mute</label>\n+\t\t<description>Current Mute Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t</channel-type>\n+\t<channel-type id=\"volumeType\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Volume</label>\n+\t\t<description>Current Volume Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"5\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"channelType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Channel</label>\n+\t\t<description>Current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"titleType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Title</label>\n+\t\t<description>Current Title of the current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"descriptionType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Description</label>\n+\t\t<description>Current Description of the current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"mediaPlayerType\">\n+\t\t<item-type>Player</item-type>\n+\t\t<label>Media Control</label>\n+\t\t<description>Control media (e.g. audio or video) playback</description>\n+\t\t<category>MediaControl</category>\n+\t</channel-type>\n+\t<channel-type id=\"mediaStopType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Stop</label>\n+\t\t<description>Stop Playback</description>\n+\t</channel-type>\n+\t<channel-type id=\"rcButtonType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>RCButton</label>\n+\t\t<description>Simulate a Remote Control button press</description>\n+\t</channel-type>\n+\t<channel-type id=\"errorType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error</label>\n+\t\t<description>Sends a error to the device</description>\n+\t</channel-type>\n+\t<channel-type id=\"warningType\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzNzM0NQ==", "bodyText": "See my comment in the README, please remove in favor to ThingActions.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420337345", "createdAt": "2020-05-05T18:59:23Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"rcButton\" typeId=\"rcButtonType\" />\n+\t\t\t<channel id=\"error\" typeId=\"errorType\" />\n+\t\t\t<channel id=\"warning\" typeId=\"warningType\" />\n+\t\t\t<channel id=\"info\" typeId=\"infoType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Timeout</label>\n+\t\t\t\t<description>The timeout for reading from the device in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"user\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User Name</label>\n+\t\t\t\t<description>The Username of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>The Password of the Enigma2 Web API.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t<channel-type id=\"powerType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Setting the power to on/off.</description>\n+\t</channel-type>\n+\t<channel-type id=\"muteType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Mute</label>\n+\t\t<description>Current Mute Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t</channel-type>\n+\t<channel-type id=\"volumeType\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Volume</label>\n+\t\t<description>Current Volume Setting</description>\n+\t\t<category>SoundVolume</category>\n+\t\t<state min=\"0\" max=\"100\" step=\"5\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"channelType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Channel</label>\n+\t\t<description>Current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"titleType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Title</label>\n+\t\t<description>Current Title of the current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"descriptionType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Description</label>\n+\t\t<description>Current Description of the current Channel</description>\n+\t</channel-type>\n+\t<channel-type id=\"mediaPlayerType\">\n+\t\t<item-type>Player</item-type>\n+\t\t<label>Media Control</label>\n+\t\t<description>Control media (e.g. audio or video) playback</description>\n+\t\t<category>MediaControl</category>\n+\t</channel-type>\n+\t<channel-type id=\"mediaStopType\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Stop</label>\n+\t\t<description>Stop Playback</description>\n+\t</channel-type>\n+\t<channel-type id=\"rcButtonType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>RCButton</label>\n+\t\t<description>Simulate a Remote Control button press</description>\n+\t</channel-type>\n+\t<channel-type id=\"errorType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error</label>\n+\t\t<description>Sends a error to the device</description>\n+\t</channel-type>\n+\t<channel-type id=\"warningType\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Warning</label>\n+\t\t<description>Sends a warning to the device</description>\n+\t</channel-type>\n+\t<channel-type id=\"infoType\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMzOTU5OQ==", "bodyText": "What if config.refreshInterval has an invalid value? I think it would make sense to validate the configuration once you read it for the first time.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420339599", "createdAt": "2020-05-05T19:03:29Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);\n+        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MDQzNw==", "bodyText": "Your handler instance might be reused at some point, so its IMHO better to read the config within \"initialize\".", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420340437", "createdAt": "2020-05-05T19:04:46Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MTkzMQ==", "bodyText": "A Thinghandler should not use the ThingStatus.UNINITIALIZED because this is used by the core framework only to express that the handler has not been initialized.\nPlease set the Thing to \"OFFLINE\" instead, and provide some \"ThingStatusDetail\", maybe configuration error and/or an error message (if it would be helpful for and ordinary enduser only, otherwise omit the message).", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420341931", "createdAt": "2020-05-05T19:07:21Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);\n+        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    private void refresh() {\n+        try {\n+            boolean online = getEnigma2Client().refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, getEnigma2Client().isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, getEnigma2Client().isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(getEnigma2Client().getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(getEnigma2Client().getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(getEnigma2Client().getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(getEnigma2Client().getDescription()));\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.UNINITIALIZED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MjkwNw==", "bodyText": "Please move the job canceling into the dispose method, that is the better place according the the ThingHandler lifecycle. If you have moved it to \"dispose\", please also do\nif(refreshJob != null) {\n   if(!refreshJob.isCanceled()) {\n        refreshJob.cancel(true);\n   }\n   refreshJob = null;\n}\n\nAlso: This might be a possible null pointer exception, please check refreshJob != null before accessing it.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420342907", "createdAt": "2020-05-05T19:09:10Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);\n+        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    private void refresh() {\n+        try {\n+            boolean online = getEnigma2Client().refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, getEnigma2Client().isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, getEnigma2Client().isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(getEnigma2Client().getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(getEnigma2Client().getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(getEnigma2Client().getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(getEnigma2Client().getDescription()));\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.UNINITIALIZED);\n+            getLogger().warn(\"Error on refreshing {}\", thing.getUID(), e);\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void handleRemoval() {\n+        refreshJob.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0MzcwNA==", "bodyText": "No need to implement this method, see my comment below.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420343704", "createdAt": "2020-05-05T19:10:36Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,305 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration config;\n+    private Enigma2Client enigma2Client;\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+        config = getConfigAs(Enigma2Configuration.class);\n+        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    private void refresh() {\n+        try {\n+            boolean online = getEnigma2Client().refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, getEnigma2Client().isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, getEnigma2Client().isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(getEnigma2Client().getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(getEnigma2Client().getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(getEnigma2Client().getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(getEnigma2Client().getDescription()));\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.UNINITIALIZED);\n+            getLogger().warn(\"Error on refreshing {}\", thing.getUID(), e);\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void handleRemoval() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM0ODU0NA==", "bodyText": "Its in general a bad habit to catch Exception directly (besides other things this will also swallow RuntimeExceptions like NPEs for example), please catch the more specific ones.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420348544", "createdAt": "2020-05-05T19:19:20Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import java.io.StringReader;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservice?sRef=\";\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        refreshPower();\n+        refreshAllServices();\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).ifPresent(name -> {\n+                transmit(PATH_EPG + name).ifPresent(this::processEpgResult);\n+            });\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM1MTQ3NQ==", "bodyText": "Is this a copy&paste error? because below you implement the type \"_http._tcp.local.\", not \"_ssh._tcp.local.\"", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420351475", "createdAt": "2020-05-05T19:24:28Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _ssh._tcp.local. and finding a webinterface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ca982e190ac5fcf4a519c691ebe29e77267de98"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Nzg4MDg3", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-406788087", "createdAt": "2020-05-06T16:33:02Z", "commit": {"oid": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjozMzowM1rOGRbekw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjozNToyMVrOGRbk6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyOTE3MQ==", "bodyText": "initialize should not throw any exceptions, please set the thing to OFFLINE with the apropriate ThingStatusDetail and maybe a message for the user.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420929171", "createdAt": "2020-05-06T16:33:03Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -47,22 +48,35 @@\n @NonNullByDefault\n public class Enigma2Handler extends BaseThingHandler {\n     private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    @Nullable\n     private Enigma2Configuration config;\n+    @Nullable\n     private Enigma2Client enigma2Client;\n     @Nullable\n     private ScheduledFuture<?> refreshJob;\n \n     public Enigma2Handler(Thing thing) {\n         super(thing);\n-        config = getConfigAs(Enigma2Configuration.class);\n-        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n     }\n \n     @Override\n+    @SuppressWarnings(\"null\")\n     public void initialize() {\n+        config = getConfigAs(Enigma2Configuration.class);\n+        if(config.host == null || config.host.isEmpty()) {\n+            throw new IllegalArgumentException(\"host must not be null or empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkyOTgyMQ==", "bodyText": "I think i mentioned this elsewhere in the code already, so i might have overlooked this one. Please catch a specific exception instead.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420929821", "createdAt": "2020-05-06T16:33:53Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -78,16 +92,20 @@ private void refresh() {\n                 updateStatus(ThingStatus.OFFLINE);\n             }\n         } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMDc5NQ==", "bodyText": "You seem to add this everywhere, but I don't know what the current coding guidelines are. because I would rather expect to do the proper null checks and not ignore the warnings (unless its a false positive reported by the annotation checker).", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r420930795", "createdAt": "2020-05-06T16:35:21Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -47,22 +48,35 @@\n @NonNullByDefault\n public class Enigma2Handler extends BaseThingHandler {\n     private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    @Nullable\n     private Enigma2Configuration config;\n+    @Nullable\n     private Enigma2Client enigma2Client;\n     @Nullable\n     private ScheduledFuture<?> refreshJob;\n \n     public Enigma2Handler(Thing thing) {\n         super(thing);\n-        config = getConfigAs(Enigma2Configuration.class);\n-        enigma2Client = new Enigma2Client(config.host, config.user, config.password, config.timeout);\n     }\n \n     @Override\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2OTA1MzI2", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-406905326", "createdAt": "2020-05-06T19:04:43Z", "commit": {"oid": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowNDo0NFrOGRhUpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTowNDo1OVrOGRhVcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNDkzNA==", "bodyText": "Please also provide a default here.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r421024934", "createdAt": "2020-05-06T19:04:44Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\" min=\"1\" max=\"3600\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNTEzNw==", "bodyText": "Please also provide a default here.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r421025137", "createdAt": "2020-05-06T19:04:59Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\" min=\"1\" max=\"3600\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"true\" min=\"1\" max=\"300\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c73ee436697986a7b9c028e1c71caf6891dc373b", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/c73ee436697986a7b9c028e1c71caf6891dc373b", "committedDate": "2020-05-07T19:34:19Z", "message": "Fixed review findings #2\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "4e49675aa22bf2aba8eb41809066d35e87d30c6d", "author": {"user": {"login": "hmerk", "name": "Hans-J\u00f6rg Merk"}}, "url": "https://github.com/openhab/openhab-addons/commit/4e49675aa22bf2aba8eb41809066d35e87d30c6d", "committedDate": "2020-05-07T19:55:39Z", "message": "[energenie] Initial contribution (#6461)\n\n* [energenie] oh1 migration\r\n\r\nSigned-off-by: Hans-J\u00f6rg Merk <hans-joerg.merk@t-online.de>\r\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e49675aa22bf2aba8eb41809066d35e87d30c6d", "author": {"user": {"login": "hmerk", "name": "Hans-J\u00f6rg Merk"}}, "url": "https://github.com/openhab/openhab-addons/commit/4e49675aa22bf2aba8eb41809066d35e87d30c6d", "committedDate": "2020-05-07T19:55:39Z", "message": "[energenie] Initial contribution (#6461)\n\n* [energenie] oh1 migration\r\n\r\nSigned-off-by: Hans-J\u00f6rg Merk <hans-joerg.merk@t-online.de>\r\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>"}, "afterCommit": {"oid": "a9114be0275e6c8fd0d813596806c4ce562a781c", "author": {"user": {"login": "hmerk", "name": "Hans-J\u00f6rg Merk"}}, "url": "https://github.com/openhab/openhab-addons/commit/a9114be0275e6c8fd0d813596806c4ce562a781c", "committedDate": "2020-05-07T20:01:25Z", "message": "[energenie] Initial contribution (#6461)\n\n* [energenie] oh1 migration\r\n\r\nSigned-off-by: Hans-J\u00f6rg Merk <hans-joerg.merk@t-online.de>\r\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d0b809555e35167b2db70f63ca26a1e93a22e82", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/9d0b809555e35167b2db70f63ca26a1e93a22e82", "committedDate": "2020-05-07T20:03:46Z", "message": "Merge branch '2.5.x' into enigma2"}, "afterCommit": {"oid": "22f92f23727b6da656a83e96d87508771006bd6d", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/22f92f23727b6da656a83e96d87508771006bd6d", "committedDate": "2020-05-07T20:42:32Z", "message": "[enigma2] Initial contribution #7514\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjE4NjQx", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-408618641", "createdAt": "2020-05-09T06:43:55Z", "commit": {"oid": "22f92f23727b6da656a83e96d87508771006bd6d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjo0Mzo1NVrOGS47UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzoyMDo1M1rOGS5HFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDI0MA==", "bodyText": "Typo -> OpenWebIf", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r422460240", "createdAt": "2020-05-09T06:43:55Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,348 @@\n+# Enigma2 Binding\n+\n+The binding integrates Enigma2 devices.\n+\n+## Supported Things\n+\n+### Enigma2 devices\n+\n+Enigma2 based set-top boxes with an installed OpenWebInf are supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22f92f23727b6da656a83e96d87508771006bd6d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MzI1Mw==", "bodyText": "If there is a default why it is still required?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r422463253", "createdAt": "2020-05-09T07:20:53Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,88 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"true\" min=\"1\" max=\"3600\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyNDkzNA=="}, "originalCommit": {"oid": "bafadc9b853b9b09f2e07f3166e93d3b02ce13c9"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22f92f23727b6da656a83e96d87508771006bd6d", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/22f92f23727b6da656a83e96d87508771006bd6d", "committedDate": "2020-05-07T20:42:32Z", "message": "[enigma2] Initial contribution #7514\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "71f51ee9b2ac13239da37b598a6f06d90a64d466", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/71f51ee9b2ac13239da37b598a6f06d90a64d466", "committedDate": "2020-05-09T10:05:52Z", "message": "[enigma2] Initial contribution #7514\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b680c26a6f40f8feb3eaa1035c31bfb5dbb797c", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/1b680c26a6f40f8feb3eaa1035c31bfb5dbb797c", "committedDate": "2020-05-09T13:22:27Z", "message": "[enigma2] Initial contribution #7514\n\n- Performance enhancement\n- Added support for questions\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "cdbac9e6c9482d3a9052092827a9484057c93df6", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/cdbac9e6c9482d3a9052092827a9484057c93df6", "committedDate": "2020-05-09T13:28:18Z", "message": "[enigma2] Initial contribution #7514\n\n- Performance enhancement\n- Added support for questions\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdbac9e6c9482d3a9052092827a9484057c93df6", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/cdbac9e6c9482d3a9052092827a9484057c93df6", "committedDate": "2020-05-09T13:28:18Z", "message": "[enigma2] Initial contribution #7514\n\n- Performance enhancement\n- Added support for questions\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/a4a53907dbd63d6ec024e6d73fad86e7060235fc", "committedDate": "2020-05-09T13:37:42Z", "message": "[enigma2] Initial contribution #7514\n\n- Performance enhancement\n- Added support for questions\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzIzOTU1", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-408723955", "createdAt": "2020-05-10T09:05:56Z", "commit": {"oid": "71f51ee9b2ac13239da37b598a6f06d90a64d466"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzQ4OTQ5", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-408748949", "createdAt": "2020-05-10T14:12:11Z", "commit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMjoxMVrOGTEj4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMjoxMVrOGTEj4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDg1MA==", "bodyText": "What about an exception which can be thrown here due to text having an unexpected format?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r422650850", "createdAt": "2020-05-10T14:12:11Z", "author": {"login": "t2000"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -203,6 +222,22 @@ private void processPowerResult(Document document) {\n \n     private void processChannelResult(Document document) {\n         channel = getString(document, \"e2servicename\");\n+        // Add channel-Reference-ID if not known\n+        if(!channels.containsKey(channel)) {\n+            channels.put(channel, getString(document, \"e2servicereference\"));\n+        }\n+    }\n+\n+    private void processAnswerResult(Document document) {\n+        if(asking) {\n+            boolean state = getBoolean(document, \"e2state\");\n+            if (state) {\n+                String[] text = getString(document, \"e2statetext\").split(\" \");\n+                answer = text[text.length - 1].replace(\"!\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzA5MDQ5", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-409309049", "createdAt": "2020-05-11T15:58:19Z", "commit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTMwOTc2", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-409530976", "createdAt": "2020-05-11T21:06:32Z", "commit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMTowNjozMlrOGTtZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMTo1MjoxNFrOGTutMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxOTgxNA==", "bodyText": "Why are you testing logs? I would prefer if all the code used the logger field directly.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423319814", "createdAt": "2020-05-11T21:06:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Optional<Enigma2Configuration> configuration = Optional.empty();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        configuration = Optional.ofNullable(getConfigAs(Enigma2Configuration.class));\n+        configuration.ifPresent(config -> {\n+            if(config.host.isEmpty()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"host must not be empty\");\n+            } else if(config.timeout <= 0 || config.timeout > 300) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"timeout must be between 0 and 300 seconds\");\n+            } else if(config.refreshInterval <= 0 || config.refreshInterval > 3600) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"refreshInterval must be between 0 and 3600 seconds\");\n+            }\n+            enigma2Client = Optional.of(new Enigma2Client(config.host, config.user, config.password, config.timeout));\n+            refreshJob = Optional.of(scheduler.scheduleWithFixedDelay(this::refresh, 2, config.refreshInterval, TimeUnit.SECONDS));\n+        });\n+    }\n+\n+    private void refresh() {\n+        getEnigma2Client().ifPresent(client -> {\n+            boolean online = client.refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, client.isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, client.isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(client.getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(client.getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(client.getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(client.getDescription()));\n+                if(lastAnswerTime.isBefore(client.getLastAnswerTime())) {\n+                    lastAnswerTime = client.getLastAnswerTime();\n+                    updateState(CHANNEL_ANSWER, new StringType(client.getAnswer()));\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        refreshJob.ifPresent( job -> {\n+            if(!job.isCancelled()) {\n+                job.cancel(true);\n+            }\n+        });\n+        refreshJob = Optional.empty();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        getLogger().debug(\"handleCommand({},{})\", channelUID, command);\n+        getEnigma2Client().ifPresent(client -> {\n+            if (CHANNEL_POWER.equals(channelUID.getId())) {\n+                handlePower(channelUID, command, client);\n+            } else if (CHANNEL_CHANNEL.equals(channelUID.getId())) {\n+                handleChannel(channelUID, command, client);\n+            } else if (CHANNEL_MEDIA_PLAYER.equals(channelUID.getId())) {\n+                handleMediaPlayer(channelUID, command);\n+            } else if (CHANNEL_MEDIA_STOP.equals(channelUID.getId())) {\n+                handleMediaStop(channelUID, command);\n+            } else if (CHANNEL_MUTE.equals(channelUID.getId())) {\n+                handleMute(channelUID, command, client);\n+            } else if (CHANNEL_VOLUME.equals(channelUID.getId())) {\n+                handleVolume(channelUID, command, client);\n+            } else if (CHANNEL_TITLE.equals(channelUID.getId())) {\n+                handleTitle(channelUID, command, client);\n+            } else if (CHANNEL_DESCRIPTION.equals(channelUID.getId())) {\n+                handleDescription(channelUID, command, client);\n+            } else if (CHANNEL_ANSWER.equals(channelUID.getId())) {\n+                handleAnswer(channelUID, command, client);\n+            }\n+        });\n+    }\n+\n+    private void handleVolume(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshVolume();\n+            updateState(channelUID, new PercentType(client.getVolume()));\n+        } else if (command instanceof PercentType) {\n+            client.setVolume(((PercentType)command).intValue());\n+        } else if (command instanceof DecimalType) {\n+            client.setVolume(((DecimalType)command).intValue());\n+        }  else {\n+            getLogger().info(\"Channel {} only accepts PercentType, DecimalType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleMute(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshVolume();\n+            updateState(channelUID, client.isMute() ? OnOffType.ON : OnOffType.OFF);\n+        } else if (OnOffType.ON.equals(command)) {\n+            client.setMute(true);\n+        } else if (OnOffType.OFF.equals(command)) {\n+            client.setMute(false);\n+        } else {\n+            getLogger().info(\"Channel {} only accepts OnOffType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleAnswer(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshAnswer();\n+            if(lastAnswerTime.isBefore(client.getLastAnswerTime())) {\n+                lastAnswerTime = client.getLastAnswerTime();\n+                updateState(channelUID, new StringType(client.getAnswer()));\n+            }\n+        } else {\n+            getLogger().info(\"Channel {} only accepts RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleMediaStop(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        } else if (command instanceof OnOffType) {\n+            sendRcCommand(Enigma2RemoteKey.STOP);\n+        } else {\n+            getLogger().info(\"Channel {} only accepts OnOffType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleMediaPlayer(ChannelUID channelUID, Command command) {\n+        if (RefreshType.REFRESH == command) {\n+            return;\n+        } else if (PlayPauseType.PLAY == command) {\n+            sendRcCommand(Enigma2RemoteKey.PLAY);\n+        } else if (PlayPauseType.PAUSE == command) {\n+            sendRcCommand(Enigma2RemoteKey.PAUSE);\n+        } else if (NextPreviousType.NEXT == command) {\n+            sendRcCommand(Enigma2RemoteKey.FAST_FORWARD);\n+        } else if (NextPreviousType.PREVIOUS == command) {\n+            sendRcCommand(Enigma2RemoteKey.FAST_BACKWARD);\n+        } else {\n+            getLogger().info(\"Channel {} only accepts PlayPauseType, NextPreviousType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleChannel(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshChannel();\n+            updateState(channelUID, new StringType(client.getChannel()));\n+        } else if (command instanceof StringType) {\n+            client.setChannel(command.toString());\n+        } else {\n+            getLogger().info(\"Channel {} only accepts StringType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleTitle(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshEpg();\n+            updateState(channelUID, new StringType(client.getTitle()));\n+        } else {\n+            getLogger().info(\"Channel {} only accepts RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handleDescription(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (command instanceof RefreshType) {\n+            client.refreshEpg();\n+            updateState(channelUID, new StringType(client.getDescription()));\n+        } else {\n+            getLogger().info(\"Channel {} only accepts RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    private void handlePower(ChannelUID channelUID, Command command, Enigma2Client client) {\n+        if (RefreshType.REFRESH == command) {\n+            client.refreshPower();\n+            updateState(channelUID, client.isPower() ? OnOffType.ON : OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            client.setPower(true);\n+        } else if (OnOffType.OFF == command) {\n+            client.setPower(false);\n+        } else {\n+            getLogger().info(\"Channel {} only accepts OnOffType, RefreshType. Type was {}.\", channelUID, command.getClass());\n+        }\n+    }\n+\n+    public void sendRcCommand(String rcButton) {\n+        getLogger().debug(\"sendRcCommand({})\", rcButton);\n+        try {\n+            Enigma2RemoteKey remoteKey = Enigma2RemoteKey.valueOf(rcButton);\n+            sendRcCommand(remoteKey);\n+        } catch (IllegalArgumentException ex) {\n+            getLogger().warn(\"{} is not a valid value for button - available are: {}\", rcButton,\n+                    Stream.of(Enigma2RemoteKey.values()).map(b -> b.name()).collect(Collectors.joining(\", \")));\n+        }\n+    }\n+\n+    private void sendRcCommand(Enigma2RemoteKey remoteKey) {\n+        getEnigma2Client().ifPresent(client -> client.sendRcCommand(remoteKey.getValue()));\n+    }\n+\n+    public void sendInfo(int timeout, String text) {\n+        getEnigma2Client().ifPresent(client -> client.sendInfo(timeout, text));\n+    }\n+\n+    public void sendWarning(int timeout, String text) {\n+        getEnigma2Client().ifPresent(client -> client.sendWarning(timeout, text));\n+    }\n+\n+    public void sendError(int timeout, String text) {\n+        getEnigma2Client().ifPresent(client -> client.sendError(timeout, text));\n+    }\n+\n+    public void sendQuestion(int timeout, String text) {\n+        getEnigma2Client().ifPresent(client -> client.sendQuestion(timeout, text));\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(Enigma2Actions.class);\n+    }\n+\n+    /**\n+     * Getter for Test-Injection\n+     * @return Enigma2Client.\n+     */\n+    Optional<Enigma2Client> getEnigma2Client() {\n+        return enigma2Client;\n+    }\n+\n+    /**\n+     * Getter for Test-Injection\n+     * @return Enigma2Client.\n+     */\n+    Logger getLogger() {\n+        return logger;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjE2OQ==", "bodyText": "can you make this final?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423322169", "createdAt": "2020-05-11T21:11:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyMjczNw==", "bodyText": "If there is no configuration present shouldn't that put the thing offline?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423322737", "createdAt": "2020-05-11T21:12:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Optional<Enigma2Configuration> configuration = Optional.empty();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        configuration = Optional.ofNullable(getConfigAs(Enigma2Configuration.class));\n+        configuration.ifPresent(config -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjMxOQ==", "bodyText": "I would prefer initializing to a default configuration instance instead of using an Optional.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Optional<Enigma2Configuration> configuration = Optional.empty();\n          \n          \n            \n                private Enigma2Configuration configuration = new Enigma2Configuration();", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423326319", "createdAt": "2020-05-11T21:19:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Optional<Enigma2Configuration> configuration = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNjcwMA==", "bodyText": "can this be made final?\nAlso this field should be renamed to reduce confusion between it and timeout parameters in other methods.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423326700", "createdAt": "2020-05-11T21:20:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyODgwMg==", "bodyText": "This line needs to be formatted", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423328802", "createdAt": "2020-05-11T21:24:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setMute(boolean mute) {\n+        refreshVolume();\n+        if(this.mute != mute) {\n+            transmit(PATH_TOGGLE_MUTE).ifPresent( this::processVolumeResult );\n+        }\n+    }\n+\n+    public void setPower(boolean power) {\n+        refreshPower();\n+        if(this.power != power) {\n+            transmit(PATH_TOGGLE_POWER).ifPresent( this::processPowerResult );\n+        }\n+    }\n+\n+    public void setVolume(int volume) {\n+        transmit(PATH_SET_VOLUME + volume).ifPresent(this::processVolumeResult);\n+    }\n+\n+    public void setChannel(String name) {\n+        if(channels.containsKey(name)) {\n+            String id = channels.get(name);\n+            transmit(PATH_ZAP + UrlEncoded.encodeString(id)).ifPresent(document -> channel = name);\n+        } else {\n+            getLogger().warn(\"Channel {} not found.\", name);\n+        }\n+    }\n+\n+    public void sendRcCommand(int key) {\n+        transmit(PATH_REMOTE_CONTROL + key);\n+    }\n+\n+    public void sendError(int timeout, String text) {\n+        sendMessage(TYPE_ERROR, timeout, text);\n+    }\n+\n+    public void sendWarning(int timeout, String text) {\n+        sendMessage(TYPE_WARNING, timeout, text);\n+    }\n+\n+    public void sendInfo(int timeout, String text) {\n+        sendMessage(TYPE_INFO, timeout, text);\n+    }\n+\n+    public void sendQuestion(int timeout, String text) {\n+        asking = true;\n+        sendMessage(TYPE_QUESTION, timeout, text);\n+    }\n+\n+    private void sendMessage(int type, int timeout, String text) {\n+        transmit(PATH_MESSAGE + type + \"&timeout=\" + timeout + \"&text=\" + UrlEncoded.encodeString(text));\n+    }\n+\n+    private void processPowerResult(Document document) {\n+        power = !getBoolean(document, \"e2instandby\");\n+        if(!power) {\n+            title = \"\";\n+            description = \"\";\n+            channel = \"\";\n+        }\n+    }\n+\n+    private void processChannelResult(Document document) {\n+        channel = getString(document, \"e2servicename\");\n+        // Add channel-Reference-ID if not known\n+        if(!channels.containsKey(channel)) {\n+            channels.put(channel, getString(document, \"e2servicereference\"));\n+        }\n+    }\n+\n+    private void processAnswerResult(Document document) {\n+        if(asking) {\n+            boolean state = getBoolean(document, \"e2state\");\n+            if (state) {\n+                String[] text = getString(document, \"e2statetext\").split(\" \");\n+                answer = text[text.length - 1].replace(\"!\", \"\");\n+                asking = false;\n+                lastAnswerTime = LocalDateTime.now();\n+            }\n+        }\n+    }\n+\n+    private void processVolumeResult(Document document) {\n+        volume = getInt( document,\"e2current\");\n+        mute = getBoolean(document, \"e2ismuted\");\n+    }\n+\n+    private void processEpgResult(Document document) {\n+        title = getString(document, \"e2eventtitle\");\n+        description = getString(document, \"e2eventdescription\");\n+    }\n+\n+    private void processAllServicesResult(Document document) {\n+        NodeList bouquetList = document.getElementsByTagName(\"e2bouquet\");\n+        channels.clear();\n+        for(int i = 0; i < bouquetList.getLength(); i++) {\n+            Element bouquet = (Element)bouquetList.item(i);\n+            NodeList serviceList = bouquet.getElementsByTagName(\"e2service\");\n+            for(int j = 0; j < serviceList.getLength(); j++) {\n+                Element service = (Element) serviceList.item(j);\n+                String id = service.getElementsByTagName(\"e2servicereference\").item(0).getTextContent();\n+                String name = service.getElementsByTagName(\"e2servicename\").item(0).getTextContent();\n+                channels.put(name, id);\n+            }\n+        }\n+    }\n+\n+    private String getString(Document document, String elementId) {\n+        return Optional.ofNullable(document.getElementsByTagName(elementId)).map(nodeList -> nodeList.item(0)).map(Node::getTextContent).map(String::trim).orElse(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMDQ3NA==", "bodyText": "I see why this needs to be its own class. You could replace this class with a static method get(String url, int timeout).", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423330474", "createdAt": "2020-05-11T21:28:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2HttpClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * The {@link Enigma2HttpClient} class is responsible for sending HTTP-Get requests to the Enigma2 device.\n+ * It is devided from {@link Enigma2Client} for better testing purpose.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2HttpClient {\n+    private int timeout;\n+\n+    public Enigma2HttpClient(int timeout) {\n+        this.timeout = timeout;\n+    }\n+\n+    public String get(String url) throws IOException, IllegalArgumentException {\n+        String xml = HttpUtil.executeUrl( \"GET\", url, timeout * 1000);\n+        // remove some unsupported xml-characters\n+        Pattern p = Pattern.compile(\"[^\\\\u0009\\\\u000A\\\\u000D\\\\u0020-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\u10000-\\\\u10FFF]+\");\n+        return p.matcher(xml).replaceAll(\"\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMDc4Ng==", "bodyText": "This pattern should be a static field so you can reuse it", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423330786", "createdAt": "2020-05-11T21:28:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2HttpClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * The {@link Enigma2HttpClient} class is responsible for sending HTTP-Get requests to the Enigma2 device.\n+ * It is devided from {@link Enigma2Client} for better testing purpose.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2HttpClient {\n+    private int timeout;\n+\n+    public Enigma2HttpClient(int timeout) {\n+        this.timeout = timeout;\n+    }\n+\n+    public String get(String url) throws IOException, IllegalArgumentException {\n+        String xml = HttpUtil.executeUrl( \"GET\", url, timeout * 1000);\n+        // remove some unsupported xml-characters\n+        Pattern p = Pattern.compile(\"[^\\\\u0009\\\\u000A\\\\u000D\\\\u0020-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\u10000-\\\\u10FFF]+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMTc0Mw==", "bodyText": "It seems wasteful to create a new object each time. In fact per my ealier suggestion you could get rid of this client class entirely and just call a static method directly instead.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423331743", "createdAt": "2020-05-11T21:30:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setMute(boolean mute) {\n+        refreshVolume();\n+        if(this.mute != mute) {\n+            transmit(PATH_TOGGLE_MUTE).ifPresent( this::processVolumeResult );\n+        }\n+    }\n+\n+    public void setPower(boolean power) {\n+        refreshPower();\n+        if(this.power != power) {\n+            transmit(PATH_TOGGLE_POWER).ifPresent( this::processPowerResult );\n+        }\n+    }\n+\n+    public void setVolume(int volume) {\n+        transmit(PATH_SET_VOLUME + volume).ifPresent(this::processVolumeResult);\n+    }\n+\n+    public void setChannel(String name) {\n+        if(channels.containsKey(name)) {\n+            String id = channels.get(name);\n+            transmit(PATH_ZAP + UrlEncoded.encodeString(id)).ifPresent(document -> channel = name);\n+        } else {\n+            getLogger().warn(\"Channel {} not found.\", name);\n+        }\n+    }\n+\n+    public void sendRcCommand(int key) {\n+        transmit(PATH_REMOTE_CONTROL + key);\n+    }\n+\n+    public void sendError(int timeout, String text) {\n+        sendMessage(TYPE_ERROR, timeout, text);\n+    }\n+\n+    public void sendWarning(int timeout, String text) {\n+        sendMessage(TYPE_WARNING, timeout, text);\n+    }\n+\n+    public void sendInfo(int timeout, String text) {\n+        sendMessage(TYPE_INFO, timeout, text);\n+    }\n+\n+    public void sendQuestion(int timeout, String text) {\n+        asking = true;\n+        sendMessage(TYPE_QUESTION, timeout, text);\n+    }\n+\n+    private void sendMessage(int type, int timeout, String text) {\n+        transmit(PATH_MESSAGE + type + \"&timeout=\" + timeout + \"&text=\" + UrlEncoded.encodeString(text));\n+    }\n+\n+    private void processPowerResult(Document document) {\n+        power = !getBoolean(document, \"e2instandby\");\n+        if(!power) {\n+            title = \"\";\n+            description = \"\";\n+            channel = \"\";\n+        }\n+    }\n+\n+    private void processChannelResult(Document document) {\n+        channel = getString(document, \"e2servicename\");\n+        // Add channel-Reference-ID if not known\n+        if(!channels.containsKey(channel)) {\n+            channels.put(channel, getString(document, \"e2servicereference\"));\n+        }\n+    }\n+\n+    private void processAnswerResult(Document document) {\n+        if(asking) {\n+            boolean state = getBoolean(document, \"e2state\");\n+            if (state) {\n+                String[] text = getString(document, \"e2statetext\").split(\" \");\n+                answer = text[text.length - 1].replace(\"!\", \"\");\n+                asking = false;\n+                lastAnswerTime = LocalDateTime.now();\n+            }\n+        }\n+    }\n+\n+    private void processVolumeResult(Document document) {\n+        volume = getInt( document,\"e2current\");\n+        mute = getBoolean(document, \"e2ismuted\");\n+    }\n+\n+    private void processEpgResult(Document document) {\n+        title = getString(document, \"e2eventtitle\");\n+        description = getString(document, \"e2eventdescription\");\n+    }\n+\n+    private void processAllServicesResult(Document document) {\n+        NodeList bouquetList = document.getElementsByTagName(\"e2bouquet\");\n+        channels.clear();\n+        for(int i = 0; i < bouquetList.getLength(); i++) {\n+            Element bouquet = (Element)bouquetList.item(i);\n+            NodeList serviceList = bouquet.getElementsByTagName(\"e2service\");\n+            for(int j = 0; j < serviceList.getLength(); j++) {\n+                Element service = (Element) serviceList.item(j);\n+                String id = service.getElementsByTagName(\"e2servicereference\").item(0).getTextContent();\n+                String name = service.getElementsByTagName(\"e2servicename\").item(0).getTextContent();\n+                channels.put(name, id);\n+            }\n+        }\n+    }\n+\n+    private String getString(Document document, String elementId) {\n+        return Optional.ofNullable(document.getElementsByTagName(elementId)).map(nodeList -> nodeList.item(0)).map(Node::getTextContent).map(String::trim).orElse(\"\");\n+    }\n+\n+    private boolean getBoolean(Document document, String elementId) {\n+        return Boolean.parseBoolean(getString(document, elementId));\n+    }\n+\n+    private int getInt(Document document, String elementId) {\n+        try {\n+            return Integer.parseInt(getString(document, elementId));\n+        } catch (NumberFormatException e) {\n+            return 0;\n+        }\n+    }\n+\n+    public int getVolume() {\n+        return volume;\n+    }\n+\n+    public boolean isMute() {\n+        return mute;\n+    }\n+\n+    public boolean isPower() {\n+        return power;\n+    }\n+\n+    public LocalDateTime getLastAnswerTime() {\n+        return lastAnswerTime;\n+    }\n+\n+    public String getChannel() {\n+        return channel;\n+    }\n+\n+    public String getTitle() {\n+        return title;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public String getAnswer() {\n+        return answer;\n+    }\n+\n+    public Collection<String> getChannels() {\n+        return channels.keySet();\n+    }\n+\n+    /**\n+     * Getter for Test-Injection\n+     * @return HttpGet.\n+     */\n+    Enigma2HttpClient getEnigma2HttpClient() {\n+        return new Enigma2HttpClient(timeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMjc1MA==", "bodyText": "this doesn't look formatted correctly", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423332750", "createdAt": "2020-05-11T21:33:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setMute(boolean mute) {\n+        refreshVolume();\n+        if(this.mute != mute) {\n+            transmit(PATH_TOGGLE_MUTE).ifPresent( this::processVolumeResult );\n+        }\n+    }\n+\n+    public void setPower(boolean power) {\n+        refreshPower();\n+        if(this.power != power) {\n+            transmit(PATH_TOGGLE_POWER).ifPresent( this::processPowerResult );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzMjgwNA==", "bodyText": "here too", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423332804", "createdAt": "2020-05-11T21:33:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            getLogger().debug(\"Transmitting {}\", host + path);\n+            String xml = getEnigma2HttpClient().get(host + path);\n+            getLogger().debug(\"Transmitting result is {}\", xml);\n+            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    public void setMute(boolean mute) {\n+        refreshVolume();\n+        if(this.mute != mute) {\n+            transmit(PATH_TOGGLE_MUTE).ifPresent( this::processVolumeResult );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNDkzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int value;\n          \n          \n            \n                private final int value;", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423334934", "createdAt": "2020-05-11T21:37:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2RemoteKey.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link Enigma2RemoteKey} class defines the remote keys of an enigma2 device\n+ * used across the whole binding.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum Enigma2RemoteKey {\n+    POWER(116),\n+\n+    KEY_0(11),\n+    KEY_1(2),\n+    KEY_2(3),\n+    KEY_3(4),\n+    KEY_4(5),\n+    KEY_5(6),\n+    KEY_6(7),\n+    KEY_7(8),\n+    KEY_8(9),\n+    KEY_9(10),\n+\n+    ARROW_LEFT(412),\n+    ARROW_RIGHT(407),\n+\n+    VOLUME_DOWN(114),\n+    VOLUME_UP(115),\n+    MUTE(113),\n+\n+    CHANNEL_UP(402),\n+    CHANNEL_DOWN(403),\n+\n+    LEFT(105),\n+    RIGHT(106),\n+    UP(103),\n+    DOWN(108),\n+    OK(352),\n+    EXIT(174),\n+\n+    RED(398),\n+    GREEN(399),\n+    YELLOW(400),\n+    BLUE(401),\n+\n+    PLAY(207),\n+    PAUSE(119),\n+    STOP(128),\n+    RECORD(167),\n+    FAST_FORWARD(208),\n+    FAST_BACKWARD(168),\n+\n+    TV(377),\n+    RADIO(385),\n+    AUDIO(392),\n+    VIDEO(393),\n+    TEXT(388),\n+    INFO(358),\n+    MENU(139),\n+    HELP(138),\n+    SUBTITLE(370),\n+    EPG(358);\n+\n+\n+    private int value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNTAyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n          \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423335023", "createdAt": "2020-05-11T21:38:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNjE2Ng==", "bodyText": "Trying to set the initial size of a HashMap often doesn't work as you would expect and is hard to get right. It is better to just let it initialize to the default value.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Map<String, Object> properties = new HashMap<>(2);\n          \n          \n            \n                        Map<String, Object> properties = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423336166", "createdAt": "2020-05-11T21:40:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        getLogger().debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNzM3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"false\" min=\"1\" max=\"300\">\n          \n          \n            \n            \t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"false\" min=\"1\" max=\"300\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423337378", "createdAt": "2020-05-11T21:43:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"answer\" typeId=\"answerType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" min=\"1\" max=\"3600\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t\t<default>5</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"false\" min=\"1\" max=\"300\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzNzQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" min=\"1\" max=\"3600\">\n          \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" min=\"1\" max=\"3600\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423337497", "createdAt": "2020-05-11T21:43:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"answer\" typeId=\"answerType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" min=\"1\" max=\"3600\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMzODMwMQ==", "bodyText": "This isn't formatted correctly", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423338301", "createdAt": "2020-05-11T21:45:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MTM2MA==", "bodyText": "Since not all transmit calls even care about the return result, and parsing xml is very computationally heavy, I think it would be better to allow the caller to pass in a Consumer instead. That way the transmit method can skip parsing the result for callers that don't care about it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Optional<Document> transmit(String path) {\n          \n          \n            \n                private Optional<Document> transmit(String path, @Nullable Consumer<Document> consumer) {", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423341360", "createdAt": "2020-05-11T21:52:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,336 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * @see <a href=\"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING  = 2;\n+    static final int TYPE_ERROR = 3;\n+    private Map<String,@Nullable String> channels = new LinkedHashMap<>();\n+    private String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private int timeout;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020,1,1, 0,0); // Date in the past\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int timeout) {\n+        this.timeout = timeout;\n+        if(StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if(!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmit(PATH_POWER);\n+        if(document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if(power || channels.isEmpty()) {\n+            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if(power) {\n+            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if(asking) {\n+            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if(power) {\n+            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if(power) {\n+            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmit(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a53907dbd63d6ec024e6d73fad86e7060235fc"}, "originalPosition": 146}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96c63e2d6dcb5c4c7b66fe71afcb95f7b1ad43c4", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/96c63e2d6dcb5c4c7b66fe71afcb95f7b1ad43c4", "committedDate": "2020-05-12T18:29:09Z", "message": "[enigma2] Initial contribution #7514\n\n- Fixed review findings\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/a420585ed4948594640ddbdb3b4cbba04a0e24c8", "committedDate": "2020-05-12T19:14:00Z", "message": "[enigma2] Initial contribution #7514\n\n- Fixed review findings\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzYyODky", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-410362892", "createdAt": "2020-05-12T19:37:38Z", "commit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTozNzozOFrOGUWCjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDowOTowOFrOGUXFXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk4NTgwNQ==", "bodyText": "you should use a switch statement here", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423985805", "createdAt": "2020-05-12T19:37:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Enigma2Configuration configurationFromProperties = getConfigAs(Enigma2Configuration.class);\n+        if (configurationFromProperties != null) {\n+            configuration = configurationFromProperties;\n+        }\n+        if (configuration.host.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"host must not be empty\");\n+        } else if (configuration.timeout <= 0 || configuration.timeout > 300) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"timeout must be between 0 and 300 seconds\");\n+        } else if (configuration.refreshInterval <= 0 || configuration.refreshInterval > 3600) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"refreshInterval must be between 0 and 3600 seconds\");\n+        }\n+        enigma2Client = Optional.of(new Enigma2Client(configuration.host, configuration.user, configuration.password,\n+                configuration.timeout));\n+        refreshJob = Optional.of(\n+                scheduler.scheduleWithFixedDelay(this::refresh, 2, configuration.refreshInterval, TimeUnit.SECONDS));\n+    }\n+\n+    private void refresh() {\n+        getEnigma2Client().ifPresent(client -> {\n+            boolean online = client.refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, client.isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, client.isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(client.getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(client.getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(client.getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(client.getDescription()));\n+                if (lastAnswerTime.isBefore(client.getLastAnswerTime())) {\n+                    lastAnswerTime = client.getLastAnswerTime();\n+                    updateState(CHANNEL_ANSWER, new StringType(client.getAnswer()));\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        refreshJob.ifPresent(job -> {\n+            if (!job.isCancelled()) {\n+                job.cancel(true);\n+            }\n+        });\n+        refreshJob = Optional.empty();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand({},{})\", channelUID, command);\n+        getEnigma2Client().ifPresent(client -> {\n+            if (CHANNEL_POWER.equals(channelUID.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MDIwMA==", "bodyText": "Just letting you know in case you are not aware, but there is a current outstanding bug regarding actions that currently requires a workaround.\nopenhab/openhab-core#1265\nIf you feel like implementing the workaround you can use this as a example:\nhttps://github.com/openhab/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/action/EcobeeActions.java#L89", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423990200", "createdAt": "2020-05-12T19:45:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/actions/Enigma2Actions.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.actions;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.enigma2.handler.Enigma2Handler;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+\n+/**\n+ * This is the automation engine actions handler service for the\n+ * enigma2 actions.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@ThingActionsScope(name = \"enigma2\")\n+@NonNullByDefault\n+public class Enigma2Actions implements ThingActions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5MTA0Mg==", "bodyText": "Making the Future fields nullable is the pattern used in other bindings.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423991042", "createdAt": "2020-05-12T19:47:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5NzU1OA==", "bodyText": "It would be better to declare these variables only when needed.\nAlso, it should be safe to cache a DocumentBuilderFactory instance for reuse. Though I can't say the same for DocumentBuilder since there are mixed reports on whether it is thread-safe or not...\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(xml.isPresent()) {\n          \n          \n            \n                            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));\n          \n          \n            \n                        if(xml.isPresent()) {\n          \n          \n            \n                            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n          \n          \n            \n                            DocumentBuilder builder = factory.newDocumentBuilder();\n          \n          \n            \n                            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423997558", "createdAt": "2020-05-12T19:59:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -114,75 +117,92 @@ public void refreshPower() {\n     }\n \n     public void refreshAllServices() {\n-        if(power || channels.isEmpty()) {\n-            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n         }\n     }\n \n     public void refreshChannel() {\n-        if(power) {\n-            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n         }\n     }\n \n     public void refreshAnswer() {\n-        if(asking) {\n-            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n         }\n     }\n \n     public void refreshVolume() {\n-        if(power) {\n-            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n         }\n     }\n \n     public void refreshEpg() {\n-        if(power) {\n-            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n         }\n     }\n \n-    private Optional<Document> transmit(String path) {\n+    private Optional<Document> transmitWithResult(String path) {\n         try {\n             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n             DocumentBuilder builder = factory.newDocumentBuilder();\n-            getLogger().debug(\"Transmitting {}\", host + path);\n-            String xml = getEnigma2HttpClient().get(host + path);\n-            getLogger().debug(\"Transmitting result is {}\", xml);\n-            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5ODA4OA==", "bodyText": "You should cache host+path in a local variable so it can be reused.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r423998088", "createdAt": "2020-05-12T20:00:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -114,75 +117,92 @@ public void refreshPower() {\n     }\n \n     public void refreshAllServices() {\n-        if(power || channels.isEmpty()) {\n-            transmit(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n         }\n     }\n \n     public void refreshChannel() {\n-        if(power) {\n-            transmit(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n         }\n     }\n \n     public void refreshAnswer() {\n-        if(asking) {\n-            transmit(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n         }\n     }\n \n     public void refreshVolume() {\n-        if(power) {\n-            transmit(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n         }\n     }\n \n     public void refreshEpg() {\n-        if(power) {\n-            Optional.ofNullable(channels.get(channel)).flatMap(name -> transmit(PATH_EPG + UrlEncoded.encodeString(name))).ifPresent(this::processEpgResult);\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n         }\n     }\n \n-    private Optional<Document> transmit(String path) {\n+    private Optional<Document> transmitWithResult(String path) {\n         try {\n             DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n             DocumentBuilder builder = factory.newDocumentBuilder();\n-            getLogger().debug(\"Transmitting {}\", host + path);\n-            String xml = getEnigma2HttpClient().get(host + path);\n-            getLogger().debug(\"Transmitting result is {}\", xml);\n-            return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml))));\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));\n+            }\n+            return Optional.empty();\n         } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n             if (online || !initialized) {\n-                getLogger().debug(\"Error on transmit {}.\", host + path, e);\n+                logger.debug(\"Error on transmit {}.\", host + path, e);\n+            }\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private Optional<String> transmit(String path) {\n+        try {\n+            logger.debug(\"Transmitting {}\", host + path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwMjkwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"Error on transmit {}.\", host + path, e);\n          \n          \n            \n                            logger.debug(\"Error on transmit {}{}.\", host, path, e);", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424002908", "createdAt": "2020-05-12T20:09:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new LinkedHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020, 1, 1, 0, 0); // Date in the past\n+    private Enigma2HttpClient enigma2HttpClient;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {\n+        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);\n+        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if (!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmitWithResult(PATH_POWER);\n+        if (document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmitWithResult(String path) {\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));\n+            }\n+            return Optional.empty();\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {\n+                logger.debug(\"Error on transmit {}.\", host + path, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMzg2MTQ1", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-410386145", "createdAt": "2020-05-12T20:12:19Z", "commit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoxMjoxOVrOGUXMaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMDoxMjoxOVrOGUXMaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAwNDcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (configurationFromProperties != null) {\n          \n          \n            \n                        configuration = configurationFromProperties;\n          \n          \n            \n                    }\n          \n          \n            \n                    configuration = configurationFromProperties;", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424004712", "createdAt": "2020-05-12T20:12:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,292 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    private Optional<ScheduledFuture<?>> refreshJob = Optional.empty();\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Enigma2Configuration configurationFromProperties = getConfigAs(Enigma2Configuration.class);\n+        if (configurationFromProperties != null) {\n+            configuration = configurationFromProperties;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a420585ed4948594640ddbdb3b4cbba04a0e24c8"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTAzMzAx", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-410503301", "createdAt": "2020-05-13T00:03:38Z", "commit": {"oid": "745e4744e53247fb3277f098b99127e09af46ea1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowMzozOFrOGUdEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowODoxOFrOGUdJbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTA0MA==", "bodyText": "Just to deal with the null check warnings. Also, no harm in cancelling something twice.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if(refreshJob != null) {\n          \n          \n            \n                        if (!refreshJob.isCancelled()) {\n          \n          \n            \n                            refreshJob.cancel(true);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    refreshJob = null;\n          \n          \n            \n                    ScheduledFuture<?> refreshJob = this.refreshJob;\n          \n          \n            \n                    if(refreshJob != null) {\n          \n          \n            \n                        refreshJob.cancel(true);\n          \n          \n            \n                    }\n          \n          \n            \n                    this.refreshJob = null;", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424101040", "createdAt": "2020-05-13T00:03:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,304 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.now();\n+\n+    public Enigma2Handler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        configuration = getConfigAs(Enigma2Configuration.class);\n+        if (configuration.host.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"host must not be empty\");\n+        } else if (configuration.timeout <= 0 || configuration.timeout > 300) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"timeout must be between 0 and 300 seconds\");\n+        } else if (configuration.refreshInterval <= 0 || configuration.refreshInterval > 3600) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"refreshInterval must be between 0 and 3600 seconds\");\n+        }\n+        enigma2Client = Optional.of(new Enigma2Client(configuration.host, configuration.user, configuration.password,\n+                configuration.timeout));\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 2, configuration.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    private void refresh() {\n+        getEnigma2Client().ifPresent(client -> {\n+            boolean online = client.refresh();\n+            if (online) {\n+                updateStatus(ThingStatus.ONLINE);\n+                updateState(CHANNEL_POWER, client.isPower() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_MUTE, client.isMute() ? OnOffType.ON : OnOffType.OFF);\n+                updateState(CHANNEL_VOLUME, new PercentType(client.getVolume()));\n+                updateState(CHANNEL_CHANNEL, new StringType(client.getChannel()));\n+                updateState(CHANNEL_TITLE, new StringType(client.getTitle()));\n+                updateState(CHANNEL_DESCRIPTION, new StringType(client.getDescription()));\n+                if (lastAnswerTime.isBefore(client.getLastAnswerTime())) {\n+                    lastAnswerTime = client.getLastAnswerTime();\n+                    updateState(CHANNEL_ANSWER, new StringType(client.getAnswer()));\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"null\")\n+    public void dispose() {\n+        if(refreshJob != null) {\n+            if (!refreshJob.isCancelled()) {\n+                refreshJob.cancel(true);\n+            }\n+        }\n+        refreshJob = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "745e4744e53247fb3277f098b99127e09af46ea1"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMjI1Mg==", "bodyText": "Might want to be sure that this won't be called concurrently, otherwise change this to a ConcurrentHashMap. Sadly I'm not aware of a thread-safe version of LinkedHashMap other than using Collections.synchronizedMap();", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424102252", "createdAt": "2020-05-13T00:08:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "745e4744e53247fb3277f098b99127e09af46ea1"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjUzNjk5", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-411253699", "createdAt": "2020-05-13T19:57:44Z", "commit": {"oid": "11729a83391827eabbfe1a6309b5632da03bf90a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo1Nzo0NFrOGVBWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxOTo1Nzo0NFrOGVBWTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY5NTM3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> refreshJob;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> refreshJob;", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r424695374", "createdAt": "2020-05-13T19:57:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/handler/Enigma2Handler.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.handler;\n+\n+import static org.openhab.binding.enigma2.internal.Enigma2BindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.*;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.enigma2.actions.Enigma2Actions;\n+import org.openhab.binding.enigma2.internal.Enigma2Client;\n+import org.openhab.binding.enigma2.internal.Enigma2Configuration;\n+import org.openhab.binding.enigma2.internal.Enigma2RemoteKey;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@link Enigma2Handler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Handler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Handler.class);\n+    private Enigma2Configuration configuration = new Enigma2Configuration();\n+    private Optional<Enigma2Client> enigma2Client = Optional.empty();\n+    @Nullable\n+    private ScheduledFuture<?> refreshJob;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11729a83391827eabbfe1a6309b5632da03bf90a"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzE4ODAy", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-411318802", "createdAt": "2020-05-13T21:39:11Z", "commit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2OTIyNDYy", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-416922462", "createdAt": "2020-05-22T13:46:43Z", "commit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo0Njo0M1rOGZXryA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDoxMjowMlrOGZYlvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NTYyNA==", "bodyText": "Can you make sure that every word from this label starts with capital this is the default in  openHAB.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429255624", "createdAt": "2020-05-22T13:46:43Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"answer\" typeId=\"answerType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" min=\"1\" max=\"3600\" unit=\"s\">\n+\t\t\t\t<label>Refresh interval</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NjExNQ==", "bodyText": "username is spelled as two words here however as one on the second line, I prefer to spell it as one.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429256115", "createdAt": "2020-05-22T13:47:34Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"enigma2\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\t<thing-type id=\"device\">\n+\t\t<label>Enigma2</label>\n+\t\t<description>The Thing represents an Enigma2 device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"powerType\" />\n+\t\t\t<channel id=\"mute\" typeId=\"muteType\" />\n+\t\t\t<channel id=\"volume\" typeId=\"volumeType\" />\n+\t\t\t<channel id=\"channel\" typeId=\"channelType\" />\n+\t\t\t<channel id=\"title\" typeId=\"titleType\" />\n+\t\t\t<channel id=\"description\" typeId=\"descriptionType\" />\n+\t\t\t<channel id=\"mediaPlayer\" typeId=\"mediaPlayerType\" />\n+\t\t\t<channel id=\"mediaStop\" typeId=\"mediaStopType\" />\n+\t\t\t<channel id=\"answer\" typeId=\"answerType\" />\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>Host Address</label>\n+\t\t\t\t<description>Hostname or IP address of the Enigma2 device.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" min=\"1\" max=\"3600\" unit=\"s\">\n+\t\t\t\t<label>Refresh interval</label>\n+\t\t\t\t<description>The refresh interval in seconds.</description>\n+\t\t\t\t<default>5</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"timeout\" type=\"integer\" required=\"false\" min=\"1\" max=\"300\" unit=\"s\">\n+\t\t\t\t<label>Timeout</label>\n+\t\t\t\t<description>The timeout for reading from the device in seconds.</description>\n+\t\t\t\t<default>5</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"user\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>User Name</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NjUyNA==", "bodyText": "Please add a newline at the end of the file, GitHub shows a red marker when the end-of-file newline is missing.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429256524", "createdAt": "2020-05-22T13:48:14Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/resources/ESH-INF/i18n/enigma2.properties", "diffHunk": "@@ -0,0 +1,36 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE\n+# FIXME: please do not add the file to the repo if you add or change no content\n+# binding\n+binding.enigma2.name = Enigma2 Binding\n+binding.enigma2.description = This is the binding for Enigma2\n+\n+# thing types\n+thing-type.enigma2.device.label = Enigma2\n+thing-type.enigma2.device.description = The Thing represents an Enigma2 device\n+\n+# thing type config description\n+thing-type.config.enigma2.host.label = Host Address\n+thing-type.config.enigma2.host.description = Hostname or IP address of the Enigma2 device\n+\n+# channel types\n+channel-type.enigma2.power.label = Power\n+channel-type.enigma2.power.description = Setting the power to on/off.\n+\n+# actions\n+action.enigma2.send-rc-button.label=sendRcCommand\n+action.enigma2.send-rc-button.description=Send an Remote Control Command\n+action-input.enigma2.rc-button.label=rcButton\n+action-input.enigma2.rc-button.description=The Remote Control Button\n+\n+action.enigma2.send-info.label=sendInfo\n+action.enigma2.send-info.description=Send an info message to the TV screen\n+action.enigma2.send-warning.label=sendWarning\n+action.enigma2.send-warning.description=Send an warning message to the TV screen\n+action.enigma2.send-error.label=sendError\n+action.enigma2.send-error.description=Send an error message to the TV screen\n+action.enigma2.send-question.label=sendQuestion\n+action.enigma2.send-question.description=Send a question message to the TV screen\n+action-input.enigma2.text.label=text\n+action-input.enigma2.text.description=The message text\n+action-input.enigma2.timeout.label=timeout\n+action-input.enigma2.timeout.description=The timeout in seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODA3NQ==", "bodyText": "I think this should be a debug statement. Bindings should quite under normal operations.\nAre you by the way sure the Arrays.toString is needed, I would hope/expect that the logging implementation is smart enough for that, but for normal printing, it is definitely needed.\nA (small) drawback is that when people would have info logging disable it would still convert it to a string, but it's not that likely that people will have INFO logging off, however, if we don't need I would love have it gone.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429258075", "createdAt": "2020-05-22T13:51:00Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(Enigma2BindingConstants.CONFIG_HOST, ipAddress);\n+            properties.put(Enigma2BindingConstants.CONFIG_REFRESH, new BigDecimal(5));\n+            properties.put(Enigma2BindingConstants.CONFIG_TIMEOUT, new BigDecimal(5));\n+            return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(info.getName()).build();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ThingUID getThingUID(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        Validate.notNull(ipAddress);\n+        return new ThingUID(Enigma2BindingConstants.THING_TYPE_DEVICE, ipAddress.replace(\".\", \"_\"));\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_http._tcp.local.\";\n+    }\n+\n+    private boolean isEnigma2Device(String ipAddress) {\n+        try {\n+            return getEnigma2HttpClient().get(\"http://\" + ipAddress + \"/web/about\").contains(\"e2enigmaversion\");\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+\n+    @Nullable\n+    private String getIPAddress(ServiceInfo info) {\n+        InetAddress[] addresses = info.getInet4Addresses();\n+        if (addresses.length > 1) {\n+            logger.info(\"Enigma2 device {} reports multiple addresses - using the first one! {}\", info.getName(),\n+                    Arrays.toString(addresses));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1ODQ1Mw==", "bodyText": "Consider calling the e ignore this makes the intention to ignore it more clear and a lot of tools support it as well.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429258453", "createdAt": "2020-05-22T13:51:39Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(Enigma2BindingConstants.CONFIG_HOST, ipAddress);\n+            properties.put(Enigma2BindingConstants.CONFIG_REFRESH, new BigDecimal(5));\n+            properties.put(Enigma2BindingConstants.CONFIG_TIMEOUT, new BigDecimal(5));\n+            return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(info.getName()).build();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ThingUID getThingUID(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        Validate.notNull(ipAddress);\n+        return new ThingUID(Enigma2BindingConstants.THING_TYPE_DEVICE, ipAddress.replace(\".\", \"_\"));\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_http._tcp.local.\";\n+    }\n+\n+    private boolean isEnigma2Device(String ipAddress) {\n+        try {\n+            return getEnigma2HttpClient().get(\"http://\" + ipAddress + \"/web/about\").contains(\"e2enigmaversion\");\n+        } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MTI2Nw==", "bodyText": "This will throw Exception's on null values, given you are already using nullable annotations I would rather not see these calls especially because we try to get rid of commons.lang.\nAnd if you really insist on such a method you could/should use Objects.requireNonNull. However, I do think that also the usage of that should not be combined with our nullable annotations.\nSo please remove all occurrences of Validate.notNull and/or similar methods, and please check that these classes contain the correct nullable annotation", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429261267", "createdAt": "2020-05-22T13:56:25Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(Enigma2BindingConstants.CONFIG_HOST, ipAddress);\n+            properties.put(Enigma2BindingConstants.CONFIG_REFRESH, new BigDecimal(5));\n+            properties.put(Enigma2BindingConstants.CONFIG_TIMEOUT, new BigDecimal(5));\n+            return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(info.getName()).build();\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public ThingUID getThingUID(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MjM5Nw==", "bodyText": "Please apply the Nullable annotations on the correct location and apply it to all occurrences.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DiscoveryResult createResult(ServiceInfo info) {\n          \n          \n            \n                public@Nullable DiscoveryResult createResult(ServiceInfo info) {", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429262397", "createdAt": "2020-05-22T13:58:12Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2Mjk5Mw==", "bodyText": "This field could be final", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429262993", "createdAt": "2020-05-22T13:59:13Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2HttpClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+\n+import java.io.IOException;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * The {@link Enigma2HttpClient} class is responsible for sending HTTP-Get requests to the Enigma2 device.\n+ * It is devided from {@link Enigma2Client} for better testing purpose.\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2HttpClient {\n+    public static final Pattern PATTERN = Pattern.compile(\"[^\\\\u0009\\\\u000A\\\\u000D\\\\u0020-\\\\uD7FF\\\\uE000-\\\\uFFFD\\\\u10000-\\\\u10FFF]+\");\n+    private int timeout;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MzgwMA==", "bodyText": "Is there a specific reason to pass a BigDecimal here, the field of the configuration is an int, would just 5 also work here? Same applies to the next line :-)", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429263800", "createdAt": "2020-05-22T14:00:31Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/discovery/Enigma2DiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal.discovery;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.InetAddress;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.apache.commons.lang.Validate;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.binding.enigma2.internal.Enigma2BindingConstants;\n+import org.openhab.binding.enigma2.internal.Enigma2HttpClient;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link Enigma2DiscoveryParticipant} is responsible processing the\n+ * results of searches for mDNS services of type _http._tcp.local. and finding a webinterface\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class, immediate = true)\n+public class Enigma2DiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2DiscoveryParticipant.class);\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Enigma2BindingConstants.SUPPORTED_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public DiscoveryResult createResult(ServiceInfo info) {\n+        logger.debug(\"ServiceInfo {}\", info);\n+        Validate.notNull(info);\n+        String ipAddress = getIPAddress(info);\n+        if (ipAddress != null && isEnigma2Device(ipAddress)) {\n+            logger.debug(\"Enigma2 device discovered: IP-Adress={}, name={}\", ipAddress, info.getName());\n+            ThingUID uid = getThingUID(info);\n+            Validate.notNull(uid);\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(Enigma2BindingConstants.CONFIG_HOST, ipAddress);\n+            properties.put(Enigma2BindingConstants.CONFIG_REFRESH, new BigDecimal(5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NTQ3OA==", "bodyText": "I do believe the point of this factory is that you do not need to create it each time, I would suggest to either construct it in the constructor or lazy on calling some method but please do not recreate the factory each time.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429265478", "createdAt": "2020-05-22T14:03:13Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new ConcurrentHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020, 1, 1, 0, 0); // Date in the past\n+    private Enigma2HttpClient enigma2HttpClient;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {\n+        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);\n+        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if (!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmitWithResult(PATH_POWER);\n+        if (document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmitWithResult(String path) {\n+        try {\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NjIxNQ==", "bodyText": "Would you really want to ignore the exceptions in other cases, why?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429266215", "createdAt": "2020-05-22T14:04:21Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new ConcurrentHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020, 1, 1, 0, 0); // Date in the past\n+    private Enigma2HttpClient enigma2HttpClient;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {\n+        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);\n+        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if (!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmitWithResult(PATH_POWER);\n+        if (document.isPresent()) {\n+            online = true;\n+            processPowerResult(document.get());\n+        } else {\n+            online = false;\n+            power = false;\n+        }\n+        initialized = true;\n+    }\n+\n+    public void refreshAllServices() {\n+        if (power || channels.isEmpty()) {\n+            transmitWithResult(PATH_ALL_SERVICES).ifPresent(this::processAllServicesResult);\n+        }\n+    }\n+\n+    public void refreshChannel() {\n+        if (power) {\n+            transmitWithResult(PATH_CHANNEL).ifPresent(this::processChannelResult);\n+        }\n+    }\n+\n+    public void refreshAnswer() {\n+        if (asking) {\n+            transmitWithResult(PATH_ANSWER).ifPresent(this::processAnswerResult);\n+        }\n+    }\n+\n+    public void refreshVolume() {\n+        if (power) {\n+            transmitWithResult(PATH_VOLUME).ifPresent(this::processVolumeResult);\n+        }\n+    }\n+\n+    public void refreshEpg() {\n+        if (power) {\n+            Optional.ofNullable(channels.get(channel))\n+                    .flatMap(name -> transmitWithResult(PATH_EPG + UrlEncoded.encodeString(name)))\n+                    .ifPresent(this::processEpgResult);\n+        }\n+    }\n+\n+    private Optional<Document> transmitWithResult(String path) {\n+        try {\n+            Optional<String> xml = transmit(path);\n+            if(xml.isPresent()) {\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+                return Optional.ofNullable(builder.parse(new InputSource(new StringReader(xml.get()))));\n+            }\n+            return Optional.empty();\n+        } catch (IOException | SAXException | ParserConfigurationException | IllegalArgumentException e) {\n+            if (online || !initialized) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2Njg2Ng==", "bodyText": "All the boolean's here will have the same value but some explicit and others implicit, consider making it consistent.", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429266866", "createdAt": "2020-05-22T14:05:34Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new ConcurrentHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2ODA5NQ==", "bodyText": "Is there a reason to have power separate from online. They seem to be highly correlated?", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429268095", "createdAt": "2020-05-22T14:07:45Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/src/main/java/org/openhab/binding/enigma2/internal/Enigma2Client.java", "diffHunk": "@@ -0,0 +1,350 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enigma2.internal;\n+\n+import java.io.IOException;\n+import java.io.StringReader;\n+import java.time.LocalDateTime;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.util.UrlEncoded;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * The {@link Enigma2Client} class is responsible for communicating with the Enigma2 device.\n+ * \n+ * @see <a href=\n+ *      \"https://github.com/E2OpenPlugins/e2openplugin-OpenWebif/wiki/OpenWebif-API-documentation\">OpenWebif-API-documentation</a>\n+ *\n+ * @author Guido Dolfen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Enigma2Client {\n+    private final Logger logger = LoggerFactory.getLogger(Enigma2Client.class);\n+\n+    static final String PATH_REMOTE_CONTROL = \"/web/remotecontrol?command=\";\n+    static final String PATH_POWER = \"/web/powerstate\";\n+    static final String PATH_VOLUME = \"/web/vol\";\n+    static final String PATH_SET_VOLUME = \"/web/vol?set=set\";\n+    static final String PATH_TOGGLE_MUTE = \"/web/vol?set=mute\";\n+    static final String PATH_TOGGLE_POWER = \"/web/powerstate?newstate=0\";\n+    static final String PATH_MESSAGE = \"/web/message?type=\";\n+    static final String PATH_ALL_SERVICES = \"/web/getallservices\";\n+    static final String PATH_ZAP = \"/web/zap?sRef=\";\n+    static final String PATH_CHANNEL = \"/web/subservices\";\n+    static final String PATH_EPG = \"/web/epgservicenow?sRef=\";\n+    static final String PATH_ANSWER = \"/web/messageanswer?getanswer=now\";\n+    static final int TYPE_QUESTION = 0;\n+    static final int TYPE_INFO = 1;\n+    static final int TYPE_WARNING = 2;\n+    static final int TYPE_ERROR = 3;\n+    private final Map<String, @Nullable String> channels = new ConcurrentHashMap<>();\n+    private final String host;\n+    private boolean power;\n+    private String channel = \"\";\n+    private String title = \"\";\n+    private String description = \"\";\n+    private String answer = \"\";\n+    private int volume = 0;\n+    private boolean mute;\n+    private boolean online;\n+    private boolean initialized = false;\n+    private boolean asking = false;\n+    private LocalDateTime lastAnswerTime = LocalDateTime.of(2020, 1, 1, 0, 0); // Date in the past\n+    private Enigma2HttpClient enigma2HttpClient;\n+\n+    public Enigma2Client(String host, @Nullable String user, @Nullable String password, int requestTimeout) {\n+        this.enigma2HttpClient = new Enigma2HttpClient(requestTimeout);\n+        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+            this.host = \"http://\" + user + \":\" + password + \"@\" + host;\n+        } else {\n+            this.host = \"http://\" + host;\n+        }\n+    }\n+\n+    public boolean refresh() {\n+        boolean wasOnline = online;\n+        refreshPower();\n+        if (!wasOnline && online) {\n+            // Only refresh all services if the box changed from offline to online and power is on\n+            // because it is a performance intensive action.\n+            refreshAllServices();\n+        }\n+        refreshChannel();\n+        refreshEpg();\n+        refreshVolume();\n+        refreshAnswer();\n+        return online;\n+    }\n+\n+    public void refreshPower() {\n+        Optional<Document> document = transmitWithResult(PATH_POWER);\n+        if (document.isPresent()) {\n+            online = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3MDQ2Mw==", "bodyText": "Nice readme!", "url": "https://github.com/openhab/openhab-addons/pull/7514#discussion_r429270463", "createdAt": "2020-05-22T14:12:02Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.enigma2/README.md", "diffHunk": "@@ -0,0 +1,409 @@\n+# Enigma2 Binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d16bbd875bd69282dd9a35adab920b527c1bb7a"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55660caa26b52f996ff2419a9726f57dab77908c", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/55660caa26b52f996ff2419a9726f57dab77908c", "committedDate": "2020-05-22T17:27:41Z", "message": "[enigma2] Initial contribution #7514\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9e568c46aa5e1289a1138987a0907d238ae4831", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/d9e568c46aa5e1289a1138987a0907d238ae4831", "committedDate": "2020-05-22T17:27:43Z", "message": "[enigma2] Initial contribution #7514\n\n- Fixed review finding\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDk3MDE4", "url": "https://github.com/openhab/openhab-addons/pull/7514#pullrequestreview-417097018", "createdAt": "2020-05-22T18:06:14Z", "commit": {"oid": "8926d7dbb179e9ce72afd367d526252cec20aa3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8926d7dbb179e9ce72afd367d526252cec20aa3f", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/8926d7dbb179e9ce72afd367d526252cec20aa3f", "committedDate": "2020-05-22T16:32:27Z", "message": "[enigma2] Initial contribution #7514\n\n- Fixed reviwe finding\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}, "afterCommit": {"oid": "d9e568c46aa5e1289a1138987a0907d238ae4831", "author": {"user": {"login": "gdolfen", "name": "Guido Dolfen"}}, "url": "https://github.com/openhab/openhab-addons/commit/d9e568c46aa5e1289a1138987a0907d238ae4831", "committedDate": "2020-05-22T17:27:43Z", "message": "[enigma2] Initial contribution #7514\n\n- Fixed review finding\n\nSigned-off-by: gdolfen <gdolfen@web.de>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 688, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}