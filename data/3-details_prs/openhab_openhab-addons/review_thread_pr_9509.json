{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1Mzk1MzEw", "number": 9509, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoxMDowN1rOFJcc2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoxOTo0MFrOFJciCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDQ3NjQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/RateLimitedHttpClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoxMDowN1rOILyKpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoxMDowN1rOILyKpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyNzE3NQ==", "bodyText": "Completing with an InterruptedException would be misleading, so I suggest just cancelling the futures instead. It will complete with a CancelationException instead.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    requestQueue.forEach(queueEntry -> queueEntry.future.completeExceptionally(new InterruptedException()));\n          \n          \n            \n                    requestQueue.forEach(queueEntry -> queueEntry.future.cancel(false));", "url": "https://github.com/openhab/openhab-addons/pull/9509#discussion_r549227175", "createdAt": "2020-12-28T06:10:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/RateLimitedHttpClient.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.net.URI;\n+import java.util.concurrent.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+\n+/**\n+ * The {@link RateLimitedHttpClient} is a wrapper for a Jetty HTTP client that limits the number of requests by delaying\n+ * the request creation\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RateLimitedHttpClient {\n+    private static final int MAX_QUEUE_SIZE = 1000; // maximum queue size\n+    private HttpClient httpClient;\n+    private int delay = 0; // in ms\n+    private final ScheduledExecutorService scheduler;\n+    private final LinkedBlockingQueue<RequestQueueEntry> requestQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable ScheduledFuture<?> processJob;\n+\n+    public RateLimitedHttpClient(HttpClient httpClient, ScheduledExecutorService scheduler) {\n+        this.httpClient = httpClient;\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Stop processing the queue and clear it\n+     */\n+    public void shutdown() {\n+        stopProcessJob();\n+        requestQueue.forEach(queueEntry -> queueEntry.future.completeExceptionally(new InterruptedException()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af69687992b1b021e4b3760088897f0c73c948e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDQ4Mzk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/RateLimitedHttpClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoxNTo0NlrOILyOyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoxNTo0NlrOILyOyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyODIzNQ==", "bodyText": "If this queue is going to have a fixed capacity, then you should let the LinkedBlockingQueue handle capacity instead of trying to implement the behavior yourself, it would be threadsafe that way.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final LinkedBlockingQueue<RequestQueueEntry> requestQueue = new LinkedBlockingQueue<>();\n          \n          \n            \n                private final LinkedBlockingQueue<RequestQueueEntry> requestQueue = new LinkedBlockingQueue<>(MAX_QUEUE_SIZE);", "url": "https://github.com/openhab/openhab-addons/pull/9509#discussion_r549228235", "createdAt": "2020-12-28T06:15:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/RateLimitedHttpClient.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.net.URI;\n+import java.util.concurrent.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+\n+/**\n+ * The {@link RateLimitedHttpClient} is a wrapper for a Jetty HTTP client that limits the number of requests by delaying\n+ * the request creation\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RateLimitedHttpClient {\n+    private static final int MAX_QUEUE_SIZE = 1000; // maximum queue size\n+    private HttpClient httpClient;\n+    private int delay = 0; // in ms\n+    private final ScheduledExecutorService scheduler;\n+    private final LinkedBlockingQueue<RequestQueueEntry> requestQueue = new LinkedBlockingQueue<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af69687992b1b021e4b3760088897f0c73c948e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDQ4OTcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/RateLimitedHttpClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoxOTo0MFrOILyRuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoxOTo0MFrOILyRuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIyODk4Nw==", "bodyText": "You can let the queue do the capacity check instead which would simplify this a bit.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (requestQueue.size() >= MAX_QUEUE_SIZE) {\n          \n          \n            \n                        return CompletableFuture.failedFuture(new IllegalStateException(\"Maximum queue size exceeded.\"));\n          \n          \n            \n                    }\n          \n          \n            \n                    CompletableFuture<Request> future = new CompletableFuture<>();\n          \n          \n            \n                    requestQueue.add(new RequestQueueEntry(finalUrl, future));\n          \n          \n            \n                    return future;\n          \n          \n            \n                    CompletableFuture<Request> future = new CompletableFuture<>();\n          \n          \n            \n                    if (!requestQueue.offer(new RequestQueueEntry(finalUrl, future)) {\n          \n          \n            \n                        future.completeExceptionally(new RejectedExecutionException(\"Maximum queue size exceeded.\"));\n          \n          \n            \n                    }\n          \n          \n            \n                    return future;", "url": "https://github.com/openhab/openhab-addons/pull/9509#discussion_r549228987", "createdAt": "2020-12-28T06:19:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.http/src/main/java/org/openhab/binding/http/internal/http/RateLimitedHttpClient.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.http.internal.http;\n+\n+import java.net.URI;\n+import java.util.concurrent.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.AuthenticationStore;\n+import org.eclipse.jetty.client.api.Request;\n+\n+/**\n+ * The {@link RateLimitedHttpClient} is a wrapper for a Jetty HTTP client that limits the number of requests by delaying\n+ * the request creation\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RateLimitedHttpClient {\n+    private static final int MAX_QUEUE_SIZE = 1000; // maximum queue size\n+    private HttpClient httpClient;\n+    private int delay = 0; // in ms\n+    private final ScheduledExecutorService scheduler;\n+    private final LinkedBlockingQueue<RequestQueueEntry> requestQueue = new LinkedBlockingQueue<>();\n+\n+    private @Nullable ScheduledFuture<?> processJob;\n+\n+    public RateLimitedHttpClient(HttpClient httpClient, ScheduledExecutorService scheduler) {\n+        this.httpClient = httpClient;\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Stop processing the queue and clear it\n+     */\n+    public void shutdown() {\n+        stopProcessJob();\n+        requestQueue.forEach(queueEntry -> queueEntry.future.completeExceptionally(new InterruptedException()));\n+    }\n+\n+    /**\n+     * Set a new delay\n+     * \n+     * @param delay in ms between to requests\n+     */\n+    public void setDelay(int delay) {\n+        if (delay < 0) {\n+            throw new IllegalArgumentException(\"Delay needs to be larger or equal to zero\");\n+        }\n+        this.delay = delay;\n+        stopProcessJob();\n+        if (delay != 0) {\n+            processJob = scheduler.scheduleWithFixedDelay(this::processQueue, 0, delay, TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    /**\n+     * Set the HTTP client\n+     *\n+     * @param httpClient secure or insecure Jetty http client\n+     */\n+    public void setHttpClient(HttpClient httpClient) {\n+        this.httpClient = httpClient;\n+    }\n+\n+    /**\n+     * Create a new request to the given URL respecting rate-limits\n+     *\n+     * @param finalUrl the request URL\n+     * @return a CompletableFuture that completes with the request\n+     */\n+    public CompletableFuture<Request> newRequest(URI finalUrl) {\n+        // if no delay is set, return a completed CompletableFuture\n+        if (delay == 0) {\n+            return CompletableFuture.completedFuture(httpClient.newRequest(finalUrl));\n+        }\n+        if (requestQueue.size() >= MAX_QUEUE_SIZE) {\n+            return CompletableFuture.failedFuture(new IllegalStateException(\"Maximum queue size exceeded.\"));\n+        }\n+        CompletableFuture<Request> future = new CompletableFuture<>();\n+        requestQueue.add(new RequestQueueEntry(finalUrl, future));\n+        return future;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6af69687992b1b021e4b3760088897f0c73c948e"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3533, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}