{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDMzMDk5", "number": 7807, "title": "[netatmo] Add support for Presence camera events (#3059)", "bodyText": "This pull-request adds support for the events of the Netatmo Presence camera.\nIt ...\n\nuses the updated Netatmo API (to support the sub-event structure which is used by the Presence events)\ndelivers all information of the Presence events to the home thing (the message and snapshot is now available/set)\nadds new channels to the home thing to report if a human, animal or vehicle was detected\nsimplifies the process of updating the Netatmo API (the retrofit code generation is now embedded within the Maven build)\n\nPlease see issue 3059 for more information: #3059", "createdAt": "2020-05-27T18:18:30Z", "url": "https://github.com/openhab/openhab-addons/pull/7807", "merged": true, "mergeCommit": {"oid": "48117f4db73a9ae8787ff45686ddeb2c880f501e"}, "closed": true, "closedAt": "2020-06-08T21:20:54Z", "author": {"login": "Novanic"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnWwKngFqTQyMjgwOTczMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpLP_eAFqTQyNTk3MDc5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODA5NzMy", "url": "https://github.com/openhab/openhab-addons/pull/7807#pullrequestreview-422809732", "createdAt": "2020-06-02T15:39:38Z", "commit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozOTozOVrOGd3k_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozOTozOVrOGd3k_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MjQ3Ng==", "bodyText": "Maybe triggerEventChannels() and updateDataChannels() would be clearer ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433972476", "createdAt": "2020-06-02T15:39:39Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/AbstractNetatmoThingHandler.java", "diffHunk": "@@ -137,16 +132,39 @@ protected State getNAThingProperty(String channelId) {\n     }\n \n     protected void updateChannels() {\n-        getThing().getChannels().stream().filter(channel -> channel.getKind() != ChannelKind.TRIGGER)\n+        updateNonTriggerChannels();\n+\n+        triggerTriggerChannels();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODEyNTcz", "url": "https://github.com/openhab/openhab-addons/pull/7807#pullrequestreview-422812573", "createdAt": "2020-06-02T15:41:34Z", "commit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0MTozNVrOGd3rBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0MTozNVrOGd3rBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDAyMg==", "bodyText": "Usually @nullable is put on the same line than the property declaration :\nprivate @Nullable NAWelcomeEvent lastEvent;", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433974022", "createdAt": "2020-06-02T15:41:35Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjU4MzU5", "url": "https://github.com/openhab/openhab-addons/pull/7807#pullrequestreview-425658359", "createdAt": "2020-06-05T22:15:43Z", "commit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxNTo0M1rOGf-1eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxOTozOFrOGf-5uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4ODUzOA==", "bodyText": "Based on the logic that calls this method, this parameter shouldn't be nullable.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static @Nullable NAWelcomeSubEvent findFirstSubEvent(@Nullable NAWelcomeEvent event) {\n          \n          \n            \n                private static @Nullable NAWelcomeSubEvent findFirstSubEvent(NAWelcomeEvent event) {", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436188538", "createdAt": "2020-06-05T22:15:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +159,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {\n+        if(lastEvent != null) {\n+            NAWelcomeSnapshot snapshot = lastEvent.getSnapshot();\n+            if (snapshot == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if (firstSubEvent != null) {\n+                    snapshot = firstSubEvent.getSnapshot();\n+                }\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return null;\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private static @Nullable NAWelcomeSubEvent findFirstSubEvent(@Nullable NAWelcomeEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4ODY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable private NAWelcomeEvent lastEvent;\n          \n          \n            \n                private boolean isNewLastEvent;\n          \n          \n            \n                @Nullable private Integer dataTimeStamp;\n          \n          \n            \n                private @Nullable NAWelcomeEvent lastEvent;\n          \n          \n            \n                private boolean isNewLastEvent;\n          \n          \n            \n                private @Nullable Integer dataTimeStamp;", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436188673", "createdAt": "2020-06-05T22:16:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,34 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n-    private NAWelcomeEvent lastEvent;\n-    private Integer dataTimeStamp;\n+    @Nullable private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable private Integer dataTimeStamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4OTYyNw==", "bodyText": "If you are going to add this, you should fix these as well:\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[54,2066] The nullness annotation is redundant with a default that applies to this location\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[87,3626] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[100,4006] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[102,4116] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[104,4264] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[106,4416] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[112,4844] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[114,4987] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[118,5244] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[126,5681] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[144,6520] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[145,6592] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[149,6937] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[157,7287] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[159,7427] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[167,7936] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[218,9922] Potential null pointer access: this expression has a '@Nullable' type\n[WARNING] /home/travis/build/openhab/openhab-addons/bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java:[237,10497] Potential null pointer access: this expression has a '@Nullable' type", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436189627", "createdAt": "2020-06-05T22:19:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,34 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f84c5c52504168062eaf2118cc0946da571153b"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyODEyODEy", "url": "https://github.com/openhab/openhab-addons/pull/7807#pullrequestreview-422812812", "createdAt": "2020-06-02T15:41:49Z", "commit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0MTo0OVrOGd3r_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTo0NToyMVrOGd354g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NDI2OQ==", "bodyText": "Cf supra.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433974269", "createdAt": "2020-06-02T15:41:49Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable\n     private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NTY4Mw==", "bodyText": "Instead of using a @nullable function, you could switch to Optional :\nprotected Optional<NAWelcomeHome> updateReadings() {\n....", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433975683", "createdAt": "2020-06-02T15:43:12Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -29,36 +30,36 @@\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n+    @Nullable\n     private NAWelcomeEvent lastEvent;\n+    private boolean isNewLastEvent;\n+    @Nullable\n     private Integer dataTimeStamp;\n \n     public NAWelcomeHomeHandler(@NonNull Thing thing) {\n         super(thing);\n     }\n \n     @Override\n-    protected NAWelcomeHome updateReadings() {\n-        NAWelcomeHome result = null;\n+    protected @Nullable NAWelcomeHome updateReadings() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NjUxNg==", "bodyText": "channelId should not be nullable", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433976516", "createdAt": "2020-06-02T15:44:03Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -83,18 +84,21 @@ protected NAWelcomeHome updateReadings() {\n                     }\n                 });\n \n+                @Nullable NAWelcomeEvent previousLastEvent = lastEvent;\n                 result.getEvents().forEach(event -> {\n                     if (lastEvent == null || lastEvent.getTime() < event.getTime()) {\n                         lastEvent = event;\n                     }\n                 });\n+\n+                isNewLastEvent = previousLastEvent != null && !previousLastEvent.equals(lastEvent);\n             }\n         }\n         return result;\n     }\n \n     @Override\n-    protected State getNAThingProperty(String channelId) {\n+    protected State getNAThingProperty(@Nullable String channelId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3Njk4MA==", "bodyText": "Optional would be better.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433976980", "createdAt": "2020-06-02T15:44:32Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NzIzNg==", "bodyText": "Optional would be better.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433977236", "createdAt": "2020-06-02T15:44:47Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3NzgyNg==", "bodyText": "Optional would be better for the function, and parameter should not be nullable.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r433977826", "createdAt": "2020-06-02T15:45:21Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -159,34 +161,111 @@ protected State getNAThingProperty(String channelId) {\n                 return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                @Nullable String eventMessage = findEventMessage();\n+                return eventMessage != null\n+                        ? new StringType(eventMessage.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n                         : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n                 return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(@Nullable NAWelcomeEvent event) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(event == null) {\n+            return detectedObjectTypes;\n+        }\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private @Nullable String findEventMessage() {\n+        if(lastEvent != null) {\n+            @Nullable String message = lastEvent.getMessage();\n+            if(message == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if(firstSubEvent != null) {\n+                    message = firstSubEvent.getMessage();\n+                }\n+            }\n+            return message;\n+        }\n+        return null;\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected @Nullable String findSnapshotURL() {\n+        if(lastEvent != null) {\n+            NAWelcomeSnapshot snapshot = lastEvent.getSnapshot();\n+            if (snapshot == null) {\n+                @Nullable NAWelcomeSubEvent firstSubEvent = findFirstSubEvent(lastEvent);\n+                if (firstSubEvent != null) {\n+                    snapshot = firstSubEvent.getSnapshot();\n+                }\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return null;\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private static @Nullable NAWelcomeSubEvent findFirstSubEvent(@Nullable NAWelcomeEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c305f68e3b7efa09a041447498d98e5ef83ca2ca"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzQyMDQy", "url": "https://github.com/openhab/openhab-addons/pull/7807#pullrequestreview-425742042", "createdAt": "2020-06-06T13:54:30Z", "commit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMzo1NDozMVrOGgD26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxNDoxMTo1M1rOGgD7zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MDgyNA==", "bodyText": "logger is final but not static", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436270824", "createdAt": "2020-06-06T13:54:31Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -15,50 +15,50 @@\n import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n-import java.util.Calendar;\n-import java.util.Optional;\n+import java.util.*;\n+import java.util.function.Function;\n \n-import org.eclipse.jdt.annotation.NonNull;\n+import io.swagger.client.model.*;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.netatmo.internal.ChannelTypeUtils;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MDkxMg==", "bodyText": "Could be done at declaration", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436270912", "createdAt": "2020-06-06T13:55:22Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -15,50 +15,50 @@\n import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n-import java.util.Calendar;\n-import java.util.Optional;\n+import java.util.*;\n+import java.util.function.Function;\n \n-import org.eclipse.jdt.annotation.NonNull;\n+import io.swagger.client.model.*;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n import org.eclipse.smarthome.core.types.UnDefType;\n import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.netatmo.internal.ChannelTypeUtils;\n import org.openhab.binding.netatmo.internal.handler.AbstractNetatmoThingHandler;\n import org.openhab.binding.netatmo.internal.handler.NetatmoDeviceHandler;\n+import org.openhab.binding.netatmo.internal.webhook.NAWebhookCameraEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import io.swagger.client.model.NAWelcomeEvent;\n-import io.swagger.client.model.NAWelcomeHome;\n-import io.swagger.client.model.NAWelcomeHomeData;\n-import io.swagger.client.model.NAWelcomeSnapshot;\n-\n /**\n  * {@link NAWelcomeHomeHandler} is the class used to handle the Welcome Home Data\n  *\n  * @author Ga\u00ebl L'hopital - Initial contribution\n  * @author Ing. Peter Weiss - Welcome camera implementation\n  *\n  */\n+@NonNullByDefault\n public class NAWelcomeHomeHandler extends NetatmoDeviceHandler<NAWelcomeHome> {\n-    private Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n+    private static final Logger logger = LoggerFactory.getLogger(NAWelcomeHomeHandler.class);\n \n     private int iPersons = -1;\n     private int iUnknowns = -1;\n-    private NAWelcomeEvent lastEvent;\n-    private Integer dataTimeStamp;\n+    private Optional<NAWelcomeEvent> lastEvent;\n+    private boolean isNewLastEvent;\n+    private @Nullable Integer dataTimeStamp;\n \n-    public NAWelcomeHomeHandler(@NonNull Thing thing) {\n+    public NAWelcomeHomeHandler(Thing thing) {\n         super(thing);\n+        lastEvent = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTM5Nw==", "bodyText": "space between if and '(' (doesn't the IDE format this automatically ?)", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271397", "createdAt": "2020-06-06T14:01:22Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTM5OQ==", "bodyText": "space between if and '(' (doesn't the IDE format this automatically ?)", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271399", "createdAt": "2020-06-06T14:01:29Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTQ1NA==", "bodyText": "detectedObjectTypes.forEach() would be better.", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271454", "createdAt": "2020-06-06T14:02:37Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTU4NQ==", "bodyText": "Couldn't you use directly the EventTypeEnum to define the various events ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271585", "createdAt": "2020-06-06T14:04:41Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTY0Mg==", "bodyText": "subEvents.forEach() would be better", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271642", "createdAt": "2020-06-06T14:05:33Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTcxMQ==", "bodyText": "Why not use directly the NAWelcomeSubEvent.TypeEnum ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271711", "createdAt": "2020-06-06T14:06:45Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTc1MA==", "bodyText": "space between if and '('", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271750", "createdAt": "2020-06-06T14:07:03Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTgwOQ==", "bodyText": "Is @nullable required here ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271809", "createdAt": "2020-06-06T14:07:46Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTg2NA==", "bodyText": "space between if and '('", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271864", "createdAt": "2020-06-06T14:08:47Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MTg3NQ==", "bodyText": "Is nullable required ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436271875", "createdAt": "2020-06-06T14:09:00Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MjAwOA==", "bodyText": "Can you change this to a StringBuilder or a String.format(\"....\") ?", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436272008", "createdAt": "2020-06-06T14:10:42Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI3MjA3Nw==", "bodyText": "space between if and '('", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436272077", "createdAt": "2020-06-06T14:11:53Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +100,164 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if(isNewLastEvent) {\n+            if(CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                Set<String> detectedObjectTypes = findDetectedObjectTypes(lastEvent);\n+                for(String detectedType: detectedObjectTypes) {\n+                    triggerChannel(channelId, detectedType);\n+                }\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if(!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if(event.getPersonId() != null) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_HUMAN_DETECTED);\n+        }\n+\n+        if(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(CAMERA_EVENT_OPTION_MOVEMENT_DETECTED);\n+        }\n+\n+        List<NAWelcomeSubEvent> subEvents = event.getEventList();\n+        for(NAWelcomeSubEvent subEvent: subEvents) {\n+            String detectedObjectType = translateDetectedObjectType(subEvent.getType());\n+            detectedObjectTypes.add(detectedObjectType);\n+        }\n+        return detectedObjectTypes;\n+    }\n+\n+    private static String translateDetectedObjectType(NAWelcomeSubEvent.TypeEnum type) {\n+        switch (type) {\n+            case HUMAN: return CAMERA_EVENT_OPTION_HUMAN_DETECTED;\n+            case ANIMAL: return CAMERA_EVENT_OPTION_ANIMAL_DETECTED;\n+            case VEHICLE: return CAMERA_EVENT_OPTION_VEHICLE_DETECTED;\n+            default: throw new IllegalArgumentException(\"Unknown detected object type!\");\n+        }\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if(lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey());\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return Optional.empty();\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private State getPlaceInfo(Function<NAWelcomePlace, String> infoGetFunction) {\n+        return Optional.ofNullable(device).map(\n+                d -> toStringType(infoGetFunction.apply(d.getPlace()))\n+        ).orElse(UnDefType.UNDEF);\n+    }\n+\n+    private static Optional<NAWelcomeSubEvent> findFirstSubEvent(Optional<NAWelcomeEvent> event) {\n+        if(event.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5e3832003de7d2ed7763e76b2c9dda7ca6877d"}, "originalPosition": 279}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26c9dfd109de070a65ce5a49e450d2005353c323", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/26c9dfd109de070a65ce5a49e450d2005353c323", "committedDate": "2020-06-06T19:16:15Z", "message": "- Netatmo API updated (to support the sub-event structure which is used by the Presence events)\n- The message and snapshot data of the Presence events is now available at the home thing\n- New channels to the home thing added to report if a human, animal or vehicle was detected\n- Process of updating the Netatmo API simplified (the retrofit code generation is now embedded within the Maven build, therefore the netatmo-swagger-api project doesn't require an additional update and release anymore)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e2511a7294028ca62cf48ebb9b9266b5216f80", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/94e2511a7294028ca62cf48ebb9b9266b5216f80", "committedDate": "2020-06-06T19:16:15Z", "message": "README extended for the Presence outdoor camera thing configuration example\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c773af5c0d69de072a003276ae3d783968498711", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/c773af5c0d69de072a003276ae3d783968498711", "committedDate": "2020-06-06T19:16:15Z", "message": "NonNullByDefault is now used because it was mentioned in the code-review\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c09fd2aee4ea15cafd96effa8ba3b5f5a4bed897", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/c09fd2aee4ea15cafd96effa8ba3b5f5a4bed897", "committedDate": "2020-06-06T19:16:15Z", "message": "NonNullByDefault is now used because it was mentioned in the code-review\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7534b5eb22a35abc6dae178ab025095703b7bc9b", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/7534b5eb22a35abc6dae178ab025095703b7bc9b", "committedDate": "2020-06-06T19:16:15Z", "message": "The new 3 channels (for human, animal and vehicle detection) are now replaced by a trigger channel called \"cameraEvent\". Trigger channels are triggered after the other channels are updated (so a rule can react on a trigger and get the other event information from the other updated channels). Movement event option - A Presence camera reports also generic movements when a movement is not recognizable as a human, animal or vehicle.\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca146b7ac7e5ad1704933d94d5b16a2a98fc0e3f", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/ca146b7ac7e5ad1704933d94d5b16a2a98fc0e3f", "committedDate": "2020-06-06T19:16:15Z", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd402f243e9d42871641ca2a560a67f96155226", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/2bd402f243e9d42871641ca2a560a67f96155226", "committedDate": "2020-06-06T19:16:15Z", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5df268c1ab40e77b8c5e2068a43d9119bd553db1", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/5df268c1ab40e77b8c5e2068a43d9119bd553db1", "committedDate": "2020-06-06T19:16:15Z", "message": "Code optimization (usage of Optional to reduce @Nullable annotations)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "813a0d6163353d8b4201426902bb8eedc1f5cbcf", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/813a0d6163353d8b4201426902bb8eedc1f5cbcf", "committedDate": "2020-06-06T19:16:16Z", "message": "Code optimization (channelId is now marked as NonNull)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "324d35f783a9c307da6d83915b8da8d5ef6607bc", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/324d35f783a9c307da6d83915b8da8d5ef6607bc", "committedDate": "2020-06-06T19:16:16Z", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bfbeaa0f9cf528d96fbf4085778c39f3e831576", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/1bfbeaa0f9cf528d96fbf4085778c39f3e831576", "committedDate": "2020-06-06T19:16:16Z", "message": "Code optimization (usage of Optional to reduce @Nullable annotations)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40b86b9fdda025d3552f5d42996480e9a4379484", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/40b86b9fdda025d3552f5d42996480e9a4379484", "committedDate": "2020-06-06T19:16:16Z", "message": "Code optimization (usage of Optional to reduce @Nullable annotations)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806a75ac4b0f506cb8374fe66f6542abe2432432", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/806a75ac4b0f506cb8374fe66f6542abe2432432", "committedDate": "2020-06-06T19:16:16Z", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66622c5fa36cc9913b5eb9c59c425852dbeb960c", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/66622c5fa36cc9913b5eb9c59c425852dbeb960c", "committedDate": "2020-06-06T19:16:16Z", "message": "\"_DETECTED\" removed from the event option names, that simplifies the code (mapping code could get removed)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NzcwNDAy", "url": "https://github.com/openhab/openhab-addons/pull/7807#pullrequestreview-425770402", "createdAt": "2020-06-06T21:32:10Z", "commit": {"oid": "66622c5fa36cc9913b5eb9c59c425852dbeb960c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMTozMjoxMFrOGgFxgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMTozNTo1NFrOGgFyZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwMjIwOQ==", "bodyText": "This can be simplified to: lastEvent = result.getEvents().stream().min((e1, e2) -> e1.getTime() - e2.getTime());", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436302209", "createdAt": "2020-06-06T21:32:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -83,11 +82,14 @@ protected NAWelcomeHome updateReadings() {\n                     }\n                 });\n \n+                Optional<NAWelcomeEvent> previousLastEvent = lastEvent;\n                 result.getEvents().forEach(event -> {\n-                    if (lastEvent == null || lastEvent.getTime() < event.getTime()) {\n-                        lastEvent = event;\n+                    if (!lastEvent.isPresent() || lastEvent.get().getTime() < event.getTime()) {\n+                        lastEvent = Optional.of(event);\n                     }\n                 });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66622c5fa36cc9913b5eb9c59c425852dbeb960c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwMjQzOQ==", "bodyText": "I think this should work.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (event.isPresent()) {\n          \n          \n            \n                        List<NAWelcomeSubEvent> subEvents = event.get().getEventList();\n          \n          \n            \n                        if (subEvents != null && !subEvents.isEmpty()) {\n          \n          \n            \n                            return Optional.of(subEvents.get(0));\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return Optional.empty();\n          \n          \n            \n                    return event.map(NAWelcomeEvent::getEventList).flatMap(subEvents -> subEvents.stream().findFirst());", "url": "https://github.com/openhab/openhab-addons/pull/7807#discussion_r436302439", "createdAt": "2020-06-06T21:35:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -97,96 +99,151 @@ protected NAWelcomeHome updateReadings() {\n     protected State getNAThingProperty(String channelId) {\n         switch (channelId) {\n             case CHANNEL_WELCOME_HOME_CITY:\n-                return device != null ? toStringType(device.getPlace().getCity()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCity);\n             case CHANNEL_WELCOME_HOME_COUNTRY:\n-                return device != null ? toStringType(device.getPlace().getCountry()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getCountry);\n             case CHANNEL_WELCOME_HOME_TIMEZONE:\n-                return device != null ? toStringType(device.getPlace().getTimezone()) : UnDefType.UNDEF;\n+                return getPlaceInfo(NAWelcomePlace::getTimezone);\n             case CHANNEL_WELCOME_HOME_PERSONCOUNT:\n                 return iPersons != -1 ? new DecimalType(iPersons) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_HOME_UNKNOWNCOUNT:\n                 return iUnknowns != -1 ? new DecimalType(iUnknowns) : UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_TYPE:\n-                return lastEvent != null ? toStringType(lastEvent.getType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getType())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_TIME:\n-                return lastEvent != null ? toDateTimeType(lastEvent.getTime()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDateTimeType(e.getTime())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_CAMERAID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> camera = getBridgeHandler()\n-                            .findNAThing(lastEvent.getCameraId());\n+                            .findNAThing(lastEvent.get().getCameraId());\n                     return camera.map(c -> toStringType(c.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_PERSONID:\n-                if (lastEvent != null) {\n+                if (lastEvent.isPresent()) {\n                     Optional<AbstractNetatmoThingHandler> person = getBridgeHandler()\n-                            .findNAThing(lastEvent.getPersonId());\n+                            .findNAThing(lastEvent.get().getPersonId());\n                     return person.map(p -> toStringType(p.getThing().getLabel())).orElse(UnDefType.UNDEF);\n                 } else {\n                     return UnDefType.UNDEF;\n                 }\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT:\n-                if (lastEvent != null) {\n-                    String url = getSnapshotURL(lastEvent.getSnapshot());\n-                    return url != null ? HttpUtil.downloadImage(url) : UnDefType.UNDEF;\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(url -> (State)HttpUtil.downloadImage(url)).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SNAPSHOT_URL:\n-                if (lastEvent != null) {\n-                    String snapshotURL = getSnapshotURL(lastEvent.getSnapshot());\n-                    return toStringType(snapshotURL);\n-                } else {\n-                    return UnDefType.UNDEF;\n-                }\n+                return findSnapshotURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_VIDEO_URL:\n-                if (lastEvent != null && lastEvent.getVideoId() != null) {\n-                    String cameraId = lastEvent.getCameraId();\n+                if (lastEvent.isPresent() && lastEvent.get().getVideoId() != null) {\n+                    String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n                         NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n-                        String streamUrl = eventCamera.getStreamURL(lastEvent.getVideoId());\n+                        String streamUrl = eventCamera.getStreamURL(lastEvent.get().getVideoId());\n                         if (streamUrl != null) {\n                             return new StringType(streamUrl);\n                         }\n                     }\n                 }\n                 return UnDefType.UNDEF;\n             case CHANNEL_WELCOME_EVENT_VIDEOSTATUS:\n-                return lastEvent != null ? toStringType(lastEvent.getVideoStatus()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toStringType(e.getVideoStatus())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_ISARRIVAL:\n-                return lastEvent != null ? lastEvent.getIsArrival() != null ? OnOffType.ON : OnOffType.OFF\n-                        : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toOnOffType(e.getIsArrival())).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_MESSAGE:\n-                return lastEvent != null && lastEvent.getMessage() != null\n-                        ? new StringType(lastEvent.getMessage().replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n-                        : UnDefType.UNDEF;\n+                return findEventMessage().map(\n+                        m -> (State)new StringType(m.replace(\"<b>\", \"\").replace(\"</b>\", \"\"))\n+                ).orElse(UnDefType.UNDEF);\n             case CHANNEL_WELCOME_EVENT_SUBTYPE:\n-                return lastEvent != null ? toDecimalType(lastEvent.getSubType()) : UnDefType.UNDEF;\n+                return lastEvent.map(e -> toDecimalType(e.getSubType())).orElse(UnDefType.UNDEF);\n         }\n         return super.getNAThingProperty(channelId);\n     }\n \n+    @Override\n+    protected void triggerChannelIfRequired(String channelId) {\n+        if (isNewLastEvent) {\n+            if (CHANNEL_CAMERA_EVENT.equals(channelId)) {\n+                findDetectedObjectTypes(lastEvent).forEach(detectedType -> triggerChannel(channelId, detectedType));\n+            }\n+        }\n+        super.triggerChannelIfRequired(channelId);\n+    }\n+\n+    private static Set<String> findDetectedObjectTypes(Optional<NAWelcomeEvent> eventOptional) {\n+        Set<String> detectedObjectTypes = new TreeSet<>();\n+        if (!eventOptional.isPresent()) {\n+            return detectedObjectTypes;\n+        }\n+\n+        NAWelcomeEvent event = eventOptional.get();\n+\n+        if (event.getPersonId() != null) {\n+            detectedObjectTypes.add(NAWelcomeSubEvent.TypeEnum.HUMAN.name());\n+        }\n+\n+        if (NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.toString().equals(event.getType())) {\n+            detectedObjectTypes.add(NAWebhookCameraEvent.EventTypeEnum.MOVEMENT.name());\n+        }\n+\n+        event.getEventList().forEach(subEvent -> {\n+            String detectedObjectType = subEvent.getType().name();\n+            detectedObjectTypes.add(detectedObjectType);\n+        });\n+        return detectedObjectTypes;\n+    }\n+\n+    private Optional<String> findEventMessage() {\n+        if (lastEvent.isPresent()) {\n+            @Nullable String message = lastEvent.get().getMessage();\n+            if (message != null) {\n+                return Optional.of(message);\n+            }\n+\n+            return findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getMessage);\n+        }\n+        return Optional.empty();\n+    }\n+\n     /**\n      * Returns the Url of the picture\n      *\n      * @return Url of the picture or null\n      */\n-    protected String getSnapshotURL(NAWelcomeSnapshot snapshot) {\n-        String result = null;\n-\n-        if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n-            result = WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n-                    + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey();\n-        } else {\n-            logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+    protected Optional<String> findSnapshotURL() {\n+        if (lastEvent.isPresent()) {\n+            @Nullable NAWelcomeSnapshot snapshot = lastEvent.get().getSnapshot();\n+            if (snapshot == null) {\n+                snapshot = findFirstSubEvent(lastEvent).map(NAWelcomeSubEvent::getSnapshot).orElse(null);\n+            }\n+\n+            if (snapshot != null && snapshot.getId() != null && snapshot.getKey() != null) {\n+                return Optional.of(WELCOME_PICTURE_URL + \"?\" + WELCOME_PICTURE_IMAGEID + \"=\" + snapshot.getId() + \"&\"\n+                        + WELCOME_PICTURE_KEY + \"=\" + snapshot.getKey());\n+            } else {\n+                logger.debug(\"Unable to build snapshot url for Home : {}\", getId());\n+            }\n         }\n-        return result;\n+        return Optional.empty();\n     }\n \n     @Override\n     protected @Nullable Integer getDataTimestamp() {\n         return dataTimeStamp;\n     }\n+\n+    private State getPlaceInfo(Function<NAWelcomePlace, String> infoGetFunction) {\n+        return Optional.ofNullable(device).map(\n+                d -> toStringType(infoGetFunction.apply(d.getPlace()))\n+        ).orElse(UnDefType.UNDEF);\n+    }\n+\n+    private static Optional<NAWelcomeSubEvent> findFirstSubEvent(Optional<NAWelcomeEvent> event) {\n+        if (event.isPresent()) {\n+            List<NAWelcomeSubEvent> subEvents = event.get().getEventList();\n+            if (subEvents != null && !subEvents.isEmpty()) {\n+                return Optional.of(subEvents.get(0));\n+            }\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66622c5fa36cc9913b5eb9c59c425852dbeb960c"}, "originalPosition": 271}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac63b61774e73eb20c23ff6ed8198d77effce651", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/ac63b61774e73eb20c23ff6ed8198d77effce651", "committedDate": "2020-06-07T08:28:07Z", "message": "Code optimization\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1ODU1NzA5", "url": "https://github.com/openhab/openhab-addons/pull/7807#pullrequestreview-425855709", "createdAt": "2020-06-07T21:42:14Z", "commit": {"oid": "ac63b61774e73eb20c23ff6ed8198d77effce651"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTcwNzk3", "url": "https://github.com/openhab/openhab-addons/pull/7807#pullrequestreview-425970797", "createdAt": "2020-06-08T07:23:24Z", "commit": {"oid": "ac63b61774e73eb20c23ff6ed8198d77effce651"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 472, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}