{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5ODY3MDg1", "number": 6946, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwOToxOTozOFrODcaTAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODoyODo1NVrODcdITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTE3NTcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwOToxOTozOFrOFkdBew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxOToyMjo1OVrOFkexZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2ODU3MQ==", "bodyText": "Do we have to calculate this every time?\nCan't this be a member variable?", "url": "https://github.com/openhab/openhab-addons/pull/6946#discussion_r373768571", "createdAt": "2020-02-01T09:19:38Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -95,12 +95,13 @@ public void update(Command command) throws IllegalArgumentException {\n         } else //\n                // Increase or decrease by \"step\"\n         if (command instanceof IncreaseDecreaseType) {\n+            final BigDecimal stepPercent = step.multiply(HUNDRED).divide(span, MathContext.DECIMAL128);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "139c7cc498a2055229fe2cebf154845051869eed"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5NzIyMQ==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/6946#discussion_r373797221", "createdAt": "2020-02-01T19:22:59Z", "author": {"login": "scarito"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -95,12 +95,13 @@ public void update(Command command) throws IllegalArgumentException {\n         } else //\n                // Increase or decrease by \"step\"\n         if (command instanceof IncreaseDecreaseType) {\n+            final BigDecimal stepPercent = step.multiply(HUNDRED).divide(span, MathContext.DECIMAL128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc2ODU3MQ=="}, "originalCommit": {"oid": "139c7cc498a2055229fe2cebf154845051869eed"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTYzOTgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwODoyODo1NVrOFkgrew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxODowMjoyNVrOFqUkkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyODQ3NQ==", "bodyText": "For performance sake: Do we really need DECIMAL128 or would something lower be sufficient?", "url": "https://github.com/openhab/openhab-addons/pull/6946#discussion_r373828475", "createdAt": "2020-02-02T08:28:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -69,6 +70,7 @@ public PercentageValue(@Nullable BigDecimal min, @Nullable BigDecimal max, @Null\n         }\n         this.span = this.max.subtract(this.min);\n         this.step = step == null ? BigDecimal.ONE : step;\n+        this.stepPercent = this.step.multiply(HUNDRED).divide(this.span, MathContext.DECIMAL128);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c157704d6f109fe5c211b25e3b63d0f425fda5b1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg1MjI1MQ==", "bodyText": "Well, this is a deeper problem.\nThe PercentageValue has inputs from 2 sources:\n\nMQTT will sent values between min and `max' or the on/off Strings\nThe UI will sent PercentType, IncreaseDecreaseType, or UpDownType\nIs that correct?\nThen the value will be used in 2 destination:\nMQTT will expect values between min and max\nThe UI will use PercentType to render the current value.\n\nThe conversion between the MQTT world (min...max) to the percent world (0...100) will have th posibility of loosing precision.\ne.g. If the MQTT world is [0...300], then the value incomming value 100 cannot be mapped to the percent value exactly. Then mapping the exact same value back to MQTT will yield a differenet value, because of the rounding needed.\nCurrently we do not have any information about he presicion, the MQTT world expects.\nDo we have any information about our front-end? What precision are ther working with?", "url": "https://github.com/openhab/openhab-addons/pull/6946#discussion_r373852251", "createdAt": "2020-02-02T14:58:28Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -69,6 +70,7 @@ public PercentageValue(@Nullable BigDecimal min, @Nullable BigDecimal max, @Null\n         }\n         this.span = this.max.subtract(this.min);\n         this.step = step == null ? BigDecimal.ONE : step;\n+        this.stepPercent = this.step.multiply(HUNDRED).divide(this.span, MathContext.DECIMAL128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyODQ3NQ=="}, "originalCommit": {"oid": "c157704d6f109fe5c211b25e3b63d0f425fda5b1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5ODkzNw==", "bodyText": "I was just matching the convention of the file for precision.  I think if the goal is to retain double precision in both percentage and MQTT domain using a 128 bit decimal will work, assuming you round back to doubles at output.  As long as you consistently round before outputting/receiving a value on both MQTT and openhab sides, you shouldn't have any loss of precision.\nMy MQTT side just expects integers so I'd be fine using floating point values everywhere and rounding.", "url": "https://github.com/openhab/openhab-addons/pull/6946#discussion_r373898937", "createdAt": "2020-02-03T02:10:35Z", "author": {"login": "scarito"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -69,6 +70,7 @@ public PercentageValue(@Nullable BigDecimal min, @Nullable BigDecimal max, @Null\n         }\n         this.span = this.max.subtract(this.min);\n         this.step = step == null ? BigDecimal.ONE : step;\n+        this.stepPercent = this.step.multiply(HUNDRED).divide(this.span, MathContext.DECIMAL128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyODQ3NQ=="}, "originalCommit": {"oid": "c157704d6f109fe5c211b25e3b63d0f425fda5b1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg1NjE3MQ==", "bodyText": "Can one of you help me understand what's needed to submit this PR?  I don't think these issues of precision relate to this specific change but rather to the implementation of the entire class.", "url": "https://github.com/openhab/openhab-addons/pull/6946#discussion_r379856171", "createdAt": "2020-02-15T21:08:01Z", "author": {"login": "scarito"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -69,6 +70,7 @@ public PercentageValue(@Nullable BigDecimal min, @Nullable BigDecimal max, @Null\n         }\n         this.span = this.max.subtract(this.min);\n         this.step = step == null ? BigDecimal.ONE : step;\n+        this.stepPercent = this.step.multiply(HUNDRED).divide(this.span, MathContext.DECIMAL128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyODQ3NQ=="}, "originalCommit": {"oid": "c157704d6f109fe5c211b25e3b63d0f425fda5b1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxNjM3Nw==", "bodyText": "@jochen314 So you would vote for keeping DECIMAL128?", "url": "https://github.com/openhab/openhab-addons/pull/6946#discussion_r379916377", "createdAt": "2020-02-16T16:43:13Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -69,6 +70,7 @@ public PercentageValue(@Nullable BigDecimal min, @Nullable BigDecimal max, @Null\n         }\n         this.span = this.max.subtract(this.min);\n         this.step = step == null ? BigDecimal.ONE : step;\n+        this.stepPercent = this.step.multiply(HUNDRED).divide(this.span, MathContext.DECIMAL128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyODQ3NQ=="}, "originalCommit": {"oid": "c157704d6f109fe5c211b25e3b63d0f425fda5b1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyMTU1NA==", "bodyText": "At least for now.\nI think, it would be another PR change the behaviour of the class in this respect.\nAnd I do not see, what would be the best solution for it", "url": "https://github.com/openhab/openhab-addons/pull/6946#discussion_r379921554", "createdAt": "2020-02-16T18:02:25Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/values/PercentageValue.java", "diffHunk": "@@ -69,6 +70,7 @@ public PercentageValue(@Nullable BigDecimal min, @Nullable BigDecimal max, @Null\n         }\n         this.span = this.max.subtract(this.min);\n         this.step = step == null ? BigDecimal.ONE : step;\n+        this.stepPercent = this.step.multiply(HUNDRED).divide(this.span, MathContext.DECIMAL128);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyODQ3NQ=="}, "originalCommit": {"oid": "c157704d6f109fe5c211b25e3b63d0f425fda5b1"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 812, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}