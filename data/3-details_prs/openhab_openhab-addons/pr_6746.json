{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTk3NDM0", "number": 6746, "title": "[jeelink] add revolt support", "bodyText": "Adds support for the revolt protocol to the jeelink binding. Fixes #6077.\nSigned-off-by: Volker Bier volker.bier@web.de", "createdAt": "2020-01-02T09:28:25Z", "url": "https://github.com/openhab/openhab-addons/pull/6746", "merged": true, "mergeCommit": {"oid": "3b8e94a5359adc3330065b7192c337e94a59c0de"}, "closed": true, "closedAt": "2020-03-06T19:01:17Z", "author": {"login": "vbier"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABbwRcrKAH2gAyMzU4NTk3NDM0OjgwMWE2ZGY2ZDkyNDZmMmIzOTEwOWM3OTU5ZDA3ZDc5MDM5ZjYwNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLE4xogFqTM3MDU1NDg2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "801a6df6d9246f2b39109c7959d07d79039f6061", "author": {"user": {"login": "vbier", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/801a6df6d9246f2b39109c7959d07d79039f6061", "committedDate": "2019-12-14T12:23:00Z", "message": "add revolt support\n\nSigned-off-by: Volker Bier <volker.bier@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330", "author": {"user": {"login": "vbier", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/77e2273fa82cb597208d16b3e75d47e06377b330", "committedDate": "2020-01-02T09:49:22Z", "message": "Fix errors reported by Travis.\n\nSigned-off-by: Volker Bier <volker.bier@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDM2NDMz", "url": "https://github.com/openhab/openhab-addons/pull/6746#pullrequestreview-351036433", "createdAt": "2020-01-30T18:15:11Z", "commit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoxNToxMVrOFj05Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDozODoxNVrOFj5KWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTA3MQ==", "bodyText": "String sensorType = h.getSensorType();\n                if (\"ALL\".equals(sensorType)) {\n                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n                } else {\n                    JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(sensorType);\n                    if (c != null) {\n                        converters.add(c);\n                        sensorTypeConvertersMap.put(sensorType, c);\n                    }\n                }   \n\nIsn't this more readable?", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373111071", "createdAt": "2020-01-30T18:15:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -155,7 +149,17 @@ public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n             List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n                 handlers = new ArrayList<>();\n+                \n+                // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n+                \n+                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                if (c != null) {\n+                    converters.add(c);\n+                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                } else if (\"ALL\".equals(h.getSensorType())) {\n+                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTg5MA==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373111890", "createdAt": "2020-01-30T18:16:52Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -174,7 +178,15 @@ public void removeReadingHandler(ReadingHandler<? extends Reading> h) {\n                 handlers.remove(h);\n \n                 if (handlers.isEmpty()) {\n+                    // this was the last handler for this reading class => also remove converter\n                     readingClassHandlerMap.remove(h.getReadingClass());\n+                    \n+                    JeeLinkReadingConverter<?> c = sensorTypeConvertersMap.get(h.getSensorType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNTg5OA==", "bodyText": "This is not necessarily a part of this PR: But it seems that handlers is designed to contain unique elements. Wouldn't it be a better match to use a Set instead of a list?", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373115898", "createdAt": "2020-01-30T18:24:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -155,7 +149,17 @@ public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n             List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n                 handlers = new ArrayList<>();\n+                \n+                // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n+                \n+                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                if (c != null) {\n+                    converters.add(c);\n+                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                } else if (\"ALL\".equals(h.getSensorType())) {\n+                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                }\n             }\n \n             if (!handlers.contains(h)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExOTgwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                List<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());\n          \n          \n            \n                                getAllHandlers(r.getClass()).stream().forEach(h -> h.handleReading(r));", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373119809", "createdAt": "2020-01-30T18:32:52Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -187,50 +199,44 @@ public void handleCommand(ChannelUID channelUid, Command command) {\n     @Override\n     public void handleInput(String input) {\n         lastReadingTime = System.currentTimeMillis();\n-\n-        Matcher matcher = READING_P.matcher(input);\n-        if (matcher.matches()) {\n-            intializeConnection();\n-\n-            String sensorType = matcher.group(1);\n-            JeeLinkReadingConverter<?> converter;\n-\n-            synchronized (sensorTypeConvertersMap) {\n-                converter = sensorTypeConvertersMap.get(sensorType);\n-                if (converter == null) {\n-                    converter = SensorDefinition.getConverter(sensorType);\n-\n-                    if (converter == null) {\n-                        logger.debug(\"Missing converter for sensor type {}. Ignoring readings.\", sensorType);\n-                        converter = new IgnoringConverter();\n-                    } else {\n-                        logger.debug(\"Registering converter for sensor type {}: {}\", sensorType, converter);\n-                    }\n-\n-                    sensorTypeConvertersMap.put(sensorType, converter);\n-                }\n-            }\n-\n-            Reading r = converter.createReading(input);\n+        \n+        // try all associated converters to find the correct one\n+        for (JeeLinkReadingConverter<?> c : converters) {\n+            Reading r = c.createReading(input);\n+            \n             if (r != null) {\n-                ReadingHandler<Reading> d = discoveryHandler.get();\n-                if (d != null) {\n-                    d.handleReading(r);\n-                }\n+                // this converter is responsible\n+                intializeConnection();\n \n                 // propagate to the appropriate sensor handler\n                 synchronized (readingClassHandlerMap) {\n-                    List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(r.getClass());\n-                    if (handlers != null) {\n-                        for (ReadingHandler h : handlers) {\n-                            h.handleReading(r);\n-                        }\n+                    List<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMTgwNA==", "bodyText": "Can we add duplicate converters? If not, use a Set", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373121804", "createdAt": "2020-01-30T18:36:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -31,16 +34,19 @@\n  */\n public abstract class SensorDefinition<R extends Reading> {\n     private static final HashSet<SensorDefinition<?>> SENSOR_DEFS = new HashSet<>();\n+    private static final List<JeeLinkReadingConverter<?>> CONVERTERS = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ==", "bodyText": "If you make it a Set and initialize it as ConcurrentHashMap.newKeySet() you can omit the synchronized.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373175361", "createdAt": "2020-01-30T20:25:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -96,6 +102,18 @@ public static ThingHandler createHandler(ThingTypeUID thingTypeUid, Thing thing)\n         return null;\n     }\n \n+    public static List<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n+        synchronized (CONVERTERS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODY2Mg==", "bodyText": "You can remove that check. It was there because Arrays.toString() is expensive. port and cmd are not, because toString() is called only if the log-level is debug or higher.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373178662", "createdAt": "2020-01-30T20:32:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java", "diffHunk": "@@ -94,7 +89,11 @@ public void sendCommands(String commands) {\n                 // in case of tcp connections, the underlying socket\n                 OutputStreamWriter w = new OutputStreamWriter(initStream);\n                 for (String cmd : initCommands) {\n-                    w.write(cmd);\n+                    if (logger.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODg0Mg==", "bodyText": "please remove this empty lines", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373178842", "createdAt": "2020-01-30T20:33:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -133,9 +133,16 @@ public void handleReading(Reading reading) {\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3OTQ3Mw==", "bodyText": "Wouldn't it make sense to make this a constant?  ALL_SENSORS or something like that? This would reduce the risk of typos and should also be used in the comparisons above.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373179473", "createdAt": "2020-01-30T20:34:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -133,9 +133,16 @@ public void handleReading(Reading reading) {\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n+    \n+    \n \n     @Override\n     public Class<Reading> getReadingClass() {\n         return Reading.class;\n     }\n+\n+    @Override\n+    public String getSensorType() {\n+        return \"ALL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MTAxNw==", "bodyText": "No need to override empty methods", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373181017", "createdAt": "2020-01-30T20:38:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/revolt/RevoltSensorHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.jeelink.internal.revolt;\n+\n+import static org.openhab.binding.jeelink.internal.JeeLinkBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.openhab.binding.jeelink.internal.JeeLinkSensorHandler;\n+import org.openhab.binding.jeelink.internal.ReadingPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for a Revolt Energy Meter sensor thing.\n+ *\n+ * @author Volker Bier - Initial contribution\n+ */\n+public class RevoltSensorHandler extends JeeLinkSensorHandler<RevoltReading> {\n+    private final Logger logger = LoggerFactory.getLogger(RevoltSensorHandler.class);\n+\n+    public RevoltSensorHandler(Thing thing, String sensorType) {\n+        super(thing, sensorType);\n+    }\n+\n+    @Override\n+    public Class<RevoltReading> getReadingClass() {\n+        return RevoltReading.class;\n+    }\n+\n+    @Override\n+    public ReadingPublisher<RevoltReading> createPublisher() {\n+        ReadingPublisher<RevoltReading> publisher = new ReadingPublisher<RevoltReading>() {\n+            @Override\n+            public void publish(RevoltReading reading) {\n+                if (reading != null && getThing().getStatus() == ThingStatus.ONLINE) {\n+                    BigDecimal power = new BigDecimal(reading.getPower()).setScale(1, RoundingMode.HALF_UP);\n+                    BigDecimal powerFactor = new BigDecimal(reading.getPowerFactor()).setScale(2, RoundingMode.HALF_UP);\n+                    BigDecimal consumption = new BigDecimal(reading.getConsumption()).setScale(2, RoundingMode.HALF_UP);\n+                    BigDecimal current = new BigDecimal(reading.getCurrent()).setScale(2, RoundingMode.HALF_UP);\n+\n+                    logger.debug(\n+                            \"updating states for thing {}: power={}, powerFactor={}, consumption={}, current={}, voltage={}, frequency={} \",\n+                            getThing().getUID().getId(), power, powerFactor, consumption, current, reading.getVoltage(), reading.getFrequency());\n+\n+                    updateState(CURRENT_POWER_CHANNEL, new QuantityType<>(power, SmartHomeUnits.WATT));\n+                    updateState(POWER_FACTOR_CHANNEL, new DecimalType(powerFactor));\n+                    updateState(CONSUMPTION_CHANNEL, new QuantityType<>(consumption, SmartHomeUnits.WATT_HOUR));\n+                    updateState(ELECTRIC_CURRENT_CHANNEL, new QuantityType<>(current, SmartHomeUnits.AMPERE));\n+                    updateState(ELECTRIC_POTENTIAL_CHANNEL, new QuantityType<>(reading.getVoltage(), SmartHomeUnits.VOLT));\n+                    updateState(FREQUENCY_CHANNEL, new QuantityType<>(reading.getFrequency(), SmartHomeUnits.HERTZ));\n+                }\n+            }\n+\n+            @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ead1052bf6c83168cf92a19cd66c33543bd61ed", "author": {"user": {"login": "vbier", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/6ead1052bf6c83168cf92a19cd66c33543bd61ed", "committedDate": "2020-03-06T14:32:31Z", "message": "Address review comments.\n\nSigned-off-by: Volker Bier <volker.bier@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beccbb610f94126eac0105f573da23bdfafb5eb8", "author": {"user": {"login": "vbier", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/beccbb610f94126eac0105f573da23bdfafb5eb8", "committedDate": "2020-03-06T15:43:55Z", "message": "fix problems detected by travis.\n\n\nSigned-off-by: Volker Bier <volker.bier@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be9ba7d8245d2ed2f5acbe26b3c173d8eb1378a", "author": {"user": {"login": "vbier", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/9be9ba7d8245d2ed2f5acbe26b3c173d8eb1378a", "committedDate": "2020-03-06T17:25:35Z", "message": "address review comments.\n\nSigned-off-by: Volker Bier <volker.bier@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTI1MzA3", "url": "https://github.com/openhab/openhab-addons/pull/6746#pullrequestreview-370525307", "createdAt": "2020-03-06T18:12:39Z", "commit": {"oid": "9be9ba7d8245d2ed2f5acbe26b3c173d8eb1378a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f57060631c3b77564f9a3f5826876a062aaa416c", "author": {"user": {"login": "vbier", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/f57060631c3b77564f9a3f5826876a062aaa416c", "committedDate": "2020-03-06T18:58:13Z", "message": "fix code style problems.\n\nSigned-off-by: Volker Bier <volker.bier@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTU0ODY4", "url": "https://github.com/openhab/openhab-addons/pull/6746#pullrequestreview-370554868", "createdAt": "2020-03-06T19:00:54Z", "commit": {"oid": "f57060631c3b77564f9a3f5826876a062aaa416c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1766, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}