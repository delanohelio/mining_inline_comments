{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzAwMjEw", "number": 7503, "title": "[vigiecrues] Vigicrues binding : track river level", "bodyText": "", "createdAt": "2020-04-29T13:04:45Z", "url": "https://github.com/openhab/openhab-addons/pull/7503", "merged": true, "mergeCommit": {"oid": "d30c941f0e6e2acbc7cbc8350ddf23783f47a660"}, "closed": true, "closedAt": "2020-06-05T08:25:33Z", "author": {"login": "clinique"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccU-F2gH2gAyNDEwNzAwMjEwOmYwNGEzNTEwOGYyYThiZWJkNWU1NzZiNjc5NjA3NTQ1MzFkYTI3Yjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoOVbqAFqTQyNTA5NjMyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f04a35108f2a8bebd5e576b67960754531da27b9", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/f04a35108f2a8bebd5e576b67960754531da27b9", "committedDate": "2020-04-29T09:21:53Z", "message": "Starting Vigie Crues binding\n\nSigned-off-by: clinique <gael@lhopital.org>\n\nConflicts:\n\tbundles/org.openhab.binding.glh/src/main/java/org/openhab/binding/glh/internal/GlhBindingConstants.java\n\tbundles/org.openhab.binding.glh/src/main/java/org/openhab/binding/glh/internal/GlhHandlerFactory.java\n\tbundles/org.openhab.binding.glh/src/main/java/org/openhab/binding/glh/internal/handler/ThermostatHandler.java\n\tbundles/org.openhab.binding.glh/src/main/resources/ESH-INF/thing/thing-types.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a2b28c7db42d3394cf9220d1671462764ce84f9", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/1a2b28c7db42d3394cf9220d1671462764ce84f9", "committedDate": "2020-04-29T13:01:45Z", "message": "Initial commit of VigiCrues binding\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b79ce3754ad1800737eac34f43bdcc6348c77b52", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/b79ce3754ad1800737eac34f43bdcc6348c77b52", "committedDate": "2020-04-29T13:10:56Z", "message": "Some files forgotten\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42e2f60d02536f3914d87eed0f63771a1a8f61a7", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/42e2f60d02536f3914d87eed0f63771a1a8f61a7", "committedDate": "2020-04-29T13:48:14Z", "message": "Renaming folder\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb", "committedDate": "2020-04-29T13:57:04Z", "message": "Correcting tabs in xml file\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMzQ3MDkz", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-403347093", "createdAt": "2020-04-30T09:21:10Z", "commit": {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToyMToxMFrOGOg_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOTo0NTozN1rOGOh2wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3MzcyNQ==", "bodyText": "Could you please add a short description ?", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r417873725", "createdAt": "2020-04-30T09:21:10Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/README.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# VigiCrues Binding\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NTA3NA==", "bodyText": "VigiCrues", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r417875074", "createdAt": "2020-04-30T09:23:30Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/README.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# VigiCrues Binding\n+\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents a river level measurement station.\n+It is identified by the `id`.\n+\n+To get your station id :\n+\n+1- open https://www.vigicrues.gouv.fr/\n+\n+2- Select your region on the France map\n+\n+3- Select the station nearest to your location\n+\n+4- In the 'Info Station' tab you'll get the id just near the station name (e.g. X9999999299)\n+\n+Of course, you can add multiple Things, e.g. for getting measures for different locations.\n+\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+\n+## Binding Configuration\n+\n+The binding has no configuration options, all configuration is done at Thing level.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:\n+\n+| Parameter | Description                                                             |\n+|-----------|-------------------------------------------------------------------------|\n+| id        | Id of the station.                                                      |\n+| refresh   | Refresh interval in minutes. Optional, the default value is 30 minutes. |\n+\n+https://voiprovider.wordpress.com/2019/01/02/pyvigicrues-un-module-python-pour-collecter-les-data-des-cours-deau-en-france/\n+\n+## Channels\n+\n+The M\u00e9t\u00e9o Alerte information that are retrieved is available as these channels:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NTg0Ng==", "bodyText": "Can you please add items / sitemap examples ?", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r417875846", "createdAt": "2020-04-30T09:24:47Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/README.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# VigiCrues Binding\n+\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents a river level measurement station.\n+It is identified by the `id`.\n+\n+To get your station id :\n+\n+1- open https://www.vigicrues.gouv.fr/\n+\n+2- Select your region on the France map\n+\n+3- Select the station nearest to your location\n+\n+4- In the 'Info Station' tab you'll get the id just near the station name (e.g. X9999999299)\n+\n+Of course, you can add multiple Things, e.g. for getting measures for different locations.\n+\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+\n+## Binding Configuration\n+\n+The binding has no configuration options, all configuration is done at Thing level.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:\n+\n+| Parameter | Description                                                             |\n+|-----------|-------------------------------------------------------------------------|\n+| id        | Id of the station.                                                      |\n+| refresh   | Refresh interval in minutes. Optional, the default value is 30 minutes. |\n+\n+https://voiprovider.wordpress.com/2019/01/02/pyvigicrues-un-module-python-pour-collecter-les-data-des-cours-deau-en-france/\n+\n+## Channels\n+\n+The M\u00e9t\u00e9o Alerte information that are retrieved is available as these channels:\n+\n+| Channel ID      | Item Type                 | Description                   |\n+|-----------------|---------------------------|-------------------------------|\n+| observationTime | DateTime                  | Date and time of measurement  |\n+| flow            | Number:VolumetricFlowRate | Volume of water per time unit |\n+| height          | Number:Length             | Water height of the river     |\n+\n+\n+## Full Example", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NzA5MQ==", "bodyText": "observation-time", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r417877091", "createdAt": "2020-04-30T09:26:54Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/README.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# VigiCrues Binding\n+\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents a river level measurement station.\n+It is identified by the `id`.\n+\n+To get your station id :\n+\n+1- open https://www.vigicrues.gouv.fr/\n+\n+2- Select your region on the France map\n+\n+3- Select the station nearest to your location\n+\n+4- In the 'Info Station' tab you'll get the id just near the station name (e.g. X9999999299)\n+\n+Of course, you can add multiple Things, e.g. for getting measures for different locations.\n+\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+\n+## Binding Configuration\n+\n+The binding has no configuration options, all configuration is done at Thing level.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:\n+\n+| Parameter | Description                                                             |\n+|-----------|-------------------------------------------------------------------------|\n+| id        | Id of the station.                                                      |\n+| refresh   | Refresh interval in minutes. Optional, the default value is 30 minutes. |\n+\n+https://voiprovider.wordpress.com/2019/01/02/pyvigicrues-un-module-python-pour-collecter-les-data-des-cours-deau-en-france/\n+\n+## Channels\n+\n+The M\u00e9t\u00e9o Alerte information that are retrieved is available as these channels:\n+\n+| Channel ID      | Item Type                 | Description                   |\n+|-----------------|---------------------------|-------------------------------|\n+| observationTime | DateTime                  | Date and time of measurement  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg4MjgyOA==", "bodyText": "Put the thing OFFLINE with a COMMUNICATION_ERROR.", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r417882828", "createdAt": "2020-04-30T09:36:59Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} mn\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The VigiCrues binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+                Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+                    record.getFields().ifPresent(field -> {\n+                        field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n+                        field.getDebit()\n+                                .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n+                        field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    });\n+                });\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to VigiCrues webservice : {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg4NzkzOA==", "bodyText": "Translate to English", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r417887938", "createdAt": "2020-04-30T09:45:37Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"vigicrues\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"station\">\n+\t\t<label>Station</label>\n+\t\t<description>\n+\t\t\tProvides river level informations for this station\n+\t\t</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"height\" typeId=\"height\" />\n+\t\t\t<channel id=\"flow\" typeId=\"flow\" />\n+\t\t\t<channel id=\"observation-time\" typeId=\"observation-time\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"id\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Identifiant</label>\n+\t\t\t\t<description>Identifiant de la station</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f8c5ab635ecf083c6205a6f2fd26bfaa0afdbfb"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8743ad5e062aa3fd741c2a62172833515945d128", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/8743ad5e062aa3fd741c2a62172833515945d128", "committedDate": "2020-04-30T10:44:12Z", "message": "Code review corrections\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODIxOTEz", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-403821913", "createdAt": "2020-04-30T19:39:25Z", "commit": {"oid": "8743ad5e062aa3fd741c2a62172833515945d128"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTozOToyNVrOGO3onw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTozOToyNVrOGO3onw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0NDc2Nw==", "bodyText": "I don't understand the switch with mappings on item VC_ObservationPTS.\nCould you provide a basic example, maybe only one thing (station) and the 3 channels ?", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r418244767", "createdAt": "2020-04-30T19:39:25Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/README.md", "diffHunk": "@@ -36,24 +38,49 @@ The thing has a few configuration parameters:\n | id        | Id of the station.                                                      |\n | refresh   | Refresh interval in minutes. Optional, the default value is 30 minutes. |\n \n-https://voiprovider.wordpress.com/2019/01/02/pyvigicrues-un-module-python-pour-collecter-les-data-des-cours-deau-en-france/\n \n ## Channels\n \n-The M\u00e9t\u00e9o Alerte information that are retrieved is available as these channels:\n+The VigiCrues information that retrieved are made available with these channels:\n \n-| Channel ID      | Item Type                 | Description                   |\n-|-----------------|---------------------------|-------------------------------|\n-| observationTime | DateTime                  | Date and time of measurement  |\n-| flow            | Number:VolumetricFlowRate | Volume of water per time unit |\n-| height          | Number:Length             | Water height of the river     |\n+| Channel ID       | Item Type                 | Description                   |\n+|------------------|---------------------------|-------------------------------|\n+| observation-time | DateTime                  | Date and time of measurement  |\n+| flow             | Number:VolumetricFlowRate | Volume of water per time unit |\n+| height           | Number:Length             | Water height of the river     |\n \n \n ## Full Example\n \n vigicrues.things:\n \n ```\n-Thing vigicrues:station:poissy @ \"Station Poissy\" [id=\"H300000201\", refresh=30]\n+Thing vigicrues:station:poissy \"Station Poissy\" @ \"VigiCrues\" [id=\"H300000201\", refresh=30]\n+Thing vigicrues:station:vernon \"Station Vernon\" @ \"VigiCrues\" [id=\"H320000104\", refresh=30]\n ```\n \n+vigicrues.items:\n+\n+```\n+Group gVigiCrues \"VigiCrues\" <flow>\n+    Number:Length VC_hauteur \"Hauteur Eau Poissy [%.2f %unit%]\"  <none> (gVigiCrues) {channel=\"vigicrues:station:poissy:height\"}\n+    Number:VolumetricFlowRate VC_debit \"D\u00e9bit Eau Vernon [%.2f %unit%]\" <flow> (gVigiCrues) {channel=\"vigicrues:station:vernon:flow\"}\n+    DateTime VC_ObservationPTS \"Timestamp Poissy [%1$tH:%1$tM]\" <time> (gVigiCrues) {channel=\"vigicrues:station:poissy:observation-time\" }\n+    DateTime VC_ObservationVTS \"Timestamp Vernon [%1$tH:%1$tM]\" <time> (gVigiCrues) {channel=\"vigicrues:station:vernon:observation-time\" }\n+```\n+\n+vigicrues.sitemap:\n+\n+```\n+sitemap vigicrues label=\"VigiCrues\" {\n+    Frame {\n+        Default item=VC_hauteur\n+        Default item=VC_debit\n+    }\n+\n+    Frame {\n+        Switch item=VC_ObservationPTS mappings=[REFRESH='MAJ !']\n+        Default item=VC_ObservationVTS\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8743ad5e062aa3fd741c2a62172833515945d128"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "207e18dbb0311917b71d71e10d6b6f6e198f483f", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/207e18dbb0311917b71d71e10d6b6f6e198f483f", "committedDate": "2020-05-01T14:14:10Z", "message": "Simplified sample\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTgyNzMx", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-404182731", "createdAt": "2020-05-01T14:17:23Z", "commit": {"oid": "207e18dbb0311917b71d71e10d6b6f6e198f483f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTI0Mzg4", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-404524388", "createdAt": "2020-05-02T12:28:04Z", "commit": {"oid": "207e18dbb0311917b71d71e10d6b6f6e198f483f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjoyODowNFrOGPi26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjoyOTowMVrOGPi3Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MjkzNg==", "bodyText": "Please reduce to WARN", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r418952936", "createdAt": "2020-05-02T12:28:04Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} mn\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The VigiCrues binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+                Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+                    record.getFields().ifPresent(field -> {\n+                        field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n+                        field.getDebit()\n+                                .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n+                        field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    });\n+                });\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to VigiCrues webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.error(\"Malformed URL in VigiCrues request : {}\", queryUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207e18dbb0311917b71d71e10d6b6f6e198f483f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MzA1MA==", "bodyText": "Please add unit=\"min\"", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r418953050", "createdAt": "2020-05-02T12:29:01Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"vigicrues\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"station\">\n+\t\t<label>Station</label>\n+\t\t<description>\n+\t\t\tProvides river level informations for this station\n+\t\t</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"height\" typeId=\"height\" />\n+\t\t\t<channel id=\"flow\" typeId=\"flow\" />\n+\t\t\t<channel id=\"observation-time\" typeId=\"observation-time\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"id\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Identifiant</label>\n+\t\t\t\t<description>Id of the station</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "207e18dbb0311917b71d71e10d6b6f6e198f483f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf2cd5785f0ba72b1f8daec4a42eacf4a03188b", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/acf2cd5785f0ba72b1f8daec4a42eacf4a03188b", "committedDate": "2020-05-02T14:45:27Z", "message": "Code review\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTM2ODAz", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-404536803", "createdAt": "2020-05-02T15:25:49Z", "commit": {"oid": "acf2cd5785f0ba72b1f8daec4a42eacf4a03188b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7a34c176b59c2e4172360c633b0ffa908df6eb6", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/a7a34c176b59c2e4172360c633b0ffa908df6eb6", "committedDate": "2020-05-22T09:19:38Z", "message": "Code corrections\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjY0NTM2", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-417264536", "createdAt": "2020-05-23T09:19:50Z", "commit": {"oid": "a7a34c176b59c2e4172360c633b0ffa908df6eb6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c23f8c56f5b7389e279e171944f2b67737601e2f", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/c23f8c56f5b7389e279e171944f2b67737601e2f", "committedDate": "2020-05-24T07:54:14Z", "message": "Code review enhancement\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NDY0MDUy", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-417464052", "createdAt": "2020-05-25T05:32:44Z", "commit": {"oid": "c23f8c56f5b7389e279e171944f2b67737601e2f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTozMjo0NVrOGZ1HLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNTozMjo0NVrOGZ1HLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNzc3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n          \n          \n            \n                            record.getFields().ifPresent(field -> {\n          \n          \n            \n                                field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n          \n          \n            \n                                field.getDebit()\n          \n          \n            \n                                        .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n          \n          \n            \n                                field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n          \n          \n            \n                            });\n          \n          \n            \n                        });\n          \n          \n            \n                        Arrays.stream(apiResponse.getRecords()).findFirst()\n          \n          \n            \n                            .flatMap(record -> record.getFields()).ifPresent(field -> {\n          \n          \n            \n                                field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n          \n          \n            \n                                field.getDebit()\n          \n          \n            \n                                        .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n          \n          \n            \n                                field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n          \n          \n            \n                            });", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r429737774", "createdAt": "2020-05-25T05:32:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} mn\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The VigiCrues binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+            Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+                record.getFields().ifPresent(field -> {\n+                    field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n+                    field.getDebit()\n+                            .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n+                    field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                });\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c23f8c56f5b7389e279e171944f2b67737601e2f"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f998e1fd0aa6bec04812046721f3a094269d64", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/43f998e1fd0aa6bec04812046721f3a094269d64", "committedDate": "2020-05-25T06:57:51Z", "message": "Final review enhancement\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTAwNjky", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-417900692", "createdAt": "2020-05-25T23:34:56Z", "commit": {"oid": "43f998e1fd0aa6bec04812046721f3a094269d64"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/672c533160bdf63956d6d17bdc7845af43182bc9", "committedDate": "2020-05-27T07:57:51Z", "message": "Precode review enhancements\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzMzMzIy", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-424733322", "createdAt": "2020-06-04T18:44:46Z", "commit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo0NDo0NlrOGfTWDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOTowMjoyNFrOGfT84Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NTk4MQ==", "bodyText": "Can you use the standard markdown way of numbered lists", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435475981", "createdAt": "2020-06-04T18:44:46Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/README.md", "diffHunk": "@@ -0,0 +1,81 @@\n+# VigiCrues Binding\n+\n+This binding allows to get data regarding water flow and water height on major french rivers.\n+These data are made public through OpenDataSoft website. \n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents a river level measurement station.\n+It is identified by the `id`.\n+\n+To get your station id :\n+\n+1- open https://www.vigicrues.gouv.fr/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3Njk0Mw==", "bodyText": "I would guess French should be capitalized?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This binding allows to get data regarding water flow and water height on major french rivers.\n          \n          \n            \n            This binding allows you to get data regarding water flow and water height on major French rivers.", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435476943", "createdAt": "2020-06-04T18:46:08Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/README.md", "diffHunk": "@@ -0,0 +1,81 @@\n+# VigiCrues Binding\n+\n+This binding allows to get data regarding water flow and water height on major french rivers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzcxMg==", "bodyText": "You could make it an int, make the Non-null way more strict :-)", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435477712", "createdAt": "2020-06-04T18:47:23Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/VigiCruesConfiguration.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VigiCruesConfiguration} is the class used to match the\n+ * thing configuration.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesConfiguration {\n+    public String id = \"\";\n+    public Integer refresh = 30;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3ODQ2OQ==", "bodyText": "This call is actually not that safe it could be another refreshJob by now, could we just leave it set? Instead of null-ing a potential different job.\nI see that we do this very often and it has not much practical benefit imho.\nCC: @openhab/add-ons-maintainers", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435478469", "createdAt": "2020-06-04T18:48:53Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MjY0Mw==", "bodyText": "Wouldn't it be more pure/clear to just make this field @Nullable and check on that instead of adding a magic meaning to the field being \"\".", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435482643", "createdAt": "2020-06-04T18:56:24Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MzA4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(record -> record.getFields())\n          \n          \n            \n                        Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(record ::getFields)", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435483080", "createdAt": "2020-06-04T18:57:11Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+            Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(record -> record.getFields())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4Mzc5OA==", "bodyText": "Better just handle this instead of throwing an exception which you catch in the same method, exception handling is rather expensive.", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435483798", "createdAt": "2020-06-04T18:58:26Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NDEzMA==", "bodyText": "This catch clause would then still be needed.", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435484130", "createdAt": "2020-06-04T18:59:07Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            OpenDatasoftResponse apiResponse = gson.fromJson(response, OpenDatasoftResponse.class);\n+            Arrays.stream(apiResponse.getRecords()).findFirst().flatMap(record -> record.getFields())\n+                    .ifPresent(field -> {\n+                        field.getHauteur().ifPresent(height -> updateQuantity(HEIGHT, height, Units.METRE));\n+                        field.getDebit()\n+                                .ifPresent(flow -> updateQuantity(FLOW, flow, SmartHomeUnits.CUBICMETRE_PER_SECOND));\n+                        field.getTimestamp().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    });\n+        } catch (MalformedURLException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NDk4Mw==", "bodyText": "Given its initialized with a constant + something this could never happen so maybe you should just throw an exception which is not even caught or handled.", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435484983", "createdAt": "2020-06-04T19:00:36Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/handler/VigiCruesHandler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.handler;\n+\n+import static org.openhab.binding.vigicrues.internal.VigiCruesBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.vigicrues.internal.VigiCruesConfiguration;\n+import org.openhab.binding.vigicrues.internal.json.OpenDatasoftResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link VigiCruesHandler} is responsible for querying the API and\n+ * updating channels\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesHandler extends BaseThingHandler {\n+    private static final String URL = OPENDATASOFT_URL + \"?dataset=vigicrues&sort=timestamp&q=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private final Logger logger = LoggerFactory.getLogger(VigiCruesHandler.class);\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+    private final Gson gson;\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public VigiCruesHandler(Thing thing, TimeZoneProvider timeZoneProvider, Gson gson) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing VigiCrues handler.\");\n+\n+        VigiCruesConfiguration config = getConfigAs(VigiCruesConfiguration.class);\n+        logger.debug(\"config station = {}\", config.id);\n+        logger.debug(\"config refresh = {} min\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.id;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.MINUTES);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the VigiCrues handler.\");\n+\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        this.refreshJob = null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4Mzc5OA=="}, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTY4MQ==", "bodyText": "Could it make sense to map it to an understandable name is it just the nominalDepth?", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435485681", "createdAt": "2020-06-04T19:01:59Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/Refine.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.json;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link Refine} is the Java class used to map the JSON\n+ * response to the webservice request.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Refine {\n+    @SerializedName(\"nom_dept\")\n+    private String nomDept = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTkyMQ==", "bodyText": "Would it make sense to map these to English names :-D", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435485921", "createdAt": "2020-06-04T19:02:24Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/VigiCruesFields.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.vigicrues.internal.json;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link VigiCruesFields} is the Java class used to map the JSON\n+ * response to the webservice request.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VigiCruesFields {\n+    private @Nullable Double debit;\n+    private @Nullable Double hauteur;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "672c533160bdf63956d6d17bdc7845af43182bc9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "author": {"user": {"login": "clinique", "name": "Ga\u00ebl L'hopital"}}, "url": "https://github.com/openhab/openhab-addons/commit/e33da479e5379d07664ac3b59fe7a7a10f2f8eb2", "committedDate": "2020-06-05T07:47:09Z", "message": "Code review enhancements\n\nSigned-off-by: clinique <gael@lhopital.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDk2MjU2", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-425096256", "createdAt": "2020-06-05T08:25:02Z", "commit": {"oid": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNTowMlrOGflFhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoyNTowMlrOGflFhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc2NjY2Mw==", "bodyText": "That was not what I expected :-D", "url": "https://github.com/openhab/openhab-addons/pull/7503#discussion_r435766663", "createdAt": "2020-06-05T08:25:02Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.vigicrues/src/main/java/org/openhab/binding/vigicrues/internal/json/Refine.java", "diffHunk": "@@ -25,9 +25,9 @@\n @NonNullByDefault\n public class Refine {\n     @SerializedName(\"nom_dept\")\n-    private String nomDept = \"\";\n+    private String departmentName = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDk2MzI2", "url": "https://github.com/openhab/openhab-addons/pull/7503#pullrequestreview-425096326", "createdAt": "2020-06-05T08:25:09Z", "commit": {"oid": "e33da479e5379d07664ac3b59fe7a7a10f2f8eb2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 936, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}