{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODE5MzI1", "number": 6819, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo0Mjo0M1rODXYIQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxNTozMVrODaP7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5MTcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo0Mjo0M1rOFcpe9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDozMjoyM1rOFcpqCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDExNw==", "bodyText": "\"pass to system\" ? or \"pass to shell\" ? Not always bash.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584117", "createdAt": "2020-01-12T13:42:43Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -52,9 +53,20 @@\n  * sent to one of the channels.\n  *\n  * @author Karel Goderis - Initial contribution\n+ * @author Constantin Piber - Added better argument support (delimiter and pass to bash)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4Njk1NQ==", "bodyText": "shell, yes. In fact it's never bash, I changed that later and forgot change this header", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365586955", "createdAt": "2020-01-12T14:32:23Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -52,9 +53,20 @@\n  * sent to one of the channels.\n  *\n  * @author Karel Goderis - Initial contribution\n+ * @author Constantin Piber - Added better argument support (delimiter and pass to bash)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDExNw=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5Mjg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo0NTo0MlrOFcpflg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowMToyMlrOFeOCDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDI3OA==", "bodyText": "Eliminate the unneeded Object[] and just pass commandLine and e.getMessage().\nThis should also be a WARN instead of an ERROR.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584278", "createdAt": "2020-01-12T13:45:42Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NzAzMg==", "bodyText": "Sorry, I just copied it as it's written below...\nWhy a WARN? It's an exception and nothing gets executed, doesn't seem like \"just a warning\" to me", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365587032", "createdAt": "2020-01-12T14:33:52Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDI3OA=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMTUwMQ==", "bodyText": "WARN because that is the standard practice for logging in OH.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r367231501", "createdAt": "2020-01-16T05:01:22Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDI3OA=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5MzkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo0ODoxM1rOFcpgJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo0ODoxM1rOFcpgJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDQyMA==", "bodyText": "PatternSyntaxException", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584420", "createdAt": "2020-01-12T13:48:13Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5NTAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1MDo0N1rOFcpgtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1MDo0N1rOFcpgtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDU2Nw==", "bodyText": "The @@ case above doesn't have a corresponding output. I think this isn't useful.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584567", "createdAt": "2020-01-12T13:50:47Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5NTgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1MjozNVrOFcphGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1MjozNVrOFcphGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY2Ng==", "bodyText": "Again, no need for Object[] here.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584666", "createdAt": "2020-01-12T13:52:35Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5NTkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1Mjo0OVrOFcphJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1Mjo0OVrOFcphJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY3Nw==", "bodyText": "No need for Object[] here.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584677", "createdAt": "2020-01-12T13:52:49Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5NjAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1MzowN1rOFcphNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1MzowN1rOFcphNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDY5NA==", "bodyText": "No need for Object[] here.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584694", "createdAt": "2020-01-12T13:53:07Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5NjY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1NDowMlrOFcphiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNToxNjo1OVrOFeONMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDc3OQ==", "bodyText": "commandLine is already a String.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584779", "createdAt": "2020-01-12T13:54:02Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4Nzk5NQ==", "bodyText": "I simply wrapped what was there in this array, maybe the original author did this for a reason.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365587995", "createdAt": "2020-01-12T14:47:53Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDc3OQ=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDM1Mg==", "bodyText": "Doesn't matter what the reason was, still needs fixing.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r367234352", "createdAt": "2020-01-16T05:16:59Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDc3OQ=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5NzE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1NToyNlrOFcphzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1NToyNlrOFcphzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDg0NQ==", "bodyText": "commandLine is already a String.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584845", "createdAt": "2020-01-12T13:55:26Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5NzYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1NjowOFrOFcpiBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNToxNzozNFrOFeONjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDkwMA==", "bodyText": "This should be a WARN instead of an ERROR.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584900", "createdAt": "2020-01-12T13:56:08Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4ODAzNA==", "bodyText": "Again, nothing is executed, why a WARN then?", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365588034", "createdAt": "2020-01-12T14:48:27Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDkwMA=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzNDQ0NQ==", "bodyText": "See previous comment on logging.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r367234445", "createdAt": "2020-01-16T05:17:34Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDkwMA=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5Nzk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1NjozOFrOFcpiMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1NjozOFrOFcpiMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDk0Nw==", "bodyText": "This should be a WARN instead of an ERROR.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584947", "createdAt": "2020-01-12T13:56:38Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5ODEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1NzowMVrOFcpiRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1NzowMVrOFcpiRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NDk2NQ==", "bodyText": "No need for Object[] here.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365584965", "createdAt": "2020-01-12T13:57:01Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",\n-                            new Object[] { commandLine.toString(), e.getMessage() });\n+                            new Object[] { Arrays.asList(cmdArray), e.getMessage() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODM5ODc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxMzo1ODozMVrOFcpilg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNTowNzowMVrOFeOGSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTA0Ng==", "bodyText": "Eliminate this block.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585046", "createdAt": "2020-01-12T13:58:31Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",\n-                            new Object[] { commandLine.toString(), e.getMessage() });\n+                            new Object[] { Arrays.asList(cmdArray), e.getMessage() });\n+                    if (!didSplit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4ODA2OQ==", "bodyText": "Which block and why?", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365588069", "createdAt": "2020-01-12T14:48:58Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",\n-                            new Object[] { commandLine.toString(), e.getMessage() });\n+                            new Object[] { Arrays.asList(cmdArray), e.getMessage() });\n+                    if (!didSplit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTA0Ng=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIzMjU4Nw==", "bodyText": "The if block indicated.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r367232587", "createdAt": "2020-01-16T05:07:01Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -167,14 +178,58 @@ public void run() {\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                boolean didSplit = false;\n+                String shell = \"\";\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    didSplit = true;\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (Exception e) {\n+                        logger.error(\"An exception occurred while splitting '{}' : '{}'\",\n+                                new Object[] { commandLine.toString(), e.getMessage() });\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Sending to shell for parsing command.\");\n+                    if (Util.getOS() == Util.OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        cmdArray = new String[] {shell, \"/c\", commandLine.toString()};\n+                        logger.debug(\"OS: WINDOWS ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else if (Util.getOS() != Util.OS.UNKOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        cmdArray = new String[] {shell, \"-c\", commandLine.toString()};\n+                        logger.debug(\"OS: *NIX ({})\",\n+                                new Object[] { Util.getOSString() });\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\",\n+                                new Object[] { Util.getOSString() });\n+                        logger.error(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {\n                     logger.error(\"An exception occurred while executing '{}' : '{}'\",\n-                            new Object[] { commandLine.toString(), e.getMessage() });\n+                            new Object[] { Arrays.asList(cmdArray), e.getMessage() });\n+                    if (!didSplit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTA0Ng=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODQwMjY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDowNzozNFrOFcpkiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDowNzozNFrOFcpkiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTU0Nw==", "bodyText": "I'd recommend making these methods part of the ExecHandler class directly. If not, this class needs to be in a new file.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585547", "createdAt": "2020-01-12T14:07:34Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODQwMjg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDowNzo1MFrOFcpkoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDowNzo1MFrOFcpkoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTU2OQ==", "bodyText": "\"UNKNOWN\"", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585569", "createdAt": "2020-01-12T14:07:50Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODQwMzMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDowODozOVrOFcpk3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDowODozOVrOFcpk3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTYzMA==", "bodyText": "Recommend eliminating this comment.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585630", "createdAt": "2020-01-12T14:08:39Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODQwNDc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDoxMjowOVrOFcplnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDoxMjowOVrOFcplnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTgyMA==", "bodyText": "Recommend renaming this method to getOperatingSystemType()", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585820", "createdAt": "2020-01-12T14:12:09Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.\n+\n+    private static OS os = null;\n+\n+    public static OS getOS() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODQwNDg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDoxMjozNVrOFcplrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDoxMjozNVrOFcplrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NTgzNg==", "bodyText": "Reommend renaming this method to getOperatingSystemName()", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365585836", "createdAt": "2020-01-12T14:12:35Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -299,3 +354,41 @@ public void run() {\n     }\n \n }\n+\n+\n+/**\n+ * Contains information about which operating system openHAB is running on.\n+ * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+ *\n+ * @author Constantin Piber (for Memin) - Initial contribution\n+ */\n+class Util {\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKOWN\n+    };// Operating systems.\n+\n+    private static OS os = null;\n+\n+    public static OS getOS() {\n+        if (os == null) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOSString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODQwODYzOnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDoyMToxOFrOFcpnrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMlQxNDo0MTo0NlrOFcpsYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NjM1MQ==", "bodyText": "Don't these changes break the way lastInput is used?", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365586351", "createdAt": "2020-01-12T14:21:18Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -97,9 +109,8 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                     lastInput = command.toString();\n                     if (lastInput != null && !lastInput.equals(previousInput)) {\n                         if (getConfig().get(AUTORUN) != null && ((Boolean) getConfig().get(AUTORUN)).booleanValue()) {\n-                            lastInput = command.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NzU1NA==", "bodyText": "Here I just removed the duplicate of this lastInput = command.toString();.\nIf you mean as a whole, no. lastInput can still be used as multiple arguments if no quotes are used (in fact it's exactly the same, just that using it as one argument surrounded by quotes now works)", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r365587554", "createdAt": "2020-01-12T14:41:46Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -97,9 +109,8 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n                     lastInput = command.toString();\n                     if (lastInput != null && !lastInput.equals(previousInput)) {\n                         if (getConfig().get(AUTORUN) != null && ((Boolean) getConfig().get(AUTORUN)).booleanValue()) {\n-                            lastInput = command.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU4NjM1MQ=="}, "originalCommit": {"oid": "0b706ac448b879e1207efe2ec39d951e3f52a7a3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDUyNDU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxODo0N1rOFf5nnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoxODo0N1rOFf5nnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NDIwNQ==", "bodyText": "The commandLine has already been determined to be longer than 0, up at line 156, so this statement is not needed.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368994205", "createdAt": "2020-01-21T13:18:47Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh)) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            if (commandLine.length() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDUzNzk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyMzowNlrOFf5v2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyMzowNlrOFf5v2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NjMxMg==", "bodyText": "boolean startsWithShell = false;", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368996312", "createdAt": "2020-01-21T13:23:06Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDU0NTQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyNTo0MlrOFf50eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzoyNTo0MlrOFf50eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk5NzQ5Nw==", "bodyText": "This will fail for commands like \"shout\", \"show\", etc. Need to have a space after the shell string.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r368997497", "createdAt": "2020-01-21T13:25:42Z", "author": {"login": "9037568"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -345,6 +350,45 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = (shell.length == 0);\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b9a0434e1875df5109aca1393f08819c0fe51cb"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODQ4MjAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowODoyM1rOFhF9ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzowODoyM1rOFhF9ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NTAwMg==", "bodyText": "I have a question here: Why don't you get the operating system type once and then use the local variable in a switch-statement. Are your sure that everything other than OS.WINDOWS and OS.UNKNOWN is a supported *nix? And please add the unsupported OS-name to the warn-message logger.warn(\"OS '{}' not supported, please split commands manually!\", getOperatingSystemName());).\nEdit: I found it below. But the if-else is not very intuitive here. Please use a switch-statement.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370245002", "createdAt": "2020-01-23T17:08:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -160,21 +172,61 @@ public void run() {\n                         commandLine = String.format(commandLine, Calendar.getInstance().getTime());\n                     }\n                 } catch (IllegalFormatException e) {\n-                    logger.error(\n+                    logger.warn(\n                             \"An exception occurred while formatting the command line with the current time and input values : '{}'\",\n                             e.getMessage());\n                     updateState(RUN, OnOffType.OFF);\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                String[] shell;\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (PatternSyntaxException e) {\n+                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                                commandLine, e.getMessage());\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODQ5NTU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxMjo0NFrOFhGF6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxMjo0NFrOFhGF6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NzE0Ng==", "bodyText": "Is it necessary to catch Exception here? According to the docs there is a limited number of exceptions, I think we can omit the NPE if we make sure that none of the commands is null (which should be done anyway).", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370247146", "createdAt": "2020-01-23T17:12:44Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -160,21 +172,61 @@ public void run() {\n                         commandLine = String.format(commandLine, Calendar.getInstance().getTime());\n                     }\n                 } catch (IllegalFormatException e) {\n-                    logger.error(\n+                    logger.warn(\n                             \"An exception occurred while formatting the command line with the current time and input values : '{}'\",\n                             e.getMessage());\n                     updateState(RUN, OnOffType.OFF);\n                     return;\n                 }\n \n-                logger.trace(\"The command to be executed will be '{}'\", commandLine);\n+                String[] cmdArray;\n+                String[] shell;\n+                if (commandLine.contains(CMD_LINE_DELIMITER)) {\n+                    logger.debug(\"Splitting by '{}'\", CMD_LINE_DELIMITER);\n+                    try {\n+                        cmdArray = commandLine.split(CMD_LINE_DELIMITER);\n+                    } catch (PatternSyntaxException e) {\n+                        logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                                commandLine, e.getMessage());\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(e.getMessage()));\n+                        return;\n+                    }\n+                } else {\n+                    // Invoke shell with 'c' option and pass string\n+                    logger.debug(\"Passing to shell for parsing command.\");\n+                    if (getOperatingSystemType() == OS.WINDOWS) {\n+                        shell = SHELL_WINDOWS;\n+                        logger.debug(\"OS: WINDOWS ({})\", getOperatingSystemName());\n+                        cmdArray = createCmdArray(shell, \"/c\", commandLine);\n+                    } else if (getOperatingSystemType() != OS.UNKNOWN) {\n+                        // assume sh is present, should all be POSIX-compliant\n+                        shell = SHELL_NIX;\n+                        logger.debug(\"OS: *NIX ({})\", getOperatingSystemName());\n+                        cmdArray = createCmdArray(shell, \"-c\", commandLine);\n+                    } else {\n+                        String err = \"OS not supported, please manually split commands!\";\n+                        logger.debug(\"OS: Unknown ({})\", getOperatingSystemName());\n+                        logger.warn(err);\n+                        updateState(RUN, OnOffType.OFF);\n+                        updateState(OUTPUT, new StringType(err));\n+                        return;\n+                    }\n+                }\n+\n+                if (cmdArray.length == 0) {\n+                    logger.trace(\"Empty command received, not executing\");\n+                    return;\n+                }\n+\n+                logger.trace(\"The command to be executed will be '{}'\", Arrays.asList(cmdArray));\n \n                 Process proc = null;\n                 try {\n-                    proc = rt.exec(commandLine.toString());\n+                    proc = rt.exec(cmdArray);\n                 } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODQ5ODQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxMzozNVrOFhGHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxMzozNVrOFhGHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NzU4MQ==", "bodyText": "And this should be warn, also below. error is reserved for the framework of occasions where the stability of the system may be affected.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370247581", "createdAt": "2020-01-23T17:13:35Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -193,7 +245,7 @@ public void run() {\n                     isr.close();\n                 } catch (IOException e) {\n                     logger.error(\"An exception occurred while reading the stdout when executing '{}' : '{}'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODUwNDQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxNTozMVrOFhGLVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNTo1MzowM1rOFhwadQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw==", "bodyText": "Please run mvn spotless:apply after the code issues are done.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370248533", "createdAt": "2020-01-23T17:15:31Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -298,4 +350,76 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n-}\n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = false;\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh+\" \")) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            return new String[]{shell[0], cOption, commandLine};\n+        } else {\n+            logger.debug(\"Splitting by spaces\");\n+            try {\n+                return commandLine.split(\" \");\n+            } catch (PatternSyntaxException e) {\n+                logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                        commandLine, e.getMessage());\n+                updateState(RUN, OnOffType.OFF);\n+                updateState(OUTPUT, new StringType(e.getMessage()));\n+                return new String[] {};\n+            }\n+        }\n+    }\n+\n+\n+\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n+\n+    private static OS os = OS.NOT_SET;\n+\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKNOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOperatingSystemName() {\n+        return System.getProperty(\"os.name\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyNDI4Mw==", "bodyText": "What exactly does that do?", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370324283", "createdAt": "2020-01-23T19:56:21Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -298,4 +350,76 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n-}\n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = false;\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh+\" \")) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            return new String[]{shell[0], cOption, commandLine};\n+        } else {\n+            logger.debug(\"Splitting by spaces\");\n+            try {\n+                return commandLine.split(\" \");\n+            } catch (PatternSyntaxException e) {\n+                logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                        commandLine, e.getMessage());\n+                updateState(RUN, OnOffType.OFF);\n+                updateState(OUTPUT, new StringType(e.getMessage()));\n+                return new String[] {};\n+            }\n+        }\n+    }\n+\n+\n+\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n+\n+    private static OS os = OS.NOT_SET;\n+\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKNOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOperatingSystemName() {\n+        return System.getProperty(\"os.name\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw=="}, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyODM3Ng==", "bodyText": "Okay so it runs some more tests, I get\n[ERROR] Failed to execute goal com.diffplug.spotless:spotless-maven-plugin:1.24.3:apply (default-cli) on project org.openhab.binding.feed.tests: Execution default-cli of goal com.diffplug.spotless:spotless-maven-plugin:1.24.3:apply failed: Overlapping text edits -> [Help 1]\nWhat do I do? Can't find any info on that.\nAlso doesn't seem to by because of my changes (I didn't touch feed binding, at least I don't think)", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370328376", "createdAt": "2020-01-23T20:05:41Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -298,4 +350,76 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n-}\n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = false;\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh+\" \")) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            return new String[]{shell[0], cOption, commandLine};\n+        } else {\n+            logger.debug(\"Splitting by spaces\");\n+            try {\n+                return commandLine.split(\" \");\n+            } catch (PatternSyntaxException e) {\n+                logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                        commandLine, e.getMessage());\n+                updateState(RUN, OnOffType.OFF);\n+                updateState(OUTPUT, new StringType(e.getMessage()));\n+                return new String[] {};\n+            }\n+        }\n+    }\n+\n+\n+\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n+\n+    private static OS os = OS.NOT_SET;\n+\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKNOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOperatingSystemName() {\n+        return System.getProperty(\"os.name\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw=="}, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyMjczMA==", "bodyText": "@J-N-K", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370922730", "createdAt": "2020-01-25T08:58:03Z", "author": {"login": "cpiber"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -298,4 +350,76 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n-}\n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = false;\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh+\" \")) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            return new String[]{shell[0], cOption, commandLine};\n+        } else {\n+            logger.debug(\"Splitting by spaces\");\n+            try {\n+                return commandLine.split(\" \");\n+            } catch (PatternSyntaxException e) {\n+                logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                        commandLine, e.getMessage());\n+                updateState(RUN, OnOffType.OFF);\n+                updateState(OUTPUT, new StringType(e.getMessage()));\n+                return new String[] {};\n+            }\n+        }\n+    }\n+\n+\n+\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n+\n+    private static OS os = OS.NOT_SET;\n+\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKNOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOperatingSystemName() {\n+        return System.getProperty(\"os.name\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw=="}, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0MDUzMw==", "bodyText": "Reset the changes in other bindings and use mvn spotless:apply -pl bundles\\org.openhab.binding.exec to only re-format the exec binding.", "url": "https://github.com/openhab/openhab-addons/pull/6819#discussion_r370940533", "createdAt": "2020-01-25T15:53:03Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.exec/src/main/java/org/openhab/binding/exec/internal/handler/ExecHandler.java", "diffHunk": "@@ -298,4 +350,76 @@ public void run() {\n         return new String[] { type, pattern };\n     }\n \n-}\n+    /**\n+     * Transforms the command string into an array.\n+     * Either invokes the shell and passes using the \"c\" option\n+     * or (if command already starts with one of the shells) splits by space.\n+     *\n+     * @param shell (path), picks to first one to execute the command\n+     * @param \"c\"-option string\n+     * @param command to execute\n+     * @return command array\n+     */\n+    protected String[] createCmdArray(String[] shell, String cOption, String commandLine) {\n+        boolean startsWithShell = false;\n+        for (String sh : shell) {\n+            if (commandLine.startsWith(sh+\" \")) {\n+                startsWithShell = true;\n+                break;\n+            }\n+        }\n+\n+        if (!startsWithShell) {\n+            return new String[]{shell[0], cOption, commandLine};\n+        } else {\n+            logger.debug(\"Splitting by spaces\");\n+            try {\n+                return commandLine.split(\" \");\n+            } catch (PatternSyntaxException e) {\n+                logger.warn(\"An exception occurred while splitting '{}' : '{}'\",\n+                        commandLine, e.getMessage());\n+                updateState(RUN, OnOffType.OFF);\n+                updateState(OUTPUT, new StringType(e.getMessage()));\n+                return new String[] {};\n+            }\n+        }\n+    }\n+\n+\n+\n+    /**\n+     * Contains information about which operating system openHAB is running on.\n+     * Found on https://stackoverflow.com/a/31547504/7508309, slightly modified\n+     *\n+     * @author Constantin Piber (for Memin) - Initial contribution\n+     */\n+    public enum OS {\n+        WINDOWS, LINUX, MAC, SOLARIS, UNKNOWN, NOT_SET\n+    };\n+\n+    private static OS os = OS.NOT_SET;\n+\n+    public static OS getOperatingSystemType() {\n+        if (os == OS.NOT_SET) {\n+            String operSys = System.getProperty(\"os.name\").toLowerCase();\n+            if (operSys.contains(\"win\")) {\n+                os = OS.WINDOWS;\n+            } else if (operSys.contains(\"nix\") || operSys.contains(\"nux\")\n+                    || operSys.contains(\"aix\")) {\n+                os = OS.LINUX;\n+            } else if (operSys.contains(\"mac\")) {\n+                os = OS.MAC;\n+            } else if (operSys.contains(\"sunos\")) {\n+                os = OS.SOLARIS;\n+            } else {\n+                os = OS.UNKNOWN;\n+            }\n+        }\n+        return os;\n+    }\n+\n+    public static String getOperatingSystemName() {\n+        return System.getProperty(\"os.name\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0ODUzMw=="}, "originalCommit": {"oid": "44cc86811d333b92299db8acbdf5c5bc27b68bf4"}, "originalPosition": 232}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1063, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}