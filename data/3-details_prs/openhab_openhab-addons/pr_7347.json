{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjY2MTEw", "number": 7347, "title": "[insteon] Improve hub message processing", "bodyText": "Improved message processing in draining the current buffer fully when a bad error message exception is triggered. Currently, when multiple messages are received at the same time and, in the event the first one has corrupted data, the subsequent messages aren't processed until new data is available in the modem buffer. This can lead to a few seconds up to a minute delay in processing these messages.\n\n\nImproved hub cleared and wrap around buffer messages parsing, reducing further the amount of potential bad data received errors, based on the python module implementation.\n\n\nRemoved the unnecessary buffer clear request on each write calls, since sending a command to the hub implies the buffer will be cleared at that time.\n\n\nAdded an undocumented message code that my hub sent out every once in a while, generating some unnecessary unknown command code errors.", "createdAt": "2020-04-12T00:25:05Z", "url": "https://github.com/openhab/openhab-addons/pull/7347", "merged": true, "mergeCommit": {"oid": "7ba2503651a8a34f121a97621dbb9c35b8b6526d"}, "closed": true, "closedAt": "2020-04-13T16:48:57Z", "author": {"login": "jsetton"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWyRDpAFqTM5MTgxOTEwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXRxL3gFqTM5MjI3MTA2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODE5MTAx", "url": "https://github.com/openhab/openhab-addons/pull/7347#pullrequestreview-391819101", "createdAt": "2020-04-12T03:46:22Z", "commit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMzo0NjoyM1rOGER7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNDowNTo1OFrOGESA2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MTM3MA==", "bodyText": "You aren't going to log this message anymore?", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407141370", "createdAt": "2020-04-12T03:46:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/Port.java", "diffHunk": "@@ -300,21 +300,23 @@ public void run() {\n         }\n \n         private void processMessages() {\n-            try {\n-                // must call processData() until we get a null pointer back\n-                for (Msg m = msgFactory.processData(); m != null; m = msgFactory.processData()) {\n-                    toAllListeners(m);\n-                    notifyWriter(m);\n-                }\n-            } catch (IOException e) {\n-                // got bad data from modem,\n-                // unblock those waiting for ack\n-                logger.warn(\"bad data received: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI1OA==", "bodyText": "Is there any way to prevent calling getHexByte if it wouldn't be logged anyway? Maybe call it inside the bail method?", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142258", "createdAt": "2020-04-12T04:00:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -93,44 +108,48 @@ public void addData(byte[] data, int len) {\n         // Now see if we have enough data for a complete message.\n         // If not, we return null, and expect this method to be called again\n         // when more data has come in.\n-        int msgLen = -1;\n-        boolean isExtended = false;\n         if (end > 1) {\n             // we have some data, but do we have enough to read the entire header?\n             int headerLength = Msg.getHeaderLength(buf[1]);\n-            isExtended = Msg.isExtended(buf, end, headerLength);\n+            boolean isExtended = Msg.isExtended(buf, end, headerLength);\n             logger.trace(\"header length expected: {} extended: {}\", headerLength, isExtended);\n             if (headerLength < 0) {\n                 removeFromBuffer(1); // get rid of the leading 0x02 so draining works\n-                bail(\"got unknown command code \" + Utils.getHexByte(buf[1]));\n+                bail(\"got unknown command code \" + Utils.getHexByte(buf[0]));\n             } else if (headerLength >= 2) {\n                 if (end >= headerLength) {\n                     // only when the header is complete do we know that isExtended is correct!\n-                    msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    int msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    logger.trace(\"msgLen expected: {}\", msgLen);\n                     if (msgLen < 0) {\n                         // Cannot make sense out of the combined command code & isExtended flag.\n                         removeFromBuffer(1);\n-                        bail(\"unknown command code/ext flag: \" + Utils.getHexByte(buf[1]));\n+                        bail(\"got unknown command code/ext flag \" + Utils.getHexByte(buf[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI3MA==", "bodyText": "please fix the indentation.", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142270", "createdAt": "2020-04-12T04:00:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -56,9 +66,13 @@ public MsgFactory() {\n     public void addData(byte[] data, int len) {\n         int l = len;\n         if (l + end > MAX_MSG_LEN) {\n-            logger.warn(\"warn: truncating excessively long message!\");\n+            logger.warn(\"truncating excessively long message!\");\n             l = MAX_MSG_LEN - end;\n         }\n+        // indicate new data can be processed if length > 0\n+        if (l > 0) {\n+          done = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjYxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));\n          \n          \n            \n                    if(logger.isTraceEnabled()){\n          \n          \n            \n                        logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));\n          \n          \n            \n                    }", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142618", "createdAt": "2020-04-12T04:05:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -93,44 +108,48 @@ public void addData(byte[] data, int len) {\n         // Now see if we have enough data for a complete message.\n         // If not, we return null, and expect this method to be called again\n         // when more data has come in.\n-        int msgLen = -1;\n-        boolean isExtended = false;\n         if (end > 1) {\n             // we have some data, but do we have enough to read the entire header?\n             int headerLength = Msg.getHeaderLength(buf[1]);\n-            isExtended = Msg.isExtended(buf, end, headerLength);\n+            boolean isExtended = Msg.isExtended(buf, end, headerLength);\n             logger.trace(\"header length expected: {} extended: {}\", headerLength, isExtended);\n             if (headerLength < 0) {\n                 removeFromBuffer(1); // get rid of the leading 0x02 so draining works\n-                bail(\"got unknown command code \" + Utils.getHexByte(buf[1]));\n+                bail(\"got unknown command code \" + Utils.getHexByte(buf[0]));\n             } else if (headerLength >= 2) {\n                 if (end >= headerLength) {\n                     // only when the header is complete do we know that isExtended is correct!\n-                    msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    int msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    logger.trace(\"msgLen expected: {}\", msgLen);\n                     if (msgLen < 0) {\n                         // Cannot make sense out of the combined command code & isExtended flag.\n                         removeFromBuffer(1);\n-                        bail(\"unknown command code/ext flag: \" + Utils.getHexByte(buf[1]));\n+                        bail(\"got unknown command code/ext flag \" + Utils.getHexByte(buf[0]));\n+                    } else if (msgLen > 0) {\n+                        if (end >= msgLen) {\n+                            msg = Msg.createMessage(buf, msgLen, isExtended);\n+                            removeFromBuffer(msgLen);\n+                        }\n+                    } else { // should never happen\n+                        logger.warn(\"invalid message length, internal error!\");\n                     }\n                 }\n             } else { // should never happen\n                 logger.warn(\"invalid header length, internal error!\");\n-                msgLen = -1;\n             }\n         }\n-        logger.trace(\"msgLen expected: {}\", msgLen);\n-        Msg msg = null;\n-        if (msgLen > 0 && end >= msgLen) {\n-            msg = Msg.createMessage(buf, msgLen, isExtended);\n-            removeFromBuffer(msgLen);\n+        // indicate no more messages available in buffer if empty or undefined message\n+        if (end == 0 || msg == null) {\n+            logger.trace(\"done processing current buffer data\");\n+            done = true;\n         }\n         logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "859aab3b3cce0cdb572013ffc4ab1c0501fbb8e0", "author": {"user": {"login": "jsetton", "name": "Jeremy"}}, "url": "https://github.com/openhab/openhab-addons/commit/859aab3b3cce0cdb572013ffc4ab1c0501fbb8e0", "committedDate": "2020-04-12T07:41:39Z", "message": "improved message processing\n\nSigned-off-by: jsetton <jeremy.setton@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e548f46ef78191ac3846280dafc80d8f456a7a5d", "author": {"user": {"login": "jsetton", "name": "Jeremy"}}, "url": "https://github.com/openhab/openhab-addons/commit/e548f46ef78191ac3846280dafc80d8f456a7a5d", "committedDate": "2020-04-12T07:41:54Z", "message": "added undocumented 0x5c message code definition\n\nSigned-off-by: jsetton <jeremy.setton@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1", "author": {"user": {"login": "jsetton", "name": "Jeremy"}}, "url": "https://github.com/openhab/openhab-addons/commit/3bd1fde7518a1e879104b4c8bf63309c4e76b7d1", "committedDate": "2020-04-11T23:25:50Z", "message": "added undocumented 0x5c message code definition\n\nSigned-off-by: jsetton <jeremy.setton@gmail.com>"}, "afterCommit": {"oid": "e548f46ef78191ac3846280dafc80d8f456a7a5d", "author": {"user": {"login": "jsetton", "name": "Jeremy"}}, "url": "https://github.com/openhab/openhab-addons/commit/e548f46ef78191ac3846280dafc80d8f456a7a5d", "committedDate": "2020-04-12T07:41:54Z", "message": "added undocumented 0x5c message code definition\n\nSigned-off-by: jsetton <jeremy.setton@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTk3NDA5", "url": "https://github.com/openhab/openhab-addons/pull/7347#pullrequestreview-392197409", "createdAt": "2020-04-13T14:56:40Z", "commit": {"oid": "e548f46ef78191ac3846280dafc80d8f456a7a5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjcxMDY2", "url": "https://github.com/openhab/openhab-addons/pull/7347#pullrequestreview-392271066", "createdAt": "2020-04-13T16:48:27Z", "commit": {"oid": "e548f46ef78191ac3846280dafc80d8f456a7a5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1054, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}