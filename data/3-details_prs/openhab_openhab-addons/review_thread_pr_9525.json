{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1NjQxNzg2", "number": 9525, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzo0MTozN1rOFJtEuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODoyOToxNlrOFJtqEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzE5OTkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwNzo0MTozN1rOIMJCUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMjo0MDoyM1rOIMOZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYwMTg3Mw==", "bodyText": "There might be a small chance to miss device(s) if new is registered between getRemoteDevices loop and addListener.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549601873", "createdAt": "2020-12-29T07:41:37Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -155,9 +145,13 @@ public void initialize() {\n \n         configuration = getConfigAs(SamsungTvConfiguration.class);\n \n-        discoveryServiceRegistry.addDiscoveryListener(this);\n+        // One Samsung TV contains several UPnP devices. Create handler for each UPnP device.\n+        for (RemoteDevice device : upnpService.getRegistry().getRemoteDevices()) {\n+            remoteDeviceAdded(null, device);\n+        }\n+        upnpService.getRegistry().addListener(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY4OTcxNg==", "bodyText": "Addressed.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549689716", "createdAt": "2020-12-29T12:40:23Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -155,9 +145,13 @@ public void initialize() {\n \n         configuration = getConfigAs(SamsungTvConfiguration.class);\n \n-        discoveryServiceRegistry.addDiscoveryListener(this);\n+        // One Samsung TV contains several UPnP devices. Create handler for each UPnP device.\n+        for (RemoteDevice device : upnpService.getRegistry().getRemoteDevices()) {\n+            remoteDeviceAdded(null, device);\n+        }\n+        upnpService.getRegistry().addListener(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYwMTg3Mw=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzI5NTU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "isResolved": false, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODoyOToxNlrOIMJ23g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wMVQyMjo0MDoyNlrOINTGcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg==", "bodyText": "Some of the Samsung TV models have a faulty UPnP implementation as they don't publish SSDP alive message as they have promised and jUPnP library might make a decision to remove the device. If device is a MediaRenderer device, shutdown now remove all samsung tv related UPnP services and they might not come back as remoteDeviceAdded is not called by the UPnP library for those removed services. Earlier checkAndCreateServices was called which created all related services.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549615326", "createdAt": "2020-12-29T08:29:16Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY4OTUwNA==", "bodyText": "What's your suggestion on what to do here then? Instead of doing shutdown/offline call checkCreateManualConnection? Or simply ignore that call and assume that services are still available?\nWhy is it different to the previous thingRemoved being called by the UPnPDiscoveryService when the UPnP service disappears from JUPnP?", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549689504", "createdAt": "2020-12-29T12:39:33Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcwMTUzOA==", "bodyText": "When remoteDeviceAdded is called for MediaRenderer devices, binding could try to create all related services like it was done earlier by checkAndCreateServices.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549701538", "createdAt": "2020-12-29T13:18:27Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNzE5Mw==", "bodyText": "Why should it try to create services, if all are still there?\nAnd please for me to understand: Why is it different to the previous thingRemoved being called by the UPnPDiscoveryService when the UPnP service disappears from JUPnP?", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549727193", "createdAt": "2020-12-29T14:36:27Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc1NTA5OQ==", "bodyText": "ThingRemoved is not the issue, but the thingDiscovered.\n\nSamsung TV binding is up and running (MediaRenderer service and e.g. MainTV service are up)\nMediaRenderer device disappears, so JUPnP library calls thingRemoved for MediaRenderer device.\nDuring thingRemoved method, binding remove all services (MediaRenderer and MainTV) by shutdown method.\nMediaRenderer device is discovered again and remoteDeviceAdded is called.\nBinding creates MediaRenderer service.\nMainTV service is missing", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549755099", "createdAt": "2020-12-29T15:53:41Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2MjM4OA==", "bodyText": "I'm not using Samsung TV binding my self at the moment as I have separated VLAN's and Samsung TV doesn't allow communication from another network. Some users have been stated  that 2.4 version have been working very reliable.\nhttps://github.com/openhab/openhab2-addons/blob/2.4.0/addons/binding/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java\n2.4 binding implemented both DiscoveryListener and RegistryListener.\nthingDiscovered -> create all available services\nthingRemoved -> shutdown all services\nremoteDeviceAdded -> create discovered service", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549762388", "createdAt": "2020-12-29T16:14:14Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTc2NDMzOQ==", "bodyText": "users have been stated that 2.4 version have been working very reliable\n\nYup, 2.4 RC1 is very stable.  I tried to work with folks on this earlier this year to get 2.5 version to work which introduces new Samsung TV models.   I even put up a bounty to fix this . . .\nBest, Jay", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r549764339", "createdAt": "2020-12-29T16:19:28Z", "author": {"login": "jaywiseman1971"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE0NTQ1NQ==", "bodyText": "ThingRemoved is not the issue, but the thingDiscovered.\n\nSorry, but I still do not understand. Do you refer to this PR or about an issue that already exists in the current 2.5/3.0 code base?\nNote that this PR only tries to fix the issue that the binding currently causes deadlocks that affect other bindings and the core runtime as a whole.\nIf there are issues to solve with unreliable TV detection due to the handling of SSDP messages (or their non-existence due to buggy TVs), please let us discuss those in a different issue.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r550145455", "createdAt": "2020-12-30T11:01:45Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE3MzI3NA==", "bodyText": "Do you refer to this PR\n\nYes\n\nNote that this PR only tries to fix the issue that the binding currently causes deadlocks that affect other bindings and the core runtime as a whole.\n\nYes I know, but this PR also change the behaviour of the binding, which I think might cause some issues.\nLet's try one more time\nOn master, thingDiscovered method calls checkAndCreateServices (line 362), which will go throw all existing UPnP devices and create all necessary Samsung tv services.\n\n  \n    \n      openhab-addons/bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java\n    \n    \n        Lines 333 to 364\n      in\n      f9b7632\n    \n    \n    \n    \n\n        \n          \n               public void thingDiscovered(DiscoveryService source, DiscoveryResult result) { \n        \n\n        \n          \n                   if (configuration.hostName != null \n        \n\n        \n          \n                           && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) { \n        \n\n        \n          \n                       logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME), \n        \n\n        \n          \n                               result); \n        \n\n        \n          \n            \n        \n\n        \n          \n                       /* Check if configuration should be updated */ \n        \n\n        \n          \n                       if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) { \n        \n\n        \n          \n                           String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName); \n        \n\n        \n          \n                           if (macAddress != null) { \n        \n\n        \n          \n                               putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress); \n        \n\n        \n          \n                               logger.debug(\"thingDiscovered, macAddress: {}\", macAddress); \n        \n\n        \n          \n                           } \n        \n\n        \n          \n                       } \n        \n\n        \n          \n                       if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) { \n        \n\n        \n          \n                           Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName); \n        \n\n        \n          \n                           for (Map.Entry<String, Object> property : properties.entrySet()) { \n        \n\n        \n          \n                               putConfig(property.getKey(), property.getValue()); \n        \n\n        \n          \n                               logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue()); \n        \n\n        \n          \n                           } \n        \n\n        \n          \n                       } \n        \n\n        \n          \n            \n        \n\n        \n          \n                       /* \n        \n\n        \n          \n                        * SamsungTV discovery services creates thing UID from UPnP UDN. \n        \n\n        \n          \n                        * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g. \n        \n\n        \n          \n                        * thingRemoved). \n        \n\n        \n          \n                        */ \n        \n\n        \n          \n                       upnpThingUID = result.getThingUID(); \n        \n\n        \n          \n                       logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID); \n        \n\n        \n          \n                       checkAndCreateServices(); \n        \n\n        \n          \n                   } \n        \n\n        \n          \n               } \n        \n    \n  \n\n\n\n  \n    \n      openhab-addons/bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java\n    \n    \n        Lines 246 to 254\n      in\n      f9b7632\n    \n    \n    \n    \n\n        \n          \n           private void checkAndCreateServices() { \n        \n\n        \n          \n               logger.debug(\"Check and create missing UPnP services\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n               for (Device<?, ?, ?> device : upnpService.getRegistry().getDevices()) { \n        \n\n        \n          \n                   createService((RemoteDevice) device); \n        \n\n        \n          \n               } \n        \n\n        \n          \n            \n        \n\n        \n          \n               checkCreateManualConnection(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nAll Samsung tv related services are removed in thingRemoved method when service is MediaRenderer device\n\n  \n    \n      openhab-addons/bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java\n    \n    \n        Lines 367 to 373\n      in\n      f9b7632\n    \n    \n    \n    \n\n        \n          \n           public void thingRemoved(DiscoveryService source, ThingUID thingUID) { \n        \n\n        \n          \n               if (thingUID.equals(upnpThingUID)) { \n        \n\n        \n          \n                   logger.debug(\"Thing Removed: {}\", thingUID); \n        \n\n        \n          \n                   shutdown(); \n        \n\n        \n          \n                   putOffline(); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\n  \n    \n      openhab-addons/bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java\n    \n    \n        Lines 183 to 189\n      in\n      f9b7632\n    \n    \n    \n    \n\n        \n          \n           private void shutdown() { \n        \n\n        \n          \n               logger.debug(\"Shutdown all Samsung services\"); \n        \n\n        \n          \n               for (SamsungTvService service : services) { \n        \n\n        \n          \n                   stopService(service); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               services.clear(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nIn this PR, thingDiscovered and thingRemoved are removed and it fully relie to UPnP events (remoteDeviceAdded and remoteDeviceRemoved). When remoteDeviceRemoved is done for MediaRenderer device, it shutdown all existing services, but remoteDeviceAdded does only create service which was found, so following could happen\n\nSamsung TV binding is up and running (MediaRenderer service and e.g. MainTV service are up)\nMediaRenderer device disappears, so JUPnP library calls remoteDeviceRemoved for MediaRenderer device.\nremoteDeviceRemoved method remove all services (MediaRenderer and MainTV) by shutdown method.\nMediaRenderer device is discovered again and remoteDeviceAdded method is called.\nBinding creates MediaRenderer service.\nMainTV service is still missing, so only half of the binding features are working\n\nSo, when MediaRenderer device is added, binding should check and create all Samsung TV related services (then it match equally the master branch functionality) or remoteDeviceAdded should not shutdown all services, but only service which was removed.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r550173274", "createdAt": "2020-12-30T12:11:12Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4NjA0Ng==", "bodyText": "Let's try one more time\n\nThanks a lot for your patience with me. \ud83d\ude4f\n\nOn master, thingDiscovered method calls checkAndCreateServices (line 362), which will go throw all existing UPnP devices and create all necessary Samsung tv services.\n\nSo if I understand correctly, this is exactly the feature you are missing now with that PR, right? My confusion might come from the fact that we are discussing this in the remoteDeviceRemoved method.\n\nAll Samsung tv related services are removed in thingRemoved method\n\nYes, that's what I referred to above - it is the very same as what happens in the code of this PR, that's why I couldn't see any problem with the remoteDeviceRemoved method.\n\nSo, when MediaRenderer device is added, binding should check and create all Samsung TV related services\n\nThat should be easy to do in the remoteDeviceAdded method then. But it still is not clear to me why this solves the problem you mentioned initially: \"they don't publish SSDP alive message\". If there are no SSDP messages, we will only see a call to remoteDeviceRemoved, which falsely takes the Thing OFFLINE, but will never see a call to remoteDeviceAdded, which would bring it back ONLINE again. That's why I am confused on what should be done.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r550186046", "createdAt": "2020-12-30T12:56:40Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MzUwMw==", "bodyText": "I didn't say that TV don't publish SSDP alive messages at all, but not like they have promised (max-age for advertisement), so UPnP library think that service is offline and then suddenly TV send the advertisement. Behaviour seems to be also service specific and that's why there are many questions on the forum like yesterday day everything worked fine and today I can change the volume but not the channel. Which of course is weird from user perspective as they don't understand that TV contains multiple UPnP services and each service support different features.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r550253503", "createdAt": "2020-12-30T16:32:49Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI2NDAzNQ==", "bodyText": "Few years ago, I tried to find solution for this and found following from Cling page, but I never found time to test it. It will impact to all UPnP devices and binding, but maybe something clever could implemented to OH side or JUPnP.\nhttp://4thline.org/projects/cling/core/manual/cling-core-manual.xhtml#section.RemoteMaxAge\nAnyhow, idea was to increase the max age or disable it and then manually but thing offline state if several consecutive queries fails (TV power is OFF).", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r550264035", "createdAt": "2020-12-30T17:07:16Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDgxNTM0NQ==", "bodyText": "Ok, thanks again @paulianttila.\nI have now reverted everything from #7499 that was not directly related to replacing thing discovery methods by upnp device discovery methods.\nThis leaves the code hopefully working exactly the same way as before, while still not causing deadlocks anymore caused by the discovery listener registration.", "url": "https://github.com/openhab/openhab-addons/pull/9525#discussion_r550815345", "createdAt": "2021-01-01T22:40:26Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.samsungtv/src/main/java/org/openhab/binding/samsungtv/internal/handler/SamsungTvHandler.java", "diffHunk": "@@ -330,52 +305,84 @@ private synchronized void stopService(SamsungTvService service) {\n     }\n \n     @Override\n-    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {\n-        if (configuration.hostName != null\n-                && configuration.hostName.equals(result.getProperties().get(SamsungTvConfiguration.HOST_NAME))) {\n-            logger.debug(\"thingDiscovered: {}, {}\", result.getProperties().get(SamsungTvConfiguration.HOST_NAME),\n-                    result);\n+    public void remoteDeviceDiscoveryStarted(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceDiscoveryFailed(@Nullable Registry registry, @Nullable RemoteDevice device,\n+            @Nullable Exception ex) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceAdded(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceAdded: {}, {}\", device.getType().getType(), device.getIdentity().getDescriptorURL());\n+\n+        createService(device);\n+        putOnline();\n \n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             /* Check if configuration should be updated */\n             if (configuration.macAddress == null || configuration.macAddress.trim().isEmpty()) {\n                 String macAddress = WakeOnLanUtility.getMACAddress(configuration.hostName);\n                 if (macAddress != null) {\n                     putConfig(SamsungTvConfiguration.MAC_ADDRESS, macAddress);\n-                    logger.debug(\"thingDiscovered, macAddress: {}\", macAddress);\n+                    logger.debug(\"remoteDeviceAdded, macAddress: {}\", macAddress);\n                 }\n             }\n             if (SamsungTvConfiguration.PROTOCOL_NONE.equals(configuration.protocol)) {\n                 Map<String, Object> properties = RemoteControllerService.discover(configuration.hostName);\n                 for (Map.Entry<String, Object> property : properties.entrySet()) {\n                     putConfig(property.getKey(), property.getValue());\n-                    logger.debug(\"thingDiscovered, {}: {}\", property.getKey(), property.getValue());\n+                    logger.debug(\"remoteDeviceAdded, {}: {}\", property.getKey(), property.getValue());\n                 }\n             }\n-\n-            /*\n-             * SamsungTV discovery services creates thing UID from UPnP UDN.\n-             * When thing is generated manually, thing UID may not match UPnP UDN, so store it for later use (e.g.\n-             * thingRemoved).\n-             */\n-            upnpThingUID = result.getThingUID();\n-            logger.debug(\"thingDiscovered, thingUID={}, discoveredUID={}\", this.getThing().getUID(), upnpThingUID);\n-            checkAndCreateServices();\n+            checkCreateManualConnection();\n         }\n     }\n \n     @Override\n-    public void thingRemoved(DiscoveryService source, ThingUID thingUID) {\n-        if (thingUID.equals(upnpThingUID)) {\n-            logger.debug(\"Thing Removed: {}\", thingUID);\n+    public void remoteDeviceUpdated(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+    }\n+\n+    @Override\n+    public void remoteDeviceRemoved(@Nullable Registry registry, @Nullable RemoteDevice device) {\n+        if (configuration.hostName == null || device == null || device.getIdentity() == null\n+                || device.getIdentity().getDescriptorURL() == null\n+                || !configuration.hostName.equals(device.getIdentity().getDescriptorURL().getHost())\n+                || device.getType() == null) {\n+            return;\n+        }\n+\n+        logger.debug(\"remoteDeviceRemoved: {}, {}\", device.getType().getType(),\n+                device.getIdentity().getDescriptorURL());\n+\n+        if (\"MediaRenderer\".equals(device.getType().getType())) {\n             shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxNTMyNg=="}, "originalCommit": {"oid": "4a6aabcab40ac22b1f5729f12a30f9c6c461c99b"}, "originalPosition": 260}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3548, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}