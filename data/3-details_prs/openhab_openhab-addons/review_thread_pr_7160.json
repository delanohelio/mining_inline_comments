{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MjMzODY5", "number": 7160, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyMTo0MlrODoDzbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyMjoyMlrODoDzjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMxOTUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/SimpleStopWatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyMTo0MlrOF2aKPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwOTo1MjoxNVrOF2d7pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjAyOQ==", "bodyText": "why Throwable instead of ModbusException?", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392596029", "createdAt": "2020-03-14T15:21:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/SimpleStopWatch.java", "diffHunk": "@@ -38,8 +36,8 @@\n     }\n \n     @FunctionalInterface\n-    public abstract interface RunnableWithModbusException {\n-        public abstract void run() throws ModbusException;\n+    public abstract interface RunnableWithException<T extends Throwable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5312790fe3da36f2e8e3ab5ad05794896970674"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1NzgyOQ==", "bodyText": "This made me look this a bit closer. The whole change with this interface with generic exception is unnecessary -- was related to a version of the code when I was working on this PR.\nRemoved the generics now, which means that there is actually no diff to SimpleStopWatch.java at all.", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392657829", "createdAt": "2020-03-15T09:52:15Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/SimpleStopWatch.java", "diffHunk": "@@ -38,8 +36,8 @@\n     }\n \n     @FunctionalInterface\n-    public abstract interface RunnableWithModbusException {\n-        public abstract void run() throws ModbusException;\n+    public abstract interface RunnableWithException<T extends Throwable> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjAyOQ=="}, "originalCommit": {"oid": "a5312790fe3da36f2e8e3ab5ad05794896970674"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMxOTU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyMTo0NlrOF2aKQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwOTo1MDoxOFrOF2d7Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjAzMw==", "bodyText": "If you are going to include javadocs at least fill them out. Or get rid of the javadocs....", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392596033", "createdAt": "2020-03-14T15:21:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java", "diffHunk": "@@ -125,15 +135,53 @@ public void accept(AggregateStopWatch timer, T task, ModbusSlaveConnection conne\n         // Compare request and response transaction ID. NOTE: ModbusTransaction.getTransactionID() is static and\n         // not safe to use\n         if ((response.getTransactionID() != libRequest.getTransactionID()) && !response.isHeadless()) {\n-            logger.warn(\n-                    \"Transaction id of the response ({}) does not match request ({}) {}. Endpoint {}. Ignoring response. [operation ID {}]\",\n-                    response.getTransactionID(), libRequest.getTransactionID(), task.getRequest(), task.getEndpoint(),\n-                    operationId);\n             throw new ModbusUnexpectedTransactionIdException(libRequest.getTransactionID(),\n                     response.getTransactionID());\n         }\n     }\n \n+    /**\n+     * Check that function code of the response and request match\n+     *\n+     * @param response\n+     * @param libRequest\n+     * @param task\n+     * @param operationId\n+     * @throws ModbusUnexpectedTransactionIdException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5312790fe3da36f2e8e3ab5ad05794896970674"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1NzY3MA==", "bodyText": "You are right, added explanations.", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392657670", "createdAt": "2020-03-15T09:50:18Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java", "diffHunk": "@@ -125,15 +135,53 @@ public void accept(AggregateStopWatch timer, T task, ModbusSlaveConnection conne\n         // Compare request and response transaction ID. NOTE: ModbusTransaction.getTransactionID() is static and\n         // not safe to use\n         if ((response.getTransactionID() != libRequest.getTransactionID()) && !response.isHeadless()) {\n-            logger.warn(\n-                    \"Transaction id of the response ({}) does not match request ({}) {}. Endpoint {}. Ignoring response. [operation ID {}]\",\n-                    response.getTransactionID(), libRequest.getTransactionID(), task.getRequest(), task.getEndpoint(),\n-                    operationId);\n             throw new ModbusUnexpectedTransactionIdException(libRequest.getTransactionID(),\n                     response.getTransactionID());\n         }\n     }\n \n+    /**\n+     * Check that function code of the response and request match\n+     *\n+     * @param response\n+     * @param libRequest\n+     * @param task\n+     * @param operationId\n+     * @throws ModbusUnexpectedTransactionIdException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjAzMw=="}, "originalCommit": {"oid": "a5312790fe3da36f2e8e3ab5ad05794896970674"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzMxOTgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNToyMjoyMlrOF2aKaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQwOTo1MDoyN1rOF2d7EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.error(\n          \n          \n            \n                                logger.warn(", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392596073", "createdAt": "2020-03-14T15:22:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java", "diffHunk": "@@ -721,7 +774,16 @@ public void registerRegularPoll(@NonNull PollTask task, long pollPeriodMillis, l\n                 long started = System.currentTimeMillis();\n                 logger.debug(\"Executing scheduled ({}ms) poll task {}. Current millis: {}\", pollPeriodMillis, task,\n                         started);\n-                executeOperation(task, false, pollOperation);\n+                try {\n+                    executeOperation(task, false, pollOperation);\n+                } catch (Exception e) {\n+                    // We want to catch all unexpected exceptions since all unhandled exceptions make\n+                    // ScheduledExecutorService halt the polling. It is better to print out the exception, and try again\n+                    // (on next poll cycle)\n+                    logger.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5312790fe3da36f2e8e3ab5ad05794896970674"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY1NzY4MA==", "bodyText": "Fixed.", "url": "https://github.com/openhab/openhab-addons/pull/7160#discussion_r392657680", "createdAt": "2020-03-15T09:50:27Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.io.transport.modbus/src/main/java/org/openhab/io/transport/modbus/internal/ModbusManagerImpl.java", "diffHunk": "@@ -721,7 +774,16 @@ public void registerRegularPoll(@NonNull PollTask task, long pollPeriodMillis, l\n                 long started = System.currentTimeMillis();\n                 logger.debug(\"Executing scheduled ({}ms) poll task {}. Current millis: {}\", pollPeriodMillis, task,\n                         started);\n-                executeOperation(task, false, pollOperation);\n+                try {\n+                    executeOperation(task, false, pollOperation);\n+                } catch (Exception e) {\n+                    // We want to catch all unexpected exceptions since all unhandled exceptions make\n+                    // ScheduledExecutorService halt the polling. It is better to print out the exception, and try again\n+                    // (on next poll cycle)\n+                    logger.error(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NjA3Mw=="}, "originalCommit": {"oid": "a5312790fe3da36f2e8e3ab5ad05794896970674"}, "originalPosition": 174}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 692, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}