{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTkyNzAz", "number": 7922, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozOTowNVrOEFpuIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0NDoxOVrOEFp01A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzYxODkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODozOTowNVrOGj-Jeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMDoxMjo1MVrOGkG2jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA==", "bodyText": "I don't think this really fixes the null warning.\nYou would need to do your null check with a local variable instead of the field.\nAlso to reduce indentation changes I prefer the way it was written earlier, if only corrected slightly.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (hrv != null) {\n          \n          \n            \n                        DanfossAirUnit danfossAirUnit = hrv;\n          \n          \n            \n                    DanfossAirUnit danfossAirUnit = hrv;\n          \n          \n            \n                    if (hrv == null) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440371578", "createdAt": "2020-06-15T18:39:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MTk4NA==", "bodyText": "Try it and you will see that it fixes the null warning. If you do a not-null check and then assign the value you have checked to a local var, it will treat the local var as NonNull. It cannot treat hrv as nnNonNull, since it is a field that could potentially change its value to null at any time.", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440381984", "createdAt": "2020-06-15T18:58:24Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4ODkwNQ==", "bodyText": "I must say that it also surprises me. Are both maven and Eclipse fine now? Technically that is not correct because a lot can change between checking and assigning given no locking or synchronization seems to be applied.", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440388905", "createdAt": "2020-06-15T19:11:22Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4OTMzMA==", "bodyText": "I'm confused, are you agreeing with me or not?", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440389330", "createdAt": "2020-06-15T19:12:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5MDYxOQ==", "bodyText": "@martinvw Afaik the compiler makes sure that this is the way to make sure that you can safely access a field as nonnull after an if - it only works if it is the very next line after the if.", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440390619", "createdAt": "2020-06-15T19:14:47Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5MzE5Ng==", "bodyText": "I'm confused, are you agreeing with me or not?\n\nIf you are talking to me, yes @cpmeister I agree with you.", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440393196", "createdAt": "2020-06-15T19:19:55Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5OTczMw==", "bodyText": "@martinvw Afaik the compiler makes sure that this is the way to make sure that you can safely access a field as nonnull after an if - it only works if it is the very next line after the if.\n\nWhat a feature, I can imagine that it fixes a lot of broken code, but is it part of the JDK/JRE specs or an implementation detail for specific JDK/JRE's?\nAnd yes I tested it. Even adding a System.out.print() above it breaks it \ud83d\ude04", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440399733", "createdAt": "2020-06-15T19:32:04Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwMDQ5OQ==", "bodyText": "I must say that given someone can break if by adding any statement above I would say its still best practice to do it really local so that it does not depend on this corner case :-)", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440400499", "createdAt": "2020-06-15T19:33:42Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwNzUzMw==", "bodyText": "@kaikreuzer I did some more tests it's not true, my first tests give false positives because of context switching, but technically this should be the scenario you describe:\nclass Scratch {\n    private static String field = null;\n    public static void main(String[] args) {\n        for (int i = 0; i < 10_002; i++) {\n            new Thread(new Test()).start();\n        }\n    }\n\n    static class Test implements Runnable {\n        @Override\n        public void run() {\n            while (true) {\n                field = \"\";\n\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n\n                if (field != null) {\n                    System.out.print(\"- \" + field.length());\n                }\n\n                field = null;\n            }\n        }\n    }\n}\nWithout the Thread.sleep it does not give any NPE's but with it does most likely because it causes more context switches.", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440407533", "createdAt": "2020-06-15T19:47:22Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQwOTczNg==", "bodyText": "The correct code would be\n                if (field != null) {\n                    String localField = field;\n                    System.out.print(\"- \" + localField.length());\n                }\n\nCan you try this?", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440409736", "createdAt": "2020-06-15T19:51:51Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNDE3NQ==", "bodyText": "Updated code:\nclass Scratch {\n    private static String field = null;\n    public static void main(String[] args) {\n        for (int i = 0; i < 10_002; i++) {\n            new Thread(new Test()).start();\n        }\n    }\n\n    static class Test implements Runnable {\n        @Override\n        public void run() {\n            while (true) {\n                field = \"\";\n\n                try {\n                    Thread.sleep(1);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n\n                if (field != null) {\n                    var local = field;\n                    System.out.print(\"- \" + local.length());\n                }\n\n                field = null;\n            }\n        }\n    }\n}\nOutput still contains NPE's", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440414175", "createdAt": "2020-06-15T20:00:41Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUxNDE4OA==", "bodyText": "oof, I just realized my original suggestion was bogus due to my oversight. whoops. Sorry for the confusion.", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440514188", "createdAt": "2020-06-16T00:12:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;\n+            scheduler.execute(() -> {\n+                try {\n+                    thing.setProperty(PROPERTY_UNIT_NAME, danfossAirUnit.getUnitName());\n+                    thing.setProperty(PROPERTY_SERIAL, danfossAirUnit.getUnitSerialNumber());\n+                    pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n+                            TimeUnit.SECONDS);\n+                    updateStatus(ThingStatus.ONLINE);\n+\n+                } catch (IOException e) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n+                }\n+            });\n         } catch (UnknownHostException e) {\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                     \"Unknown host: \" + config.host);\n             return;\n         }\n-\n-        scheduler.execute(() -> {\n-            try {\n-                thing.setProperty(PROPERTY_UNIT_NAME, hrv.getUnitName());\n-                thing.setProperty(PROPERTY_SERIAL, hrv.getUnitSerialNumber());\n-                pollingJob = scheduler.scheduleWithFixedDelay(this::updateAllChannels, 5, config.refreshInterval,\n-                        TimeUnit.SECONDS);\n-                updateStatus(ThingStatus.ONLINE);\n-\n-            } catch (IOException e) {\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n-            }\n-        });\n     }\n \n     private void updateAllChannels() {\n-        if (hrv == null) {\n-            return;\n-        }\n-        DanfossAirUnit danfossAirUnit = hrv;\n-        logger.debug(\"Updating DanfossHRV data '{}'\", getThing().getUID());\n+        if (hrv != null) {\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MTU3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzYyNjU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0MToyMVrOGj-OXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0MToyMVrOGj-OXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3MjgyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (hrv != null) {\n          \n          \n            \n                                DanfossAirUnit danfossAirUnit = hrv;\n          \n          \n            \n                            DanfossAirUnit danfossAirUnit = hrv;\n          \n          \n            \n                            if (danfossAirUnit != null) {", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440372829", "createdAt": "2020-06-15T18:41:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -62,15 +60,18 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             updateAllChannels();\n         } else {\n             try {\n-                if (hrv == null) {\n+                if (hrv != null) {\n+                    DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzYzNjA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo0NDoxOVrOGj-Uag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODo1OToxM1rOGj-zpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3NDM3OA==", "bodyText": "By assigning the non-null value the local variable first it will make the null checker happy.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n          \n          \n            \n                        DanfossAirUnit danfossAirUnit = hrv;\n          \n          \n            \n                        DanfossAirUnit danfossAirUnit = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n          \n          \n            \n                        hrv = danfossAirUnit;", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440374378", "createdAt": "2020-06-15T18:44:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM4MjM3NA==", "bodyText": "I did the changes after seeing that the null checker was happy, trust me.", "url": "https://github.com/openhab/openhab-addons/pull/7922#discussion_r440382374", "createdAt": "2020-06-15T18:59:13Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.binding.danfossairunit/src/main/java/org/openhab/binding/danfossairunit/internal/DanfossAirUnitHandler.java", "diffHunk": "@@ -86,56 +87,55 @@ public void initialize() {\n         valueCache = new ValueCache(config.updateUnchangedValuesEveryMillis);\n         try {\n             hrv = new DanfossAirUnit(InetAddress.getByName(config.host), 30046);\n+            DanfossAirUnit danfossAirUnit = hrv;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM3NDM3OA=="}, "originalCommit": {"oid": "d90d9c16683ef71af65f4748c7b4f1130f451371"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4810, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}