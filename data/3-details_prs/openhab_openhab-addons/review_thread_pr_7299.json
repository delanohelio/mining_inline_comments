{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MDQ0MDQy", "number": 7299, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzo1MDowMVrODu4Pbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0Nzo1MlrODwLXvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDgyNTQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxMzo1MDowMVrOGBALGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODo0MjoxN1rOGD02Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg==", "bodyText": "Is there a more direct way of determining if the handler is disposed? Or more importantly, shouldn't this class be disposed along with the handler in the first place?", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r403704602", "createdAt": "2020-04-05T13:50:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxMjMyNQ==", "bodyText": "In fact, this is the more direct way I found.\nHere is the code run when the thing handler is disposed:\n        LGWebOSTVSocket s = socket;\n        if (s != null) {\n            s.setListener(null);\n            scheduler.execute(() -> s.disconnect()); // dispose should be none-blocking\n        }\n\nAs you can see, this is done asynchronously. It can happen that messages are received and handled bedore disconnect() is run.\nsetListener is called with the thing handler in thing handler initialize().\nsetListener is called with null in thing handler dispose().", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r403712325", "createdAt": "2020-04-05T14:50:41Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNTAyMQ==", "bodyText": "The variable is named listener but in fact listener = thingHandler", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r403715021", "createdAt": "2020-04-05T15:11:42Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NDY0MA==", "bodyText": "I'm not sure that s.disconnect() should be called asynchronously as part of disposing. Any essential cleanup should be done immediately because initialize() might be called immediately afterward and any socket resources getting initialized might collide with the socket resources that are getting disposed.\nBut I'm not sure if such a change is within the scope of this PR...", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r403744640", "createdAt": "2020-04-05T19:14:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc2NDQ2Mg==", "bodyText": "@sprehn : can you comment about the asynchronous disconnect please ? The comment looks clear, is s.disconnect() really blocking ? Until what ?\n@cpmeister : yes, the scope of my PR was not to change that but rather avoid having the reconnect job continuing its scenario while the thing handler is already disposed.", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r403764462", "createdAt": "2020-04-05T22:17:28Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzODg1Mw==", "bodyText": "yes we indeed can make this call synchronous\ns.disconnect enqueues a websocket close, which is asynchronous\nit synchronously sets the state to disconnected", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r405838853", "createdAt": "2020-04-08T21:57:17Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg0NDM4NQ==", "bodyText": "the lgweostvsocket instance gets disposed\na new instance is created during initialize\ncan you remind me what the issues is that needs to be solved?\nmaybe we should not do setListener(null)", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r405844385", "createdAt": "2020-04-08T22:10:43Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0NDE3NQ==", "bodyText": "You can read again last @cpmeister message, he explained the problem. It occurs when the thing handler is quickly disposed and initialized again while the first registering process is still running.", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r406044175", "createdAt": "2020-04-09T08:34:00Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2NDgwMw==", "bodyText": "but we create a new socket each time we initialize. so states should be clean.\nwhat is the issue for end users?", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r406664803", "createdAt": "2020-04-10T08:42:17Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {\n+            logger.debug(\"Message is ignored because the thing handler is already disposed.\");\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcwNDYwMg=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQ0NTQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0Nzo1MlrOGDCLbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODo0NDoxNVrOGD05aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNDYwNw==", "bodyText": "Don\u2019t like this change\nthis class should be agnostic to OH types like thing handler and lifecycle\nany response should still be handled properly and definitely not depend on if someone is watching for state changes", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r405834607", "createdAt": "2020-04-08T21:47:52Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0MjY0Mg==", "bodyText": "This class is already linked to OH as you are updating the thing properties and the thing configuration when handling received messages (during the registering process). Of course, we have to avoid that when the thing handler is already disposed.", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r406042642", "createdAt": "2020-04-09T08:31:16Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNDYwNw=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2NTU3Nw==", "bodyText": "there is an interface which thinghandler implements, so there is not dependency\nthe behavior should not change whether or not somebody is whatching. reminds me of schr\u00f6dinger\u2019s cat", "url": "https://github.com/openhab/openhab-addons/pull/7299#discussion_r406665577", "createdAt": "2020-04-10T08:44:15Z", "author": {"login": "sprehn"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSTVSocket.java", "diffHunk": "@@ -332,6 +333,10 @@ private void sendMessage(JsonObject json) {\n     @OnWebSocketMessage\n     public void onMessage(String message) {\n         logger.trace(\"Message [in]: {}\", message);\n+        if (this.listener == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNDYwNw=="}, "originalCommit": {"oid": "01f49900726189f3930bbb49af70926ebfee7de5"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 553, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}