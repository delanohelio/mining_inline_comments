{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NTgwOTQ2", "number": 6921, "title": "[bluetooth.bluegiga] Fixes", "bodyText": "Fixed #6858.\nFixed #6901.\nMobile devices creates random mac which is changed ones a while for data protection reason. Bluegiga bridge creates new device on the memory for each discovered device. Introduced cleanup feature which remove unused devices from memory.\nIntroduced many new configuration variables to change scan and connection settings.\nRecover from BlueGiga errors/detach\nDisabled active discovery participation by default\nImplemented missing timeout functionality to BlueGigaBluetoothDevice\nFixed 128bit UUID generation from short UUIDs\nMany other minor improvements", "createdAt": "2020-01-27T16:19:41Z", "url": "https://github.com/openhab/openhab-addons/pull/6921", "merged": true, "mergeCommit": {"oid": "de674567a5d9a082a10340cd6f989d6eaa15a103"}, "closed": true, "closedAt": "2020-03-07T06:50:35Z", "author": {"login": "paulianttila"}, "timelineItems": {"totalCount": 89, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-j91XgFqTM0ODk0MjUzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLFe4HAFqTM3MDU4MDc5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTQyNTM4", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-348942538", "createdAt": "2020-01-27T20:10:03Z", "commit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoxMDowM1rOFiP8tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0ODowOVrOFiSoQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1NzIwNQ==", "bodyText": "I think you forgot to remove this", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371457205", "createdAt": "2020-01-27T20:10:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/command/connection/BlueGigaUpdateResponse.java", "diffHunk": "@@ -44,7 +44,7 @@\n     private int connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2OTU2Nw==", "bodyText": "This seems to be checked very frequently. Would it be better to just do this check once for all the events?", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371469567", "createdAt": "2020-01-27T20:38:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/BlueGigaBluetoothDevice.java", "diffHunk": "@@ -413,6 +421,11 @@ public void bluegigaEventReceived(BlueGigaResponse event) {\n             // A read request has completed - update the characteristic\n             BlueGigaAttributeValueEvent valueEvent = (BlueGigaAttributeValueEvent) event;\n \n+            // If this is not our connection handle then ignore.\n+            if (connection != valueEvent.getConnection()) {\n+                return;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3Mzg3Mg==", "bodyText": "Why is this synchronized? I don't like the idea of a thread holding a lock for a prolonged period of time. Also, if all this does is obtain a lock and then wait for another thread to finish, I think it could very easily lead to deadlock if the thread it is waiting on tries to also access something synchronized on this handler.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371473872", "createdAt": "2020-01-27T20:47:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -383,8 +378,8 @@ public BlueGigaResponse sendTransaction(BlueGigaCommand bleCommand) {\n      * @return response {@link BlueGigaResponse}\n      * @throws TimeoutException when specified timeout exceeds\n      */\n-    public <T extends BlueGigaResponse> T sendTransaction(BlueGigaCommand bleCommand, Class<T> expected, long timeout)\n-            throws TimeoutException {\n+    public synchronized <T extends BlueGigaResponse> T sendTransaction(BlueGigaCommand bleCommand, Class<T> expected,\n+            long timeout) throws TimeoutException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3ODMwNg==", "bodyText": "the removeEventListener method down below isn't synchronized. So either they both need to be synchronized or none (including addEventListener) should be synchronized. Personally, I prefer the latter since I don't see a purpose of synchronizing when the eventListeners are already a CopyOnWriteArraySet, which handle concurrency happily.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371478306", "createdAt": "2020-01-27T20:57:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -426,7 +421,7 @@ public void run() {\n      * @return true if the response was processed\n      */\n     private void notifyEventListeners(final BlueGigaResponse response) {\n-        synchronized (this) {\n+        synchronized (eventListeners) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MTM4MQ==", "bodyText": "I think this should be a primitive int instead since all the refactored classes expect the primitive as well. You might run into NPEs since most of the code that calls getConnection hasn't taken into account that it can now return nulls.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371481381", "createdAt": "2020-01-27T21:04:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaDeviceResponse.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.bluegiga.internal;\n+\n+/**\n+ * Abstract base class for all device responses.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ *\n+ */\n+public abstract class BlueGigaDeviceResponse extends BlueGigaResponse {\n+\n+    /**\n+     * Connection handle.\n+     * <p>\n+     * BlueGiga API type is <i>uint8</i> - Java type is {@link int}\n+     */\n+    protected Integer connection = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MzQxNQ==", "bodyText": "Why do you need a custom timer implementation? Also you are not specifying the name of the thread the timer uses (if it can be specified) so when profiling/debugging it wouldn't be clear the binding responsible for it.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371483415", "createdAt": "2020-01-27T21:09:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaReschedulableTimer.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.bluegiga.internal;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Simple reschedulable Timer.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BlueGigaReschedulableTimer extends Timer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5MjE0Mw==", "bodyText": "This doesn't take into account active background discovery, where the user has manually activated a scan for devices to search for things. By always using the config the user will not be able to do a manual scan. You should keep the discoveryActive flag and just update it whenever a manual scan is requested through the scanStart and scanStop methods. You can use org.openhab.binding.bluetooth.bluez.handler.BlueZBridgeHandler for reference.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371492143", "createdAt": "2020-01-27T21:28:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -476,18 +525,28 @@ public boolean bgConnect(BluetoothAddress address, BluetoothAddressType addressT\n      * @return\n      */\n     public boolean bgDisconnect(int connectionHandle) {\n+        logger.debug(\"BlueGiga Disconnect: connection {}\", connectionHandle);\n+        passiveScanIdleTimer.cancel();\n         BlueGigaDisconnectCommand command = new BlueGigaDisconnectCommand();\n         command.setConnection(connectionHandle);\n-        BlueGigaDisconnectResponse response = (BlueGigaDisconnectResponse) getBgHandler().sendTransaction(command);\n \n-        return response.getResult() == BgApiResponse.SUCCESS;\n+        try {\n+            BlueGigaDisconnectResponse response = getBgHandler().sendTransaction(command,\n+                    BlueGigaDisconnectResponse.class, COMMAND_TIMEOUT_MS);\n+            return response.getResult() == BgApiResponse.SUCCESS;\n+        } catch (TimeoutException e) {\n+            logger.debug(\"Timeout occured when sending disconnect command to device {}.\", address);\n+            return false;\n+        } finally {\n+            passiveScanIdleTimer.schedule(configuration.passiveScanIdleTime);\n+        }\n     }\n \n     /**\n      * Device discovered. This simply passes the discover information to the discovery service for processing.\n      */\n     public void deviceDiscovered(BluetoothDevice device) {\n-        if (discoveryActive) {\n+        if (configuration.discovery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 424}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5OTQ1Mw==", "bodyText": "A day is a long time for devices to hang around, especially when some of them generate new mac addresses every two minutes. That means you would track and keep memory for over 720+ devices every day. I'm using 5 minutes in Bluez, is there a reason you are tracking it for longer?\nAlso, you haven't taken into account devices which may have handlers and thus hold a reference to a bluetooth device. If the BlueGigaBridgeHandler loses its reference to that bluetooth device reference then that handler is holding onto a dead device instance that will never receive events until Openhab restarts or the handler is disabled then enabled again.\nI solved this problem by adding a hasListeners method to the BluetoothDevice class. It is currently in my PR but I think you would likely need it as well so we need to coordinate on that.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371499453", "createdAt": "2020-01-27T21:44:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -249,16 +238,70 @@ public void initialize() {\n     @Override\n     public void dispose() {\n         try {\n+            stopScheduledTasks();\n             BlueGigaSerialHandler bgh = getBgHandler();\n             bgh.removeEventListener(this);\n             bgh.removeHandlerListener(this);\n             bgh.close();\n+            initComplite = false;\n         } catch (IllegalStateException e) {\n             // ignore if handler wasn't set at all\n         }\n         closeSerialPort();\n     }\n \n+    private void startScheduledTasks() {\n+        passiveScanIdleTimer.schedule(configuration.passiveScanIdleTime);\n+        logger.debug(\"Start scheduled task to remove old devices ones per every hour\");\n+        removeOldDevicesTask = scheduler.scheduleWithFixedDelay(this::removeOldDevices, 1, 1, TimeUnit.HOURS);\n+    }\n+\n+    private void stopScheduledTasks() {\n+        passiveScanIdleTimer.cancel();\n+        passiveScanIdleTimer = null;\n+        removeOldDevicesTask.cancel(true);\n+    }\n+\n+    private void removeOldDevices() {\n+        logger.debug(\"Check old devices, count {}\", devices.size());\n+        devices.forEach((address, device) -> {\n+            DateTime lastCommunicationTime = ((BlueGigaBluetoothDevice) device).getLastCommunicationTime();\n+            logger.debug(\" Device {} last communication time {}\", address, lastCommunicationTime);\n+            if (lastCommunicationTime.plusDays(1).isBeforeNow()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTUwMTEyMg==", "bodyText": "why intervals of 1.25ms?", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r371501122", "createdAt": "2020-01-27T21:48:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/resources/ESH-INF/thing/bluegiga.xml", "diffHunk": "@@ -20,6 +20,60 @@\n \t\t\t\t<advanced>true</advanced>\n \t\t\t\t<default>true</default>\n \t\t\t</parameter>\n+\t\t\t<parameter name=\"passiveScanIdleTime\" type=\"integer\" min=\"100\" max=\"60000\">\n+\t\t\t\t<label>Passive Scan Idle Time</label>\n+\t\t\t\t<description>Passive scan idle time defines the time how long to wait in milliseconds before start passive scan.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>5000</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"passiveScanInterval\" type=\"integer\" min=\"4\" max=\"16384\">\n+\t\t\t\t<label>Passive Scan Interval</label>\n+\t\t\t\t<description>Passive scan interval defines the interval when scanning is re-started in units of 625us. Default is 4000ms.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>6400</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"passiveScanWindow\" type=\"integer\" min=\"4\" max=\"16384\">\n+\t\t\t\t<label>Passive Scan Window</label>\n+\t\t\t\t<description>Passive scan Window defines how long time the scanner will listen on a certain frequency and try to pick up advertisement packets. Default is 4000ms.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>6400</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"activeScanInterval\" type=\"integer\" min=\"4\" max=\"16384\">\n+\t\t\t\t<label>Active Scan Interval</label>\n+\t\t\t\t<description>Active scan interval defines the interval when scanning is re-started in units of 625us. Default is 4000ms.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>6400</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"activeScanWindow\" type=\"integer\" min=\"4\" max=\"16384\">\n+\t\t\t\t<label>Active Scan Window</label>\n+\t\t\t\t<description>Active scan Window defines how long time the scanner will listen on a certain frequency and try to pick up advertisement packets. Default is 4000ms.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>6400</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"connIntervalMin\" type=\"integer\" min=\"6\" max=\"3200\">\n+\t\t\t\t<label>Minimum Connection Interval</label>\n+\t\t\t\t<description>Minimum connection interval in units of 1.25ms. Default is 100ms.</description>\n+\t\t\t\t<advanced>true</advanced>\n+\t\t\t\t<default>80</default>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"connIntervalMax\" type=\"integer\" min=\"6\" max=\"3200\">\n+\t\t\t\t<label>Maximum Connection Interval</label>\n+\t\t\t\t<description>Maximum connection interval in units of 1.25ms. Default is 1000ms.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00068a4f2c76169a546d361000c6fc89f2590a57"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNDM4MTc2", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-350438176", "createdAt": "2020-01-29T21:31:03Z", "commit": {"oid": "4ba4fba1623af51eec039b09885f8cbdd200d695"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTozMTowM1rOFjYL4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo0NjoxNFrOFjYoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0MDczNg==", "bodyText": "typo", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r372640736", "createdAt": "2020-01-29T21:31:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -153,11 +157,27 @@\n     // List of device listeners\n     protected final ConcurrentHashMap<BluetoothAddress, BluetoothDeviceListener> deviceListeners = new ConcurrentHashMap<>();\n \n+    private @NonNullByDefault({}) BlueGigaReschedulableTimer passiveScanIdleTimer;\n+\n+    private boolean initComplite = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba4fba1623af51eec039b09885f8cbdd200d695"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY0ODA5OQ==", "bodyText": "isn't timerTask already null by this point? resetTransactionTimer() did this already.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r372648099", "createdAt": "2020-01-29T21:46:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -183,6 +197,7 @@ public void close() {\n      */\n     public void close(long timeout) {\n         close = true;\n+        resetTransactionTimer();\n         executor.shutdownNow();\n         if (timerTask != null) {\n             timerTask.cancel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba4fba1623af51eec039b09885f8cbdd200d695"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDk0OTI1", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351094925", "createdAt": "2020-01-30T19:46:23Z", "commit": {"oid": "dc4a3760ca4841657fb3dd02236cad4859d45e73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo0NjoyM1rOFj3tCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo0NjoyM1rOFj3tCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1NzEzMA==", "bodyText": "Does the bluegiga spec give any guide as to what this number should be?", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373157130", "createdAt": "2020-01-30T19:46:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -39,22 +42,32 @@\n  * queuing of of data, and conversion of packets from the serial stream into command and response classes.\n  *\n  * @author Chris Jackson - Initial contribution and API\n+ * @author Pauli Anttila - Message correlation\n  *\n  */\n public class BlueGigaSerialHandler {\n \n     private static final int BLE_MAX_LENGTH = 64;\n-    private static final int TRANSACTION_TIMEOUT_PERIOD = 50;\n+    private static final int TRANSACTION_TIMEOUT_PERIOD_MS = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4a3760ca4841657fb3dd02236cad4859d45e73"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDk2NzM5", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351096739", "createdAt": "2020-01-30T19:49:13Z", "commit": {"oid": "dc4a3760ca4841657fb3dd02236cad4859d45e73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo0OToxNFrOFj3ytw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo0OToxNFrOFj3ytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1ODU4Mw==", "bodyText": "always use try/finally for locks", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373158583", "createdAt": "2020-01-30T19:49:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -294,59 +318,92 @@ private void removeTransactionListener(BluetoothListener<?> listener) {\n      * @param bleCommand {@link BlueGigaCommand}\n      * @return response {@link Future} {@link BlueGigaResponse}\n      */\n-    public <T extends BlueGigaResponse> Future<T> sendBleRequestAsync(final BlueGigaCommand bleCommand,\n+    private <T extends BlueGigaResponse> Future<T> sendBleRequestAsync(final BlueGigaCommand bleCommand,\n             final Class<T> expected) {\n         checkIfAlive();\n         class TransactionWaiter implements Callable<T>, BluetoothListener<T> {\n-            private boolean complete;\n             private BlueGigaResponse response;\n+            BlueGigaUniqueCommand query = new BlueGigaUniqueCommand(bleCommand, transactionId.getAndIncrement());\n+            private final Lock lock = new ReentrantLock();\n+            private final Condition transactionLock = lock.newCondition();\n \n             @SuppressWarnings(\"unchecked\")\n             @Override\n-            public T call() {\n+            public T call() throws TimeoutException {\n                 // Register a listener\n                 addTransactionListener(this);\n \n                 // Send the transaction\n-                queueFrame(bleCommand);\n+                queueFrame(query);\n \n                 // Wait for the transaction to complete\n-                synchronized (this) {\n-                    while (!complete) {\n-                        try {\n-                            wait();\n-                        } catch (InterruptedException e) {\n-                            complete = true;\n-                        }\n+                lock.lock();\n+                try {\n+                    if (transactionLock.await(TRANSACTION_TIMEOUT_PERIOD_MS * 2, TimeUnit.MILLISECONDS)) {\n+                        logger.debug(\"Transaction {} complited\", query.getCorrelationId());\n+                    } else {\n+                        logger.debug(\"Timeout, no response received for transaction {}\", query.getCorrelationId());\n                     }\n+                } catch (InterruptedException e) {\n+                    // just exit\n+                } finally {\n+                    lock.unlock();\n                 }\n \n                 // Remove the listener\n                 removeTransactionListener(this);\n \n+                executor.submit(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        clearOngoingTransactionAndSendNext();\n+                    }\n+                });\n+\n+                if (response == null) {\n+                    throw new TimeoutException(\"No response from BlueGiga controller\");\n+                }\n                 return (T) response;\n             }\n \n             @Override\n             public boolean transactionEvent(BlueGigaResponse bleResponse) {\n-                // Check if this response completes our transaction\n-                if (bleCommand.hashCode() == bleResponse.hashCode()) {\n+                logger.debug(\"Expected transactionId: {}, ongoingTransactionId: {}\", query.getCorrelationId(),\n+                        ongoingTransactionId);\n+\n+                if (ongoingTransactionId != query.getCorrelationId()) {\n+                    logger.debug(\"Ignore response as ongoingTransactionId {} doesn't match expected transactionId {}.\",\n+                            ongoingTransactionId, query.getCorrelationId());\n                     return false;\n                 }\n \n+                logger.debug(\"Expected response: {}, Received response: {}\", expected.getSimpleName(), bleResponse);\n+\n+                if (bleCommand instanceof BlueGigaDeviceCommand && bleResponse instanceof BlueGigaDeviceResponse) {\n+                    BlueGigaDeviceCommand devCommand = (BlueGigaDeviceCommand) bleCommand;\n+                    BlueGigaDeviceResponse devResponse = (BlueGigaDeviceResponse) bleResponse;\n+\n+                    logger.debug(\"Expected connection id: {}, Response connection id: {}\", devCommand.getConnection(),\n+                            devResponse.getConnection());\n+\n+                    if (devCommand.getConnection() != devResponse.getConnection()) {\n+                        logger.debug(\"Ignore response as response connection id {} doesn't match expected id {}.\",\n+                                devResponse.getConnection(), devCommand.getConnection());\n+                        return false;\n+                    }\n+                }\n+\n                 if (!expected.isInstance(bleResponse)) {\n                     // ignoring response if it was not requested\n-                    logger.warn(\"Ignoring {} response which has not been requested.\",\n+                    logger.debug(\"Ignoring {} response which has not been requested.\",\n                             bleResponse.getClass().getSimpleName());\n                     return false;\n                 }\n-\n                 response = bleResponse;\n-                complete = true;\n-                synchronized (this) {\n-                    notify();\n-                }\n-\n+                lock.lock();\n+                transactionLock.signal();\n+                lock.unlock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4a3760ca4841657fb3dd02236cad4859d45e73"}, "originalPosition": 318}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMDk5MjE3", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351099217", "createdAt": "2020-01-30T19:53:10Z", "commit": {"oid": "dc4a3760ca4841657fb3dd02236cad4859d45e73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo1MzoxMFrOFj36Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxOTo1MzoxMFrOFj36Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE2MDQ2Ng==", "bodyText": "you should have this in a while loop to account for spurious wake-ups.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373160466", "createdAt": "2020-01-30T19:53:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -294,59 +318,92 @@ private void removeTransactionListener(BluetoothListener<?> listener) {\n      * @param bleCommand {@link BlueGigaCommand}\n      * @return response {@link Future} {@link BlueGigaResponse}\n      */\n-    public <T extends BlueGigaResponse> Future<T> sendBleRequestAsync(final BlueGigaCommand bleCommand,\n+    private <T extends BlueGigaResponse> Future<T> sendBleRequestAsync(final BlueGigaCommand bleCommand,\n             final Class<T> expected) {\n         checkIfAlive();\n         class TransactionWaiter implements Callable<T>, BluetoothListener<T> {\n-            private boolean complete;\n             private BlueGigaResponse response;\n+            BlueGigaUniqueCommand query = new BlueGigaUniqueCommand(bleCommand, transactionId.getAndIncrement());\n+            private final Lock lock = new ReentrantLock();\n+            private final Condition transactionLock = lock.newCondition();\n \n             @SuppressWarnings(\"unchecked\")\n             @Override\n-            public T call() {\n+            public T call() throws TimeoutException {\n                 // Register a listener\n                 addTransactionListener(this);\n \n                 // Send the transaction\n-                queueFrame(bleCommand);\n+                queueFrame(query);\n \n                 // Wait for the transaction to complete\n-                synchronized (this) {\n-                    while (!complete) {\n-                        try {\n-                            wait();\n-                        } catch (InterruptedException e) {\n-                            complete = true;\n-                        }\n+                lock.lock();\n+                try {\n+                    if (transactionLock.await(TRANSACTION_TIMEOUT_PERIOD_MS * 2, TimeUnit.MILLISECONDS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4a3760ca4841657fb3dd02236cad4859d45e73"}, "originalPosition": 245}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a125b383d2d3ca0b867513c1f111ec59e3c34cf", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/2a125b383d2d3ca0b867513c1f111ec59e3c34cf", "committedDate": "2020-01-31T17:39:02Z", "message": "[bluetooth.bluegiga] Improved active scan functionality\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "d8641f8e75a8509372dc297d78f37a2302d42f06", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/d8641f8e75a8509372dc297d78f37a2302d42f06", "committedDate": "2020-01-31T18:55:35Z", "message": "[bluetooth.bluegiga] Improved inactive device removal\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODQ3Mjcw", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351847270", "createdAt": "2020-02-01T00:34:36Z", "commit": {"oid": "d8641f8e75a8509372dc297d78f37a2302d42f06"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMDozNDozNlrOFkbUmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQwMTowOTowOVrOFkbllA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MDY5OQ==", "bodyText": "I would include a ThreadFactory so you can control the name of the thread it produces", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373740699", "createdAt": "2020-02-01T00:34:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -39,24 +39,34 @@\n  * queuing of of data, and conversion of packets from the serial stream into command and response classes.\n  *\n  * @author Chris Jackson - Initial contribution and API\n+ * @author Pauli Anttila - Message correlation\n  *\n  */\n public class BlueGigaSerialHandler {\n \n     private static final int BLE_MAX_LENGTH = 64;\n-    private static final int TRANSACTION_TIMEOUT_PERIOD = 50;\n+    private static final int TRANSACTION_TIMEOUT_PERIOD_MS = 100;\n \n     private final Logger logger = LoggerFactory.getLogger(BlueGigaSerialHandler.class);\n \n+    /**\n+     * Unique transaction id for request and response correlation\n+     */\n+    private AtomicInteger transactionId = new AtomicInteger();\n+\n+    /**\n+     * Ongoing transaction id. If null, no ongoing transaction.\n+     */\n+    private volatile Integer ongoingTransactionId = null;\n+\n     /**\n      * The portName portName output stream.\n      */\n     private final OutputStream outputStream;\n-    private final Queue<BlueGigaCommand> sendQueue = new LinkedList<BlueGigaCommand>();\n+    private final Queue<BlueGigaUniqueCommand> sendQueue = new LinkedList<BlueGigaUniqueCommand>();\n     private final Timer timer = new Timer();\n-    private TimerTask timerTask = null;\n     private Thread parserThread = null;\n-    private final ExecutorService executor = ThreadPoolManager.getPool(\"bluegiga\");\n+    private final ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8641f8e75a8509372dc297d78f37a2302d42f06"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0MzIzMw==", "bodyText": "Interrupt doesn't look like a reliable way to terminate the parserThread. In addition to issuing an interrupt, I would close the input and output streams of the parserThread to make sure it gets kicked awake if it is blocking on IO.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373743233", "createdAt": "2020-02-01T00:54:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -184,10 +196,6 @@ public void close() {\n     public void close(long timeout) {\n         close = true;\n         executor.shutdownNow();\n-        if (timerTask != null) {\n-            timerTask.cancel();\n-            timerTask = null;\n-        }\n         timer.cancel();\n         try {\n             parserThread.interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8641f8e75a8509372dc297d78f37a2302d42f06"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0Mzg2MQ==", "bodyText": "\ud83d\ude04", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373743861", "createdAt": "2020-02-01T00:59:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -249,16 +246,84 @@ public void initialize() {\n     @Override\n     public void dispose() {\n         try {\n+            stopScheduledTasks();\n             BlueGigaSerialHandler bgh = getBgHandler();\n             bgh.removeEventListener(this);\n             bgh.removeHandlerListener(this);\n             bgh.close();\n+            initComplete = false;\n         } catch (IllegalStateException e) {\n             // ignore if handler wasn't set at all\n         }\n         closeSerialPort();\n     }\n \n+    private void startScheduledTasks() {\n+        passiveScanIdleTimer.schedule(configuration.passiveScanIdleTime);\n+        logger.debug(\"Start scheduled task to remove inactive devices\");\n+        removeInactiveDevicesTask = scheduler.scheduleWithFixedDelay(this::removeInactiveDevices, 1, 1,\n+                TimeUnit.MINUTES);\n+    }\n+\n+    private void stopScheduledTasks() {\n+        passiveScanIdleTimer.cancel();\n+        passiveScanIdleTimer = null;\n+        removeInactiveDevicesTask.cancel(true);\n+    }\n+\n+    private void removeInactiveDevices() {\n+        logger.debug(\"Check inactive devices, count {}\", devices.size());\n+        devices.forEach((address, device) -> {\n+            if (shouldRemove(device)) {\n+                logger.debug(\"Removing device '{}' due to inactivity, last seen: {}\", address,\n+                        device.getLastSeenTime());\n+                device.dispose();\n+                devices.remove(address);\n+            }\n+        });\n+    }\n+\n+    private boolean shouldRemove(BlueGigaBluetoothDevice device) {\n+        // we can't remove devices with listeners since that means they have a handler.\n+        if (device.hasListeners()) {\n+            return false;\n+        }\n+        // devices that are connected won't receive any scan notifications so we can't remove them for being idle\n+        if (device.getConnectionState() == ConnectionState.CONNECTED) {\n+            return false;\n+        }\n+\n+        return device.getLastSeenTime().plusMinutes(5).isBeforeNow();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8641f8e75a8509372dc297d78f37a2302d42f06"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc0NTA0NA==", "bodyText": "If executor is single threaded, how is this timeout ever supposed to run if the single thread is going to be busy with this task? \ud83e\udd14", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373745044", "createdAt": "2020-02-01T01:09:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -294,23 +315,33 @@ private void removeTransactionListener(BluetoothListener<?> listener) {\n      * @param bleCommand {@link BlueGigaCommand}\n      * @return response {@link Future} {@link BlueGigaResponse}\n      */\n-    public <T extends BlueGigaResponse> Future<T> sendBleRequestAsync(final BlueGigaCommand bleCommand,\n+    private <T extends BlueGigaResponse> Future<T> sendBleRequestAsync(final BlueGigaCommand bleCommand,\n             final Class<T> expected) {\n         checkIfAlive();\n         class TransactionWaiter implements Callable<T>, BluetoothListener<T> {\n-            private boolean complete;\n+            private volatile boolean complete;\n             private BlueGigaResponse response;\n+            BlueGigaUniqueCommand query = new BlueGigaUniqueCommand(bleCommand, transactionId.getAndIncrement());\n \n             @SuppressWarnings(\"unchecked\")\n             @Override\n-            public T call() {\n+            public T call() throws TimeoutException {\n                 // Register a listener\n                 addTransactionListener(this);\n \n                 // Send the transaction\n-                queueFrame(bleCommand);\n+                queueFrame(query);\n+\n+                // Start transaction timeout timer\n+                Future<?> timeout = executor.schedule(() -> {\n+                    complete = true;\n+                    logger.debug(\"Timeout, no response received for transaction {}\", query.getTransactionId());\n+                    synchronized (this) {\n+                        notify();\n+                    }\n+                }, TRANSACTION_TIMEOUT_PERIOD_MS * 2, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8641f8e75a8509372dc297d78f37a2302d42f06"}, "originalPosition": 246}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxODk2MDY0", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351896064", "createdAt": "2020-02-01T17:56:28Z", "commit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzo1NjoyOFrOFkegdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzo1NjoyOFrOFkegdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5Mjg4Nw==", "bodyText": "Using Thread.sleep is generally frowned upon but I think it would be justified in this case. Add a comment in the code so that other reviewers don't raise (as much of) a fuss.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373792887", "createdAt": "2020-02-01T17:56:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -198,14 +203,21 @@ public void close() {\n     public void close(long timeout) {\n         close = true;\n         cancelTransactionTimer();\n-        executor.shutdownNow();\n         timer.cancel();\n         try {\n             parserThread.interrupt();\n-            parserThread.join(timeout);\n+            Thread.sleep(50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTIyNjkw", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351922690", "createdAt": "2020-02-02T07:03:57Z", "commit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzowMzo1N1rOFkgbVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzowMzo1N1rOFkgbVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyNDM0Mw==", "bodyText": "remove this", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373824343", "createdAt": "2020-02-02T07:03:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -153,11 +162,35 @@\n     // List of device listeners\n     protected final ConcurrentHashMap<BluetoothAddress, BluetoothDeviceListener> deviceListeners = new ConcurrentHashMap<>();\n \n+    // private @NonNullByDefault({}) BlueGigaReschedulableTimer passiveScanIdleTimer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTIyNzg1", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351922785", "createdAt": "2020-02-02T07:06:23Z", "commit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzowNjoyM1rOFkgbsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzowNjoyM1rOFkgbsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyNDQzNQ==", "bodyText": "typo", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373824435", "createdAt": "2020-02-02T07:06:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -330,20 +413,23 @@ private void closeSerialPort() {\n     @Override\n     public void bluegigaEventReceived(@Nullable BlueGigaResponse event) {\n         if (event instanceof BlueGigaScanResponseEvent) {\n-            BlueGigaScanResponseEvent scanEvent = (BlueGigaScanResponseEvent) event;\n-\n-            // We use the scan event to add any devices we hear to the devices list\n-            // The device gets created, and then manages itself for discovery etc.\n-            BluetoothAddress sender = new BluetoothAddress(scanEvent.getSender());\n-            BlueGigaBluetoothDevice device;\n-            if (devices.get(sender) == null) {\n-                logger.debug(\"BlueGiga adding new device to adaptor {}: {}\", address, sender);\n-                device = new BlueGigaBluetoothDevice(this, new BluetoothAddress(scanEvent.getSender()),\n-                        scanEvent.getAddressType());\n-                devices.put(sender, device);\n-                deviceDiscovered(device);\n+            if (initComplete) {\n+                BlueGigaScanResponseEvent scanEvent = (BlueGigaScanResponseEvent) event;\n+\n+                // We use the scan event to add any devices we hear to the devices list\n+                // The device gets created, and then manages itself for discovery etc.\n+                BluetoothAddress sender = new BluetoothAddress(scanEvent.getSender());\n+                BlueGigaBluetoothDevice device;\n+                if (devices.get(sender) == null) {\n+                    logger.debug(\"BlueGiga adding new device to adaptor {}: {}\", address, sender);\n+                    device = new BlueGigaBluetoothDevice(this, new BluetoothAddress(scanEvent.getSender()),\n+                            scanEvent.getAddressType());\n+                    devices.put(sender, device);\n+                    deviceDiscovered(device);\n+                }\n+            } else {\n+                logger.trace(\"Ignore BlueGigaScanResponseEvent as initialization is not complite\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "originalPosition": 390}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTIzMTk1", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351923195", "createdAt": "2020-02-02T07:17:24Z", "commit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzoxNzoyNFrOFkgdjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzoxNzoyNFrOFkgdjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyNDkwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            executor.submit(new Runnable() {\n          \n          \n            \n                            executor.submit(BlueGigaSerialHandler.this::clearOngoingTransactionAndSendNext);", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373824908", "createdAt": "2020-02-02T07:17:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -321,32 +383,84 @@ public T call() {\n                     }\n                 }\n \n+                cancelTransactionTimer();\n+\n                 // Remove the listener\n                 removeTransactionListener(this);\n \n+                // Send next transaction if any\n+                executor.submit(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "originalPosition": 319}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTIzMjYx", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351923261", "createdAt": "2020-02-02T07:19:35Z", "commit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzoxOTozNVrOFkgd5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQwNzoxOTozNVrOFkgd5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgyNDk5Ng==", "bodyText": "Is this used?", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373824996", "createdAt": "2020-02-02T07:19:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -153,11 +162,35 @@\n     // List of device listeners\n     protected final ConcurrentHashMap<BluetoothAddress, BluetoothDeviceListener> deviceListeners = new ConcurrentHashMap<>();\n \n+    // private @NonNullByDefault({}) BlueGigaReschedulableTimer passiveScanIdleTimer;\n+\n+    private boolean initComplete = false;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> removeInactiveDevicesTask;\n+\n+    private volatile boolean activeScanEnabled = false;\n+\n+    private @NonNullByDefault({}) Future<?> passiveScanIdleTimer;\n+\n     public BlueGigaBridgeHandler(Bridge bridge, SerialPortManager serialPortManager) {\n         super(bridge);\n         this.serialPortManager = serialPortManager;\n     }\n \n+    Runnable bgScanTask = new Runnable() {\n+\n+        @Override\n+        public void run() {\n+            if (!activeScanEnabled) {\n+                logger.debug(\"Activate passive scan\");\n+                bgEndProcedure();\n+                bgStartScanning(false, configuration.passiveScanInterval, configuration.passiveScanWindow);\n+            } else {\n+                logger.debug(\"Ignore passive scan activation as active scan is active\");\n+            }\n+        }\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b377871a0169056e3d191f6e0c9e0f6f91e7daab"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTM1NDY4", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351935468", "createdAt": "2020-02-02T11:35:21Z", "commit": {"oid": "dc0deb42f877f87427edcf077411dd3a933996b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxMTozNToyMlrOFkhTFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxMTozNToyMlrOFkhTFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgzODYxNA==", "bodyText": "Fix comment", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373838614", "createdAt": "2020-02-02T11:35:22Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -139,8 +140,10 @@\n     private OutputStream outputStream;\n \n     // The BlueGiga API handler\n-    @Nullable\n-    private BlueGigaSerialHandler bgHandler;\n+    private @NonNullByDefault({}) BlueGigaSerialHandler serialHandler;\n+\n+    // The BlueGiga API handler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0deb42f877f87427edcf077411dd3a933996b4"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTU1NjUz", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351955653", "createdAt": "2020-02-02T17:29:56Z", "commit": {"oid": "dc0deb42f877f87427edcf077411dd3a933996b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxNzoyOTo1NlrOFkiu3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxNzoyOTo1NlrOFkiu3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MjExMA==", "bodyText": "why not just double the constant? I don't see it used anywhere else.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373862110", "createdAt": "2020-02-02T17:29:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaTransactionManager.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.bluegiga.internal;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class provides transaction management and queuing of {@link BlueGigaCommand} frames.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ *\n+ */\n+public class BlueGigaTransactionManager implements BlueGigaSerialEventListener {\n+\n+    private static final int TRANSACTION_TIMEOUT_PERIOD_MS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BlueGigaTransactionManager.class);\n+\n+    /**\n+     * Unique transaction id for request and response correlation\n+     */\n+    private AtomicInteger transactionId = new AtomicInteger();\n+\n+    /**\n+     * Ongoing transaction id. If null, no ongoing transaction.\n+     */\n+    private volatile Integer ongoingTransactionId = null;\n+\n+    /**\n+     * Transaction listeners are used internally to correlate the commands and responses\n+     */\n+    private final List<BluetoothListener<? extends BlueGigaResponse>> transactionListeners = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * The event listeners will be notified of any asynchronous events\n+     */\n+    private final Set<BlueGigaEventListener> eventListeners = new CopyOnWriteArraySet<>();\n+\n+    private final Queue<BlueGigaUniqueCommand> sendQueue = new LinkedList<BlueGigaUniqueCommand>();\n+    private final ScheduledExecutorService executor;\n+    private final BlueGigaSerialHandler serialHandler;\n+\n+    private Future<?> transactionTimeoutTimer;\n+\n+    /**\n+     * Internal interface for transaction listeners.\n+     */\n+    interface BluetoothListener<T extends BlueGigaResponse> {\n+        boolean transactionEvent(BlueGigaResponse response, Integer transactionId);\n+\n+        boolean transactionTimeout(Integer transactionId);\n+    }\n+\n+    public BlueGigaTransactionManager(BlueGigaSerialHandler serialHandler, ScheduledExecutorService executor) {\n+        this.serialHandler = serialHandler;\n+        this.executor = executor;\n+        serialHandler.addEventListener(this);\n+    }\n+\n+    /**\n+     * Requests parser thread to shutdown. Waits forever while the parser thread is getting shut down.\n+     */\n+    public void close() {\n+        close(0);\n+        logger.debug(\"Closed\");\n+    }\n+\n+    /**\n+     * Requests parser thread to shutdown. Waits specified milliseconds while the parser thread is getting shut down.\n+     *\n+     * @param timeout milliseconds to wait\n+     */\n+    public void close(long timeout) {\n+        serialHandler.removeEventListener(this);\n+        cancelTransactionTimer();\n+        sendQueue.clear();\n+        transactionListeners.clear();\n+        eventListeners.clear();\n+    }\n+\n+    private void startTransactionTimer() {\n+        transactionTimeoutTimer = executor.schedule(() -> {\n+            notifyTransactionTimeout(ongoingTransactionId);\n+        }, TRANSACTION_TIMEOUT_PERIOD_MS * 2, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0deb42f877f87427edcf077411dd3a933996b4"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTU2NDgz", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-351956483", "createdAt": "2020-02-02T17:47:01Z", "commit": {"oid": "dc0deb42f877f87427edcf077411dd3a933996b4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxNzo0NzowMVrOFkiykw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQxNzo0NzowMVrOFkiykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg2MzA1OQ==", "bodyText": "this timeout isn't used", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r373863059", "createdAt": "2020-02-02T17:47:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaTransactionManager.java", "diffHunk": "@@ -0,0 +1,380 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.bluegiga.internal;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class provides transaction management and queuing of {@link BlueGigaCommand} frames.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ *\n+ */\n+public class BlueGigaTransactionManager implements BlueGigaSerialEventListener {\n+\n+    private static final int TRANSACTION_TIMEOUT_PERIOD_MS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BlueGigaTransactionManager.class);\n+\n+    /**\n+     * Unique transaction id for request and response correlation\n+     */\n+    private AtomicInteger transactionId = new AtomicInteger();\n+\n+    /**\n+     * Ongoing transaction id. If null, no ongoing transaction.\n+     */\n+    private volatile Integer ongoingTransactionId = null;\n+\n+    /**\n+     * Transaction listeners are used internally to correlate the commands and responses\n+     */\n+    private final List<BluetoothListener<? extends BlueGigaResponse>> transactionListeners = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * The event listeners will be notified of any asynchronous events\n+     */\n+    private final Set<BlueGigaEventListener> eventListeners = new CopyOnWriteArraySet<>();\n+\n+    private final Queue<BlueGigaUniqueCommand> sendQueue = new LinkedList<BlueGigaUniqueCommand>();\n+    private final ScheduledExecutorService executor;\n+    private final BlueGigaSerialHandler serialHandler;\n+\n+    private Future<?> transactionTimeoutTimer;\n+\n+    /**\n+     * Internal interface for transaction listeners.\n+     */\n+    interface BluetoothListener<T extends BlueGigaResponse> {\n+        boolean transactionEvent(BlueGigaResponse response, Integer transactionId);\n+\n+        boolean transactionTimeout(Integer transactionId);\n+    }\n+\n+    public BlueGigaTransactionManager(BlueGigaSerialHandler serialHandler, ScheduledExecutorService executor) {\n+        this.serialHandler = serialHandler;\n+        this.executor = executor;\n+        serialHandler.addEventListener(this);\n+    }\n+\n+    /**\n+     * Requests parser thread to shutdown. Waits forever while the parser thread is getting shut down.\n+     */\n+    public void close() {\n+        close(0);\n+        logger.debug(\"Closed\");\n+    }\n+\n+    /**\n+     * Requests parser thread to shutdown. Waits specified milliseconds while the parser thread is getting shut down.\n+     *\n+     * @param timeout milliseconds to wait\n+     */\n+    public void close(long timeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0deb42f877f87427edcf077411dd3a933996b4"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNzUxMjYw", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-352751260", "createdAt": "2020-02-04T06:42:32Z", "commit": {"oid": "3837d038fd7459f5bf2385764f04b2f7c6796d37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjo0MjozMlrOFlJeqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjo0MjozMlrOFlJeqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjkzOA==", "bodyText": "Rather than constantly cancelling and rescheduling this, why not have it run as a fixed schedule task? Then use locks to make sure that the scheduled task doesn't run when other commands are running. Maybe just synchronize all of the bg* methods?", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r374496938", "createdAt": "2020-02-04T06:42:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -249,16 +238,104 @@ public void initialize() {\n     @Override\n     public void dispose() {\n         try {\n-            BlueGigaSerialHandler bgh = getBgHandler();\n-            bgh.removeEventListener(this);\n-            bgh.removeHandlerListener(this);\n-            bgh.close();\n+            stopScheduledTasks();\n+            transactionManager.removeEventListener(this);\n+            serialHandler.removeHandlerListener(this);\n+            transactionManager.close();\n+            serialHandler.close();\n+            initComplete = false;\n+            devices.clear();\n+            connections.clear();\n         } catch (IllegalStateException e) {\n             // ignore if handler wasn't set at all\n         }\n         closeSerialPort();\n     }\n \n+    private void schedulePassiveScan() {\n+        cancelScheduledPassiveScan();\n+        passiveScanIdleTimer = executor.schedule(() -> {\n+            if (!activeScanEnabled) {\n+                logger.debug(\"Activate passive scan\");\n+                bgEndProcedure();\n+                bgStartScanning(false, configuration.passiveScanInterval, configuration.passiveScanWindow);\n+            } else {\n+                logger.debug(\"Ignore passive scan activation as active scan is active\");\n+            }\n+        }, configuration.passiveScanIdleTime, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3837d038fd7459f5bf2385764f04b2f7c6796d37"}, "originalPosition": 259}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzI5Mzgx", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-353329381", "createdAt": "2020-02-04T21:54:32Z", "commit": {"oid": "3837d038fd7459f5bf2385764f04b2f7c6796d37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1NDozMlrOFlk0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1NDozMlrOFlk0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NDgxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (connectResponse.getResult() != BgApiResponse.SUCCESS) {\n          \n          \n            \n                        return connectResponse.getResult() == BgApiResponse.SUCCESS;", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r374944813", "createdAt": "2020-02-04T21:54:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -445,27 +469,31 @@ public boolean bgConnect(BluetoothAddress address, BluetoothAddressType addressT\n             return false;\n         }\n \n-        bgSetMode();\n+        logger.debug(\"BlueGiga Connect: address {}.\", address);\n+        cancelScheduledPassiveScan();\n \n         // Connect...\n-        int connIntervalMin = 60;\n-        int connIntervalMax = 100;\n-        int latency = 0;\n-        int timeout = 100;\n-\n         BlueGigaConnectDirectCommand connect = new BlueGigaConnectDirectCommand();\n         connect.setAddress(address.toString());\n         connect.setAddrType(addressType);\n-        connect.setConnIntervalMin(connIntervalMin);\n-        connect.setConnIntervalMax(connIntervalMax);\n-        connect.setLatency(latency);\n-        connect.setTimeout(timeout);\n-        BlueGigaConnectDirectResponse connectResponse = (BlueGigaConnectDirectResponse) getBgHandler()\n-                .sendTransaction(connect);\n-        if (connectResponse.getResult() != BgApiResponse.SUCCESS) {\n+        connect.setConnIntervalMin(configuration.connIntervalMin);\n+        connect.setConnIntervalMax(configuration.connIntervalMax);\n+        connect.setLatency(configuration.connLatency);\n+        connect.setTimeout(configuration.connTimeout);\n+\n+        try {\n+            BlueGigaConnectDirectResponse connectResponse = transactionManager.sendTransaction(connect,\n+                    BlueGigaConnectDirectResponse.class, COMMAND_TIMEOUT_MS);\n+            if (connectResponse.getResult() != BgApiResponse.SUCCESS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3837d038fd7459f5bf2385764f04b2f7c6796d37"}, "originalPosition": 491}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzM3OTkx", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-353337991", "createdAt": "2020-02-04T22:09:58Z", "commit": {"oid": "3837d038fd7459f5bf2385764f04b2f7c6796d37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjowOTo1OFrOFllOsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjowOTo1OFrOFllOsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1MTYwMg==", "bodyText": "Is this check still needed?", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r374951602", "createdAt": "2020-02-04T22:09:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -249,16 +238,104 @@ public void initialize() {\n     @Override\n     public void dispose() {\n         try {\n-            BlueGigaSerialHandler bgh = getBgHandler();\n-            bgh.removeEventListener(this);\n-            bgh.removeHandlerListener(this);\n-            bgh.close();\n+            stopScheduledTasks();\n+            transactionManager.removeEventListener(this);\n+            serialHandler.removeHandlerListener(this);\n+            transactionManager.close();\n+            serialHandler.close();\n+            initComplete = false;\n+            devices.clear();\n+            connections.clear();\n         } catch (IllegalStateException e) {\n             // ignore if handler wasn't set at all\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3837d038fd7459f5bf2385764f04b2f7c6796d37"}, "originalPosition": 245}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTU5NTk5", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-354159599", "createdAt": "2020-02-06T01:55:19Z", "commit": {"oid": "7b5a1cb5542b79b954b7a5a3e90ef51db0082198"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo1NToxOVrOFmNIvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMTo1NToyN1rOFmNI1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwNTQzOQ==", "bodyText": "++ Output exception. E.g.\nlogger.info(\"Command send failed to BlueGiga controller\", e);", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r375605439", "createdAt": "2020-02-06T01:55:19Z", "author": {"login": "pfink"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -171,75 +191,44 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n \n     @Override\n     public void initialize() {\n-        Object discovery = getConfig().get(BlueGigaAdapterConstants.PROPERTY_DISCOVERY);\n-        if (discovery != null && discovery.toString().equalsIgnoreCase(Boolean.FALSE.toString())) {\n-            discoveryActive = false;\n-            logger.debug(\"Deactivated discovery participation.\");\n-        }\n+        configuration = getConfigAs(BlueGigaConfiguration.class);\n+        logger.debug(\"Using configuration: {}\", configuration);\n \n-        final String portId = (String) getConfig().get(BlueGigaAdapterConstants.CONFIGURATION_PORT);\n-\n-        if (portId == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial port must be configured!\");\n-            return;\n-        }\n-        if (openSerialPort(portId, 115200)) {\n-            BlueGigaSerialHandler bgh = new BlueGigaSerialHandler(inputStream, outputStream);\n-            // Create and send the reset command to the dongle\n-            bgh.addEventListener(this);\n-            bgh.addHandlerListener(this);\n-            this.setBgHandler(bgh);\n+        if (openSerialPort(configuration.port, 115200)) {\n+            serialHandler = new BlueGigaSerialHandler(inputStream, outputStream);\n+            transactionManager = new BlueGigaTransactionManager(serialHandler, executor);\n+            serialHandler.addHandlerListener(this);\n+            transactionManager.addEventListener(this);\n \n             updateStatus(ThingStatus.UNKNOWN);\n \n-            scheduler.submit(() -> {\n+            try {\n                 // Stop any procedures that are running\n-                bgStopProcedure();\n-\n-                // Close all transactions\n-                BlueGigaCommand command = new BlueGigaGetConnectionsCommand();\n-                BlueGigaGetConnectionsResponse connectionsResponse = (BlueGigaGetConnectionsResponse) bgh\n-                        .sendTransaction(command);\n-                if (connectionsResponse != null) {\n-                    maxConnections = connectionsResponse.getMaxconn();\n-                }\n+                bgEndProcedure();\n+\n+                // Set mode to non-discoverable etc.\n+                bgSetMode();\n+\n+                // Get maximum parallel connections\n+                maxConnections = readMaxConnections().getMaxconn();\n \n                 // Close all connections so we start from a known position\n                 for (int connection = 0; connection < maxConnections; connection++) {\n                     bgDisconnect(connection);\n                 }\n \n                 // Get our Bluetooth address\n-                command = new BlueGigaAddressGetCommand();\n-                BlueGigaAddressGetResponse addressResponse = (BlueGigaAddressGetResponse) bgh.sendTransaction(command);\n-                if (addressResponse != null) {\n-                    address = new BluetoothAddress(addressResponse.getAddress());\n-                    updateStatus(ThingStatus.ONLINE);\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE);\n-                }\n+                address = new BluetoothAddress(readAddress().getAddress());\n \n-                command = new BlueGigaGetInfoCommand();\n-                BlueGigaGetInfoResponse infoResponse = (BlueGigaGetInfoResponse) bgh.sendTransaction(command);\n+                updateThingProperties();\n \n-                // Set mode to non-discoverable etc.\n-                // Not doing this will cause connection failures later\n-                bgSetMode();\n-\n-                // Start passive scan\n-                bgStartScanning(false, passiveScanInterval, passiveScanWindow);\n-\n-                Map<String, String> properties = editProperties();\n-                properties.put(BluetoothBindingConstants.PROPERTY_MAXCONNECTIONS, Integer.toString(maxConnections));\n-                properties.put(Thing.PROPERTY_FIRMWARE_VERSION,\n-                        String.format(\"%d.%d\", infoResponse.getMajor(), infoResponse.getMinor()));\n-                properties.put(Thing.PROPERTY_HARDWARE_VERSION, Integer.toString(infoResponse.getHardware()));\n-                properties.put(BlueGigaAdapterConstants.PROPERTY_PROTOCOL,\n-                        Integer.toString(infoResponse.getProtocolVersion()));\n-                properties.put(BlueGigaAdapterConstants.PROPERTY_LINKLAYER,\n-                        Integer.toString(infoResponse.getLlVersion()));\n-                updateProperties(properties);\n-            });\n+                initComplete = true;\n+                updateStatus(ThingStatus.ONLINE);\n+                startScheduledTasks();\n+            } catch (BlueGigaException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5a1cb5542b79b954b7a5a3e90ef51db0082198"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYwNTQ2Mw==", "bodyText": "This throws NPE during disposal if bridge was not correctly initialized.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r375605463", "createdAt": "2020-02-06T01:55:27Z", "author": {"login": "pfink"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -248,17 +237,98 @@ public void initialize() {\n \n     @Override\n     public void dispose() {\n-        try {\n-            BlueGigaSerialHandler bgh = getBgHandler();\n-            bgh.removeEventListener(this);\n-            bgh.removeHandlerListener(this);\n-            bgh.close();\n-        } catch (IllegalStateException e) {\n-            // ignore if handler wasn't set at all\n-        }\n+        stopScheduledTasks();\n+        transactionManager.removeEventListener(this);\n+        serialHandler.removeHandlerListener(this);\n+        transactionManager.close();\n+        serialHandler.close();\n+        initComplete = false;\n+        devices.clear();\n+        connections.clear();\n         closeSerialPort();\n     }\n \n+    private void schedulePassiveScan() {\n+        cancelScheduledPassiveScan();\n+        passiveScanIdleTimer = executor.schedule(() -> {\n+            if (!activeScanEnabled) {\n+                logger.debug(\"Activate passive scan\");\n+                bgEndProcedure();\n+                bgStartScanning(false, configuration.passiveScanInterval, configuration.passiveScanWindow);\n+            } else {\n+                logger.debug(\"Ignore passive scan activation as active scan is active\");\n+            }\n+        }, configuration.passiveScanIdleTime, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void cancelScheduledPassiveScan() {\n+        if (passiveScanIdleTimer != null) {\n+            passiveScanIdleTimer.cancel(true);\n+        }\n+    }\n+\n+    private void startScheduledTasks() {\n+        schedulePassiveScan();\n+        logger.debug(\"Start scheduled task to remove inactive devices\");\n+        removeInactiveDevicesTask = scheduler.scheduleWithFixedDelay(this::removeInactiveDevices, 1, 1,\n+                TimeUnit.MINUTES);\n+    }\n+\n+    private void stopScheduledTasks() {\n+        cancelScheduledPassiveScan();\n+        removeInactiveDevicesTask.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b5a1cb5542b79b954b7a5a3e90ef51db0082198"}, "originalPosition": 278}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzY2NTA1", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-357766505", "createdAt": "2020-02-12T20:32:19Z", "commit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozMjoxOVrOFo9l1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozMjoxOVrOFo9l1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NjQ2OA==", "bodyText": "I would make sure to call dispose on all the devices as well to make sure they unregister from stuff.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r378496468", "createdAt": "2020-02-12T20:32:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -171,92 +193,174 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n \n     @Override\n     public void initialize() {\n-        Object discovery = getConfig().get(BlueGigaAdapterConstants.PROPERTY_DISCOVERY);\n-        if (discovery != null && discovery.toString().equalsIgnoreCase(Boolean.FALSE.toString())) {\n-            discoveryActive = false;\n-            logger.debug(\"Deactivated discovery participation.\");\n+        configuration = getConfigAs(BlueGigaConfiguration.class);\n+        initTask = executor.scheduleWithFixedDelay(this::start, 0, INITIALIZATION_INTERVAL_SEC, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        stop(true);\n+    }\n+\n+    private void start() {\n+        try {\n+            if (!initComplete) {\n+                logger.debug(\"Initialize BlueGiga\");\n+                logger.debug(\"Using configuration: {}\", configuration);\n+                stop(false);\n+\n+                if (openSerialPort(configuration.port, 115200)) {\n+                    serialHandler = new BlueGigaSerialHandler(inputStream, outputStream);\n+                    transactionManager = new BlueGigaTransactionManager(serialHandler, executor);\n+                    serialHandler.addHandlerListener(this);\n+                    transactionManager.addEventListener(this);\n+\n+                    updateStatus(ThingStatus.UNKNOWN);\n+\n+                    try {\n+                        // Stop any procedures that are running\n+                        bgEndProcedure();\n+\n+                        // Set mode to non-discoverable etc.\n+                        bgSetMode();\n+\n+                        // Get maximum parallel connections\n+                        maxConnections = readMaxConnections().getMaxconn();\n+\n+                        // Close all connections so we start from a known position\n+                        for (int connection = 0; connection < maxConnections; connection++) {\n+                            sendCommandWithoutChecks(\n+                                    new BlueGigaDisconnectCommand.CommandBuilder().withConnection(connection).build(),\n+                                    BlueGigaDisconnectResponse.class);\n+                        }\n+\n+                        // Get our Bluetooth address\n+                        address = new BluetoothAddress(readAddress().getAddress());\n+\n+                        updateThingProperties();\n+\n+                        initComplete = true;\n+                        updateStatus(ThingStatus.ONLINE);\n+                        startScheduledTasks();\n+                    } catch (BlueGigaException e) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                                \"Initialization of BlueGiga controller failed\");\n+                    }\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                            \"Failed opening serial port.\");\n+                }\n+            }\n+        } catch (RuntimeException e) {\n+            // Avoid scheduled task to shutdown\n+            // e.g. when BlueGiga module is detached\n+            logger.debug(\"Start failed\", e);\n         }\n+    }\n \n-        final String portId = (String) getConfig().get(BlueGigaAdapterConstants.CONFIGURATION_PORT);\n+    private void stop(boolean exit) {\n+        if (transactionManager != null) {\n+            transactionManager.removeEventListener(this);\n+            transactionManager.close();\n+        }\n \n-        if (portId == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial port must be configured!\");\n-            return;\n+        if (serialHandler != null) {\n+            serialHandler.removeHandlerListener(this);\n+            serialHandler.close();\n         }\n-        if (openSerialPort(portId, 115200)) {\n-            BlueGigaSerialHandler bgh = new BlueGigaSerialHandler(inputStream, outputStream);\n-            // Create and send the reset command to the dongle\n-            bgh.addEventListener(this);\n-            bgh.addHandlerListener(this);\n-            this.setBgHandler(bgh);\n-\n-            updateStatus(ThingStatus.UNKNOWN);\n-\n-            scheduler.submit(() -> {\n-                // Stop any procedures that are running\n-                bgStopProcedure();\n-\n-                // Close all transactions\n-                BlueGigaCommand command = new BlueGigaGetConnectionsCommand();\n-                BlueGigaGetConnectionsResponse connectionsResponse = (BlueGigaGetConnectionsResponse) bgh\n-                        .sendTransaction(command);\n-                if (connectionsResponse != null) {\n-                    maxConnections = connectionsResponse.getMaxconn();\n-                }\n \n-                // Close all connections so we start from a known position\n-                for (int connection = 0; connection < maxConnections; connection++) {\n-                    bgDisconnect(connection);\n-                }\n+        initComplete = false;\n+        connections.clear();\n+        closeSerialPort();\n \n-                // Get our Bluetooth address\n-                command = new BlueGigaAddressGetCommand();\n-                BlueGigaAddressGetResponse addressResponse = (BlueGigaAddressGetResponse) bgh.sendTransaction(command);\n-                if (addressResponse != null) {\n-                    address = new BluetoothAddress(addressResponse.getAddress());\n-                    updateStatus(ThingStatus.ONLINE);\n-                } else {\n-                    updateStatus(ThingStatus.OFFLINE);\n-                }\n+        if (exit) {\n+            stopScheduledTasks();\n+            initTask.cancel(true);\n+            devices.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "originalPosition": 257}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzY4ODA3", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-357768807", "createdAt": "2020-02-12T20:36:13Z", "commit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozNjoxM1rOFo9s8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozNjoxM1rOFo9s8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5ODI5MA==", "bodyText": "Is there a better way to do this than a Thread.sleep? Is there an easily checkable condition you can wait for?", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r378498290", "createdAt": "2020-02-12T20:36:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -165,10 +76,28 @@ public void run() {\n                     throw new IllegalStateException(\"BlueGiga handler thread failed to start\");\n                 }\n             } catch (InterruptedException ignore) {\n-                /* ignore */ }\n+                /* ignore */\n+            }\n         }\n     }\n \n+    private void flush() {\n+        // Send End Procedure command to end all activity and flush input buffer to start from know state\n+        logger.trace(\"Flush input stream\");\n+        sendFrame(new BlueGigaEndProcedureCommand(), false);\n+        try {\n+            // Wait BlueGiga controller have stopped all activity\n+            Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzcxMzYw", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-357771360", "createdAt": "2020-02-12T20:40:39Z", "commit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0MDozOVrOFo90hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0MDozOVrOFo90hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMDIyOA==", "bodyText": "I would try to use bulk writes if possible, it would give the underlying OutputStream implementation a chance to optimize if it can, especially if the underlying stream is unbuffered.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r378500228", "createdAt": "2020-02-12T20:40:39Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -206,255 +137,80 @@ public boolean isAlive() {\n         return parserThread != null && parserThread.isAlive() && !close;\n     }\n \n-    // Synchronize this method to ensure a packet gets sent as a block\n-    private synchronized void sendFrame(BlueGigaCommand bleFrame) {\n+    public void sendFrame(BlueGigaCommand bleFrame) throws IllegalStateException {\n+        sendFrame(bleFrame, true);\n+    }\n+\n+    private void sendFrame(BlueGigaCommand bleFrame, boolean checkIsAlive) throws IllegalStateException {\n+        if (checkIsAlive) {\n+            checkIfAlive();\n+        }\n+\n         // Send the data\n+        logger.trace(\"sendFrame: {}\", bleFrame);\n         try {\n             int[] payload = bleFrame.serialize();\n-            logger.trace(\"TX BLE frame: {}\", printHex(payload, payload.length));\n+            if (logger.isTraceEnabled()) {\n+                logger.trace(\"BLE TX: {}\", printHex(payload, payload.length));\n+            }\n             for (int b : payload) {\n                 outputStream.write(b);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "originalPosition": 240}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzc1MjAy", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-357775202", "createdAt": "2020-02-12T20:47:06Z", "commit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0NzowN1rOFo-AgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0NzowN1rOFo-AgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMzI5Nw==", "bodyText": "I don't know how well this works, but I can think of much more reliable (albeit more complicated) ways of checking the frame header. Might not be worth addressing now but should probably be noted for later.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r378503297", "createdAt": "2020-02-12T20:47:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaSerialHandler.java", "diffHunk": "@@ -474,26 +230,74 @@ private void checkIfAlive() {\n         }\n     }\n \n-    /**\n-     * Notify handler event listeners that the handler was bluegigaClosed due to an error specified as an argument.\n-     *\n-     * @param reason the reason to bluegigaClosed\n-     */\n-    private void notifyClosed(Exception reason) {\n-        // It should be safe enough not to use the NotificationService as this is a fatal error, no any further actions\n-        // can be done with the handler, a new handler should be re-created\n-        // There is another reason why NotificationService can't be used - the listeners should be notified immediately\n-        for (BlueGigaHandlerListener listener : handlerListeners) {\n-            try {\n-                listener.bluegigaClosed(reason);\n-            } catch (Exception ex) {\n-                logger.warn(\"Execution error of a BlueGigaHandlerListener listener.\", ex);\n-            }\n-        }\n-    }\n+    private Thread createBlueGigaBLEHandler() {\n+        final int framecheckParams[] = new int[] { 0x00, 0x7F, 0xC0, 0xF8, 0xE0 };\n+        return new Thread(\"BlueGigaBLEHandler\") {\n+            @Override\n+            public void run() {\n+                int exceptionCnt = 0;\n+                logger.trace(\"BlueGiga BLE thread started\");\n+                int[] inputBuffer = new int[BLE_MAX_LENGTH];\n+                int inputCount = 0;\n+                int inputLength = 0;\n \n-    interface BluetoothListener<T extends BlueGigaResponse> {\n-        boolean transactionEvent(BlueGigaResponse response);\n-    }\n+                while (!close) {\n+                    try {\n+                        int val = inputStream.read();\n+                        if (val == -1) {\n+                            continue;\n+                        }\n \n+                        inputBuffer[inputCount++] = val;\n+\n+                        if (inputCount < 4) {\n+                            // The BGAPI protocol has no packet framing, and no error detection, so we do a few\n+                            // sanity checks on the header to try and allow resyncronisation should there be an\n+                            // error.\n+                            // Byte 0: Check technology type is bluetooth and high length is 0\n+                            // Byte 1: Check length is less than 64 bytes\n+                            // Byte 2: Check class ID is less than 8\n+                            // Byte 3: Check command ID is less than 16\n+                            if ((val & framecheckParams[inputCount]) != 0) {\n+                                logger.debug(\"BlueGiga framing error byte {} = {}\", inputCount, val);\n+                                inputCount = 0;\n+                                continue;\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "originalPosition": 569}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzc3MDA3", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-357777007", "createdAt": "2020-02-12T20:50:06Z", "commit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1MDowNlrOFo-GAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1MDowNlrOFo-GAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNDcwNA==", "bodyText": "Just to be explicit.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        private volatile boolean complete;\n          \n          \n            \n                        private volatile boolean complete = false;", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r378504704", "createdAt": "2020-02-12T20:50:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaTransactionManager.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.bluegiga.internal;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class provides transaction management and queuing of {@link BlueGigaCommand} frames.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ *\n+ */\n+public class BlueGigaTransactionManager implements BlueGigaSerialEventListener {\n+\n+    private static final int TRANSACTION_TIMEOUT_PERIOD_MS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BlueGigaTransactionManager.class);\n+\n+    /**\n+     * Unique transaction id for request and response correlation\n+     */\n+    private AtomicInteger transactionId = new AtomicInteger();\n+\n+    /**\n+     * Ongoing transaction id. If null, no ongoing transaction.\n+     */\n+    private volatile Integer ongoingTransactionId = null;\n+\n+    /**\n+     * Transaction listeners are used internally to correlate the commands and responses\n+     */\n+    private final List<BluetoothListener<? extends BlueGigaResponse>> transactionListeners = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * The event listeners will be notified of any asynchronous events\n+     */\n+    private final Set<BlueGigaEventListener> eventListeners = new CopyOnWriteArraySet<>();\n+\n+    private final Queue<BlueGigaUniqueCommand> sendQueue = new LinkedList<BlueGigaUniqueCommand>();\n+    private final ScheduledExecutorService executor;\n+    private final BlueGigaSerialHandler serialHandler;\n+\n+    private Future<?> transactionTimeoutTimer;\n+\n+    /**\n+     * Internal interface for transaction listeners.\n+     */\n+    interface BluetoothListener<T extends BlueGigaResponse> {\n+        boolean transactionEvent(BlueGigaResponse response, Integer transactionId);\n+\n+        boolean transactionTimeout(Integer transactionId);\n+    }\n+\n+    public BlueGigaTransactionManager(BlueGigaSerialHandler serialHandler, ScheduledExecutorService executor) {\n+        this.serialHandler = serialHandler;\n+        this.executor = executor;\n+        serialHandler.addEventListener(this);\n+    }\n+\n+    /**\n+     * Close transaction manager.\n+     */\n+    public void close() {\n+        serialHandler.removeEventListener(this);\n+        cancelTransactionTimer();\n+        sendQueue.clear();\n+        transactionListeners.clear();\n+        eventListeners.clear();\n+        logger.debug(\"Closed\");\n+    }\n+\n+    private void startTransactionTimer() {\n+        transactionTimeoutTimer = executor.schedule(() -> {\n+            notifyTransactionTimeout(ongoingTransactionId);\n+        }, TRANSACTION_TIMEOUT_PERIOD_MS, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void cancelTransactionTimer() {\n+        if (transactionTimeoutTimer != null) {\n+            transactionTimeoutTimer.cancel(true);\n+        }\n+    }\n+\n+    private void sendNextFrame() {\n+        BlueGigaUniqueCommand nextFrame = sendQueue.poll();\n+        if (nextFrame == null) {\n+            // Nothing to send\n+            logger.trace(\"Send frame: nothing to send\");\n+            return;\n+        }\n+        cancelTransactionTimer();\n+        logger.debug(\"Send frame #{}: {}\", nextFrame.getTransactionId(), nextFrame.getMessage());\n+        ongoingTransactionId = nextFrame.getTransactionId();\n+        serialHandler.sendFrame(nextFrame.getMessage());\n+        startTransactionTimer();\n+    }\n+\n+    /**\n+     * Add a {@link BlueGigaCommand} frame to the send queue. The sendQueue is a\n+     * FIFO queue. This method queues a {@link BlueGigaCommand} frame without\n+     * waiting for a response.\n+     *\n+     * @param transaction\n+     *            {@link BlueGigaCommand}\n+     */\n+    public void queueFrame(BlueGigaUniqueCommand request) {\n+        logger.trace(\"Queue TX BLE frame: {}\", request);\n+        sendQueue.add(request);\n+        logger.trace(\"TX BLE queue size: {}\", sendQueue.size());\n+    }\n+\n+    private void sendNextTransactionIfNoOngoing() {\n+        synchronized (this) {\n+            logger.trace(\"Send next transaction if no ongoing\");\n+            if (ongoingTransactionId == null) {\n+                sendNextFrame();\n+            }\n+        }\n+    }\n+\n+    private void clearOngoingTransactionAndSendNext() {\n+        synchronized (this) {\n+            logger.trace(\"Clear ongoing transaction and send next frame from queue\");\n+            ongoingTransactionId = null;\n+            sendNextFrame();\n+        }\n+    }\n+\n+    private void addTransactionListener(BluetoothListener<? extends BlueGigaResponse> listener) {\n+        if (transactionListeners.contains(listener)) {\n+            return;\n+        }\n+\n+        transactionListeners.add(listener);\n+    }\n+\n+    private void removeTransactionListener(BluetoothListener<?> listener) {\n+        transactionListeners.remove(listener);\n+    }\n+\n+    /**\n+     * Sends an BlueGiga request without waiting for the response.\n+     *\n+     * @param bleCommand {@link BlueGigaCommand}\n+     * @return response {@link Future} {@link BlueGigaResponse}\n+     */\n+    private <T extends BlueGigaResponse> Future<T> sendBleRequestAsync(final BlueGigaCommand bleCommand,\n+            final Class<T> expected) {\n+        class TransactionWaiter implements Callable<T>, BluetoothListener<T> {\n+            private volatile boolean complete;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzc3NDQz", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-357777443", "createdAt": "2020-02-12T20:50:47Z", "commit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1MDo0N1rOFo-HYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo1MDo0N1rOFo-HYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwNTA1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        BlueGigaUniqueCommand query = new BlueGigaUniqueCommand(bleCommand, transactionId.getAndIncrement());\n          \n          \n            \n                        private BlueGigaUniqueCommand query = new BlueGigaUniqueCommand(bleCommand, transactionId.getAndIncrement());", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r378505059", "createdAt": "2020-02-12T20:50:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaTransactionManager.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.bluegiga.internal;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class provides transaction management and queuing of {@link BlueGigaCommand} frames.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ *\n+ */\n+public class BlueGigaTransactionManager implements BlueGigaSerialEventListener {\n+\n+    private static final int TRANSACTION_TIMEOUT_PERIOD_MS = 100;\n+\n+    private final Logger logger = LoggerFactory.getLogger(BlueGigaTransactionManager.class);\n+\n+    /**\n+     * Unique transaction id for request and response correlation\n+     */\n+    private AtomicInteger transactionId = new AtomicInteger();\n+\n+    /**\n+     * Ongoing transaction id. If null, no ongoing transaction.\n+     */\n+    private volatile Integer ongoingTransactionId = null;\n+\n+    /**\n+     * Transaction listeners are used internally to correlate the commands and responses\n+     */\n+    private final List<BluetoothListener<? extends BlueGigaResponse>> transactionListeners = new CopyOnWriteArrayList<>();\n+\n+    /**\n+     * The event listeners will be notified of any asynchronous events\n+     */\n+    private final Set<BlueGigaEventListener> eventListeners = new CopyOnWriteArraySet<>();\n+\n+    private final Queue<BlueGigaUniqueCommand> sendQueue = new LinkedList<BlueGigaUniqueCommand>();\n+    private final ScheduledExecutorService executor;\n+    private final BlueGigaSerialHandler serialHandler;\n+\n+    private Future<?> transactionTimeoutTimer;\n+\n+    /**\n+     * Internal interface for transaction listeners.\n+     */\n+    interface BluetoothListener<T extends BlueGigaResponse> {\n+        boolean transactionEvent(BlueGigaResponse response, Integer transactionId);\n+\n+        boolean transactionTimeout(Integer transactionId);\n+    }\n+\n+    public BlueGigaTransactionManager(BlueGigaSerialHandler serialHandler, ScheduledExecutorService executor) {\n+        this.serialHandler = serialHandler;\n+        this.executor = executor;\n+        serialHandler.addEventListener(this);\n+    }\n+\n+    /**\n+     * Close transaction manager.\n+     */\n+    public void close() {\n+        serialHandler.removeEventListener(this);\n+        cancelTransactionTimer();\n+        sendQueue.clear();\n+        transactionListeners.clear();\n+        eventListeners.clear();\n+        logger.debug(\"Closed\");\n+    }\n+\n+    private void startTransactionTimer() {\n+        transactionTimeoutTimer = executor.schedule(() -> {\n+            notifyTransactionTimeout(ongoingTransactionId);\n+        }, TRANSACTION_TIMEOUT_PERIOD_MS, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private void cancelTransactionTimer() {\n+        if (transactionTimeoutTimer != null) {\n+            transactionTimeoutTimer.cancel(true);\n+        }\n+    }\n+\n+    private void sendNextFrame() {\n+        BlueGigaUniqueCommand nextFrame = sendQueue.poll();\n+        if (nextFrame == null) {\n+            // Nothing to send\n+            logger.trace(\"Send frame: nothing to send\");\n+            return;\n+        }\n+        cancelTransactionTimer();\n+        logger.debug(\"Send frame #{}: {}\", nextFrame.getTransactionId(), nextFrame.getMessage());\n+        ongoingTransactionId = nextFrame.getTransactionId();\n+        serialHandler.sendFrame(nextFrame.getMessage());\n+        startTransactionTimer();\n+    }\n+\n+    /**\n+     * Add a {@link BlueGigaCommand} frame to the send queue. The sendQueue is a\n+     * FIFO queue. This method queues a {@link BlueGigaCommand} frame without\n+     * waiting for a response.\n+     *\n+     * @param transaction\n+     *            {@link BlueGigaCommand}\n+     */\n+    public void queueFrame(BlueGigaUniqueCommand request) {\n+        logger.trace(\"Queue TX BLE frame: {}\", request);\n+        sendQueue.add(request);\n+        logger.trace(\"TX BLE queue size: {}\", sendQueue.size());\n+    }\n+\n+    private void sendNextTransactionIfNoOngoing() {\n+        synchronized (this) {\n+            logger.trace(\"Send next transaction if no ongoing\");\n+            if (ongoingTransactionId == null) {\n+                sendNextFrame();\n+            }\n+        }\n+    }\n+\n+    private void clearOngoingTransactionAndSendNext() {\n+        synchronized (this) {\n+            logger.trace(\"Clear ongoing transaction and send next frame from queue\");\n+            ongoingTransactionId = null;\n+            sendNextFrame();\n+        }\n+    }\n+\n+    private void addTransactionListener(BluetoothListener<? extends BlueGigaResponse> listener) {\n+        if (transactionListeners.contains(listener)) {\n+            return;\n+        }\n+\n+        transactionListeners.add(listener);\n+    }\n+\n+    private void removeTransactionListener(BluetoothListener<?> listener) {\n+        transactionListeners.remove(listener);\n+    }\n+\n+    /**\n+     * Sends an BlueGiga request without waiting for the response.\n+     *\n+     * @param bleCommand {@link BlueGigaCommand}\n+     * @return response {@link Future} {@link BlueGigaResponse}\n+     */\n+    private <T extends BlueGigaResponse> Future<T> sendBleRequestAsync(final BlueGigaCommand bleCommand,\n+            final Class<T> expected) {\n+        class TransactionWaiter implements Callable<T>, BluetoothListener<T> {\n+            private volatile boolean complete;\n+            private BlueGigaResponse response;\n+            BlueGigaUniqueCommand query = new BlueGigaUniqueCommand(bleCommand, transactionId.getAndIncrement());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f7f7b04a7e5d7c846cd24923b232721fa38a27"}, "originalPosition": 177}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d41250c43067829a35927f0485019c9e4dffed60", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/d41250c43067829a35927f0485019c9e4dffed60", "committedDate": "2020-02-13T15:45:02Z", "message": "[bluetooth.bluegiga] Code review fixes\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "831b1f5ac2d54bca761f75a36341255d536e49dd", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/831b1f5ac2d54bca761f75a36341255d536e49dd", "committedDate": "2020-02-15T08:12:45Z", "message": "[bluetooth.bluegiga] Disabled active discovery participation by default\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5681c7a481892efe2235318b2471cbf3ce78e024", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/5681c7a481892efe2235318b2471cbf3ce78e024", "committedDate": "2020-02-23T09:53:53Z", "message": "[bluetooth.bluegiga] Added timeout functionality for commands\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "86e19131be88b3c466b708504eb46665e46572d7", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/86e19131be88b3c466b708504eb46665e46572d7", "committedDate": "2020-02-23T10:32:31Z", "message": "[bluetooth.bluegiga] Added timeout functionality for commands\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjIzODMx", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-365223831", "createdAt": "2020-02-26T20:37:45Z", "commit": {"oid": "87a5a77714aae84cc398e8b26ed974f9bae95823"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODQ4MjEw", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-365848210", "createdAt": "2020-02-27T17:20:08Z", "commit": {"oid": "201454669b2d892b776b0ca657aa7b6dd16f4b04"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyMDowOVrOFvaERQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyMDowOVrOFvaERQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NDQ2OQ==", "bodyText": "where do these numbers come from? are they random or defined somewhere?", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r385254469", "createdAt": "2020-02-27T17:20:09Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -584,7 +584,7 @@ public boolean bgFindPrimaryServices(int connectionHandle) {\n                 .withConnection(connectionHandle)\n                 .withStart(1)\n                 .withEnd(65535)\n-                .withUuid(UUID.fromString(\"00002800-0000-0000-0000-000000000000\"))\n+                .withUuid(UUID.fromString(\"00002800-0000-1000-8000-00805F9B34FB\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "201454669b2d892b776b0ca657aa7b6dd16f4b04"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODc0MjAy", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-365874202", "createdAt": "2020-02-27T17:54:59Z", "commit": {"oid": "201454669b2d892b776b0ca657aa7b6dd16f4b04"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1NTowMFrOFvbRAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowNToxOFrOFvbmcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NDExMw==", "bodyText": "What about the default? I can't comment down there\n    low = 0x800000805f9b34fbL;\n    high = 0x0000000000001000L", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r385274113", "createdAt": "2020-02-27T17:55:00Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaResponse.java", "diffHunk": "@@ -93,13 +93,15 @@ protected UUID deserializeUuid() {\n         int length = buffer[position++];\n         switch (length) {\n             case 2:\n-                low = 0;\n-                high = ((long) buffer[position++] << 32) + ((long) buffer[position++] << 40);\n+                // 0000xxxx-0000-1000-8000-00805F9B34FB", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "201454669b2d892b776b0ca657aa7b6dd16f4b04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3ODg5Nw==", "bodyText": "And doesn't it make sense to use the methods in EirRecord? This alomost duplicates the code there.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r385278897", "createdAt": "2020-02-27T18:03:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/internal/BlueGigaResponse.java", "diffHunk": "@@ -93,13 +93,15 @@ protected UUID deserializeUuid() {\n         int length = buffer[position++];\n         switch (length) {\n             case 2:\n-                low = 0;\n-                high = ((long) buffer[position++] << 32) + ((long) buffer[position++] << 40);\n+                // 0000xxxx-0000-1000-8000-00805F9B34FB", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NDExMw=="}, "originalCommit": {"oid": "201454669b2d892b776b0ca657aa7b6dd16f4b04"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3OTYwMg==", "bodyText": "Thanks. Sounds good.", "url": "https://github.com/openhab/openhab-addons/pull/6921#discussion_r385279602", "createdAt": "2020-02-27T18:05:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.bluegiga/src/main/java/org/openhab/binding/bluetooth/bluegiga/handler/BlueGigaBridgeHandler.java", "diffHunk": "@@ -584,7 +584,7 @@ public boolean bgFindPrimaryServices(int connectionHandle) {\n                 .withConnection(connectionHandle)\n                 .withStart(1)\n                 .withEnd(65535)\n-                .withUuid(UUID.fromString(\"00002800-0000-0000-0000-000000000000\"))\n+                .withUuid(UUID.fromString(\"00002800-0000-1000-8000-00805F9B34FB\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1NDQ2OQ=="}, "originalCommit": {"oid": "201454669b2d892b776b0ca657aa7b6dd16f4b04"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ddbdc6845e8c9edcf472b80d8256755f172437", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/d2ddbdc6845e8c9edcf472b80d8256755f172437", "committedDate": "2020-03-06T18:59:47Z", "message": "[bluetooth.bluegiga] Introduced device commands and responses\n\nAdded abstract class between commands/responses and base class to be\nable to recognize which commands and responses contains connection\ninformation which will be used to correlate requests and responses.\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e44de8d468767ae55111315047c04c777c48a8c9", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/e44de8d468767ae55111315047c04c777c48a8c9", "committedDate": "2020-03-06T18:59:48Z", "message": "[bluetooth.bluegiga] Added more confiration options\n\nMore configuration options and use configuration class\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb061885a468a158462821c529a8a7fe8ae1af1", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/dbb061885a468a158462821c529a8a7fe8ae1af1", "committedDate": "2020-03-06T18:59:49Z", "message": "[bluetooth.bluegiga] Introduced passive scan idle timer\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e96d63fe61fe40d3b63b016343ee9437e5937d9e", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/e96d63fe61fe40d3b63b016343ee9437e5937d9e", "committedDate": "2020-03-06T18:59:50Z", "message": "[bluetooth.bluegiga] spaces to tabs\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667b4ea1bd53cf2d787aa9f1144ff1ba924bb98d", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/667b4ea1bd53cf2d787aa9f1144ff1ba924bb98d", "committedDate": "2020-03-06T18:59:52Z", "message": "[bluetooth.bluegiga] Introduced cleanup feature\n\nRemove old unused bluetooth devices from memory\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc59d2d1c919a3896db8d97d2aa0e198066d6320", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/cc59d2d1c919a3896db8d97d2aa0e198066d6320", "committedDate": "2020-03-06T18:59:53Z", "message": "[bluetooth.bluegiga] Check that attribute value event is for device\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be88b6fccf5a020631469945139c43d14ac212e5", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/be88b6fccf5a020631469945139c43d14ac212e5", "committedDate": "2020-03-06T18:59:54Z", "message": "[bluetooth.bluegiga] Message Correlation management\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71e7ca8c5753fe6f73d60f234de35e1eea34fa3c", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/71e7ca8c5753fe6f73d60f234de35e1eea34fa3c", "committedDate": "2020-03-06T18:59:55Z", "message": "[bluetooth.bluegiga] General improvements\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9c9ebee7dd9c92bb971da7b9f93811e4ed61a10", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/a9c9ebee7dd9c92bb971da7b9f93811e4ed61a10", "committedDate": "2020-03-06T18:59:56Z", "message": "[bluetooth.bluegiga] Changed accidentally changed Integer back to int\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e82de963f94813016fa06c18b8a9d247988c67b4", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/e82de963f94813016fa06c18b8a9d247988c67b4", "committedDate": "2020-03-06T16:22:02Z", "message": "[bluetooth.bluegiga] More NonNullByDefault\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "843d57ba8d0d6b8060f8c22412bbd82056e624e3", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/843d57ba8d0d6b8060f8c22412bbd82056e624e3", "committedDate": "2020-03-06T19:22:23Z", "message": "Fixed rebase issue\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14e0ee353deaf05e3d924b93c5b2fdd8e53b3796", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/14e0ee353deaf05e3d924b93c5b2fdd8e53b3796", "committedDate": "2020-03-06T19:27:05Z", "message": "[bluetooth.bluegiga] Review fixes\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1393c733facea64f4aefb526054b76ca18d3d9fc", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/1393c733facea64f4aefb526054b76ca18d3d9fc", "committedDate": "2020-03-06T19:27:07Z", "message": "[bluetooth.bluegiga] Removed unnecessary synchronization\n\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb10de192e044e66a83b53e52f2d3001da85f841", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/eb10de192e044e66a83b53e52f2d3001da85f841", "committedDate": "2020-03-06T19:27:08Z", "message": "[bluetooth.bluegiga] Restored accidentally removed deviceDiscovery\nmethod\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65cda09d26523cb1b8b67268fd41e09e6277418a", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/65cda09d26523cb1b8b67268fd41e09e6277418a", "committedDate": "2020-03-06T19:27:09Z", "message": "[bluetooh.bluegiga] Stop previous scan before start new\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff947d6842be55edb1dc503e09ab77e920782e38", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/ff947d6842be55edb1dc503e09ab77e920782e38", "committedDate": "2020-03-06T19:27:10Z", "message": "[bluetooth.bluegiga] unique transaction id support\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7606aee4cae1e8372fb64ac4cedd684c3b32ac5d", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/7606aee4cae1e8372fb64ac4cedd684c3b32ac5d", "committedDate": "2020-03-06T19:27:11Z", "message": "[bluetooth.bluegiga] Increased command timeout\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce4d423e0b0792df30b7156d27ef44a880657b0c", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/ce4d423e0b0792df30b7156d27ef44a880657b0c", "committedDate": "2020-03-06T19:27:12Z", "message": "[bluetooth.bluegiga] Finalization\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4814b952d75cf3da8e6a7ac6d10f70b2813aae6", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/b4814b952d75cf3da8e6a7ac6d10f70b2813aae6", "committedDate": "2020-03-06T19:27:13Z", "message": "[bluetooth.bluegiga] Fixed typo\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cc6980a0a6c216972c40aa2a2ffc7d250354371", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/6cc6980a0a6c216972c40aa2a2ffc7d250354371", "committedDate": "2020-03-06T19:27:14Z", "message": "[bluetooth.bluegiga] Improved transaction management\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42246de0cf7acbc46d351282bdb4095ec2feca3b", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/42246de0cf7acbc46d351282bdb4095ec2feca3b", "committedDate": "2020-03-06T19:27:15Z", "message": "[bluetooth.bluegiga] Renaming\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ba37a4ad8bfa48c96754f7b644e3b18925d5a4", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/f9ba37a4ad8bfa48c96754f7b644e3b18925d5a4", "committedDate": "2020-03-06T19:27:17Z", "message": "[bluetooth.bluegiga] Improved active scan functionality\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c505f1db5c609c54e71395bced40ab47b31e1438", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/c505f1db5c609c54e71395bced40ab47b31e1438", "committedDate": "2020-03-06T19:27:18Z", "message": "[bluetooth.bluegiga] Improved inactive device removal\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b34c0c65c78f83b575218c2be1b5fdbc9e4c263a", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/b34c0c65c78f83b575218c2be1b5fdbc9e4c263a", "committedDate": "2020-03-06T19:27:19Z", "message": "[bluetooth.bluegiga] Use ThreadPoolManager to create executor service\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "410a61e720a369ff08aaee7bbdacee735d5dace5", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/410a61e720a369ff08aaee7bbdacee735d5dace5", "committedDate": "2020-03-06T19:27:20Z", "message": "[bluetooth.bluegiga] Improved transaction timeout handling\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd7a46c1575da7f1d03480df2eaf6dde1f35ecc2", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/bd7a46c1575da7f1d03480df2eaf6dde1f35ecc2", "committedDate": "2020-03-06T19:27:21Z", "message": "[bluetooth.bluegiga] Improved error logging\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d275d25df317756986acc0f5c90f7f9f0edcc4e7", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/d275d25df317756986acc0f5c90f7f9f0edcc4e7", "committedDate": "2020-03-06T19:27:22Z", "message": "[bluetooth.bluegiga] Improvements\n\nSerialHandler use bridges executor service.\nPassive scan idle timer use executor service.\nTransaction id improvements.\nOther minor improvements.\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9392dd3b7d836ce09010fd0a46a76d13608cbacd", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/9392dd3b7d836ce09010fd0a46a76d13608cbacd", "committedDate": "2020-03-06T19:27:23Z", "message": "[bluetooth.bluegiga] Removed leftovers and fixed typos\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e62230036dda08a631f7d123d52c9575eca118b1", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/e62230036dda08a631f7d123d52c9575eca118b1", "committedDate": "2020-03-06T19:29:29Z", "message": "[bluetooth.bluegiga] Simplification\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ece01a5d7d94794e099b23f62dcf2c9efa5fd39", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/0ece01a5d7d94794e099b23f62dcf2c9efa5fd39", "committedDate": "2020-03-06T19:29:31Z", "message": "[bluetooth.bluegiga] Introduced transaction manager\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50b9397fbb9b70f70d8a6bb9a45e32960b2dbbae", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/50b9397fbb9b70f70d8a6bb9a45e32960b2dbbae", "committedDate": "2020-03-06T19:29:32Z", "message": "[bluetooth.bluegiga] typo fixes and simplified close method\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c104963e80f051aa3e105914abacfa88afaf4cff", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/c104963e80f051aa3e105914abacfa88afaf4cff", "committedDate": "2020-03-06T19:29:33Z", "message": "[bluetooth.bluegiga] Simplification\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e3a81aa586ab377fa6b957da8a653165b4e21e4", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/0e3a81aa586ab377fa6b957da8a653165b4e21e4", "committedDate": "2020-03-06T19:29:34Z", "message": "[bluetooth.bluegiga] More simplification\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "730d4ce971ab67a0003f15b0b4fd35b1ba3dadeb", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/730d4ce971ab67a0003f15b0b4fd35b1ba3dadeb", "committedDate": "2020-03-06T19:29:35Z", "message": "[bluetooth.bluegiga] Immutable commands with CommandBuilders\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f80f159bed0b24186d01bdd4b77b1de0e3795c7", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/0f80f159bed0b24186d01bdd4b77b1de0e3795c7", "committedDate": "2020-03-06T19:29:36Z", "message": "[bluetooth.bluegiga] Avoid NPE and logging improvements\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72f83cdfb840b11a525cd14b11ee11da7db62df4", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/72f83cdfb840b11a525cd14b11ee11da7db62df4", "committedDate": "2020-03-06T19:29:38Z", "message": "[bluetooth.bluegiga] Recover from BlueGiga errors/detach\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a33b309890b8cbaf40bfcaf2ed62126fb89056c3", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/a33b309890b8cbaf40bfcaf2ed62126fb89056c3", "committedDate": "2020-03-06T19:29:39Z", "message": "[bluetooth.bluegiga] Simplification\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d54fb337c387b72caa195a43d9a5adee14bedae8", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/d54fb337c387b72caa195a43d9a5adee14bedae8", "committedDate": "2020-03-06T19:29:40Z", "message": "[bluetooth.bluegiga] Reset exception count when correct frame received\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e47fed15cc0b0a8ba1de8a55a0a19680f7b4cac0", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/e47fed15cc0b0a8ba1de8a55a0a19680f7b4cac0", "committedDate": "2020-03-06T19:29:41Z", "message": "[bluetooth.bluegiga] Cancel scan only if required\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f40e3a6912a3907aac52d2bc3d0d2d76c0e9314f", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/f40e3a6912a3907aac52d2bc3d0d2d76c0e9314f", "committedDate": "2020-03-06T19:29:43Z", "message": "[bluetooth.bluegiga] Flush serial port input buffer during start\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11084a554eb43c653a846adeb661748926e79b80", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/11084a554eb43c653a846adeb661748926e79b80", "committedDate": "2020-03-06T19:29:44Z", "message": "[bluetooth.bluegiga] Flush output stream after write\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d29b74115c6dddb367fb404b0b720d5a3a8406a4", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/d29b74115c6dddb367fb404b0b720d5a3a8406a4", "committedDate": "2020-03-06T19:29:45Z", "message": "[bluetooth.bluegiga] Improved logging and fixed input stream flush\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e8dd118093a5a56b5e61d75a2cada8f73e2334", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/54e8dd118093a5a56b5e61d75a2cada8f73e2334", "committedDate": "2020-03-06T19:29:46Z", "message": "[bluetooth.bluegiga] Code review fixes\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "767eec722daeb818dc5a6da89db34edf9601fe0f", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/767eec722daeb818dc5a6da89db34edf9601fe0f", "committedDate": "2020-03-06T19:29:47Z", "message": "[bluetooth.bluegiga] Removed unnecessary thing status update\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0826c72ab1e08eb7ae9d4d39a10ac9ba1422b772", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/0826c72ab1e08eb7ae9d4d39a10ac9ba1422b772", "committedDate": "2020-03-06T19:29:49Z", "message": "[bluetooth.bluegiga] Refresh discovered device list\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9fc7acc067b3ff28b97cfeca402bb97539e7514", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/a9fc7acc067b3ff28b97cfeca402bb97539e7514", "committedDate": "2020-03-06T19:29:50Z", "message": "[bluetooth.bluegiga] Disabled active discovery participation by default\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "584ecee4198d62f4f0ecc96df5d8eedba6247292", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/584ecee4198d62f4f0ecc96df5d8eedba6247292", "committedDate": "2020-03-06T19:29:51Z", "message": "[bluetooth.bluegiga] Improved null handling\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03886f855668c2b04b1bd10c4449d2bf399e81c1", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/03886f855668c2b04b1bd10c4449d2bf399e81c1", "committedDate": "2020-03-06T19:29:52Z", "message": "[bluetooth.bluegiga] Added mark and reset functionality\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99bed645f7519048ee14a594c8c8bfc6489750c3", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/99bed645f7519048ee14a594c8c8bfc6489750c3", "committedDate": "2020-03-06T19:29:53Z", "message": "[bluetooth.bluegiga] Improved queue handling\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f79a7d76ac839d6d4921e43c36fa4e9cb57ca85", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/8f79a7d76ac839d6d4921e43c36fa4e9cb57ca85", "committedDate": "2020-03-06T19:29:55Z", "message": "[bluetooth.bluegiga] Fixed readCharacteristic\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "774da6d220f7e17712aa7ac286d81d79739d5be8", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/774da6d220f7e17712aa7ac286d81d79739d5be8", "committedDate": "2020-03-06T19:29:56Z", "message": "[bluetooth.bluegiga] Added timeout functionality for commands\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591713dfafc5c54104691bb740c6f7114e6e2d3b", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/591713dfafc5c54104691bb740c6f7114e6e2d3b", "committedDate": "2020-03-06T19:29:57Z", "message": "[bluetooth.bluegiga] Code formating\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af7a9eef109b94cc6a56d545319ef8289208748a", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/af7a9eef109b94cc6a56d545319ef8289208748a", "committedDate": "2020-03-06T19:29:58Z", "message": "[bluetooth.bluegiga] Fixed 128bit UUID generation from short UUIDs\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "864de651b426532e0e371ad4fa3cd78309df2772", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/864de651b426532e0e371ad4fa3cd78309df2772", "committedDate": "2020-03-06T19:29:59Z", "message": "[bluetooth.bluegiga] Added NonNullByDefault\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb5d357678df05c1c876759ab1cbcbcdd73483e", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/aeb5d357678df05c1c876759ab1cbcbcdd73483e", "committedDate": "2020-03-06T19:30:01Z", "message": "[bluetooth.bluegiga] More NonNullByDefault\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c05db09a232c3fe2beac8c25ad31f1c50788eb2", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/8c05db09a232c3fe2beac8c25ad31f1c50788eb2", "committedDate": "2020-03-06T19:30:02Z", "message": "[bluetooth.bluegiga] Added missing initial contribution label\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "043f7869b4447fca16b4829b43f2d3c6ac83505c", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/043f7869b4447fca16b4829b43f2d3c6ac83505c", "committedDate": "2020-03-06T19:30:03Z", "message": "[bluetooth.bluegiga] More NonNullByDefault\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60978a7a24f19e357021d90b7b53ef3b0cd6f7cb", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/60978a7a24f19e357021d90b7b53ef3b0cd6f7cb", "committedDate": "2020-03-06T19:30:04Z", "message": "Fixed rebase issue\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "843d57ba8d0d6b8060f8c22412bbd82056e624e3", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/843d57ba8d0d6b8060f8c22412bbd82056e624e3", "committedDate": "2020-03-06T19:22:23Z", "message": "Fixed rebase issue\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "60978a7a24f19e357021d90b7b53ef3b0cd6f7cb", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/60978a7a24f19e357021d90b7b53ef3b0cd6f7cb", "committedDate": "2020-03-06T19:30:04Z", "message": "Fixed rebase issue\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTgwNzk2", "url": "https://github.com/openhab/openhab-addons/pull/6921#pullrequestreview-370580796", "createdAt": "2020-03-06T19:42:30Z", "commit": {"oid": "60978a7a24f19e357021d90b7b53ef3b0cd6f7cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1304, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}