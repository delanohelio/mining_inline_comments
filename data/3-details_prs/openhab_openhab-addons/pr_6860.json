{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDIxMzc1", "number": 6860, "title": "[airthings] Airthings bluetooth binding initial contribution", "bodyText": "Signed-off-by: Pauli Anttila pauli.anttila@gmail.com", "createdAt": "2020-01-18T12:21:48Z", "url": "https://github.com/openhab/openhab-addons/pull/6860", "merged": true, "mergeCommit": {"oid": "0bb94e42480daeca254a686fd52aad1bdaae7ce1"}, "closed": true, "closedAt": "2020-03-11T22:55:26Z", "author": {"login": "paulianttila"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb76zbuABqjI5NjEwMDgyMzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMvOWRgFqTM3MzE4MDM5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f24c313a2c0cc00ceec85902a30dc055173f820", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/3f24c313a2c0cc00ceec85902a30dc055173f820", "committedDate": "2020-01-19T16:31:43Z", "message": "Updated codeowners and parent pom files\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "dc398abb6d566faf12e6ecba399bae71fe42c7a2", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/dc398abb6d566faf12e6ecba399bae71fe42c7a2", "committedDate": "2020-01-19T16:44:03Z", "message": "Updated codeowners and parent pom files\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Mzk3MDc0", "url": "https://github.com/openhab/openhab-addons/pull/6860#pullrequestreview-359397074", "createdAt": "2020-02-16T11:35:22Z", "commit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMTozNToyM1rOFqTA6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMTo0Njo1N1rOFqTD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjA0Mw==", "bodyText": "Wouldn't it make more sense to add these to the core UoM bundle?", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896043", "createdAt": "2020-02-16T11:35:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsBindingConstants.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import java.math.BigInteger;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.dimension.Density;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.AlternateUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link AirthingsBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsBindingConstants {\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_AIRTHINGS_WAVE_PLUS = new ThingTypeUID(\n+            BluetoothBindingConstants.BINDING_ID, \"airthings_wave_plus\");\n+\n+    // Channel IDs\n+    public static final String CHANNEL_ID_HUMIDITY = \"humidity\";\n+    public static final String CHANNEL_ID_TEMPERATURE = \"temperature\";\n+    public static final String CHANNEL_ID_PRESSURE = \"pressure\";\n+    public static final String CHANNEL_ID_CO2 = \"co2\";\n+    public static final String CHANNEL_ID_TVOC = \"tvoc\";\n+    public static final String CHANNEL_ID_RADON_ST_AVG = \"radon_st_avg\";\n+    public static final String CHANNEL_ID_RADON_LT_AVG = \"radon_lt_avg\";\n+\n+    public static final Unit<Dimensionless> PARTS_PER_BILLION = new TransformedUnit<>(SmartHomeUnits.ONE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjE1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected ThingHandler createHandler(Thing thing) {\n          \n          \n            \n                protected @Nullable ThingHandler createHandler(Thing thing) {", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896156", "createdAt": "2020-02-16T11:36:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link AirthingsHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.airthings\")\n+public class AirthingsHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\n+            .singleton(AirthingsBindingConstants.THING_TYPE_AIRTHINGS_WAVE_PLUS);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    @Nullable\n+    protected ThingHandler createHandler(Thing thing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjM2NA==", "bodyText": "What could happen here that you need to catch RuntimeException?", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896364", "createdAt": "2020-02-16T11:39:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusDataParser.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link AirthingsWavePlusDataParser} is responsible for parsing data from Wave Plus device format.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusDataParser {\n+    private static final int EXPECTED_DATA_LEN = 20;\n+    private static final int EXPECTED_VER = 1;\n+\n+    private double humidity;\n+    private int radonShortTermAvg;\n+    private int radonLongTermAvg;\n+    private double temperature;\n+    private double pressure;\n+    private int co2;\n+    private int tvoc;\n+\n+    public AirthingsWavePlusDataParser(int[] data) throws AirthingsParserException {\n+        parseData(data);\n+    }\n+\n+    public double getHumidity() {\n+        return humidity;\n+    }\n+\n+    public int getRadonShortTermAvg() {\n+        return radonShortTermAvg;\n+    }\n+\n+    public int getRadonLongTermAvg() {\n+        return radonLongTermAvg;\n+    }\n+\n+    public double getTemperature() {\n+        return temperature;\n+    }\n+\n+    public double getPressure() {\n+        return pressure;\n+    }\n+\n+    public int getCo2() {\n+        return co2;\n+    }\n+\n+    public int getTvoc() {\n+        return tvoc;\n+    }\n+\n+    private void parseData(int[] data) throws AirthingsParserException {\n+        try {\n+            if (data.length == EXPECTED_DATA_LEN) {\n+                final int version = data[0];\n+\n+                if (version == EXPECTED_VER) {\n+                    humidity = data[1] / 2D;\n+                    radonShortTermAvg = intFromBytes(data[4], data[5]);\n+                    radonLongTermAvg = intFromBytes(data[6], data[7]);\n+                    temperature = intFromBytes(data[8], data[9]) / 100D;\n+                    pressure = intFromBytes(data[10], data[11]) / 50D;\n+                    co2 = intFromBytes(data[12], data[13]);\n+                    tvoc = intFromBytes(data[14], data[15]);\n+                } else {\n+                    throw new AirthingsParserException(\n+                            String.format(\"Unsupported data structure version '%d'\", version));\n+                }\n+            } else {\n+                throw new AirthingsParserException(String.format(\"Illegal data structure length '%d'\", data.length));\n+            }\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjQ4Nw==", "bodyText": "It has been agreed that using @NonNullByDefault({}) should not be used in these cases. You could use an Optional and configuration.ifPresent(...); instead of @Nullable and a null-check.", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896487", "createdAt": "2020-02-16T11:41:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjUwMA==", "bodyText": "Please make this @Nullable and apply null-checks where necessary.", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896500", "createdAt": "2020-02-16T11:42:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjcwMw==", "bodyText": "I think you can omit this check (or is getServices expensive?).\nand\ndevice.getServices().forEach(service -> logger.debug(\"Device {} Service '{}'\", address, service));", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896703", "createdAt": "2020-02-16T11:44:48Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = getConfigAs(AirthingsConfiguration.class);\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            logger.debug(\"Start scheduled task to read device in every {} seconds\", configuration.refreshInterval);\n+            scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, configuration.refreshInterval,\n+                    TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}\", address, connectionState);\n+        switch (connectionState) {\n+            case DISCONNECTED:\n+                connect();\n+                break;\n+            case CONNECTED:\n+                synchronized (servicesResolved) {\n+                    if (servicesResolved) {\n+                        read();\n+                    } else {\n+                        discoverServices();\n+                    }\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void connect() {\n+        logger.debug(\"Connect to device {}...\", address);\n+        if (!device.connect()) {\n+            logger.debug(\"Connecting to device {} failed\", address);\n+        }\n+    }\n+\n+    private void disconnect() {\n+        logger.debug(\"Disconnect from device {}...\", address);\n+        if (!device.disconnect()) {\n+            logger.debug(\"Disconnect from device {} failed\", address);\n+        }\n+    }\n+\n+    private void discoverServices() {\n+        logger.debug(\"Discover services for device {}\", address);\n+        if (!device.discoverServices()) {\n+            logger.debug(\"Discovering services failed\");\n+            disconnect();\n+        }\n+    }\n+\n+    private void read() {\n+        logger.debug(\"Read data from device {}...\", address);\n+        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+        if (!device.readCharacteristic(characteristic)) {\n+            logger.debug(\"Read data from device {} failed\", address);\n+            disconnect();\n+        }\n+    }\n+\n+    private void printServices() {\n+        if (logger.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5NjgxOQ==", "bodyText": "Applies to all channels: Since you use UoM, adding the unit in the description is not needed (and probably wrong if the user selected a different unit).", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379896819", "createdAt": "2020-02-16T11:46:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/resources/ESH-INF/thing/airthings.xml", "diffHunk": "@@ -0,0 +1,83 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"airthings_wave_plus\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bluegiga\" />\n+\t\t\t<bridge-type-ref id=\"bluez\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Airthings Wave Plus</label>\n+\t\t<description>Indoor air quality monitor with radon detection</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\" />\n+\n+\t\t\t<channel id=\"humidity\" typeId=\"airthings_humidity\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"airthings_temperature\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"airthings_pressure\" />\n+\t\t\t<channel id=\"co2\" typeId=\"airthings_co2\" />\n+\t\t\t<channel id=\"tvoc\" typeId=\"airthings_tvoc\" />\n+\t\t\t<channel id=\"radon_st_avg\" typeId=\"airthings_radon_st_avg\" />\n+\t\t\t<channel id=\"radon_lt_avg\" typeId=\"airthings_radon_lt_avg\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>States how often a refresh shall occur in seconds. This could have impact to battery lifetime</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"airthings_humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Humidity level (%%)</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDA2MjY1", "url": "https://github.com/openhab/openhab-addons/pull/6860#pullrequestreview-359406265", "createdAt": "2020-02-16T14:11:09Z", "commit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNDoxMTowOVrOFqToYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxNDoxNzo1OVrOFqTqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjE0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNullByDefault({}) AirthingsConfiguration configuration;\n          \n          \n            \n                private Optional<AirthingsConfiguration> configuration = Optional.empty();", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906147", "createdAt": "2020-02-16T14:11:09Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    configuration = getConfigAs(AirthingsConfiguration.class);\n          \n          \n            \n                    configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906173", "createdAt": "2020-02-16T14:11:27Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = getConfigAs(AirthingsConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjUxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, configuration.refreshInterval,\n          \n          \n            \n                        configuration.ifPresent(cfg -> {\n          \n          \n            \n                             logger.debug(\"Start scheduled task to read device in every {} seconds\", cfg.refreshInterval);\n          \n          \n            \n                             scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, cfg.refreshInterval, TimeUnit.SECONDS);\n          \n          \n            \n                            });", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906511", "createdAt": "2020-02-16T14:16:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = getConfigAs(AirthingsConfiguration.class);\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            logger.debug(\"Start scheduled task to read device in every {} seconds\", configuration.refreshInterval);\n+            scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, configuration.refreshInterval,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkwNjYxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.debug(\"Using configuration: {}\", configuration);\n          \n          \n            \n                    configuration.ifPresent(cfg -> logger.debug(\"Using configuration: {}\", cfg));", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r379906611", "createdAt": "2020-02-16T14:17:59Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.BluetoothService;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private @NonNullByDefault({}) AirthingsConfiguration configuration;\n+    private @NonNullByDefault({}) ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = getConfigAs(AirthingsConfiguration.class);\n+        logger.debug(\"Using configuration: {}\", configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906d3fe8efc1fdf5daecfe34e787feee1d9e4e48"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTE1MDc5", "url": "https://github.com/openhab/openhab-addons/pull/6860#pullrequestreview-360515079", "createdAt": "2020-02-18T17:05:25Z", "commit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjcxNzU0", "url": "https://github.com/openhab/openhab-addons/pull/6860#pullrequestreview-360671754", "createdAt": "2020-02-18T21:05:27Z", "commit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTowNToyN1rOFrSYKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMTozOToyNVrOFrTZBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNDE4Nw==", "bodyText": "In the Bluez binding, there is no way initiate a service discovery manually, instead this happens automatically when a device is connected to. As such, the discoverServices implementation always returns false. So you cant rely on a return of false as meaning something failed.", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380934187", "createdAt": "2020-02-18T21:05:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            configuration.ifPresent(cfg -> {\n+                logger.debug(\"Start scheduled task to read device in every {} seconds\", cfg.refreshInterval);\n+                scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, cfg.refreshInterval,\n+                        TimeUnit.SECONDS);\n+            });\n+        }\n+    }\n+\n+    private void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}\", address, connectionState);\n+        switch (connectionState) {\n+            case DISCONNECTED:\n+                connect();\n+                break;\n+            case CONNECTED:\n+                synchronized (servicesResolved) {\n+                    if (servicesResolved) {\n+                        read();\n+                    } else {\n+                        discoverServices();\n+                    }\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void connect() {\n+        logger.debug(\"Connect to device {}...\", address);\n+        if (!device.connect()) {\n+            logger.debug(\"Connecting to device {} failed\", address);\n+        }\n+    }\n+\n+    private void disconnect() {\n+        logger.debug(\"Disconnect from device {}...\", address);\n+        if (!device.disconnect()) {\n+            logger.debug(\"Disconnect from device {} failed\", address);\n+        }\n+    }\n+\n+    private void discoverServices() {\n+        logger.debug(\"Discover services for device {}\", address);\n+        if (!device.discoverServices()) {\n+            logger.debug(\"Discovering services failed\");\n+            disconnect();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzOTk5OQ==", "bodyText": "Why not use primitive boolean?", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380939999", "createdAt": "2020-02-18T21:17:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MDg5OQ==", "bodyText": "Wouldn't the Thing status almost immediately switch back to ONLINE when BeaconBluetoothHandler receives the next scanned rssi value?", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380940899", "createdAt": "2020-02-18T21:19:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            configuration.ifPresent(cfg -> {\n+                logger.debug(\"Start scheduled task to read device in every {} seconds\", cfg.refreshInterval);\n+                scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, cfg.refreshInterval,\n+                        TimeUnit.SECONDS);\n+            });\n+        }\n+    }\n+\n+    private void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}\", address, connectionState);\n+        switch (connectionState) {\n+            case DISCONNECTED:\n+                connect();\n+                break;\n+            case CONNECTED:\n+                synchronized (servicesResolved) {\n+                    if (servicesResolved) {\n+                        read();\n+                    } else {\n+                        discoverServices();\n+                    }\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void connect() {\n+        logger.debug(\"Connect to device {}...\", address);\n+        if (!device.connect()) {\n+            logger.debug(\"Connecting to device {} failed\", address);\n+        }\n+    }\n+\n+    private void disconnect() {\n+        logger.debug(\"Disconnect from device {}...\", address);\n+        if (!device.disconnect()) {\n+            logger.debug(\"Disconnect from device {} failed\", address);\n+        }\n+    }\n+\n+    private void discoverServices() {\n+        logger.debug(\"Discover services for device {}\", address);\n+        if (!device.discoverServices()) {\n+            logger.debug(\"Discovering services failed\");\n+            disconnect();\n+        }\n+    }\n+\n+    private void read() {\n+        logger.debug(\"Read data from device {}...\", address);\n+        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+        if (!device.readCharacteristic(characteristic)) {\n+            logger.debug(\"Read data from device {} failed\", address);\n+            disconnect();\n+        }\n+    }\n+\n+    private void printServices() {\n+        device.getServices().forEach(service -> logger.debug(\"Device {} Service '{}'\", address, service));\n+    }\n+\n+    @Override\n+    public void onServicesDiscovered() {\n+        synchronized (servicesResolved) {\n+            servicesResolved = true;\n+        }\n+        logger.debug(\"Service discovery completed for device {}\", address);\n+        printServices();\n+        execute();\n+    }\n+\n+    @Override\n+    public void onConnectionStateChange(BluetoothConnectionStatusNotification connectionNotification) {\n+        switch (connectionNotification.getConnectionState()) {\n+            case DISCOVERED:\n+                logger.debug(\"Device {} DISCOVERED\", address);\n+                startScheduledTask();\n+                break;\n+            case CONNECTED:\n+                logger.debug(\"Device {} CONNECTED\", address);\n+                execute();\n+                break;\n+            case DISCONNECTED:\n+                logger.debug(\"Device {} DISCONNECTED\", address);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void onCharacteristicReadComplete(BluetoothCharacteristic characteristic, BluetoothCompletionStatus status) {\n+        try {\n+            if (status == BluetoothCompletionStatus.SUCCESS) {\n+                logger.debug(\"Characteristic {} from device {}: {}\", characteristic.getUuid(), address,\n+                        characteristic.getValue());\n+                updateStatus(ThingStatus.ONLINE);\n+                try {\n+                    updateChannels(new AirthingsWavePlusDataParser(characteristic.getValue()));\n+                } catch (AirthingsParserException e) {\n+                    logger.warn(\"Data parsing error occured, when parsing data from device {}, cause {}\", address,\n+                            e.getMessage(), e);\n+                }\n+            } else {\n+                logger.debug(\"Characteristic {} from device {} failed\", characteristic.getUuid(), address);\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No response from device\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MjI4NQ==", "bodyText": "Would using unicode subscripts work here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>CO2 Level</label>\n          \n          \n            \n            \t\t<label>CO\u2082 Level</label>", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380942285", "createdAt": "2020-02-18T21:22:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/resources/ESH-INF/thing/airthings.xml", "diffHunk": "@@ -0,0 +1,83 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"bluetooth\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"airthings_wave_plus\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"bluegiga\" />\n+\t\t\t<bridge-type-ref id=\"bluez\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Airthings Wave Plus</label>\n+\t\t<description>Indoor air quality monitor with radon detection</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi\" />\n+\n+\t\t\t<channel id=\"humidity\" typeId=\"airthings_humidity\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"airthings_temperature\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"airthings_pressure\" />\n+\t\t\t<channel id=\"co2\" typeId=\"airthings_co2\" />\n+\t\t\t<channel id=\"tvoc\" typeId=\"airthings_tvoc\" />\n+\t\t\t<channel id=\"radon_st_avg\" typeId=\"airthings_radon_st_avg\" />\n+\t\t\t<channel id=\"radon_lt_avg\" typeId=\"airthings_radon_lt_avg\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"address\" type=\"text\">\n+\t\t\t\t<label>Address</label>\n+\t\t\t\t<description>Bluetooth address in XX:XX:XX:XX:XX:XX format</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>States how often a refresh shall occur in seconds. This could have impact to battery lifetime</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"airthings_humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Humidity level</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\t<channel-type id=\"airthings_temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n+\t</channel-type>\n+\t<channel-type id=\"airthings_pressure\">\n+\t\t<item-type>Number:Pressure</item-type>\n+\t\t<label>Pressure</label>\n+\t\t<description>Pressure</description>\n+\t\t<state readOnly=\"true\" pattern=\"%.0f %unit%\" />\n+\t</channel-type>\n+\t<channel-type id=\"airthings_co2\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>CO2 Level</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0ODkzOQ==", "bodyText": "I would suggest calling super.dispose() last to give tasks that you might be running at the moment a cleaner shutdown. Disposing the super first is like pulling the rug out from under any asynchronous tasks your handler might be running.", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380948939", "createdAt": "2020-02-18T21:35:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MDc4OQ==", "bodyText": "why isn't this called during initialization?", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r380950789", "createdAt": "2020-02-18T21:39:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzg5NDI5", "url": "https://github.com/openhab/openhab-addons/pull/6860#pullrequestreview-361389429", "createdAt": "2020-02-19T19:50:46Z", "commit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1MDo0N1rOFr1WMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1MDo0N1rOFr1WMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUwNzEyMA==", "bodyText": "You REALLY shouldn't be synchronizing on a Boolean instance.\nThis post gives an elegant description of why.", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r381507120", "createdAt": "2020-02-19T19:50:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private volatile Boolean servicesResolved = false;\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        try {\n+            super.dispose();\n+        } finally {\n+            if (scheduledTask != null) {\n+                scheduledTask.cancel(true);\n+                scheduledTask = null;\n+            }\n+            servicesResolved = false;\n+        }\n+    }\n+\n+    private void startScheduledTask() {\n+        if (scheduledTask == null) {\n+            configuration.ifPresent(cfg -> {\n+                logger.debug(\"Start scheduled task to read device in every {} seconds\", cfg.refreshInterval);\n+                scheduledTask = scheduler.scheduleWithFixedDelay(this::execute, 10, cfg.refreshInterval,\n+                        TimeUnit.SECONDS);\n+            });\n+        }\n+    }\n+\n+    private void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}\", address, connectionState);\n+        switch (connectionState) {\n+            case DISCONNECTED:\n+                connect();\n+                break;\n+            case CONNECTED:\n+                synchronized (servicesResolved) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc5a4cb6e274408c48c39b44b3d45f340ebf61"}, "originalPosition": 98}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b25162cc338b4a05f48d419ab66805fc8a91818", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/6b25162cc338b4a05f48d419ab66805fc8a91818", "committedDate": "2020-02-22T12:54:33Z", "message": "[airthings] Improvements\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "4f5a920fc98290e745cf45ab89206dedd37a96de", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/4f5a920fc98290e745cf45ab89206dedd37a96de", "committedDate": "2020-02-22T12:55:58Z", "message": "[airthings] Improvements\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b2155b8c35da5bed5a215ce9d91bdfc30bf8c3d", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/0b2155b8c35da5bed5a215ce9d91bdfc30bf8c3d", "committedDate": "2020-02-23T10:23:46Z", "message": "[airthings] Removed timeout functionality\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "173d0ef1888394304b7bfaf592de72b5c22c46ac", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/173d0ef1888394304b7bfaf592de72b5c22c46ac", "committedDate": "2020-02-25T07:05:22Z", "message": "[airthings] Increased version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4babdbf9adc7c84be06ea37a42210a5d98bd4bb3", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/4babdbf9adc7c84be06ea37a42210a5d98bd4bb3", "committedDate": "2020-03-07T10:41:23Z", "message": "[airthings] Airthings bluetooth binding initial contribution\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59214158d74169cb78651f59f5cbecbe97f8bef1", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/59214158d74169cb78651f59f5cbecbe97f8bef1", "committedDate": "2020-03-07T10:41:24Z", "message": "Finalize\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a67cc7f2ac921dc48639169278c01fb9c6edb9", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/e0a67cc7f2ac921dc48639169278c01fb9c6edb9", "committedDate": "2020-03-07T10:41:25Z", "message": "Finalize\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feca6a41b7912dbbdb76e183cad681e9b7d6afd4", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/feca6a41b7912dbbdb76e183cad681e9b7d6afd4", "committedDate": "2020-03-07T10:41:27Z", "message": "Changed variable visibility\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e202d0f59ea3986f214eb2ef6a2ddb765299aa0", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/7e202d0f59ea3986f214eb2ef6a2ddb765299aa0", "committedDate": "2020-03-07T10:41:28Z", "message": "Typo fixes and more annotations\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22f3aba1eec9ac8415f7d2dbd17806b4e764ba3e", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/22f3aba1eec9ac8415f7d2dbd17806b4e764ba3e", "committedDate": "2020-03-07T10:41:29Z", "message": "Updated notice\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a15a4f9252cd70a18397da09f8fdb26bdc9931ee", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/a15a4f9252cd70a18397da09f8fdb26bdc9931ee", "committedDate": "2020-03-07T10:45:15Z", "message": "Updated codeowners and parent pom files\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08daa9140936bc0080af479950147485e60c2e59", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/08daa9140936bc0080af479950147485e60c2e59", "committedDate": "2020-03-07T10:45:16Z", "message": "Updated to 2.5.2 snapshot\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a7c95b45e5e40c310efedc3ae540cde566a78cc", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/4a7c95b45e5e40c310efedc3ae540cde566a78cc", "committedDate": "2020-03-07T10:45:17Z", "message": "Start scheduled task when device discovered\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abaf9a866ec11d2c38569e0b0a08e975a8e9f4f0", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/abaf9a866ec11d2c38569e0b0a08e975a8e9f4f0", "committedDate": "2020-03-07T10:45:19Z", "message": "Simplification\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6be2f5e616bab9620c788e79d168c18f82581fe0", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/6be2f5e616bab9620c788e79d168c18f82581fe0", "committedDate": "2020-03-07T10:45:20Z", "message": "Simplified\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fddc5d9e68dd43e68eb27d6aaa08b79021e42fd", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/7fddc5d9e68dd43e68eb27d6aaa08b79021e42fd", "committedDate": "2020-03-07T10:45:21Z", "message": "[airthings] Code review fixes\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797b01e5f4a94a3aeaf091faeadd290194bd93f8", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/797b01e5f4a94a3aeaf091faeadd290194bd93f8", "committedDate": "2020-03-07T10:45:22Z", "message": "[airthings] Improvements\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f04498cf70a5635570560c7cd081141d845a7b", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/57f04498cf70a5635570560c7cd081141d845a7b", "committedDate": "2020-03-07T10:45:23Z", "message": "[airthings] Removed timeout functionality\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ff85692434ac3ce59410f1bf3d12e2aa67c314", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/c3ff85692434ac3ce59410f1bf3d12e2aa67c314", "committedDate": "2020-03-07T10:45:24Z", "message": "[airthings] Increased version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "173d0ef1888394304b7bfaf592de72b5c22c46ac", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/173d0ef1888394304b7bfaf592de72b5c22c46ac", "committedDate": "2020-02-25T07:05:22Z", "message": "[airthings] Increased version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}, "afterCommit": {"oid": "c3ff85692434ac3ce59410f1bf3d12e2aa67c314", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/c3ff85692434ac3ce59410f1bf3d12e2aa67c314", "committedDate": "2020-03-07T10:45:24Z", "message": "[airthings] Increased version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a541ed9ef36bbf6658776c149280a0e3d554384", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/6a541ed9ef36bbf6658776c149280a0e3d554384", "committedDate": "2020-03-07T11:21:44Z", "message": "[airthings] Renamed thing name from Plus to +\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2eaee6db46bd43b47e869c4ca74c5a430fcec8a", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/d2eaee6db46bd43b47e869c4ca74c5a430fcec8a", "committedDate": "2020-03-07T11:26:35Z", "message": "[airthings] Added airthings binding to pom\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f98c92ecf64a632b80d19c9b2903540cb1716180", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/f98c92ecf64a632b80d19c9b2903540cb1716180", "committedDate": "2020-03-07T11:35:38Z", "message": "[airthings] Fixed pom\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95275e302408334730227fa1cf38eb5f60ba2334", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/95275e302408334730227fa1cf38eb5f60ba2334", "committedDate": "2020-03-07T11:47:23Z", "message": "[airthings] Added missing NonNullByDefault\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d796fa65dbc02e5d163115dc22b77dc40dea184d", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/d796fa65dbc02e5d163115dc22b77dc40dea184d", "committedDate": "2020-03-08T07:39:13Z", "message": "[airthings] Fixed test data version\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "150358827eee764de52b13788e4538e511a1d6bc", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/150358827eee764de52b13788e4538e511a1d6bc", "committedDate": "2020-03-08T07:43:13Z", "message": "[airthings] Fixed configuration logging\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887", "author": {"user": {"login": "paulianttila", "name": "pali"}}, "url": "https://github.com/openhab/openhab-addons/commit/a7fb2812f94e46f907e51c2fc1be583699a9f887", "committedDate": "2020-03-08T08:00:19Z", "message": "[airthings] Use same units than introduced to the core\n\nSigned-off-by: Pauli Anttila <pauli.anttila@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODg0NDA5", "url": "https://github.com/openhab/openhab-addons/pull/6860#pullrequestreview-370884409", "createdAt": "2020-03-09T02:00:00Z", "commit": {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwMjowMDowMVrOFzZLug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNTowMDoyMlrOFzbAHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQzNDI5OA==", "bodyText": "Small change but much easier to read\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1000000000)));\n          \n          \n            \n                        new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1_000_000_000)));", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389434298", "createdAt": "2020-03-09T02:00:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsBindingConstants.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import java.math.BigInteger;\n+\n+import javax.measure.Unit;\n+import javax.measure.quantity.Dimensionless;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.dimension.Density;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.openhab.binding.bluetooth.BluetoothBindingConstants;\n+\n+import tec.uom.se.format.SimpleUnitFormat;\n+import tec.uom.se.function.RationalConverter;\n+import tec.uom.se.unit.ProductUnit;\n+import tec.uom.se.unit.TransformedUnit;\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link AirthingsBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsBindingConstants {\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_AIRTHINGS_WAVE_PLUS = new ThingTypeUID(\n+            BluetoothBindingConstants.BINDING_ID, \"airthings_wave_plus\");\n+\n+    // Channel IDs\n+    public static final String CHANNEL_ID_HUMIDITY = \"humidity\";\n+    public static final String CHANNEL_ID_TEMPERATURE = \"temperature\";\n+    public static final String CHANNEL_ID_PRESSURE = \"pressure\";\n+    public static final String CHANNEL_ID_CO2 = \"co2\";\n+    public static final String CHANNEL_ID_TVOC = \"tvoc\";\n+    public static final String CHANNEL_ID_RADON_ST_AVG = \"radon_st_avg\";\n+    public static final String CHANNEL_ID_RADON_LT_AVG = \"radon_lt_avg\";\n+\n+    public static final Unit<Dimensionless> PARTS_PER_BILLION = new TransformedUnit<>(SmartHomeUnits.ONE,\n+            new RationalConverter(BigInteger.ONE, BigInteger.valueOf(1000000000)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MjM2OA==", "bodyText": "Couldn't these be merged into a single state machine?", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389462368", "createdAt": "2020-03-09T04:51:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+    private static final int CHECK_PERIOD_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private AtomicInteger sinceLastReadSec = new AtomicInteger();\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    private volatile int refreshInterval;\n+\n+    private volatile ServiceState serviceState = ServiceState.NOT_RESOLVED;\n+    private volatile ReadState readState = ReadState.IDLE;\n+\n+    private enum ServiceState {\n+        NOT_RESOLVED,\n+        RESOLVING,\n+        RESOLVED,\n+    }\n+\n+    private enum ReadState {\n+        IDLE,\n+        READING,\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2NDA5NA==", "bodyText": "I don't know what purpose this is serving that executing periodic already doesn't. Couldn't this be replaced with a boolean flag?\nSet it to true at the start of the scheduled task.\nSet it to false when value data is successfully read.\nBut even that boolean flag could be replaced as states in an overall state machine.", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389464094", "createdAt": "2020-03-09T05:00:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+    private static final int CHECK_PERIOD_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private AtomicInteger sinceLastReadSec = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTUxOTY0", "url": "https://github.com/openhab/openhab-addons/pull/6860#pullrequestreview-370951964", "createdAt": "2020-03-09T07:15:39Z", "commit": {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxNTo0MFrOFzculQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxNTo0MFrOFzculQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MjM3Mw==", "bodyText": "You've made a rather complex state machine and I think it should be simplified.\n\nI wouldn't say that this is complex.", "url": "https://github.com/openhab/openhab-addons/pull/6860#discussion_r389492373", "createdAt": "2020-03-09T07:15:40Z", "author": {"login": "paulianttila"}, "path": "bundles/org.openhab.binding.bluetooth.airthings/src/main/java/org/openhab/binding/bluetooth/airthings/internal/AirthingsWavePlusHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.bluetooth.airthings.internal;\n+\n+import static org.openhab.binding.bluetooth.airthings.internal.AirthingsBindingConstants.*;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.bluetooth.BeaconBluetoothHandler;\n+import org.openhab.binding.bluetooth.BluetoothCharacteristic;\n+import org.openhab.binding.bluetooth.BluetoothCompletionStatus;\n+import org.openhab.binding.bluetooth.BluetoothDevice.ConnectionState;\n+import org.openhab.binding.bluetooth.notification.BluetoothConnectionStatusNotification;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AirthingsWavePlusHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Pauli Anttila - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AirthingsWavePlusHandler extends BeaconBluetoothHandler {\n+\n+    private static final String DATA_UUID = \"b42e2a68-ade7-11e4-89d3-123b93f75cba\";\n+    private static final int CHECK_PERIOD_SEC = 10;\n+\n+    private final Logger logger = LoggerFactory.getLogger(AirthingsWavePlusHandler.class);\n+    private final UUID uuid = UUID.fromString(DATA_UUID);\n+\n+    private AtomicInteger sinceLastReadSec = new AtomicInteger();\n+    private Optional<AirthingsConfiguration> configuration = Optional.empty();\n+    private @Nullable ScheduledFuture<?> scheduledTask;\n+\n+    private volatile int refreshInterval;\n+\n+    private volatile ServiceState serviceState = ServiceState.NOT_RESOLVED;\n+    private volatile ReadState readState = ReadState.IDLE;\n+\n+    private enum ServiceState {\n+        NOT_RESOLVED,\n+        RESOLVING,\n+        RESOLVED,\n+    }\n+\n+    private enum ReadState {\n+        IDLE,\n+        READING,\n+    }\n+\n+    public AirthingsWavePlusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initialize\");\n+        super.initialize();\n+        configuration = Optional.of(getConfigAs(AirthingsConfiguration.class));\n+        logger.debug(\"Using configuration: {}\", configuration.get());\n+        cancelScheduledTask();\n+        configuration.ifPresent(cfg -> {\n+            refreshInterval = cfg.refreshInterval;\n+            logger.debug(\"Start scheduled task to read device in every {} seconds\", refreshInterval);\n+            scheduledTask = scheduler.scheduleWithFixedDelay(this::executePeridioc, CHECK_PERIOD_SEC, CHECK_PERIOD_SEC,\n+                    TimeUnit.SECONDS);\n+        });\n+        sinceLastReadSec.set(refreshInterval); // update immediately\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Dispose\");\n+        cancelScheduledTask();\n+        serviceState = ServiceState.NOT_RESOLVED;\n+        readState = ReadState.IDLE;\n+        super.dispose();\n+    }\n+\n+    private void cancelScheduledTask() {\n+        if (scheduledTask != null) {\n+            scheduledTask.cancel(true);\n+            scheduledTask = null;\n+        }\n+    }\n+\n+    private void executePeridioc() {\n+        sinceLastReadSec.addAndGet(CHECK_PERIOD_SEC);\n+        execute();\n+    }\n+\n+    private synchronized void execute() {\n+        ConnectionState connectionState = device.getConnectionState();\n+        logger.debug(\"Device {} state is {}, serviceState {}, readState {}\", address, connectionState, serviceState,\n+                readState);\n+\n+        switch (connectionState) {\n+            case DISCOVERED:\n+            case DISCONNECTED:\n+                if (isTimeToRead()) {\n+                    connect();\n+                }\n+                break;\n+            case CONNECTED:\n+                read();\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    private void connect() {\n+        logger.debug(\"Connect to device {}...\", address);\n+        if (!device.connect()) {\n+            logger.debug(\"Connecting to device {} failed\", address);\n+        }\n+    }\n+\n+    private void disconnect() {\n+        logger.debug(\"Disconnect from device {}...\", address);\n+        if (!device.disconnect()) {\n+            logger.debug(\"Disconnect from device {} failed\", address);\n+        }\n+    }\n+\n+    private void read() {\n+        switch (serviceState) {\n+            case NOT_RESOLVED:\n+                discoverServices();\n+                break;\n+            case RESOLVED:\n+                switch (readState) {\n+                    case IDLE:\n+                        logger.debug(\"Read data from device {}...\", address);\n+                        BluetoothCharacteristic characteristic = device.getCharacteristic(uuid);\n+                        if (device.readCharacteristic(characteristic)) {\n+                            readState = ReadState.READING;\n+                        } else {\n+                            logger.debug(\"Read data from device {} failed\", address);\n+                            disconnect();\n+                        }\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            default:\n+                break;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887"}, "originalPosition": 172}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTgwMzk5", "url": "https://github.com/openhab/openhab-addons/pull/6860#pullrequestreview-373180399", "createdAt": "2020-03-11T22:54:23Z", "commit": {"oid": "a7fb2812f94e46f907e51c2fc1be583699a9f887"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1675, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}