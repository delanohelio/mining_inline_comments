{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODQ2NTY2", "number": 7201, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMDo0NzozNFrODqG7vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozOTo0NlrODq_06w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NDgwMzgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubBindingConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQyMDo0NzozNVrOF5rnYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxMToyOTozMlrOF5u-Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNzc0Nw==", "bodyText": "Private?", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396027747", "createdAt": "2020-03-21T20:47:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubBindingConstants.java", "diffHunk": "@@ -116,5 +116,13 @@\n      */\n     public static final String VAL_OFF = \"Off\";\n     public static final String VAL_HEATING = \"Heating\";\n+    \n+    /*\n+     * logger message strings\n+     */\n+    private static final String PLEASE_REPORT_BUG = \"Unexpected situation - please report a bug: \";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bc1d669175ac2de26f297c84c697309a3ec6497"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA4MjY5OA==", "bodyText": "Changed to public", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396082698", "createdAt": "2020-03-22T11:29:32Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubBindingConstants.java", "diffHunk": "@@ -116,5 +116,13 @@\n      */\n     public static final String VAL_OFF = \"Off\";\n     public static final String VAL_HEATING = \"Heating\";\n+    \n+    /*\n+     * logger message strings\n+     */\n+    private static final String PLEASE_REPORT_BUG = \"Unexpected situation - please report a bug: \";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjAyNzc0Nw=="}, "originalCommit": {"oid": "1bc1d669175ac2de26f297c84c697309a3ec6497"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA1NDAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNjoxNFrOF6Js6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1OToxNVrOF60X5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDY4MQ==", "bodyText": "Synchronization serves no purpose here since assigning a variable is an atomic operation. Please remove the synchronized block. If you really want to you can make cachedInfoResponse volatile.", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396520681", "createdAt": "2020-03-23T15:06:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5NDkxOQ==", "bodyText": "Oh that\u2019s interesting. I come from a background in other compiled languages, where pointer assignments are not guaranteed to be atomic. But if Java has mechanisms to ensure atomicity, then I am very happy. I learned something new today.", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396594919", "createdAt": "2020-03-23T16:43:01Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDY4MQ=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTE5Mg==", "bodyText": "Well adding volatile truly makes it atomic, but I think the code here would work just fine without volatile.", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396601192", "createdAt": "2020-03-23T16:51:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDY4MQ=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxOTgxNQ==", "bodyText": "After careful thought, I realised that cachedInfoResponse is not actually needed, so I have re-coded to eliminate it entirely.", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397219815", "createdAt": "2020-03-24T14:59:15Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDY4MQ=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA1NDkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNjoyNlrOF6Jtaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo1OTo1MVrOF60ZyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDgxMQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396520811", "createdAt": "2020-03-23T15:06:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMDI5Ng==", "bodyText": "eliminated cachedInfoResponse", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397220296", "createdAt": "2020-03-24T14:59:51Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDgxMQ=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA1NTI3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNjozMlrOF6JtqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowMDowOVrOF60aug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDg3Mw==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396520873", "createdAt": "2020-03-23T15:06:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n             return null;\n         }\n \n         try {\n             @Nullable\n             String response = socket.sendMessage(CMD_CODE_INFO);\n+            \n+            NeoHubInfoResponse newInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+\n+            if (newInfoResponse == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"failed to create InfoResponse\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMDUzOA==", "bodyText": "eliminated cachedInfoResponse", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397220538", "createdAt": "2020-03-24T15:00:09Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n             return null;\n         }\n \n         try {\n             @Nullable\n             String response = socket.sendMessage(CMD_CODE_INFO);\n+            \n+            NeoHubInfoResponse newInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+\n+            if (newInfoResponse == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"failed to create InfoResponse\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMDg3Mw=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA1ODg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNzoyMlrOF6Jv9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowMDoyMlrOF60baw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTQ2Mg==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396521462", "createdAt": "2020-03-23T15:07:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n             return null;\n         }\n \n         try {\n             @Nullable\n             String response = socket.sendMessage(CMD_CODE_INFO);\n+            \n+            NeoHubInfoResponse newInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+\n+            if (newInfoResponse == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"failed to create InfoResponse\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n \n-            lastInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+            if (newInfoResponse.getDevices() == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"no devices found\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMDcxNQ==", "bodyText": "eliminated cachedInfoResponse", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397220715", "createdAt": "2020-03-24T15:00:22Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n             return null;\n         }\n \n         try {\n             @Nullable\n             String response = socket.sendMessage(CMD_CODE_INFO);\n+            \n+            NeoHubInfoResponse newInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+\n+            if (newInfoResponse == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"failed to create InfoResponse\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n \n-            lastInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+            if (newInfoResponse.getDevices() == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"no devices found\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTQ2Mg=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA1OTczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNzozM1rOF6Jwfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowMDozM1rOF60b7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTU5OQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396521599", "createdAt": "2020-03-23T15:07:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n             return null;\n         }\n \n         try {\n             @Nullable\n             String response = socket.sendMessage(CMD_CODE_INFO);\n+            \n+            NeoHubInfoResponse newInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+\n+            if (newInfoResponse == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"failed to create InfoResponse\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n \n-            lastInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+            if (newInfoResponse.getDevices() == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"no devices found\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n+\n+            synchronized (this) {\n+                cachedInfoResponse = newInfoResponse; \n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMDg0Nw==", "bodyText": "eliminated cachedInfoResponse", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397220847", "createdAt": "2020-03-24T15:00:33Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n             return null;\n         }\n \n         try {\n             @Nullable\n             String response = socket.sendMessage(CMD_CODE_INFO);\n+            \n+            NeoHubInfoResponse newInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+\n+            if (newInfoResponse == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"failed to create InfoResponse\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n \n-            lastInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+            if (newInfoResponse.getDevices() == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"no devices found\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n+\n+            synchronized (this) {\n+                cachedInfoResponse = newInfoResponse; \n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTU5OQ=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA2MDIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNzo0MFrOF6Jw1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowMDo0NlrOF60cmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTY4Ng==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396521686", "createdAt": "2020-03-23T15:07:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n             return null;\n         }\n \n         try {\n             @Nullable\n             String response = socket.sendMessage(CMD_CODE_INFO);\n+            \n+            NeoHubInfoResponse newInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+\n+            if (newInfoResponse == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"failed to create InfoResponse\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n \n-            lastInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+            if (newInfoResponse.getDevices() == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"no devices found\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n+\n+            synchronized (this) {\n+                cachedInfoResponse = newInfoResponse; \n+            }\n \n             if (getThing().getStatus() != ThingStatus.ONLINE) {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return lastInfoResponse;\n+            return newInfoResponse;\n+\n         } catch (Exception e) {\n-            logger.warn(\"set value error \\\"{}\\\"\", e.getMessage());\n+            logger.warn(MSG_FMT_POLL_ERR, e.getMessage());\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMTAxNg==", "bodyText": "eliminated cachedInfoResponse", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397221016", "createdAt": "2020-03-24T15:00:46Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -179,25 +179,64 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      * \n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n-        if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);\n+        if (socket == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            logger.warn(MSG_HUB_COMM);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n+            return null;\n+        }\n+\n+        if (config == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+            logger.warn(MSG_HUB_CONFIG);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }\n             return null;\n         }\n \n         try {\n             @Nullable\n             String response = socket.sendMessage(CMD_CODE_INFO);\n+            \n+            NeoHubInfoResponse newInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+\n+            if (newInfoResponse == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"failed to create InfoResponse\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n \n-            lastInfoResponse = NeoHubInfoResponse.createInfoResponse(response);\n+            if (newInfoResponse.getDevices() == null) {\n+                logger.warn(MSG_FMT_POLL_ERR, \"no devices found\");\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+                synchronized (this) {\n+                    cachedInfoResponse = null;\n+                }\n+                return null;\n+            }\n+\n+            synchronized (this) {\n+                cachedInfoResponse = newInfoResponse; \n+            }\n \n             if (getThing().getStatus() != ThingStatus.ONLINE) {\n                 updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n             }\n \n-            return lastInfoResponse;\n+            return newInfoResponse;\n+\n         } catch (Exception e) {\n-            logger.warn(\"set value error \\\"{}\\\"\", e.getMessage());\n+            logger.warn(MSG_FMT_POLL_ERR, e.getMessage());\n             updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            synchronized (this) {\n+                cachedInfoResponse = null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTY4Ng=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA2ODM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowOToyNFrOF6J2BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowMDo1OVrOF60dSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzAxMw==", "bodyText": "Synchronization isn't provided the thread safety here, instead it is the fact you are assigning cachedInfoResponse to a local variable that is giving you the thread safety. So please remove the synchronized block.", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396523013", "createdAt": "2020-03-23T15:09:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,15 +248,20 @@ protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n         fromNeoHubFetchPollingResponse();\n+        \n+        NeoHubInfoResponse myInfoResponse; \n+        synchronized (this) {\n+            myInfoResponse = cachedInfoResponse;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMTE5Mg==", "bodyText": "eliminated cachedInfoResponse", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397221192", "createdAt": "2020-03-24T15:00:59Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -209,15 +248,20 @@ protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n      */\n     private synchronized void lazyPollingSchedulerExecute() {\n         fromNeoHubFetchPollingResponse();\n+        \n+        NeoHubInfoResponse myInfoResponse; \n+        synchronized (this) {\n+            myInfoResponse = cachedInfoResponse;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMzAxMw=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA3NTcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToxMDo1NFrOF6J6sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowMToxNlrOF60eNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyNDIxMA==", "bodyText": "What you should do here instead is assign cachedInfoResponse to a local variable THEN null check the variable. These two synchronized blocks aren't doing any good here.", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396524210", "createdAt": "2020-03-23T15:10:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -244,10 +288,18 @@ private void fastPollingSchedulerExecute() {\n      * \n      */\n     public boolean isConfigured(String deviceName) {\n-        if (lastInfoResponse == null) {\n+        boolean noInfoResponse;\n+        synchronized (this) {\n+            noInfoResponse = cachedInfoResponse == null;\n+        }\n+        if (noInfoResponse) {\n             fromNeoHubFetchPollingResponse();\n         }\n-        return lastInfoResponse != null && lastInfoResponse.getDeviceInfo(deviceName) != null;\n+        NeoHubInfoResponse myInfoResponse;\n+        synchronized (this) {\n+            myInfoResponse = cachedInfoResponse;\n+        }\n+        return myInfoResponse != null && myInfoResponse.getDeviceInfo(deviceName) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMTQyOA==", "bodyText": "eliminated cachedInfoResponse", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397221428", "createdAt": "2020-03-24T15:01:16Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -244,10 +288,18 @@ private void fastPollingSchedulerExecute() {\n      * \n      */\n     public boolean isConfigured(String deviceName) {\n-        if (lastInfoResponse == null) {\n+        boolean noInfoResponse;\n+        synchronized (this) {\n+            noInfoResponse = cachedInfoResponse == null;\n+        }\n+        if (noInfoResponse) {\n             fromNeoHubFetchPollingResponse();\n         }\n-        return lastInfoResponse != null && lastInfoResponse.getDeviceInfo(deviceName) != null;\n+        NeoHubInfoResponse myInfoResponse;\n+        synchronized (this) {\n+            myInfoResponse = cachedInfoResponse;\n+        }\n+        return myInfoResponse != null && myInfoResponse.getDeviceInfo(deviceName) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyNDIxMA=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA3NzIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToxMToxMVrOF6J7qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTowMToyNlrOF60exA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyNDQ1OA==", "bodyText": "see other comment", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r396524458", "createdAt": "2020-03-23T15:11:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -258,7 +310,12 @@ public boolean isConfigured(String deviceName) {\n      */\n     public boolean isOnline(String deviceName) {\n         DeviceInfo deviceInfo;\n-        return isConfigured(deviceName) && (deviceInfo = lastInfoResponse.getDeviceInfo(deviceName)) != null\n+        NeoHubInfoResponse myInfoResponse; \n+        synchronized (this) {\n+            myInfoResponse = cachedInfoResponse;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMTU3Mg==", "bodyText": "eliminated cachedInfoResponse", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397221572", "createdAt": "2020-03-24T15:01:26Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -258,7 +310,12 @@ public boolean isConfigured(String deviceName) {\n      */\n     public boolean isOnline(String deviceName) {\n         DeviceInfo deviceInfo;\n-        return isConfigured(deviceName) && (deviceInfo = lastInfoResponse.getDeviceInfo(deviceName)) != null\n+        NeoHubInfoResponse myInfoResponse; \n+        synchronized (this) {\n+            myInfoResponse = cachedInfoResponse;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyNDQ1OA=="}, "originalCommit": {"oid": "6595713ee03edb9c5acbef99dbe7d57596f4353b"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDEyNTIzOnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozOTo0NlrOF7FwWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMDo1Nzo0MVrOF7Vwfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDYwMg==", "bodyText": "why are you removing this updateStatus?", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397504602", "createdAt": "2020-03-24T22:39:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -180,23 +176,36 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n         if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2fed41b4b3b6c4684fa6c009a0f5766052544b7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2Njc4Mw==", "bodyText": "It is just a question of being consistent. The binding has two functions: a) polling/reading from the bridge, and b) issuing/writing commands to the bridge. The polling function reads states from the bridge, and updates the Thing and Channel states in OH accordingly. Whereas the command function responds to commands from OH and writes states to the bridge. As a general principle updateStatus should be done in the polling (read states) part of the code. The code that I modified here is part of the command (write states) function, so to be consistent it should NOT be changing the Thing status. It is not a big deal if we eliminate the updateStatus here, because the respective error will anyway always be picked up on the next polling cycle.", "url": "https://github.com/openhab/openhab-addons/pull/7201#discussion_r397766783", "createdAt": "2020-03-25T10:57:41Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubHandler.java", "diffHunk": "@@ -180,23 +176,36 @@ public synchronized NeoHubReturnResult toNeoHubSendChannelValue(String commandSt\n      */\n     protected NeoHubInfoResponse fromNeoHubFetchPollingResponse() {\n         if (socket == null || config == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDYwMg=="}, "originalCommit": {"oid": "f2fed41b4b3b6c4684fa6c009a0f5766052544b7"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 742, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}