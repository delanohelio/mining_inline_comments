{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4Nzg4NTEx", "number": 6749, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDo0MTo0OVrODV_WaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNzoxMVrODcUoAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Mzg0NjE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.yeelight/README.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNDo0MTo0OVrOFafWNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQxMjo0OToyNlrOFcljFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyMDg4NA==", "bodyText": "backgroundBrightness should probably not be a separate channel. The convention is that a user can create a Dimmer item on the color channel and that should be handled as setting the brightness.", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r363320884", "createdAt": "2020-01-06T14:41:49Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.yeelight/README.md", "diffHunk": "@@ -39,6 +39,10 @@ All devices support some of the following channels:\n |`color` | `Color` | This channel supports color control, it is available on `wonder` and `stripe`.|\n |`colorTemperature` | `Dimmer` | This channel supports adjusting the color temperature, it is available on `wonder` and `stripe` and `ceiling`.|\n |`command` | `String` | This channel sends a command directly to the device, it is available on all Yeelight Things.|\n+|`backgroundColor` | `Color` | This channel supports color control for the ambient light, it is available on `ceiling4`.|\n+|`backgroundBrightness` | `Dimmer` | This channel supports adjusting the ambient light brightness value, it is available on `ceiling4`.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561ea85dd224abe3176d8238f3b9f763b0ef6830"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM0NjIyNw==", "bodyText": "I wasn't aware of this convention. I will adapt the code.", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r364346227", "createdAt": "2020-01-08T17:15:52Z", "author": {"login": "vkoop"}, "path": "bundles/org.openhab.binding.yeelight/README.md", "diffHunk": "@@ -39,6 +39,10 @@ All devices support some of the following channels:\n |`color` | `Color` | This channel supports color control, it is available on `wonder` and `stripe`.|\n |`colorTemperature` | `Dimmer` | This channel supports adjusting the color temperature, it is available on `wonder` and `stripe` and `ceiling`.|\n |`command` | `String` | This channel sends a command directly to the device, it is available on all Yeelight Things.|\n+|`backgroundColor` | `Color` | This channel supports color control for the ambient light, it is available on `ceiling4`.|\n+|`backgroundBrightness` | `Dimmer` | This channel supports adjusting the ambient light brightness value, it is available on `ceiling4`.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyMDg4NA=="}, "originalCommit": {"oid": "561ea85dd224abe3176d8238f3b9f763b0ef6830"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM2NTMzOQ==", "bodyText": "I can imagine, there is a lot to know. For this see https://www.openhab.org/docs/concepts/items.html#a-note-on-items-which-accept-multiple-state-data-types", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r364365339", "createdAt": "2020-01-08T17:59:38Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.yeelight/README.md", "diffHunk": "@@ -39,6 +39,10 @@ All devices support some of the following channels:\n |`color` | `Color` | This channel supports color control, it is available on `wonder` and `stripe`.|\n |`colorTemperature` | `Dimmer` | This channel supports adjusting the color temperature, it is available on `wonder` and `stripe` and `ceiling`.|\n |`command` | `String` | This channel sends a command directly to the device, it is available on all Yeelight Things.|\n+|`backgroundColor` | `Color` | This channel supports color control for the ambient light, it is available on `ceiling4`.|\n+|`backgroundBrightness` | `Dimmer` | This channel supports adjusting the ambient light brightness value, it is available on `ceiling4`.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyMDg4NA=="}, "originalCommit": {"oid": "561ea85dd224abe3176d8238f3b9f763b0ef6830"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUxOTYzOQ==", "bodyText": "@Hilbrand I've implemented the changes as suggested and combined ambient light color and brightness into one channel.", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r365519639", "createdAt": "2020-01-11T12:49:26Z", "author": {"login": "vkoop"}, "path": "bundles/org.openhab.binding.yeelight/README.md", "diffHunk": "@@ -39,6 +39,10 @@ All devices support some of the following channels:\n |`color` | `Color` | This channel supports color control, it is available on `wonder` and `stripe`.|\n |`colorTemperature` | `Dimmer` | This channel supports adjusting the color temperature, it is available on `wonder` and `stripe` and `ceiling`.|\n |`command` | `String` | This channel sends a command directly to the device, it is available on all Yeelight Things.|\n+|`backgroundColor` | `Color` | This channel supports color control for the ambient light, it is available on `ceiling4`.|\n+|`backgroundBrightness` | `Dimmer` | This channel supports adjusting the ambient light brightness value, it is available on `ceiling4`.|", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzMyMDg4NA=="}, "originalCommit": {"oid": "561ea85dd224abe3176d8238f3b9f763b0ef6830"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDIzNjg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/CeilingDeviceWithAmbientDevice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozMzo0NVrOFkUI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxOTo1OToyN1rOFkWaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzAwMw==", "bodyText": "Is it really necessary to catch Exception here? Whatr type of exceptions do you expect? The problem with catching Exception is that it also catches NPE and therefore might hide programming errors.", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r373623003", "createdAt": "2020-01-31T18:33:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/CeilingDeviceWithAmbientDevice.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.yeelight.internal.lib.device;\n+\n+import org.openhab.binding.yeelight.internal.lib.enums.ActiveMode;\n+import org.openhab.binding.yeelight.internal.lib.enums.DeviceType;\n+import org.openhab.binding.yeelight.internal.lib.enums.MethodAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link CeilingDeviceWithAmbientDevice} contains methods for handling the ceiling device with ambient light.\n+ *\n+ * @author Viktor Koop - Initial contribution\n+ */\n+public class CeilingDeviceWithAmbientDevice extends CeilingDevice\n+        implements DeviceWithAmbientLight, DeviceWithNightlight {\n+    private final Logger logger = LoggerFactory.getLogger(CeilingDeviceWithAmbientDevice.class);\n+\n+    public CeilingDeviceWithAmbientDevice(String id) {\n+        super(id);\n+\n+        mDeviceType = DeviceType.ceiling4;\n+    }\n+\n+    @Override\n+    public void onNotify(String msg) {\n+        logger.debug(\"Got state: {}\", msg);\n+\n+        JsonObject result = new JsonParser().parse(msg).getAsJsonObject();\n+\n+        try {\n+            if (result.has(\"id\")) {\n+                String id = result.get(\"id\").getAsString();\n+                // for cmd transaction.\n+\n+                if (mQueryList.contains(id)) {\n+                    JsonArray status = result.get(\"result\").getAsJsonArray();\n+\n+                    final String backgroundPowerState = status.get(4).toString();\n+                    if (\"\\\"off\\\"\".equals(backgroundPowerState)) {\n+                        mDeviceStatus.setBackgroundIsPowerOff(true);\n+                    } else if (\"\\\"on\\\"\".equals(backgroundPowerState)) {\n+                        mDeviceStatus.setBackgroundIsPowerOff(false);\n+                    }\n+\n+                    final int backgroundBrightness = status.get(5).getAsInt();\n+                    mDeviceStatus.setBackgroundBrightness(backgroundBrightness);\n+\n+                    final int backgroundHue = status.get(6).getAsInt();\n+                    mDeviceStatus.setBackgroundHue(backgroundHue);\n+\n+                    final int backgroundSaturation = status.get(7).getAsInt();\n+                    mDeviceStatus.setBackgroundSat(backgroundSaturation);\n+\n+                    final int activeMode = status.get(8).getAsInt();\n+                    mDeviceStatus.setActiveMode(ActiveMode.values()[activeMode]);\n+                }\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e0c2f780b37946e88121b3a207ea3033df8137"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY2MDIzMw==", "bodyText": "I don't think the try/catch block is needed at all and will remove it.", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r373660233", "createdAt": "2020-01-31T19:59:27Z", "author": {"login": "vkoop"}, "path": "bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/CeilingDeviceWithAmbientDevice.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.yeelight.internal.lib.device;\n+\n+import org.openhab.binding.yeelight.internal.lib.enums.ActiveMode;\n+import org.openhab.binding.yeelight.internal.lib.enums.DeviceType;\n+import org.openhab.binding.yeelight.internal.lib.enums.MethodAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+/**\n+ * The {@link CeilingDeviceWithAmbientDevice} contains methods for handling the ceiling device with ambient light.\n+ *\n+ * @author Viktor Koop - Initial contribution\n+ */\n+public class CeilingDeviceWithAmbientDevice extends CeilingDevice\n+        implements DeviceWithAmbientLight, DeviceWithNightlight {\n+    private final Logger logger = LoggerFactory.getLogger(CeilingDeviceWithAmbientDevice.class);\n+\n+    public CeilingDeviceWithAmbientDevice(String id) {\n+        super(id);\n+\n+        mDeviceType = DeviceType.ceiling4;\n+    }\n+\n+    @Override\n+    public void onNotify(String msg) {\n+        logger.debug(\"Got state: {}\", msg);\n+\n+        JsonObject result = new JsonParser().parse(msg).getAsJsonObject();\n+\n+        try {\n+            if (result.has(\"id\")) {\n+                String id = result.get(\"id\").getAsString();\n+                // for cmd transaction.\n+\n+                if (mQueryList.contains(id)) {\n+                    JsonArray status = result.get(\"result\").getAsJsonArray();\n+\n+                    final String backgroundPowerState = status.get(4).toString();\n+                    if (\"\\\"off\\\"\".equals(backgroundPowerState)) {\n+                        mDeviceStatus.setBackgroundIsPowerOff(true);\n+                    } else if (\"\\\"on\\\"\".equals(backgroundPowerState)) {\n+                        mDeviceStatus.setBackgroundIsPowerOff(false);\n+                    }\n+\n+                    final int backgroundBrightness = status.get(5).getAsInt();\n+                    mDeviceStatus.setBackgroundBrightness(backgroundBrightness);\n+\n+                    final int backgroundHue = status.get(6).getAsInt();\n+                    mDeviceStatus.setBackgroundHue(backgroundHue);\n+\n+                    final int backgroundSaturation = status.get(7).getAsInt();\n+                    mDeviceStatus.setBackgroundSat(backgroundSaturation);\n+\n+                    final int activeMode = status.get(8).getAsInt();\n+                    mDeviceStatus.setActiveMode(ActiveMode.values()[activeMode]);\n+                }\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyMzAwMw=="}, "originalCommit": {"oid": "f0e0c2f780b37946e88121b3a207ea3033df8137"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDI0NjQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/DeviceBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODozNzoxMVrOFkUOuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMDowMzo0NFrOFkWgvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNDUwNQ==", "bodyText": "Wouldn't it be possible to use switch (property)  here? Since Java 7 we can switch on strings.", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r373624505", "createdAt": "2020-01-31T18:37:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/DeviceBase.java", "diffHunk": "@@ -79,48 +78,39 @@ public void onNotify(String response) {\n         boolean needNotify = true;\n         JsonObject message = new JsonParser().parse(response).getAsJsonObject();\n         try {\n-            String updateProp = \"\";\n             if (message.has(\"method\")) {\n                 String method = message.get(\"method\").toString().replace(\"\\\"\", \"\");\n                 if (method.equals(\"props\")) {// Property notify\n                     String params = message.get(\"params\").toString();\n                     JsonObject propsObject = new JsonParser().parse(params).getAsJsonObject();\n-                    Set<Entry<String, JsonElement>> props = propsObject.entrySet();\n-                    Iterator<Entry<String, JsonElement>> iterator = props.iterator();\n-                    while (iterator.hasNext()) {\n-                        Entry<String, JsonElement> prop = iterator.next();\n-                        if (prop.getKey().equals(\"power\")) {\n-                            updateProp += \" power\";\n+                    for (Entry<String, JsonElement> prop : propsObject.entrySet()) {\n+                        final YeelightDeviceProperty property = YeelightDeviceProperty.fromString(prop.getKey());\n+                        if (YeelightDeviceProperty.POWER.equals(property)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e0c2f780b37946e88121b3a207ea3033df8137"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY2MTg4Nw==", "bodyText": "Initially I didn't want to refactor to much of the code to simplify the review process.\nI've changed the if/else block to a switch statement.", "url": "https://github.com/openhab/openhab-addons/pull/6749#discussion_r373661887", "createdAt": "2020-01-31T20:03:44Z", "author": {"login": "vkoop"}, "path": "bundles/org.openhab.binding.yeelight/src/main/java/org/openhab/binding/yeelight/internal/lib/device/DeviceBase.java", "diffHunk": "@@ -79,48 +78,39 @@ public void onNotify(String response) {\n         boolean needNotify = true;\n         JsonObject message = new JsonParser().parse(response).getAsJsonObject();\n         try {\n-            String updateProp = \"\";\n             if (message.has(\"method\")) {\n                 String method = message.get(\"method\").toString().replace(\"\\\"\", \"\");\n                 if (method.equals(\"props\")) {// Property notify\n                     String params = message.get(\"params\").toString();\n                     JsonObject propsObject = new JsonParser().parse(params).getAsJsonObject();\n-                    Set<Entry<String, JsonElement>> props = propsObject.entrySet();\n-                    Iterator<Entry<String, JsonElement>> iterator = props.iterator();\n-                    while (iterator.hasNext()) {\n-                        Entry<String, JsonElement> prop = iterator.next();\n-                        if (prop.getKey().equals(\"power\")) {\n-                            updateProp += \" power\";\n+                    for (Entry<String, JsonElement> prop : propsObject.entrySet()) {\n+                        final YeelightDeviceProperty property = YeelightDeviceProperty.fromString(prop.getKey());\n+                        if (YeelightDeviceProperty.POWER.equals(property)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyNDUwNQ=="}, "originalCommit": {"oid": "f0e0c2f780b37946e88121b3a207ea3033df8137"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1151, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}