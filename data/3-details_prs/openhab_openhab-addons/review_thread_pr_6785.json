{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDA2OTM5", "number": 6785, "reviewThreads": {"totalCount": 82, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTowNzowMlrODYd4Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0MTo0NFrOD9Kguw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTgxOTgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTowNzowMlrOFeVy8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozMzoyOVrOFejZSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM1ODcwNA==", "bodyText": "Can you put all sentences on a single line. That makes review changes in the future easier.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367358704", "createdAt": "2020-01-16T11:07:02Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/README.md", "diffHunk": "@@ -0,0 +1,142 @@\n+# OpenTherm Gateway binding\n+\n+This binding is used to integrate the OpenTherm Gateway into openHAB2. The OpenTherm Gateway is a module designed by Schelte Bron that is connected in between a boiler and a thermostat and communicates using the OpenTherm protocol.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MTUxMg==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367581512", "createdAt": "2020-01-16T18:33:29Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/README.md", "diffHunk": "@@ -0,0 +1,142 @@\n+# OpenTherm Gateway binding\n+\n+This binding is used to integrate the OpenTherm Gateway into openHAB2. The OpenTherm Gateway is a module designed by Schelte Bron that is connected in between a boiler and a thermostat and communicates using the OpenTherm protocol.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM1ODcwNA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTgyNTY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/feature/feature.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTowOToyN1rOFeV2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozMzo0MVrOFejZjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM1OTU5OA==", "bodyText": "Our current formatter wraps the feature file, but this is not correct. To avoid problems with feature files all tag information for a single tag needs to be on the same line.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <features name=\"org.openhab.binding.openthermgateway-${project.version}\"\n          \n          \n            \n            <features name=\"org.openhab.binding.openthermgateway-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n          \n      \n    \n    \n  \n\nSame for feature tag below.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367359598", "createdAt": "2020-01-16T11:09:27Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.openthermgateway-${project.version}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MTU4MQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367581581", "createdAt": "2020-01-16T18:33:41Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.openthermgateway-${project.version}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM1OTU5OA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTgyOTAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/OpenThermGatewayBindingConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxMDo1MVrOFeV4mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODo1MTo1MFrOFej6QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDE1Mg==", "bodyText": "This is generally designed as a Set because that's more efficient in lookup. The list is used to check if a value is present.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367360152", "createdAt": "2020-01-16T11:10:51Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/OpenThermGatewayBindingConstants.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link OpenThermGatewayBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayBindingConstants {\n+\n+    private static final String BINDING_ID = \"openthermgateway\";\n+\n+    // List of all Thing Type UID's\n+    public static final ThingTypeUID MAIN_THING_TYPE = new ThingTypeUID(BINDING_ID, \"otgw\");\n+\n+    // List of all Channel id's\n+    public static final String CHANNEL_SEND_COMMAND = \"sendcommand\";\n+\n+    public static final String CHANNEL_OVERRIDE_SETPOINT_TEMPORARY = \"temperaturetemporary\";\n+    public static final String CHANNEL_OVERRIDE_SETPOINT_CONSTANT = \"temperatureconstant\";\n+    public static final String CHANNEL_OVERRIDE_DHW_SETPOINT = \"overridedhwsetpoint\";\n+    public static final String CHANNEL_ROOM_TEMPERATURE = \"roomtemp\";\n+    public static final String CHANNEL_ROOM_SETPOINT = \"roomsetpoint\";\n+    public static final String CHANNEL_FLOW_TEMPERATURE = \"flowtemp\";\n+    public static final String CHANNEL_RETURN_TEMPERATURE = \"returntemp\";\n+    public static final String CHANNEL_OUTSIDE_TEMPERATURE = \"outsidetemp\";\n+    public static final String CHANNEL_CENTRAL_HEATING_WATER_SETPOINT = \"controlsetpoint\";\n+    public static final String CHANNEL_CENTRAL_HEATING_WATER_PRESSURE = \"waterpressure\";\n+    public static final String CHANNEL_CENTRAL_HEATING_ENABLED = \"ch_enable\";\n+    public static final String CHANNEL_CENTRAL_HEATING_MODE = \"ch_mode\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_TEMPERATURE = \"dhwtemp\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_ENABLED = \"dhw_enable\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_MODE = \"dhw_mode\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_SETPOINT = \"tdhwset\";\n+    public static final String CHANNEL_FLAME = \"flame\";\n+    public static final String CHANNEL_RELATIVE_MODULATION_LEVEL = \"modulevel\";\n+    public static final String CHANNEL_MAXIMUM_MODULATION_LEVEL = \"maxrelmdulevel\";\n+    public static final String CHANNEL_FAULT = \"fault\";\n+    public static final String CHANNEL_SERVICEREQUEST = \"servicerequest\";\n+    public static final String CHANNEL_REMOTE_RESET = \"lockout-reset\";\n+    public static final String CHANNEL_LOW_WATER_PRESSURE = \"lowwaterpress\";\n+    public static final String CHANNEL_GAS_FLAME_FAULT = \"gasflamefault\";\n+    public static final String CHANNEL_AIR_PRESSURE_FAULT = \"airpressfault\";\n+    public static final String CHANNEL_WATER_OVER_TEMP = \"waterovtemp\";\n+    public static final String CHANNEL_OEM_FAULTCODE = \"oemfaultcode\";\n+\n+    public static final List<String> SUPPORTED_CHANNEL_IDS = Arrays.asList(CHANNEL_ROOM_TEMPERATURE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4OTk1Mg==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367589952", "createdAt": "2020-01-16T18:51:50Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/OpenThermGatewayBindingConstants.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link OpenThermGatewayBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayBindingConstants {\n+\n+    private static final String BINDING_ID = \"openthermgateway\";\n+\n+    // List of all Thing Type UID's\n+    public static final ThingTypeUID MAIN_THING_TYPE = new ThingTypeUID(BINDING_ID, \"otgw\");\n+\n+    // List of all Channel id's\n+    public static final String CHANNEL_SEND_COMMAND = \"sendcommand\";\n+\n+    public static final String CHANNEL_OVERRIDE_SETPOINT_TEMPORARY = \"temperaturetemporary\";\n+    public static final String CHANNEL_OVERRIDE_SETPOINT_CONSTANT = \"temperatureconstant\";\n+    public static final String CHANNEL_OVERRIDE_DHW_SETPOINT = \"overridedhwsetpoint\";\n+    public static final String CHANNEL_ROOM_TEMPERATURE = \"roomtemp\";\n+    public static final String CHANNEL_ROOM_SETPOINT = \"roomsetpoint\";\n+    public static final String CHANNEL_FLOW_TEMPERATURE = \"flowtemp\";\n+    public static final String CHANNEL_RETURN_TEMPERATURE = \"returntemp\";\n+    public static final String CHANNEL_OUTSIDE_TEMPERATURE = \"outsidetemp\";\n+    public static final String CHANNEL_CENTRAL_HEATING_WATER_SETPOINT = \"controlsetpoint\";\n+    public static final String CHANNEL_CENTRAL_HEATING_WATER_PRESSURE = \"waterpressure\";\n+    public static final String CHANNEL_CENTRAL_HEATING_ENABLED = \"ch_enable\";\n+    public static final String CHANNEL_CENTRAL_HEATING_MODE = \"ch_mode\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_TEMPERATURE = \"dhwtemp\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_ENABLED = \"dhw_enable\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_MODE = \"dhw_mode\";\n+    public static final String CHANNEL_DOMESTIC_HOT_WATER_SETPOINT = \"tdhwset\";\n+    public static final String CHANNEL_FLAME = \"flame\";\n+    public static final String CHANNEL_RELATIVE_MODULATION_LEVEL = \"modulevel\";\n+    public static final String CHANNEL_MAXIMUM_MODULATION_LEVEL = \"maxrelmdulevel\";\n+    public static final String CHANNEL_FAULT = \"fault\";\n+    public static final String CHANNEL_SERVICEREQUEST = \"servicerequest\";\n+    public static final String CHANNEL_REMOTE_RESET = \"lockout-reset\";\n+    public static final String CHANNEL_LOW_WATER_PRESSURE = \"lowwaterpress\";\n+    public static final String CHANNEL_GAS_FLAME_FAULT = \"gasflamefault\";\n+    public static final String CHANNEL_AIR_PRESSURE_FAULT = \"airpressfault\";\n+    public static final String CHANNEL_WATER_OVER_TEMP = \"waterovtemp\";\n+    public static final String CHANNEL_OEM_FAULTCODE = \"oemfaultcode\";\n+\n+    public static final List<String> SUPPORTED_CHANNEL_IDS = Arrays.asList(CHANNEL_ROOM_TEMPERATURE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MDE1Mg=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTgzNzA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxNDowMFrOFeV9dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNDowMVrOFejaJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTM5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<category>temperature</category>\n          \n          \n            \n            \t\t<category>Temperature</category>", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367361398", "createdAt": "2020-01-16T11:14:00Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,214 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"openthermgateway\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"roomtemp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Room temperature</label>\n+\t\t<description>Current sensed room temperature</description>\n+\t\t<category>temperature</category>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MTczMg==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367581732", "createdAt": "2020-01-16T18:34:01Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,214 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"openthermgateway\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"roomtemp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Room temperature</label>\n+\t\t<description>Current sensed room temperature</description>\n+\t\t<category>temperature</category>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MTM5OA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTg0MjE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxNTo0OVrOFeWAZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNDoxMlrOFejajg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MjE0OQ==", "bodyText": "Format labels with uppercase characters for each word. There are exceptions, see https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367362149", "createdAt": "2020-01-16T11:15:49Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,214 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"openthermgateway\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"roomtemp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Room temperature</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MTgzOA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367581838", "createdAt": "2020-01-16T18:34:12Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,214 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"openthermgateway\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"roomtemp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Room temperature</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MjE0OQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTg0NDM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToxNjo1MVrOFeWB2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNzo1OTo1MlrOFfLk0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MjUyMQ==", "bodyText": "Prefer to use UoM types. See https://www.openhab.org/docs/concepts/units-of-measurement.html#implementing-uom\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Temperature</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367362521", "createdAt": "2020-01-16T11:16:51Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,214 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"openthermgateway\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"roomtemp\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzOTgyNw==", "bodyText": "Added UoM for temperature and pressure channels", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368239827", "createdAt": "2020-01-18T17:59:52Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/resources/ESH-INF/thing/channels.xml", "diffHunk": "@@ -0,0 +1,214 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"openthermgateway\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<channel-type id=\"roomtemp\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MjUyMQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTg1MjY3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToyMDowNVrOFeWG9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNDozMlrOFejbNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MzgyOQ==", "bodyText": "Enum convention should all be upper case, and/or use underscore:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Flags,\n          \n          \n            \n                FLAGS,", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367363829", "createdAt": "2020-01-16T11:20:05Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum DataType {\n+    Flags,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjAwNA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582004", "createdAt": "2020-01-16T18:34:32Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum DataType {\n+    Flags,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2MzgyOQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTg2OTU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToyNjoxM1rOFeWQ3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxOTowNToyNFrOFekTfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjM2NA==", "bodyText": "Use Java 8 notation:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            scheduler.schedule(new Runnable() {\n          \n          \n            \n            \n          \n          \n            \n                                @Override\n          \n          \n            \n                                public void run() {\n          \n          \n            \n                            scheduler.schedule(() -> {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367366364", "createdAt": "2020-01-16T11:26:13Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5NjQxNQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367596415", "createdAt": "2020-01-16T19:05:24Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjM2NA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTg3MDc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMToyNjo0NVrOFeWRqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNDo1MFrOFejbvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjU3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n          \n          \n            \n                            }, config.connectionRetryInterval, TimeUnit.SECONDS);", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367366570", "createdAt": "2020-01-16T11:26:45Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjE0MA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582140", "createdAt": "2020-01-16T18:34:50Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM2NjU3MA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk1MTA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTo1ODowNFrOFeXCVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMTozNjozM1rOFfOdbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3OTAzMQ==", "bodyText": "Only catch the specific Exception.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367379031", "createdAt": "2020-01-16T11:58:04Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        try {\n+            disconnect();\n+\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n+\n+            logger.info(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzA4Nw==", "bodyText": "Removed catching generic exceptions", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287087", "createdAt": "2020-01-19T11:36:33Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        try {\n+            disconnect();\n+\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n+\n+            logger.info(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3OTAzMQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk1NDU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMTo1OToxNlrOFeXEbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMTozNzoxNVrOFfOdkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3OTU2Ng==", "bodyText": "Only log to error if it's a bug. If this exception happens you probably also want to inform the user by setting the thing offline with the exception message.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367379566", "createdAt": "2020-01-16T11:59:16Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        try {\n+            disconnect();\n+\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n+\n+            logger.info(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 270}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzEyMQ==", "bodyText": "Adjusted to debug level", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287121", "createdAt": "2020-01-19T11:37:15Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        try {\n+            disconnect();\n+\n+            logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+            new Thread(connector).start();\n+\n+            logger.info(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM3OTU2Ng=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk1OTYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowMTozMFrOFeXHlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo1NzoxNFrOFewQfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MDM3NA==", "bodyText": "Always log catched exceptions! Do you really need to catch the exception here? I've not seen it in other places, so you should probably remove the catch here.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367380374", "createdAt": "2020-01-16T12:01:30Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MjI1NA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367792254", "createdAt": "2020-01-17T06:57:14Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MDM3NA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk2MzAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowMjo1M1rOFeXJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNToyNFrOFejc2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MDkxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < dataItems.length; i++) {\n          \n          \n            \n                        for (DataItem dataItem: dataItems) {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367380911", "createdAt": "2020-01-16T12:02:53Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjQyNQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582425", "createdAt": "2020-01-16T18:35:24Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MDkxMQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk2NzM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowNDoyMFrOFeXMPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo1OTowNFrOFewSIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MTU2NA==", "bodyText": "Remove this catch", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367381564", "createdAt": "2020-01-16T12:04:20Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MjY3NQ==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367792675", "createdAt": "2020-01-17T06:59:04Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MTU2NA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk2ODQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowNDo0MVrOFeXM0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNjo1OToyNFrOFewSbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MTcxNQ==", "bodyText": "Is this catch needed?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367381715", "createdAt": "2020-01-16T12:04:41Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5Mjc0OQ==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367792749", "createdAt": "2020-01-17T06:59:24Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MTcxNQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk3MzMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowNjozNFrOFeXPwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzo1NzoxMFrOGSJ3dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MjQ2NA==", "bodyText": "Don't compare string with !=. But you should check here on instanceof\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (command.toFullString() != \"REFRESH\") {\n          \n          \n            \n                        if (!command instanceof RefreshType) {\n          \n      \n    \n    \n  \n\nYou do need to handle the RefreshType command  by updating the channel with the known (or unknown) value.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367382464", "createdAt": "2020-01-16T12:06:34Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIzOTk3NA==", "bodyText": "Changed comparison. Not sure how to respond to refreshtype commands. The binding doesn't keep track of the values, nor can it read the values from the OTGW device. The device reports the values continuously to the socket and the binding maps the incoming values to the channels.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368239974", "createdAt": "2020-01-18T18:02:58Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MjQ2NA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4OTIwNQ==", "bodyText": "Hi @Hilbrand, could you please review this PR and this comment in particular ?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421689205", "createdAt": "2020-05-07T17:57:10Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MjQ2NA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk3NjU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowODowM1rOFeXRtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNTo1MVrOFejdsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4Mjk2Ng==", "bodyText": "Uppercase enum values:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Read,\n          \n          \n            \n                READ,", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367382966", "createdAt": "2020-01-16T12:08:03Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum Msg {\n+    Read,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjY0MQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582641", "createdAt": "2020-01-16T18:35:51Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Msg.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum Msg {\n+    Read,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4Mjk2Ng=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk3NzMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowODoyMlrOFeXSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzoyOToxOFrOFewt2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzA3NQ==", "bodyText": "Remove, see other comment.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367383075", "createdAt": "2020-01-16T12:08:22Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayCallback {\n+    public void connecting();\n+\n+    public void connected();\n+\n+    public void disconnected();\n+\n+    public void receiveMessage(Message message);\n+\n+    public void log(LogLevel loglevel, String message);\n+\n+    public void log(LogLevel loglevel, String format, String arg);\n+\n+    public void log(LogLevel loglevel, String format, Throwable t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5OTc3MA==", "bodyText": "I'd like to resolve this comment to keep a clean overview of work to be done, please see my other comment on logging from the thread. Once I get to test that, I will remove the logging callback methods alltogether.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367799770", "createdAt": "2020-01-17T07:29:18Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayCallback {\n+    public void connecting();\n+\n+    public void connected();\n+\n+    public void disconnected();\n+\n+    public void receiveMessage(Message message);\n+\n+    public void log(LogLevel loglevel, String message);\n+\n+    public void log(LogLevel loglevel, String format, String arg);\n+\n+    public void log(LogLevel loglevel, String format, Throwable t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzA3NQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk3ODk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowOTowMlrOFeXTEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNjowNFrOFejeDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzMxMw==", "bodyText": "Remove public on interface methods. It's not needed as interface methods are public by convention.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void connecting();\n          \n          \n            \n                void connecting();", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367383313", "createdAt": "2020-01-16T12:09:02Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayCallback {\n+    public void connecting();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjczNQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582735", "createdAt": "2020-01-16T18:36:04Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayCallback.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayCallback {\n+    public void connecting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzMxMw=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk4MDMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjowOTozMlrOFeXT1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNjoxM1rOFejeYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzUxMQ==", "bodyText": "Remove public, see other comment.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367383511", "createdAt": "2020-01-16T12:09:32Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayConnector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayConnector extends Runnable {\n+    public void sendCommand(GatewayCommand command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MjgxOA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582818", "createdAt": "2020-01-16T18:36:13Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayConnector.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public interface OpenThermGatewayConnector extends Runnable {\n+    public void sendCommand(GatewayCommand command);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4MzUxMQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk4MTkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoxMDoxNVrOFeXUyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNjozMlrOFeje_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4Mzc1NA==", "bodyText": "Remove immediate we don't set it on binding components.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.openthermgateway\")\n          \n          \n            \n            @Component(service = ThingHandlerFactory.class, configurationPid = \"binding.openthermgateway\")", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367383754", "createdAt": "2020-01-16T12:10:15Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayHandlerFactory.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.handler.OpenThermGatewayHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link OpenThermGatewayHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.openthermgateway\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4Mjk3NA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367582974", "createdAt": "2020-01-16T18:36:32Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewayHandlerFactory.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.handler.OpenThermGatewayHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link OpenThermGatewayHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class, immediate = true, configurationPid = \"binding.openthermgateway\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4Mzc1NA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTk4NTc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoxMTozNFrOFeXW6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNjo0M1rOFejfVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4NDI5OA==", "bodyText": "Use the timeunit in the variable name so it's easy to see what the unit is:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int COMMAND_RESPONSE_TIME = 100;\n          \n          \n            \n                private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n          \n      \n    \n    \n  \n\nSame for COMMAND_TIMEOUT", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367384298", "createdAt": "2020-01-16T12:11:34Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzA2MA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583060", "createdAt": "2020-01-16T18:36:43Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4NDI5OA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAwMDcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoxNzowNlrOFeXfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNjo1MVrOFejfkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4NjU1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (int i = 0; i < dataItems.length; i++) {\n          \n          \n            \n                        for (DataItem dataItem: dataItems) {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367386554", "createdAt": "2020-01-16T12:17:06Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n+            }\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {\n+            callback.log(LogLevel.Error, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n+        } finally {\n+\n+            if (writer != null) {\n+                writer.flush();\n+                writer.close();\n+            }\n+\n+            close(reader);\n+            close(writer);\n+\n+            connected = false;\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.disconnected();\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        stopping = true;\n+\n+        close(socket);\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            callback.log(LogLevel.Debug, \"Sending message: %s\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+        } else {\n+            callback.log(LogLevel.Debug,\n+                    \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n+                callback.log(LogLevel.Debug,\n+                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n+            return;\n+        } else {\n+            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+                    msg.getCode(), msg.getMessageType().toString()));\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzEyMA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583120", "createdAt": "2020-01-16T18:36:51Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n+            }\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {\n+            callback.log(LogLevel.Error, \"An error occured in OpenThermGatewaySocketConnector: %s\", e.getMessage());\n+        } finally {\n+\n+            if (writer != null) {\n+                writer.flush();\n+                writer.close();\n+            }\n+\n+            close(reader);\n+            close(writer);\n+\n+            connected = false;\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector disconnected\");\n+            callback.disconnected();\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        stopping = true;\n+\n+        close(socket);\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            callback.log(LogLevel.Debug, \"Sending message: %s\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+        } else {\n+            callback.log(LogLevel.Debug,\n+                    \"Unable to send message: %s. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+            callback.log(LogLevel.Debug, String.format(\"Received command confirmation: %s: %s\", code, value));\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME) {\n+                callback.log(LogLevel.Debug,\n+                        String.format(\"Resending command: %s\", timeAndCommand.getValue().toFullString()));\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            callback.log(LogLevel.Debug, \"Received message: %s, (unknown)\", message);\n+            return;\n+        } else {\n+            callback.log(LogLevel.Debug, String.format(\"Received message: %s, %d %s %s\", message, msg.getID(),\n+                    msg.getCode(), msg.getMessageType().toString()));\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4NjU1NA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAxMTQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/MessageType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyMToyMVrOFeXmVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNjo1OVrOFejfyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4ODI0NA==", "bodyText": "Uppercase enums:", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367388244", "createdAt": "2020-01-16T12:21:21Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/MessageType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum MessageType {\n+    ReadData, // 000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzE3OA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583178", "createdAt": "2020-01-16T18:36:59Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/MessageType.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum MessageType {\n+    ReadData, // 000", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4ODI0NA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAxNjk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyMzoyOFrOFeXpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNzoxNVrOFejgJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTA2Nw==", "bodyText": "Don't compare strings with ==:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {\n          \n          \n            \n                    return other != null && this.getID() == other.getID() && (\"R\".equals(this.getCode()) || \"A\".equals(this.getCode()));\n          \n      \n    \n    \n  \n\nAnd just return the condition.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367389067", "createdAt": "2020-01-16T12:23:28Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HighByte:\n+                    return this.data.substring(0, 2);\n+                case LowByte:\n+                    return this.data.substring(2, 4);\n+                case Both:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable\n+        String data = getData(ByteType.Both);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzI3MQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583271", "createdAt": "2020-01-16T18:37:15Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HighByte:\n+                    return this.data.substring(0, 2);\n+                case LowByte:\n+                    return this.data.substring(2, 4);\n+                case Both:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable\n+        String data = getData(ByteType.Both);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTA2Nw=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAyMDE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyNDo0OVrOFeXrjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNzozMlrOFejgjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTU4MA==", "bodyText": "Remove TODO.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367389580", "createdAt": "2020-01-16T12:24:49Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HighByte:\n+                    return this.data.substring(0, 2);\n+                case LowByte:\n+                    return this.data.substring(2, 4);\n+                case Both:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable\n+        String data = getData(ByteType.Both);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s - %s - %s\", this.code, this.id, this.data);\n+    }\n+\n+    public Message(String code, MessageType messageType, int id, String data) {\n+        this.code = code;\n+        this.messageType = messageType;\n+        this.id = id;\n+        this.data = data;\n+    }\n+\n+    public static @Nullable Message parse(String message) {\n+        if (message.matches(\"[TBRA]{1}[A-F0-9]{8}\")) {\n+\n+            // For now, only parse TBRA codes\n+            String code = message.substring(0, 1);\n+            MessageType messageType = getMessageType(message.substring(1, 3));\n+            int id = Integer.valueOf(message.substring(3, 5), 16);\n+            String data = message.substring(5);\n+\n+            return new Message(code, messageType, id, data);\n+        }\n+\n+        return null;\n+    }\n+\n+    private static MessageType getMessageType(String value) {\n+        // First parse the hex value to an integer\n+        int integer = Integer.parseInt(value, 16);\n+\n+        // Then right shift it 4 bits so that the message type bits are at the front\n+        int shifted = integer >> 4;\n+\n+        // Then mask it with 00000111 (7), so that we only get the first 3 bits,\n+        // effectively cutting off the parity bit.\n+        int cutoff = shifted & 7;\n+\n+        switch (cutoff) {\n+            case 0: // 000\n+                return MessageType.ReadData;\n+            case 1: // 001\n+                return MessageType.WriteData;\n+            case 2: // 010\n+                return MessageType.InvalidData;\n+            case 3: // 011\n+                return MessageType.Reserved;\n+            case 4: // 100\n+                return MessageType.ReadAck;\n+            case 5: // 101\n+                return MessageType.WriteAck;\n+            case 6: // 110\n+                return MessageType.DataInvalid;\n+            case 7: // 111\n+            default:\n+                return MessageType.UnknownDataId;\n+        }\n+    }\n+\n+    private int parseSignedInteger(String data) {\n+        // First parse the hex value to an unsigned integer value\n+        int result = Integer.parseInt(data, 16);\n+\n+        // TODO: more elegant way of determining the bitmask based on the parsed integer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzM3Mg==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583372", "createdAt": "2020-01-16T18:37:32Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,244 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HighByte:\n+                    return this.data.substring(0, 2);\n+                case LowByte:\n+                    return this.data.substring(2, 4);\n+                case Both:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable\n+        String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable\n+        String data = getData(ByteType.Both);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        if (other != null && this.getID() == other.getID() && (this.getCode() == \"R\" || this.getCode() == \"A\")) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s - %s - %s\", this.code, this.id, this.data);\n+    }\n+\n+    public Message(String code, MessageType messageType, int id, String data) {\n+        this.code = code;\n+        this.messageType = messageType;\n+        this.id = id;\n+        this.data = data;\n+    }\n+\n+    public static @Nullable Message parse(String message) {\n+        if (message.matches(\"[TBRA]{1}[A-F0-9]{8}\")) {\n+\n+            // For now, only parse TBRA codes\n+            String code = message.substring(0, 1);\n+            MessageType messageType = getMessageType(message.substring(1, 3));\n+            int id = Integer.valueOf(message.substring(3, 5), 16);\n+            String data = message.substring(5);\n+\n+            return new Message(code, messageType, id, data);\n+        }\n+\n+        return null;\n+    }\n+\n+    private static MessageType getMessageType(String value) {\n+        // First parse the hex value to an integer\n+        int integer = Integer.parseInt(value, 16);\n+\n+        // Then right shift it 4 bits so that the message type bits are at the front\n+        int shifted = integer >> 4;\n+\n+        // Then mask it with 00000111 (7), so that we only get the first 3 bits,\n+        // effectively cutting off the parity bit.\n+        int cutoff = shifted & 7;\n+\n+        switch (cutoff) {\n+            case 0: // 000\n+                return MessageType.ReadData;\n+            case 1: // 001\n+                return MessageType.WriteData;\n+            case 2: // 010\n+                return MessageType.InvalidData;\n+            case 3: // 011\n+                return MessageType.Reserved;\n+            case 4: // 100\n+                return MessageType.ReadAck;\n+            case 5: // 101\n+                return MessageType.WriteAck;\n+            case 6: // 110\n+                return MessageType.DataInvalid;\n+            case 7: // 111\n+            default:\n+                return MessageType.UnknownDataId;\n+        }\n+    }\n+\n+    private int parseSignedInteger(String data) {\n+        // First parse the hex value to an unsigned integer value\n+        int result = Integer.parseInt(data, 16);\n+\n+        // TODO: more elegant way of determining the bitmask based on the parsed integer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTU4MA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAyMTUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyNToyMlrOFeXsWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDo0NDozNlrOFfORkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTc4Ng==", "bodyText": "Remove this enum see other comment about logging.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367389786", "createdAt": "2020-01-16T12:25:22Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum LogLevel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NDA1MQ==", "bodyText": "Removed, see other comment about removing logging callback", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368284051", "createdAt": "2020-01-19T10:44:36Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/LogLevel.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum LogLevel {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM4OTc4Ng=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAyMzU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyNjoxMFrOFeXtmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozNzo0N1rOFejg9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDEwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((code == null || code == \"\") && message.length() > 2 && message.charAt(2) == '=') {\n          \n          \n            \n                    if ((code == null || code.isEmpty()) && message.length() > 2 && message.charAt(2) == '=') {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390107", "createdAt": "2020-01-16T12:26:10Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {\n+            if (this.message.equals(validations[i])) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws Exception {\n+        if ((code == null || code == \"\") && message.length() > 2 && message.charAt(2) == '=') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzQ3OA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583478", "createdAt": "2020-01-16T18:37:47Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {\n+            if (this.message.equals(validations[i])) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws Exception {\n+        if ((code == null || code == \"\") && message.length() > 2 && message.charAt(2) == '=') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDEwNw=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAyNTI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyNjo1MFrOFeXuqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNzozMTo0MlrOFewv9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDM3OA==", "bodyText": "Can you make the thrown exception more specific or does a method actual throw Exception?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390378", "createdAt": "2020-01-16T12:26:50Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {\n+            if (this.message.equals(validations[i])) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwMDMxMA==", "bodyText": "Changed to IllegalArgumentException, and with that, also the try/catch in calling code", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367800310", "createdAt": "2020-01-17T07:31:42Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {\n+            if (this.message.equals(validations[i])) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDM3OA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAyNjUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyNzoyMVrOFeXvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozODowMVrOFejhUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDU3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int i = 0; i < validations.length; i++) {\n          \n          \n            \n                    for (String validation: validations) {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390576", "createdAt": "2020-01-16T12:27:21Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzU3MA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583570", "createdAt": "2020-01-16T18:38:01Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (int i = 0; i < validations.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDU3Ng=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAyNzM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyNzozOFrOFeXv7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozODoxMVrOFejhtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.validationSet == null || this.validationSet == \"\") {\n          \n          \n            \n                    if (this.validationSet == null || this.validationSet.isEmpty()) {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390700", "createdAt": "2020-01-16T12:27:38Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzY2OQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583669", "createdAt": "2020-01-16T18:38:11Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws Exception {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet == null || this.validationSet == \"\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDcwMA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAyOTM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyODoyNVrOFeXxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNzoxNTo1NFrOFfVHgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDk5OA==", "bodyText": "It looks like the fields and methods in the class are not used?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367390998", "createdAt": "2020-01-16T12:28:25Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+    private int id;\n+    private DataItem[] dataItems;\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public void setID(int id) {\n+        this.id = id;\n+    }\n+\n+    public DataItem[] getDataItems() {\n+        return dataItems;\n+    }\n+\n+    public void setDataItem(DataItem[] dataItems) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwMjMxOQ==", "bodyText": "It's a datastructure that represents the OpenTherm protocol specifications of data-id's, types and mapping of payload bytes. I created it to have a complete dataset of all the possible messages, but (after some refactoring) ended up not using everything.. Then again, it's very nice to be able to lookup the individual message types and relate them to the data-id's from the OT specification..", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367802319", "createdAt": "2020-01-17T07:39:41Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+    private int id;\n+    private DataItem[] dataItems;\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public void setID(int id) {\n+        this.id = id;\n+    }\n+\n+    public DataItem[] getDataItems() {\n+        return dataItems;\n+    }\n+\n+    public void setDataItem(DataItem[] dataItems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDk5OA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM5NjE2Mg==", "bodyText": "After taking another look.. there were indeed some attribute on DataItemGroup that were now nolonger needed. I also removed some setters from DataItem, since it's intention is to be a reference list of OpenTherm commands, and therefor not to be modified once created.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368396162", "createdAt": "2020-01-20T07:15:54Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+    private int id;\n+    private DataItem[] dataItems;\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public void setID(int id) {\n+        this.id = id;\n+    }\n+\n+    public DataItem[] getDataItems() {\n+        return dataItems;\n+    }\n+\n+    public void setDataItem(DataItem[] dataItems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MDk5OA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAzMTAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjoyOTowOFrOFeXyJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozODoyN1rOFejiKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MTI2OQ==", "bodyText": "Uppercase enum, see other comment.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                HighByte,\n          \n          \n            \n                HIGH_BYTE,", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367391269", "createdAt": "2020-01-16T12:29:08Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum ByteType {\n+    HighByte,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4Mzc4NA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583784", "createdAt": "2020-01-16T18:38:27Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/ByteType.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+public enum ByteType {\n+    HighByte,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MTI2OQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAzMzY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/TypeConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjozMDoxOVrOFeXzzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozODo0NFrOFejirQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MTY5Mg==", "bodyText": "This class doesn't seem to add much value. I suggest to remove it. OnOffType can be used as  OnOffType.from(value)", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367391692", "createdAt": "2020-01-16T12:30:19Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/TypeConverter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+\n+/**\n+ * The {@link TypeConverter} is used to convert simple values to SmartHome types\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TypeConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4MzkxNw==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367583917", "createdAt": "2020-01-16T18:38:44Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/TypeConverter.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+\n+/**\n+ * The {@link TypeConverter} is used to convert simple values to SmartHome types\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class TypeConverter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MTY5Mg=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDAzNjc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjozMTo0MFrOFeX1xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDo0Mzo0M1rOFfORbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MjE5Ng==", "bodyText": "Please remove this. Don't add custom logging features.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367392196", "createdAt": "2020-01-16T12:31:40Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc5MDA3Mw==", "bodyText": "The thought behind this was that the connector running in a separate thread didn't have access to the logging framework. Therefor a mechanism was added that logs via a callback to the thinghandler, which in turns logs to logging framework. Will test to see if I can log from the thread, then this part of the callback interface can be removed.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367790073", "createdAt": "2020-01-17T06:48:14Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MjE5Ng=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NDAxMg==", "bodyText": "After running some tests, removed logging callback and let connector log directly to logging framework", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368284012", "createdAt": "2020-01-19T10:43:43Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {\n+                    gatewayCommand = GatewayCommand.parse(code,\n+                            Double.toString(((QuantityType) command).doubleValue()));\n+                } else {\n+                    gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+                }\n+\n+                if (gatewayCommand != null && checkConnection()) {\n+                    connector.sendCommand(gatewayCommand);\n+                }\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"error\", ex);\n+        }\n+    }\n+\n+    boolean connecting = false;\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+\n+        try {\n+            updateStatus(ThingStatus.OFFLINE);\n+\n+            // retry connection if disconnect is not explicitly requested\n+            if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+                scheduler.schedule(new Runnable() {\n+\n+                    @Override\n+                    public void run() {\n+                        if (connector != null && !connecting && !connector.isConnected()) {\n+                            connect();\n+                        }\n+                    }\n+                }, config.connectionRetryInterval * 1000, TimeUnit.MILLISECONDS);\n+            }\n+        } catch (IllegalStateException ex) {\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (int i = 0; i < dataItems.length; i++) {\n+                DataItem dataItem = dataItems[i];\n+\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case Flags:\n+                        state = TypeConverter.toOnOffType(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case Uint8:\n+                    case Uint16:\n+                        state = TypeConverter.toDecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case Int8:\n+                    case Int16:\n+                        state = TypeConverter.toDecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case Float:\n+                        state = TypeConverter.toDecimalType(message.getFloat());\n+                        break;\n+                    case DoWToD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    try {\n+                        updateState(channelId, state);\n+                    } catch (IllegalStateException e) {\n+                        // Missing callback, possibly due to incorrect initialization. how to handle correctly ?\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String format, String arg) {\n+        String message = String.format(format, arg);\n+        log(loglevel, message);\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message, Throwable t) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message, t);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message, t);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message, t);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message, t);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message, t);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void log(LogLevel loglevel, String message) {\n+        switch (loglevel) {\n+            case Trace:\n+                logger.trace(\"{}\", message);\n+                break;\n+            case Debug:\n+                logger.debug(\"{}\", message);\n+                break;\n+            case Info:\n+                logger.info(\"{}\", message);\n+                break;\n+            case Warning:\n+                logger.warn(\"{}\", message);\n+                break;\n+            case Error:\n+                logger.error(\"{}\", message);\n+                break;\n+            default:\n+                break;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MjE5Ng=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDA0MDYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjozMzoyMFrOFeX4Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxODozOToxMlrOFejjeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5Mjc4Nw==", "bodyText": "Put @nullable annotations inline on fields:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private OpenThermGatewayConfiguration config;\n          \n          \n            \n                private @Nullable OpenThermGatewayConfiguration config;", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367392787", "createdAt": "2020-01-16T12:33:20Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU4NDEyMQ==", "bodyText": "Removed newline after @nullable's", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367584121", "createdAt": "2020-01-16T18:39:12Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5Mjc4Nw=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDA0OTcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjozNjo0N1rOFeX9kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwNzo1OToxNlrOFfNo_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NDE5NQ==", "bodyText": "Currently there are no channels that have a QuantityType so this check is not needed. However I would suggest to make some of the channels with unit UoM (see my other comment). In that case you can do this check. However you need to pass the correct unit to get the value of the command otherwise you might end up with a different unit you expect. For example if it's a temperature unit, but the command contains Fahrenheit you need to get the Celsius value probably. So you need to pass Celcius to get the double value.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367394195", "createdAt": "2020-01-16T12:36:47Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3MzY2Mg==", "bodyText": "Changed the temperature channels to UoM back and forth", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368273662", "createdAt": "2020-01-19T07:59:16Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.LogLevel;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable\n+    private OpenThermGatewayConfiguration config;\n+\n+    @Nullable\n+    private OpenThermGatewayConnector connector;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        try {\n+            if (command.toFullString() != \"REFRESH\") {\n+                String channel = channelUID.getId();\n+                String code = getGatewayCodeFromChannel(channel);\n+\n+                GatewayCommand gatewayCommand;\n+                if (command instanceof QuantityType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NDE5NQ=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDA1OTc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo0MDo1MVrOFeYDlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMTozNjowOFrOFfOdSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NTczNA==", "bodyText": "Can you catch the specific exception here or add RuntimException\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } catch (Exception e) {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367395734", "createdAt": "2020-01-16T12:40:51Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n+            }\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzA1MQ==", "bodyText": "Removed catching generic exceptions", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287051", "createdAt": "2020-01-19T11:36:08Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            callback.log(LogLevel.Debug, \"OpenThermGatewaySocketConnector connected\");\n+\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+            // Set the OTGW to report every message it receives and transmits\n+            sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+            while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                @Nullable\n+                String message = reader.readLine();\n+\n+                if (message != null) {\n+                    handleMessage(message);\n+                } else {\n+                    callback.log(LogLevel.Info, \"Connection closed by OpenTherm Gateway\");\n+                    break;\n+                }\n+            }\n+\n+            callback.log(LogLevel.Debug, \"Stopping OpenThermGatewaySocketConnector\");\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NTczNA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDA2NTcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMjo0MzoxMlrOFeYHFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMTozNTozN1rOFfOdHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NjYyOA==", "bodyText": "Use try-with-resources:\ntry (writer = new PrintWriter(socket.getOutputStream(), true);\n            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n\nThen you don't have to call close.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367396628", "createdAt": "2020-01-16T12:43:12Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgwMjg0Mw==", "bodyText": "Like the using statement from c#, didn't know Java had such a thing. Anyway, causes compiler errors on my machine, so need to look into this..", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367802843", "createdAt": "2020-01-17T07:41:42Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NjYyOA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzAwNw==", "bodyText": "Fixed compiler error with updating java, implemeted try-with-resources", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287007", "createdAt": "2020-01-19T11:35:37Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.handler.TypeConverter;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME = 100;\n+    private static final int COMMAND_TIMEOUT = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable Socket socket;\n+    private @Nullable BufferedReader reader;\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        try {\n+            callback.log(LogLevel.Info,\n+                    String.format(\"Connecting OpenThermGatewaySocketConnector to %s:%s\", this.ipaddress, this.port));\n+\n+            callback.connecting();\n+\n+            socket = new Socket();\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT);\n+            socket.setSoTimeout(COMMAND_TIMEOUT);\n+            writer = new PrintWriter(socket.getOutputStream(), true);\n+            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5NjYyOA=="}, "originalCommit": {"oid": "7628cabf0067eac62ce763d8a3457d57685f7766"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MTg0MDMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/feature/feature.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQyMjoxODoxN1rOFepYLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMTozNTo1M1rOFfOdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY3OTUzNA==", "bodyText": "This needs to be on the same line as the feature tag.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r367679534", "createdAt": "2020-01-16T22:18:17Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.openthermgateway-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-openthermgateway\" description=\"OpenThermGateway Binding\"\n+\t\tversion=\"${project.version}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20e2e88fad33a6e12d8775a655bc1b7684505ac"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4NzA0NA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r368287044", "createdAt": "2020-01-19T11:35:53Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.openthermgateway-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-openthermgateway\" description=\"OpenThermGateway Binding\"\n+\t\tversion=\"${project.version}\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzY3OTUzNA=="}, "originalCommit": {"oid": "f20e2e88fad33a6e12d8775a655bc1b7684505ac"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDc4MTMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOToxNTo0OVrOFzERgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMTozOTo0NlrOFzN27Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MTcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable private OpenThermGatewayConfiguration config;\n          \n          \n            \n                 private @Nullable OpenThermGatewayConfiguration config;", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389091715", "createdAt": "2020-03-06T19:15:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODc0OQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248749", "createdAt": "2020-03-07T11:39:46Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MTcxNQ=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDc4MjQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOToxNjoxM1rOFzESSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMTozOTozMlrOFzN22w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MTkxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable private OpenThermGatewayConnector connector;\n          \n          \n            \n                private @Nullable OpenThermGatewayConnector connector;", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389091912", "createdAt": "2020-03-06T19:16:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODczMQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248731", "createdAt": "2020-03-07T11:39:32Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MTkxMg=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDc4ODAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOToxNzo1OFrOFzEV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMTozOToyNFrOFzN20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MjgyNQ==", "bodyText": "I would suggest add a description to your OFFLINE status updates so that users know what is going on", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389092825", "createdAt": "2020-03-06T19:17:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODcyMA==", "bodyText": "Added a description", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248720", "createdAt": "2020-03-07T11:39:24Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MjgyNQ=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDgyNjI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozMDo1OVrOFzEtiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1ODoyNFrOF0Syfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODg4OQ==", "bodyText": "Don't create unmanaged threads\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    new Thread(connector).start();\n          \n          \n            \n                    scheduler.execute(connector);", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389098889", "createdAt": "2020-03-06T19:30:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+        explicitDisconnect = false;\n+\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODY1OQ==", "bodyText": "From what I understand, the scheduler is used to execute a particular task at a given time, optionally recurring at an interval. This would work perfectly for, let say, reading data from some REST API. This thread however is used to have a constant loop listening for incoming data on the TCP socket, for which (again from what I understand) the Scheduler would not be suitable.\nI have asked questions about this on the forum, but didn't get a helpful answer. I also looked at at implementations from other bindings that have a similar character (ie. the constant loop) and there a separate thread is also used. Also, previous reviews from Hilbrand and J-N-K (amongst others) have so far not commented on using a thread in this particular situation.\nAnyway, if you feel that this should really be solved using a Scheduler, I will try to find some time to furter investigate the options.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248659", "createdAt": "2020-03-07T11:38:26Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+        explicitDisconnect = false;\n+\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODg4OQ=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxODYxNQ==", "bodyText": "Alright I see your point. Then at the very least you need to make sure that the created thread is named and is daemon. Make sure the thread name includes the name of the binding and its purpose.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389918615", "createdAt": "2020-03-09T19:41:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+        explicitDisconnect = false;\n+\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODg4OQ=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3ODExMQ==", "bodyText": "Thanks again! Added the name and made the thread daemon", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r390378111", "createdAt": "2020-03-10T14:58:24Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    @Nullable private OpenThermGatewayConfiguration config;\n+\n+    @Nullable private OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE);\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+        explicitDisconnect = false;\n+\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+        new Thread(connector).start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODg4OQ=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDgzMTA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozMjozOVrOFzEwbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMTozMDo0MlrOFzN06w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTYyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }     \n          \n          \n            \n                    catch (IOException ex) {\n          \n          \n            \n                    } catch (IOException ex) {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389099628", "createdAt": "2020-03-06T19:32:39Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODIzNQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248235", "createdAt": "2020-03-07T11:30:42Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5OTYyOA=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDkwOTE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo0ODoyNlrOFzFazQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMToyNzowM1rOFzN0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMDQ3Nw==", "bodyText": "please put all fields at the top of the class, also make it private if possible", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389110477", "createdAt": "2020-03-06T19:48:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODAxOA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248018", "createdAt": "2020-03-07T11:27:03Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMDQ3Nw=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDkyODQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo1NTowM1rOFzFmcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMToyNzoxM1rOFzN0Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzQ1OQ==", "bodyText": "I would also flush the writer here to make sure the data gets sent", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389113459", "createdAt": "2020-03-06T19:55:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODAzMQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248031", "createdAt": "2020-03-07T11:27:13Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExMzQ1OQ=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDk1MTY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDowMzoyNlrOFzF09A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMTozMDowOFrOFzN0xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzE3Mg==", "bodyText": "So all this code is just for trace logging? If this code is only for logging then separate it out into its own method.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389117172", "createdAt": "2020-03-06T20:03:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0ODE5Ng==", "bodyText": "This code is used to convert the incoming message, based on it's derived datatype, to a SmartHome type (State variable). The logging is just added for tracing information", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r389248196", "createdAt": "2020-03-07T11:30:08Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        }     \n+        catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzE3Mg=="}, "originalCommit": {"oid": "0c36fa6da3feb3c234f3e175c5e4698ed64b335a"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjU2NTE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToyNjo1MVrOF2To6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1MzoyMFrOF4Djtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4OTE5NA==", "bodyText": "I'm pretty sure that a handler is disposed before it is removed. So I don't think this code is needed.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392489194", "createdAt": "2020-03-13T21:26:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyMjg3MA==", "bodyText": "I'm not worried about the handler itself, I'm calling disconnect() on the background thread when it happens.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394322870", "createdAt": "2020-03-18T12:53:20Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4OTE5NA=="}, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjU3NTgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToyOTozOVrOF2TvJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowMDoyMlrOF4D0og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MDc5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"OpenTherm Gateway connector started\");\n          \n          \n            \n                    logger.debug(\"OpenTherm Gateway connector started\");", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392490790", "createdAt": "2020-03-13T21:29:39Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+        explicitDisconnect = false;\n+\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+\n+        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        logger.info(\"OpenTherm Gateway connector started\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNzIwMg==", "bodyText": "changed info to debug", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394327202", "createdAt": "2020-03-18T13:00:22Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");\n+\n+        explicitDisconnect = false;\n+\n+        connector = new OpenThermGatewaySocketConnector(this, config.ipaddress, config.port);\n+\n+        Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+        thread.setDaemon(true);\n+        thread.start();\n+\n+        logger.info(\"OpenTherm Gateway connector started\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MDc5MA=="}, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjU3ODIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTozMDoxMVrOF2TwTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowMDowNlrOF4D0DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MTA4Ng==", "bodyText": "Please try to follow the openHab coding guidlines. Info level logging should generally not be touched by bindings, instead you should use debug or trace. Please go through the other parts of your code and change the logging levels accordingly.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.info(\"Starting OpenTherm Gateway connector\");\n          \n          \n            \n                    logger.debug(\"Starting OpenTherm Gateway connector\");", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392491086", "createdAt": "2020-03-13T21:30:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNzA1Mw==", "bodyText": "Changed all logger.info to logger.debug", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394327053", "createdAt": "2020-03-18T13:00:06Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand;\n+\n+            if (command instanceof QuantityType<?>) {\n+                double value  = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS).doubleValue();\n+                gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+            } else {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (gatewayCommand != null && checkConnection()) {\n+                connector.sendCommand(gatewayCommand);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        connecting = false;\n+        \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (!explicitDisconnect && config.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (connector != null && !connecting && !connector.isConnected()) {\n+                    connect();\n+                }\n+            }, config.connectionRetryInterval, TimeUnit.SECONDS);\n+        }    \n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem: dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+          \n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        if (connector != null && connector.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private synchronized boolean connect() {\n+        disconnect();\n+\n+        logger.info(\"Starting OpenTherm Gateway connector\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5MTA4Ng=="}, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjYxMzIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTozODo0MVrOF2UDdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNToxMlrOF4EAXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NTk4OA==", "bodyText": "why is this synchronized?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392495988", "createdAt": "2020-03-13T21:38:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDIwNA==", "bodyText": "Since i'm using callback methods and afaik dont have resources shared between threads.. it seems that synchronized isnt neccesary at all. Removed all occurences.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394330204", "createdAt": "2020-03-18T13:05:12Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5NTk4OA=="}, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjYyNjUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTo0MjowNlrOF2UK2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMjo1ODo1NFrOF4DxRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5Nzg4MA==", "bodyText": "How would callback be null here? Isn't callback a non-null field?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r392497880", "createdAt": "2020-03-13T21:42:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+            writer.flush();\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+            }\n+        }\n+\n+        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n+            receiveMessage(msg);\n+        }\n+    }\n+\n+    private void receiveMessage(Message message) {\n+        if (message != null && callback != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNjM0MQ==", "bodyText": "Leftover from before adding @NonNullByDefault. Removed.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r394326341", "createdAt": "2020-03-18T12:58:54Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+        \n+        logger.info(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+        \n+        try (Socket socket = new Socket()) {            \n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+    \n+            connected = true;\n+    \n+            callback.connected();\n+    \n+            logger.info(\"OpenThermGatewaySocketConnector connected\");\n+    \n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                    // Make writer accessible on class level\n+                    writer = wrt;\n+    \n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                    // Set the OTGW to report every message it receives and transmits\n+                    sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+        \n+                    while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                        @Nullable String message = reader.readLine();\n+        \n+                        if (message != null) {\n+                            handleMessage(message);\n+                        } else {\n+                            logger.info(\"Connection closed by OpenTherm Gateway\");\n+                            break;\n+                        }\n+                    }\n+        \n+                    logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+            }\n+            finally {\n+                connected = false;\n+    \n+                logger.info(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\" , ex);\n+        }        \n+    }\n+\n+    @Override\n+    public synchronized void stop() {\n+        logger.info(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(), new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            writer.printf(\"%s\\r\\n\", msg);\n+            writer.flush();\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(), msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n+            }\n+        }\n+\n+        if (msg.getMessageType() == MessageType.READACK || msg.getMessageType() == MessageType.WRITEDATA) {\n+            receiveMessage(msg);\n+        }\n+    }\n+\n+    private void receiveMessage(Message message) {\n+        if (message != null && callback != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ5Nzg4MA=="}, "originalCommit": {"oid": "d33464a4cd21f907708e5483463e3497bf2f3c3a"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTcxMTc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMDoyNTozMFrOGL8UOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjo1NzowOFrOGL_-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3NTczOA==", "bodyText": "Please move final fields above the non-final ones.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r415175738", "createdAt": "2020-04-26T00:25:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0e3aae47d72c05e1555409743adb681ba3cc485"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTU4Nw==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r415235587", "createdAt": "2020-04-26T06:57:08Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3NTczOA=="}, "originalCommit": {"oid": "b0e3aae47d72c05e1555409743adb681ba3cc485"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTcxMzMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMDoyNjoxN1rOGL8U4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjo1NzowMVrOGL_97A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3NTkwNg==", "bodyText": "Can you make these final?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r415175906", "createdAt": "2020-04-26T00:26:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0e3aae47d72c05e1555409743adb681ba3cc485"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTU2NA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r415235564", "createdAt": "2020-04-26T06:57:01Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private OpenThermGatewayCallback callback;\n+    private String ipaddress;\n+    private int port;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTE3NTkwNg=="}, "originalCommit": {"oid": "b0e3aae47d72c05e1555409743adb681ba3cc485"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjA2MjcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoxMjo0MlrOGQMLdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0NDoxMVrOGRTrXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyOTk0MQ==", "bodyText": "Is \"\" a valid gateway code? If not maybe you should allow this method to return null instead.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r419629941", "createdAt": "2020-05-04T18:12:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable\n+                        Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null && conn.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private boolean connect() {\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        disconnect();\n+\n+        if (conf != null) {\n+            logger.debug(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, conf.ipaddress, conf.port);\n+\n+            Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+            thread.setDaemon(true);\n+            thread.start();\n+\n+            logger.debug(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private void disconnect() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null) {\n+            if (conn.isConnected()) {\n+                logger.debug(\"Stopping OpenTherm Gateway connector\");\n+\n+                explicitDisconnect = true;\n+                conn.stop();\n+            }\n+\n+            connector = null;\n+        }\n+    }\n+\n+    private String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n+        switch (channel) {\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_TEMPORARY:\n+                return GatewayCommandCode.TemperatureTemporary;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_CONSTANT:\n+                return GatewayCommandCode.TemperatureConstant;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OUTSIDE_TEMPERATURE:\n+                return GatewayCommandCode.TemperatureOutside;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_DHW_SETPOINT:\n+                return GatewayCommandCode.SetpointWater;\n+            case OpenThermGatewayBindingConstants.CHANNEL_SEND_COMMAND:\n+                return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c5235f250106cb1957e92bf42fe74ec10b2e06"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgwMTM3Mg==", "bodyText": "Whether it's 'valid' is up to the code I guess.. it is possible to send raw commands instead of predefined commands. So either you send a predefined command based on a channel, in that case the channel is mapped to a particular command. Or you can send a raw command through the SendCommand channel, in which case you have to provide the command yourself.\nThe easiest way was to simple return \"\" so that it get's processed or concatenated as an empty string, followed by whatever the user had entered. The combination should produce a valid command, but that's up to the user. I changed it to null though, and added a check on the calling code.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r420801372", "createdAt": "2020-05-06T13:44:11Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable\n+                        Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());\n+                    updateState(channelId, state);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleRemoval() {\n+        logger.debug(\"Removing OpenTherm Gateway handler\");\n+        disconnect();\n+        super.handleRemoval();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        disconnect();\n+        super.dispose();\n+    }\n+\n+    private boolean checkConnection() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null && conn.isConnected()) {\n+            return true;\n+        }\n+\n+        return connect();\n+    }\n+\n+    private boolean connect() {\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        disconnect();\n+\n+        if (conf != null) {\n+            logger.debug(\"Starting OpenTherm Gateway connector\");\n+\n+            explicitDisconnect = false;\n+\n+            connector = new OpenThermGatewaySocketConnector(this, conf.ipaddress, conf.port);\n+\n+            Thread thread = new Thread(connector, \"OpenTherm Gateway Binding - socket listener thread\");\n+            thread.setDaemon(true);\n+            thread.start();\n+\n+            logger.debug(\"OpenTherm Gateway connector started\");\n+\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    private void disconnect() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        if (conn != null) {\n+            if (conn.isConnected()) {\n+                logger.debug(\"Stopping OpenTherm Gateway connector\");\n+\n+                explicitDisconnect = true;\n+                conn.stop();\n+            }\n+\n+            connector = null;\n+        }\n+    }\n+\n+    private String getGatewayCodeFromChannel(String channel) throws IllegalArgumentException {\n+        switch (channel) {\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_TEMPORARY:\n+                return GatewayCommandCode.TemperatureTemporary;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_SETPOINT_CONSTANT:\n+                return GatewayCommandCode.TemperatureConstant;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OUTSIDE_TEMPERATURE:\n+                return GatewayCommandCode.TemperatureOutside;\n+            case OpenThermGatewayBindingConstants.CHANNEL_OVERRIDE_DHW_SETPOINT:\n+                return GatewayCommandCode.SetpointWater;\n+            case OpenThermGatewayBindingConstants.CHANNEL_SEND_COMMAND:\n+                return \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyOTk0MQ=="}, "originalCommit": {"oid": "72c5235f250106cb1957e92bf42fe74ec10b2e06"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjA2ODMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoxNDowMVrOGQMO0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozOToxM1rOGRTcSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMDgwMw==", "bodyText": "Please put static fields at the top of the class", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r419630803", "createdAt": "2020-05-04T18:14:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws IllegalArgumentException {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet.isEmpty()) {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (String validation : validations) {\n+            if (this.message.equals(validation)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n+            return parse(message.substring(0, 2), message.substring(3));\n+        }\n+\n+        if (code.length() == 2) {\n+            String codeUpperCase = code.toUpperCase();\n+\n+            if (supportedCommands.containsKey(codeUpperCase)) {\n+                String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n+                return new GatewayCommand(codeUpperCase, message, validateSet);\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+    }\n+\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c5235f250106cb1957e92bf42fe74ec10b2e06"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5NzUxMw==", "bodyText": "Moved to the top", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r420797513", "createdAt": "2020-05-06T13:39:13Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private String code;\n+    private String validationSet;\n+    private String message;\n+\n+    public String getCode() {\n+        return code;\n+    }\n+\n+    public String getMessage() {\n+        return this.message;\n+    }\n+\n+    public String getValidationSet() {\n+        return validationSet;\n+    }\n+\n+    public String toFullString() {\n+        return this.code + \"=\" + this.message;\n+    }\n+\n+    private GatewayCommand(String code, String message, String validationSet) throws IllegalArgumentException {\n+        this.code = code;\n+        this.message = message;\n+        this.validationSet = validationSet;\n+\n+        if (!validate()) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Invalid value '%s' for code '%s'\", this.message, this.code));\n+        }\n+    }\n+\n+    private boolean validate() {\n+        if (this.validationSet.isEmpty()) {\n+            return true;\n+        }\n+\n+        String[] validations = this.validationSet.split(\",\");\n+\n+        for (String validation : validations) {\n+            if (this.message.equals(validation)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static GatewayCommand parse(String code, String message) throws IllegalArgumentException {\n+        if (code.isEmpty() && message.length() > 2 && message.charAt(2) == '=') {\n+            return parse(message.substring(0, 2), message.substring(3));\n+        }\n+\n+        if (code.length() == 2) {\n+            String codeUpperCase = code.toUpperCase();\n+\n+            if (supportedCommands.containsKey(codeUpperCase)) {\n+                String validateSet = supportedCommands.get(codeUpperCase);\n+\n+                if (validateSet == null) {\n+                    validateSet = \"\";\n+                }\n+\n+                return new GatewayCommand(codeUpperCase, message, validateSet);\n+            } else {\n+                throw new IllegalArgumentException(String.format(\"Unsupported gateway code '%s'\", code.toUpperCase()));\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(\n+                String.format(\"Unable to parse gateway command with code '%s' and message '%s'\", code, message));\n+    }\n+\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMDgwMw=="}, "originalCommit": {"oid": "72c5235f250106cb1957e92bf42fe74ec10b2e06"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjEyMTAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoyODowNFrOGQMvhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzozOTo1OVrOGRTexw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzOTE3NA==", "bodyText": "This code will never get called because you compare the time against the smallest value first.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r419639174", "createdAt": "2020-05-04T18:28:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c5235f250106cb1957e92bf42fe74ec10b2e06"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5ODE1MQ==", "bodyText": "Changed the check", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r420798151", "createdAt": "2020-05-06T13:39:59Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (System.currentTimeMillis() > timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzOTE3NA=="}, "originalCommit": {"oid": "72c5235f250106cb1957e92bf42fe74ec10b2e06"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjEzOTQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODozMjo0NVrOGQM6yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo0MDoxN1rOGRTfqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0MjA1OQ==", "bodyText": "This field will be used by multiple threads, so make it thread-safe.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();\n          \n          \n            \n                private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r419642059", "createdAt": "2020-05-04T18:32:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72c5235f250106cb1957e92bf42fe74ec10b2e06"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc5ODM3OA==", "bodyText": "Changed to ConcurrentHashMap", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r420798378", "createdAt": "2020-05-06T13:40:17Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0MjA1OQ=="}, "originalCommit": {"oid": "72c5235f250106cb1957e92bf42fe74ec10b2e06"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTg3ODE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoxNzozOFrOGRp5pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMjowMlrOGRzUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTQ3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                msg.getMessageType().toString());\n          \n          \n            \n                                msg.getMessageType());", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421165477", "createdAt": "2020-05-07T00:17:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (currentTime > timeoutTime) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33f865e7aad7625f337fbb8f9f78f057f4d8180"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTg0Mw==", "bodyText": "Modified", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421319843", "createdAt": "2020-05-07T08:12:02Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (currentTime > timeoutTime) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTQ3Nw=="}, "originalCommit": {"oid": "a33f865e7aad7625f337fbb8f9f78f057f4d8180"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTg3OTE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoxODowNVrOGRp6Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoxMjoxMlrOGRzU8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTYyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    dataItem.getDataType().toString(), state == null ? \"\" : state.toString());\n          \n          \n            \n                                    dataItem.getDataType(), state == null ? \"\" : state);", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421165626", "createdAt": "2020-05-07T00:18:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (currentTime > timeoutTime) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33f865e7aad7625f337fbb8f9f78f057f4d8180"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMxOTkyMQ==", "bodyText": "Modified", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421319921", "createdAt": "2020-05-07T08:12:12Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());\n+                sendCommand(timeAndCommand.getValue());\n+            } else if (currentTime > timeoutTime) {\n+                pendingCommands.remove(timeAndCommand.getValue().getCode());\n+            }\n+        }\n+\n+        Message msg = Message.parse(message);\n+\n+        if (msg == null) {\n+            logger.trace(\"Received message: {}, (unknown)\", message);\n+            return;\n+        } else {\n+            logger.trace(\"Received message: {}, {} {} {}\", message, msg.getID(), msg.getCode(),\n+                    msg.getMessageType().toString());\n+        }\n+\n+        if (DataItemGroup.dataItemGroups.containsKey(msg.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(msg.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(msg.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(msg.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(msg.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        state = new DecimalType(msg.getFloat());\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                logger.trace(\"  Data: {} {} {} {}\", dataItem.getID(), dataItem.getSubject(),\n+                        dataItem.getDataType().toString(), state == null ? \"\" : state.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NTYyNg=="}, "originalCommit": {"oid": "a33f865e7aad7625f337fbb8f9f78f057f4d8180"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjMwMzQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDoxMDozN1rOGRttLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoxNDo1NlrOGSIU6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyNzgyMg==", "bodyText": "The writer is synchronized under the hood so you can't really split this up into two method calls. That said, you don't need to use printf for something this simple.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            wrtr.printf(\"%s\\r\\n\", msg);\n          \n          \n            \n                            wrtr.print(msg+\"\\r\\n\");", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421227822", "createdAt": "2020-05-07T04:10:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a33f865e7aad7625f337fbb8f9f78f057f4d8180"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyMDU2Ng==", "bodyText": "Modified.. though I am not sure I understand your comment about splitting things up into two method calls.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421320566", "createdAt": "2020-05-07T08:13:19Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyNzgyMg=="}, "originalCommit": {"oid": "a33f865e7aad7625f337fbb8f9f78f057f4d8180"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2Mzk3Ng==", "bodyText": "Sorry about that, I was half mutter to myself while writing the suggested change.\nMy original suggestion that I changed before posting would be something like this:\nwrtr.print(msg);\nwrtr.print(\"\\r\\n\");\n\nBut I quickly realized that such a suggestion wouldn't be best since you could run into issues if that code was called by multiple threads at once. The PrintWriter will synchronize all method calls but that won't help you if you spread out your message across multiple method calls.\nThat is why I instead suggested doing the string concatenation before calling print.\nIt would have been better if I hadn't mentioned multiple method calls since it wasn't relevant to the suggestion so sorry for confusing you.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r421663976", "createdAt": "2020-05-07T17:14:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.printf(\"%s\\r\\n\", msg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyNzgyMg=="}, "originalCommit": {"oid": "a33f865e7aad7625f337fbb8f9f78f057f4d8180"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIwOTM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyMDozNlrOGS40ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoyMzoxOFrOGWf24A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODUwNg==", "bodyText": "Leave out the 2 of openHAB please check for other occurrences on the README as well.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422458506", "createdAt": "2020-05-09T06:20:36Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/README.md", "diffHunk": "@@ -0,0 +1,144 @@\n+# OpenTherm Gateway binding\n+\n+This binding is used to integrate the OpenTherm Gateway into openHAB2.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MzEzMg==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426243132", "createdAt": "2020-05-17T10:16:10Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/README.md", "diffHunk": "@@ -0,0 +1,144 @@\n+# OpenTherm Gateway binding\n+\n+This binding is used to integrate the OpenTherm Gateway into openHAB2.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODUwNg=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MzgwOA==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426243808", "createdAt": "2020-05-17T10:23:18Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/README.md", "diffHunk": "@@ -0,0 +1,144 @@\n+# OpenTherm Gateway binding\n+\n+This binding is used to integrate the OpenTherm Gateway into openHAB2.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODUwNg=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIwOTkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyMTozMFrOGS400A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyMTozMFrOGS400A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODU3Ng==", "bodyText": "Mine was too far from my openHAB instance I have it directly connected via MQTT now :-)\nNever mind, I didn't realize it was serial over TCP :-)", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422458576", "createdAt": "2020-05-09T06:21:30Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/README.md", "diffHunk": "@@ -0,0 +1,144 @@\n+# OpenTherm Gateway binding\n+\n+This binding is used to integrate the OpenTherm Gateway into openHAB2.\n+The OpenTherm Gateway is a module designed by Schelte Bron that is connected in between a boiler and a thermostat and communicates using the OpenTherm protocol.\n+\n+More information on the OpenTherm Gateway device can be found at http://otgw.tclcode.com/\n+\n+Comments on this binding can be submitted to the openHAB community topic at https://community.openhab.org/t/39160\n+\n+## Supported Things\n+\n+The OpenTherm Gateway binding currently only supports one thing, and that's the gateway itself.\n+\n+## Discovery\n+\n+The binding does not support auto discovery.\n+\n+## Binding Configuration\n+\n+The binding itself does not require any configuration.\n+\n+## Thing Configuration\n+\n+The binding is designed to support various ways of connecting to the OpenTherm Gateway device, but currently only supports a TCP socket connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxMTU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyMzo1NVrOGS41nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyMzo1NVrOGS41nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODc4MQ==", "bodyText": "I personally would write this as kind of a pre-condition check so that the rest of the method does not need that much indentation:\nif (command instanceof RefreshType) {\n   return;\n}\n\n... rest of the code", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422458781", "createdAt": "2020-05-09T06:23:55Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxMzIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyNjo0NlrOGS42eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMTozNDo0MlrOGWgRjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTAwMg==", "bodyText": "Does connecting mean that is not connected? Or should it just be UKNOWN? The status which we talk about is the status of actual thing not of the connection.\nSo if you connected you know its ONLINE, if you fail to connect you can assume its OFFLINE or that there is some configuration error. But if you haven't tried you can nog know whether the thing is OFFLINE.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459002", "createdAt": "2020-05-09T06:26:46Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NDg2Mw==", "bodyText": "For your reference see also: https://www.openhab.org/docs/concepts/things.html#thing-status", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426244863", "createdAt": "2020-05-17T10:35:24Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTAwMg=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MDYzNw==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426250637", "createdAt": "2020-05-17T11:34:42Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTAwMg=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxMzU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyNzo0MVrOGS42sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoyNzo0MVrOGS42sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTA1Nw==", "bodyText": "See below", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459057", "createdAt": "2020-05-09T06:27:41Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxNjAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozMToyNlrOGS433w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMTozODoyM1rOGWgS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTM1OQ==", "bodyText": "Is the normal String enough? If so please just pass the state. Otherways you will also call the toFullString when debug-levels do not apply.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459359", "createdAt": "2020-05-09T06:31:26Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable\n+                        Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MDk3NQ==", "bodyText": "Removed toFullString", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426250975", "createdAt": "2020-05-17T11:38:23Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {\n+            DataItem[] dataItems = DataItemGroup.dataItemGroups.get(message.getID());\n+\n+            for (DataItem dataItem : dataItems) {\n+                String channelId = dataItem.getSubject();\n+\n+                if (!OpenThermGatewayBindingConstants.SUPPORTED_CHANNEL_IDS.contains(channelId)) {\n+                    continue;\n+                }\n+\n+                State state = null;\n+\n+                switch (dataItem.getDataType()) {\n+                    case FLAGS:\n+                        state = OnOffType.from(message.getBit(dataItem.getByteType(), dataItem.getBitPos()));\n+                        break;\n+                    case UINT8:\n+                    case UINT16:\n+                        state = new DecimalType(message.getUInt(dataItem.getByteType()));\n+                        break;\n+                    case INT8:\n+                    case INT16:\n+                        state = new DecimalType(message.getInt(dataItem.getByteType()));\n+                        break;\n+                    case FLOAT:\n+                        float value = message.getFloat();\n+                        @Nullable\n+                        Unit<?> unit = dataItem.getUnit();\n+                        state = (unit == null) ? new DecimalType(value) : new QuantityType<>(value, unit);\n+                        break;\n+                    case DOWTOD:\n+                        break;\n+                }\n+\n+                if (state != null) {\n+                    logger.debug(\"Received update for channel '{}': {}\", channelId, state.toFullString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTM1OQ=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxNzI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozMzo0MlrOGS44fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDo1NzoxM1rOGWgDZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUxNw==", "bodyText": "It seems that a lot of these fields can be marked final I would always prefer to make class level fields explicitly final when possible.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459517", "createdAt": "2020-05-09T06:33:42Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItem {\n+    private int id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MTA5OA==", "bodyText": "Prefer, or needed ?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426241098", "createdAt": "2020-05-17T09:55:24Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItem {\n+    private int id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUxNw=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MzMyNw==", "bodyText": "It will improve the code and ease future maintenance, it will thus benefit all of us. You will not find any maintainer who will object making fields final.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426243327", "createdAt": "2020-05-17T10:18:06Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItem {\n+    private int id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUxNw=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NzAxMg==", "bodyText": "That's not really the question though.. it's about what is needed to get this code up to a level of standard set to approve the PR. I don't mind spending some of my valuable time to share this binding with others.. but with every reviewer, new considerations are brought in which are fine by itself but make this PR process a never ending story.\nAgain, if changes are required, based on set standards, I will be happy to put more time in.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426247012", "createdAt": "2020-05-17T10:57:13Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItem {\n+    private int id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTUxNw=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxNzU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozNDoyNVrOGS44qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDozOTo0M1rOGWf8lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTU2MA==", "bodyText": "Please make sure that you document for all classes their purpose, see also https://www.openhab.org/docs/developer/guidelines.html#c-documentation", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459560", "createdAt": "2020-05-09T06:34:25Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0NTI2OA==", "bodyText": "Added documentation where needed", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426245268", "createdAt": "2020-05-17T10:39:43Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItem.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTU2MA=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxODUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozNTo0NlrOGS45HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoxMjozM1rOGWfy5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTY3Nw==", "bodyText": "Please use the interface instead of the actual implementation for declarations and return values.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n          \n          \n            \n                public static final Map<Integer, DataItem[]> dataItemGroups = createDataItemGroups();", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459677", "createdAt": "2020-05-09T06:35:46Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mjc4OQ==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242789", "createdAt": "2020-05-17T10:12:33Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTY3Nw=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxODg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozNjoyMVrOGS45Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoxMjo0MFrOGWfy6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTcyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n          \n          \n            \n                private static Map<Integer, DataItem[]> createDataItemGroups() {", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459722", "createdAt": "2020-05-09T06:36:21Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n+\n+    private static HashMap<Integer, DataItem[]> createDataItemGroups() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mjc5NA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242794", "createdAt": "2020-05-17T10:12:40Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n+\n+    private static HashMap<Integer, DataItem[]> createDataItemGroups() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTcyMg=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxODk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozNjozNVrOGS45Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoxMjo0NlrOGWfy_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTczOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();\n          \n          \n            \n                    Map<Integer, DataItem[]> g = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459738", "createdAt": "2020-05-09T06:36:35Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n+\n+    private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n+        HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTc3Nw==", "bodyText": "Please use the diamond operator, ie replace the second occurrence of the same generic by <> please also check for other occurrences.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459777", "createdAt": "2020-05-09T06:37:15Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n+\n+    private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n+        HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTczOA=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MjgxMw==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242813", "createdAt": "2020-05-17T10:12:46Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/DataItemGroup.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DataItemGroup {\n+\n+    public static final HashMap<Integer, DataItem[]> dataItemGroups = createDataItemGroups();\n+\n+    private static HashMap<Integer, DataItem[]> createDataItemGroups() {\n+        HashMap<Integer, DataItem[]> g = new HashMap<Integer, DataItem[]>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTczOA=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxOTU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozNzo0MlrOGS45pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoxMjo1NlrOGWfzEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTgxNQ==", "bodyText": "Please check for other occurrences", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459815", "createdAt": "2020-05-09T06:37:42Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MjgzMg==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242832", "createdAt": "2020-05-17T10:12:56Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTgxNQ=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIyMDAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozODoyOFrOGS454w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozODoyOFrOGS454w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTg3NQ==", "bodyText": "Consider marking these fields final", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459875", "createdAt": "2020-05-09T06:38:28Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/GatewayCommand.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.util.HashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GatewayCommand {\n+    private static final HashMap<String, @Nullable String> supportedCommands = getSupportedCommands();\n+\n+    private String code;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIyMDIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozODo1M1rOGS45_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozODo1M1rOGS45_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTkwMg==", "bodyText": "Please check others", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422459902", "createdAt": "2020-05-09T06:38:53Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIyMTE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjo0MDo0NVrOGS46dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMDoyMjo1NVrOGWf2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDAyMA==", "bodyText": "If this part of the code is used often it might make sense to compile a pattern once (and store as a static field) and re-use this every time, see also https://stackoverflow.com/a/2469275/3656774", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422460020", "createdAt": "2020-05-09T06:40:45Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HIGHBYTE:\n+                    return this.data.substring(0, 2);\n+                case LOWBYTE:\n+                    return this.data.substring(2, 4);\n+                case BOTH:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable String data = getData(ByteType.BOTH);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        return other != null && this.getID() == other.getID() && (\"R\".equals(this.getCode()) || \"A\".equals(this.getCode()));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s - %s - %s\", this.code, this.id, this.data);\n+    }\n+\n+    public Message(String code, MessageType messageType, int id, String data) {\n+        this.code = code;\n+        this.messageType = messageType;\n+        this.id = id;\n+        this.data = data;\n+    }\n+\n+    public static @Nullable Message parse(String message) {\n+        if (message.matches(\"[TBRA]{1}[A-F0-9]{8}\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mzc3NA==", "bodyText": "Adjusted", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426243774", "createdAt": "2020-05-17T10:22:55Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/Message.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Message {\n+    /*\n+     * The code field is not part of OpenTherm specification, but added by OpenTherm Gateway.\n+     * It can be any of the following:\n+     *\n+     * T: Message received from the thermostat\n+     * B: Message received from the boiler\n+     * R: Request sent to the boiler\n+     * A: Response returned to the thermostat\n+     * E: Parity or stop bit error\n+     */\n+\n+    private String code;\n+    private MessageType messageType;\n+    private int id;\n+    private String data;\n+\n+    public String getCode() {\n+        return this.code;\n+    }\n+\n+    public MessageType getMessageType() {\n+        return messageType;\n+    }\n+\n+    public int getID() {\n+        return id;\n+    }\n+\n+    public @Nullable String getData(ByteType byteType) {\n+        if (this.data.length() == 4) {\n+            switch (byteType) {\n+                case HIGHBYTE:\n+                    return this.data.substring(0, 2);\n+                case LOWBYTE:\n+                    return this.data.substring(2, 4);\n+                case BOTH:\n+                    return this.data;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public boolean getBit(ByteType byteType, int pos) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            // First parse the hex value to an integer\n+            int parsed = Integer.parseInt(data, 16);\n+\n+            // Then right shift it pos positions so that the required bit is at the front\n+            // and then apply a bitmask of 00000001 (1)\n+            return ((parsed >> pos) & 1) == 1;\n+        }\n+\n+        return false;\n+    }\n+\n+    public int getUInt(ByteType byteType) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            return Integer.parseInt(data, 16);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public int getInt(ByteType byteType) {\n+        @Nullable String data = getData(byteType);\n+\n+        if (data != null) {\n+            return parseSignedInteger(data);\n+        }\n+\n+        return 0;\n+    }\n+\n+    public float getFloat() {\n+        // f8.8, two's complement\n+        @Nullable String data = getData(ByteType.BOTH);\n+\n+        if (data != null) {\n+            long value = Long.parseLong(data, 16);\n+\n+            // left padded with zeros\n+            String binary = String.format(\"%16s\", Long.toBinaryString(value)).replace(' ', '0');\n+\n+            if (binary.charAt(0) == '1') {\n+                // negative value\n+\n+                String inverted = invertBinary(binary);\n+\n+                value = Long.parseLong(inverted, 2);\n+                value = value + 1;\n+                value = value * -1;\n+            }\n+\n+            // divide by 2^8 = 256\n+            return (float) value / 256;\n+        }\n+\n+        return 0;\n+    }\n+\n+    public boolean overrides(@Nullable Message other) {\n+        // If the message is a Request sent to the boiler or an Answer returned to the\n+        // thermostat, and it's ID is equal to the previous message, then this is an\n+        // override sent by the OpenTherm Gateway\n+        return other != null && this.getID() == other.getID() && (\"R\".equals(this.getCode()) || \"A\".equals(this.getCode()));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s - %s - %s\", this.code, this.id, this.data);\n+    }\n+\n+    public Message(String code, MessageType messageType, int id, String data) {\n+        this.code = code;\n+        this.messageType = messageType;\n+        this.id = id;\n+        this.data = data;\n+    }\n+\n+    public static @Nullable Message parse(String message) {\n+        if (message.matches(\"[TBRA]{1}[A-F0-9]{8}\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDAyMA=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIyMjc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjo0Mzo0OVrOGS47SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjo0Mzo0OVrOGS47SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDIzMw==", "bodyText": "You could consider the following to make the second boundary more explicit.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n          \n          \n            \n                private static final int COMMAND_TIMEOUT_MILLISECONDS = 5_000;\n          \n      \n    \n    \n  \n\nOr even more explicit, however for such a small value both are optional.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n          \n          \n            \n                private static final int COMMAND_TIMEOUT_MILLISECONDS = TimeUnit.SECONDS.toMillis(5);", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422460233", "createdAt": "2020-05-09T06:43:49Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIyMzk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjo0NjowMFrOGS474g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMTozODoxMVrOGWgS0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDM4Ng==", "bodyText": "You don't have to call toString it will be called automatically, but only when the logging-level actually applies.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r422460386", "createdAt": "2020-05-09T06:46:00Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.print(msg + \"\\r\\n\");\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0MDkwNQ==", "bodyText": "I am not calling toString(), but toFullString() which takes care of formatting.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426240905", "createdAt": "2020-05-17T09:53:43Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.print(msg + \"\\r\\n\");\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDM4Ng=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Mjg4NQ==", "bodyText": "Yes, but now that method will also be called while debugging is not enabled, the question is whether that is desirable. Leaving it out might make the formatting a little bit more ugly but it will not execute formatting of a String intended for debugging while the system is not being executed with debugging enabled.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426242885", "createdAt": "2020-05-17T10:13:32Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.print(msg + \"\\r\\n\");\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDM4Ng=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MDk2Mw==", "bodyText": "removed toFullString()", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426250963", "createdAt": "2020-05-17T11:38:11Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {\n+            logger.warn(\"Unable to connect to the OpenTherm Gateway.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+        stopping = true;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return connected;\n+    }\n+\n+    @Override\n+    public void sendCommand(GatewayCommand command) {\n+        @Nullable\n+        PrintWriter wrtr = writer;\n+\n+        String msg = command.toFullString();\n+\n+        pendingCommands.put(command.getCode(),\n+                new AbstractMap.SimpleImmutableEntry<>(System.currentTimeMillis(), command));\n+\n+        if (connected) {\n+            logger.debug(\"Sending message: {}\", msg);\n+            if (wrtr != null) {\n+                wrtr.print(msg + \"\\r\\n\");\n+                wrtr.flush();\n+            }\n+        } else {\n+            logger.debug(\"Unable to send message: {}. OpenThermGatewaySocketConnector is not connected.\", msg);\n+        }\n+    }\n+\n+    private void handleMessage(String message) {\n+        if (message.length() > 2 && message.charAt(2) == ':') {\n+            String code = message.substring(0, 2);\n+            String value = message.substring(3);\n+\n+            logger.debug(\"Received command confirmation: {}: {}\", code, value);\n+            pendingCommands.remove(code);\n+            return;\n+        }\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        for (Entry<Long, GatewayCommand> timeAndCommand : pendingCommands.values()) {\n+            long responseTime = timeAndCommand.getKey() + COMMAND_RESPONSE_TIME_MILLISECONDS;\n+            long timeoutTime = timeAndCommand.getKey() + COMMAND_TIMEOUT_MILLISECONDS;\n+\n+            if (currentTime > responseTime && currentTime <= timeoutTime) {\n+                logger.debug(\"Resending command: {}\", timeAndCommand.getValue().toFullString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2MDM4Ng=="}, "originalCommit": {"oid": "fc1160aa6ed7da4ae9905179b3570f0e8ecc8103"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDU4MzMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMTo1MDoxN1rOGWgXTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNTozMTozNlrOGWhtWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjEwOA==", "bodyText": "This status might not be correct, because it's about the binding status being disconnected instead of the thing being OFFLINE.\nAlso, it is indirectly called from the dispose which will also be called when updating configuration, so better leave this one out and replace it by some way to update status when IOException are caught.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426252108", "createdAt": "2020-05-17T11:50:17Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3NDEzOA==", "bodyText": "Removed Thing status update, added it to the IOException catch.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426274138", "createdAt": "2020-05-17T15:31:36Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjEwOA=="}, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDU4NTQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMTo1MzozM1rOGWgYcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNTozMDoyN1rOGWhs7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjQwMw==", "bodyText": "This is location where can you be sure that the device is ONLINE, if you are unsure that the status is currently sufficiently synchronized this could be the location to mark the thing ONLINE.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426252403", "createdAt": "2020-05-17T11:53:33Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3NDAzMA==", "bodyText": "Not every incoming message causes the receiveMessage callback function to be called. But ok, if it does get called, the Thing is clearly online. Added a Thing status update.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426274030", "createdAt": "2020-05-17T15:30:27Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/handler/OpenThermGatewayHandler.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.handler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.measure.Unit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.openthermgateway.OpenThermGatewayBindingConstants;\n+import org.openhab.binding.openthermgateway.internal.DataItem;\n+import org.openhab.binding.openthermgateway.internal.DataItemGroup;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommand;\n+import org.openhab.binding.openthermgateway.internal.GatewayCommandCode;\n+import org.openhab.binding.openthermgateway.internal.Message;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayCallback;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConfiguration;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewayConnector;\n+import org.openhab.binding.openthermgateway.internal.OpenThermGatewaySocketConnector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewayHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewayHandler extends BaseThingHandler implements OpenThermGatewayCallback {\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewayHandler.class);\n+\n+    private @Nullable OpenThermGatewayConfiguration config;\n+\n+    private @Nullable OpenThermGatewayConnector connector;\n+\n+    private boolean connecting = false;\n+\n+    private boolean explicitDisconnect = false;\n+\n+    public OpenThermGatewayHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing OpenTherm Gateway handler for uid '{}'\", getThing().getUID());\n+\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Initializing\");\n+\n+        config = getConfigAs(OpenThermGatewayConfiguration.class);\n+\n+        connect();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Received channel: {}, command: {}\", channelUID, command);\n+\n+        if (!(command instanceof RefreshType)) {\n+            String channel = channelUID.getId();\n+            String code = getGatewayCodeFromChannel(channel);\n+\n+            GatewayCommand gatewayCommand = null;\n+\n+            if (command instanceof QuantityType<?>) {\n+                QuantityType<?> quantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+\n+                if (quantityType != null) {\n+                    double value = quantityType.doubleValue();\n+                    gatewayCommand = GatewayCommand.parse(code, Double.toString(value));\n+                }\n+            }\n+\n+            if (gatewayCommand == null) {\n+                gatewayCommand = GatewayCommand.parse(code, command.toFullString());\n+            }\n+\n+            if (checkConnection()) {\n+                @Nullable\n+                OpenThermGatewayConnector conn = connector;\n+\n+                if (conn != null) {\n+                    conn.sendCommand(gatewayCommand);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void connecting() {\n+        connecting = true;\n+        updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Connecting\");\n+    }\n+\n+    @Override\n+    public void connected() {\n+        connecting = false;\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void disconnected() {\n+        @Nullable\n+        OpenThermGatewayConnector conn = connector;\n+\n+        @Nullable\n+        OpenThermGatewayConfiguration conf = config;\n+\n+        connecting = false;\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Disconnected\");\n+\n+        // retry connection if disconnect is not explicitly requested\n+        if (conf != null && !explicitDisconnect && conf.connectionRetryInterval > 0) {\n+            scheduler.schedule(() -> {\n+                if (conn != null && !connecting && !conn.isConnected()) {\n+                    connect();\n+                }\n+            }, conf.connectionRetryInterval, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void receiveMessage(Message message) {\n+        if (DataItemGroup.dataItemGroups.containsKey(message.getID())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1MjQwMw=="}, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDYxOTQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMjo0MTo0NFrOGWgqYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNzowMTozMVrOGWiOtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ==", "bodyText": "I would expect an update of status from this IOException because now disconnect is called but the proper details of the problem are lacking. See also: https://www.openhab.org/docs/developer/guidelines.html#f-logging\n\nIn general bindings should NOT log to error/warn if e.g. connections are dropped - this is considered to be an external problem and from a system perspective to be a normal and expected situation. The correct way to inform users about such events is to update the Thing status accordingl", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426256995", "createdAt": "2020-05-17T12:41:44Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3NDA5MQ==", "bodyText": "Added calling callback on IOException to update Thing status, and changed logging to debug.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426274091", "createdAt": "2020-05-17T15:31:03Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ=="}, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI3NjQ5OA==", "bodyText": "You removed the status update from the disconnected callback so the thing will not go OFFLINE when this exception is caught.\nAlso, there is no context/message provided to the user, it would make sense to have a dedicated handler which passes the exception so that the message can be include when setting the thing status OFFLINE with a COMMUNICATION_ERROR. These statuses are described in the documentation.\nI can also imagine that the host is completely wrong (empty?) or the configuration is wrong in other ways, bindings should set the status than to CONFIGURATION_ERROR. I suppose in the old code the binding would just set it to OFFLINE without context or warning for the user which is not that user-friendly. Given it seems to be the first time that we mention this it can be a follow-up PR whenever have you time.\nBTW: follow-up PR's of the original contributor do not require a second reviewer.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426276498", "createdAt": "2020-05-17T15:57:18Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ=="}, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MjE0NQ==", "bodyText": "Reverted last commit. I should probably redesign the Thing status code, though it's unclear as to what this status should represent. If it's about being able to communicate with the OpenTherm gateway device, then having a connection or not should be enough to indicate an online or offline status. Configuration errors are not that relevant, because the host is a required field and whether the host is valid or not is not something the binding would hardly be able to verify. It is either able to connect or not. The hostname itself can be anything, a simple hostname, an ip address, an fqdn.", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426282145", "createdAt": "2020-05-17T16:56:01Z", "author": {"login": "ArjenKorevaar"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ=="}, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MjY3Nw==", "bodyText": "@ArjenKorevaar shall we keep the status handling for a separate PR?", "url": "https://github.com/openhab/openhab-addons/pull/6785#discussion_r426282677", "createdAt": "2020-05-17T17:01:31Z", "author": {"login": "martinvw"}, "path": "bundles/org.openhab.binding.openthermgateway/src/main/java/org/openhab/binding/openthermgateway/internal/OpenThermGatewaySocketConnector.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.openthermgateway.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.AbstractMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OpenThermGatewaySocketConnector} is responsible for handling the socket connection\n+ *\n+ * @author Arjen Korevaar - Initial contribution\n+ * @author Arjan Mels - Improved robustness by re-sending commands, handling all message types (not only Boiler)\n+ */\n+@NonNullByDefault\n+public class OpenThermGatewaySocketConnector implements OpenThermGatewayConnector {\n+    private static final int COMMAND_RESPONSE_TIME_MILLISECONDS = 100;\n+    private static final int COMMAND_TIMEOUT_MILLISECONDS = 5000;\n+\n+    private final Logger logger = LoggerFactory.getLogger(OpenThermGatewaySocketConnector.class);\n+\n+    private final OpenThermGatewayCallback callback;\n+    private final String ipaddress;\n+    private final int port;\n+\n+    private @Nullable PrintWriter writer;\n+\n+    private volatile boolean stopping;\n+    private boolean connected;\n+\n+    private Map<String, Entry<Long, GatewayCommand>> pendingCommands = new ConcurrentHashMap<>();\n+\n+    public OpenThermGatewaySocketConnector(OpenThermGatewayCallback callback, String ipaddress, int port) {\n+        this.callback = callback;\n+        this.ipaddress = ipaddress;\n+        this.port = port;\n+    }\n+\n+    @Override\n+    public void run() {\n+        stopping = false;\n+        connected = false;\n+\n+        logger.debug(\"Connecting OpenThermGatewaySocketConnector to {}:{}\", this.ipaddress, this.port);\n+\n+        callback.connecting();\n+\n+        try (Socket socket = new Socket()) {\n+            socket.connect(new InetSocketAddress(this.ipaddress, this.port), COMMAND_TIMEOUT_MILLISECONDS);\n+            socket.setSoTimeout(COMMAND_TIMEOUT_MILLISECONDS);\n+\n+            connected = true;\n+\n+            callback.connected();\n+\n+            logger.debug(\"OpenThermGatewaySocketConnector connected\");\n+\n+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    PrintWriter wrt = new PrintWriter(socket.getOutputStream(), true)) {\n+                // Make writer accessible on class level\n+                writer = wrt;\n+\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintReport, \"A\"));\n+                // Set the OTGW to report every message it receives and transmits\n+                sendCommand(GatewayCommand.parse(GatewayCommandCode.PrintSummary, \"0\"));\n+\n+                while (!stopping && !Thread.currentThread().isInterrupted()) {\n+                    @Nullable\n+                    String message = reader.readLine();\n+\n+                    if (message != null) {\n+                        handleMessage(message);\n+                    } else {\n+                        logger.debug(\"Connection closed by OpenTherm Gateway\");\n+                        break;\n+                    }\n+                }\n+\n+                logger.debug(\"Stopping OpenThermGatewaySocketConnector\");\n+            } finally {\n+                connected = false;\n+\n+                logger.debug(\"OpenThermGatewaySocketConnector disconnected\");\n+                callback.disconnected();\n+            }\n+        } catch (IOException ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI1Njk5NQ=="}, "originalCommit": {"oid": "b58f2ac460fdeade42b65b3858f15510c3bce7b1"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1041, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}