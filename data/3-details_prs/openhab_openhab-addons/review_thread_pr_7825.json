{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjE5OTA4", "number": 7825, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTo1MToyOVrOEBTq2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NzoyOVrOEDGJpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODA2Mjk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTo1MToyOVrOGdE53Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowODowNlrOGdIOBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0MjIzNw==", "bodyText": "If the class is not annotated @NonNullByDefault why do you need @Nullable here?", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433142237", "createdAt": "2020-06-01T09:51:29Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NjU1MA==", "bodyText": "yeah, i tried to make it @NonNullByDefault but i had to make too many exceptions and suppress warnings so i decided to remove NoNullByDefault but forgot nullable", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433196550", "createdAt": "2020-06-01T12:08:06Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0MjIzNw=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEwMDk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowNTo1OFrOGdFRpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzo1MjowMVrOGdULZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODMyNA==", "bodyText": "I'm not 100% sure that is the correct behaviour. Is 100% always send along ON? or can it be 50% and ON? The reason I ask is that I have a lot of KNX dimmers (in fact they are DALI, but connected over KNX). If I select the light in the HomeKit app (state was OFF) and set it to 50% via the slider it always turns on at 100%. IMO this is because ON is interpreted as 100% and overrides the brightness send before. So I think that ON should not be send but the actual brightness if both commands are available.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433148324", "createdAt": "2020-06-01T10:05:58Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMTA4NA==", "bodyText": "did some tests:\n\n\nDimmer Off and i click on \"device icon\": home app sends \"On\" and Brightness = 100% independent on brightness which was before.\n\n\nDimmer On and i change brightness, e.g. from 50% to 60%, home app sends \"On\" and selected brightness (e.g. 60%). this was not covered by PR. will add commit\n\n\nDimmer is off and i open \"Control\" and select brightness, e.g. 60%,  home apps sends \"On\" and selected brightness.\n\n\nto me - we need only to suppress brightness=100% in the first case.\ndo we need to suppress \"On\" in the 2)?", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433201084", "createdAt": "2020-06-01T12:19:21Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODMyNA=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwNDgwMQ==", "bodyText": "Well, at least in my setup \u201eON\u201c always results in 100% on KNX dimmers. So I would prefer to suppress the ON instead of the brightness. However, for ZigBee devices this would lead to 100% even if the light was at 40% before and could resume that state.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433204801", "createdAt": "2020-06-01T12:28:16Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODMyNA=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyMzc4Ng==", "bodyText": "ok. looks like we need to make configurable.\ndo i understand correctly we have 2 cases:\n\nsuppress \"ON\". so, never sends \"ON\" update only Brightness.\nsuppress 100% brightness (which typically comes with \"ON\" event)\n\nanything missing ? do we need to suppress \"OFF\"?", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433223786", "createdAt": "2020-06-01T13:10:02Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODMyNA=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4NzQ0OQ==", "bodyText": "The problem is that this would need to be configured on item level.\nWhat is send along with OFF? 0%? For hue/deconz lights (not sure about zigbee) sending 0% would result in a light going to on after the next ON command but with brightness 0, so actually the light is still off.\nIn what situation would you want to suppress 100%? All my devices would work perfectly if we only send brightness. Obviously HomeKit wants to turn the light full on if it sends ON and 100%. Or is this a limitation of HAP-Java which generates two commands where HomeKit sends only ON?", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433287449", "createdAt": "2020-06-01T15:01:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODMyNA=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzOTc5OQ==", "bodyText": "we had this use case in some tickets/discussion - Dimmer could have  a soft launch on On, i.e. increasing brightness slowly to 100%.\nHomeKit home app is sending always \"On\" and \"brightness\", both with one request, e.g. setting brightness with to 72", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433339799", "createdAt": "2020-06-01T16:14:04Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODMyNA=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1MTI0NQ==", "bodyText": "Of course I don't know all devices, but at least all of my device also use some sort of transition time when the brightness changes (i.e. 100% and ON are equal). Also the change from say 10% to 90% is not instantaneous but is slower or faster depending on the configured time for that.\nAt least for KNX, DMX, deconz and hue lights this works. I agree that the \"double command\" is wrong in most cases, but I don't know of any device that would fail or behave wrong in case only the brightness is send.\nMaybe the following would be a good scheme:\nON / 100 % -> ON\nON / 1-99% -> 1-99%\nOFF / 0% -> OFF\nWould that cover everything?", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433351245", "createdAt": "2020-06-01T16:34:28Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODMyNA=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5MjQ4NQ==", "bodyText": "yes, probably your case will cover most of the setups.\nbut let's make configurable on the item level.\ni add following 4 modes (better names are welcome)\n\nnone: nothing is filtered. this is default\nfilterOn: all \"on\" events are filtered. only brightness is sent.\nfilterBrightness100: brightness 100 is filtered when \"ON\" is sent. everything else with no changes. i.e. \"on\" along with brightness. this would support \"soft launch\"\nfilterOnExceptBrightness100: your proposal. brightness <100% -> \"ON\" event filtered, brightness = 100% -> only ON is sent\n\ncode committed. please take a look.\nonce we are ok with the logic and naming, i will update README", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433392485", "createdAt": "2020-06-01T17:52:01Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0ODMyNA=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEyNTA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNTowN1rOGdFgrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNTowN1rOGdFgrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MjE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final HomekitOHItemProxy item;\n          \n          \n            \n                private final HomekitOHItemProxy proxyItem;\n          \n      \n    \n    \n  \n\nI would suggest to rename this field as it is a bit confusing to have a field named item and call .getItem() on it to get the actual item.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433152175", "createdAt": "2020-06-01T10:15:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java", "diffHunk": "@@ -39,47 +40,55 @@\n     public final static String STEP = \"step\";\n \n     private static final Map<Integer, String> CREATED_ACCESSORY_IDS = new ConcurrentHashMap<>();\n-    /**\n-     * The type of HomekitDevice we've decided this was. If the item is question is the member of a group which is a\n-     * HomekitDevice, then this is null.\n-     */\n-    private final Item item;\n+\n+    // proxy item used to group commands for complex item types like Color or Dimmer\n+    private final HomekitOHItemProxy item;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE0NzM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyNDoxMVrOGdFucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyNDoxMVrOGdFucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NTY5OQ==", "bodyText": "My comment regarding the naming is also valid here. It would be better to have somthing like\nfinal Item item = taggedItem.getItem();", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433155699", "createdAt": "2020-06-01T10:24:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitCharacteristicFactory.java", "diffHunk": "@@ -379,12 +378,8 @@ private static BrightnessCharacteristic createBrightnessCharacteristic(final Hom\n             return CompletableFuture.completedFuture(value);\n         }, (brightness) -> {\n             final Item oItem = item.getItem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE2MzE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitLightbulbImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozMDoyMlrOGdF4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozMDoyMlrOGdF4qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODMxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (taggedItem.isPresent()) {\n          \n          \n            \n                    taggedItem.ifPresent(taggedItem -> { ... });", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433158313", "createdAt": "2020-06-01T10:30:22Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitLightbulbImpl.java", "diffHunk": "@@ -49,11 +52,17 @@ public HomekitLightbulbImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem\n \n     @Override\n     public CompletableFuture<Void> setLightbulbPowerState(boolean value) {\n-        GenericItem item = getItem(HomekitCharacteristicType.ON_STATE, GenericItem.class);\n-        if (item instanceof SwitchItem) {\n-            ((SwitchItem) item).send(OnOffType.from(value));\n-        } else if (item instanceof GroupItem) {\n-            ((GroupItem) item).send(OnOffType.from(value));\n+        final Optional<HomekitTaggedItem> taggedItem = getCharacteristic(HomekitCharacteristicType.ON_STATE);\n+        if (taggedItem.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE2OTc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozMjo1NlrOGdF81w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozMjo1NlrOGdF81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1OTM4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // it timer is not there create one. this will ensure that we will send command out even if no follow up\n          \n          \n            \n                    // commands were received.\n          \n          \n            \n                    // if timer is not already set, create a new one to ensure that the command command is send even if no follow up\n          \n          \n            \n                    // commands are received.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433159383", "createdAt": "2020-06-01T10:32:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send((OnOffType) on);\n+            } else {\n+                if (brightness != null) {\n+                    logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                    ((DimmerItem) item).send((PercentType) brightness);\n+                }\n+            }\n+        }\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        if (commandCache == null) {\n+            // we dont need commandCache for all item types, therefore late instantiation here only for item we use\n+            // commandProxy\n+            commandCache = new ConcurrentHashMap<>();\n+        }\n+        commandCache.put(commandType, state);\n+\n+        logger.trace(\"add command to command cache: item {}, command type {}, command state {}. cache state after: {}\",\n+                this, commandType, state, commandCache);\n+\n+        // if cache has already HUE+SATURATION or BRIGTHNESS+ON then we dont expect any further relevant command\n+        // send the command immediately\n+        if ((commandCache.containsKey(HUE_COMMAND) && commandCache.containsKey(SATURATION_COMMAND))\n+                || (commandCache.containsKey(BRIGHTNESS_COMMAND) && commandCache.containsKey(ON_COMMAND))) {\n+            if (future != null)\n+                future.cancel(true);\n+            sendCommand();\n+            return;\n+        }\n+\n+        // it timer is not there create one. this will ensure that we will send command out even if no follow up\n+        // commands were received.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE3MDU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozMzoxNFrOGdF9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozMzoxNFrOGdF9Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1OTUxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // if cache has already HUE+SATURATION or BRIGTHNESS+ON then we dont expect any further relevant command\n          \n          \n            \n                    // if cache has already HUE+SATURATION or BRIGHTNESS+ON then we don't expect any further relevant command", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433159510", "createdAt": "2020-06-01T10:33:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send((OnOffType) on);\n+            } else {\n+                if (brightness != null) {\n+                    logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                    ((DimmerItem) item).send((PercentType) brightness);\n+                }\n+            }\n+        }\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        if (commandCache == null) {\n+            // we dont need commandCache for all item types, therefore late instantiation here only for item we use\n+            // commandProxy\n+            commandCache = new ConcurrentHashMap<>();\n+        }\n+        commandCache.put(commandType, state);\n+\n+        logger.trace(\"add command to command cache: item {}, command type {}, command state {}. cache state after: {}\",\n+                this, commandType, state, commandCache);\n+\n+        // if cache has already HUE+SATURATION or BRIGTHNESS+ON then we dont expect any further relevant command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE3NzI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozNTo1MFrOGdGBbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjozNDo1NlrOGdI5dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDU1Nw==", "bodyText": "For null safety I would prefer to instantiate on object creation I don't think we'll have so many items that an empty HashMap creates a significant burden on the whole system", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433160557", "createdAt": "2020-06-01T10:35:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send((OnOffType) on);\n+            } else {\n+                if (brightness != null) {\n+                    logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                    ((DimmerItem) item).send((PercentType) brightness);\n+                }\n+            }\n+        }\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        if (commandCache == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwNzY3MA==", "bodyText": "my reasoning was -  i have around 80 items and 0 dimmer and 0 hue devices, so, it will create 80 empty hashMap without having usage for it.\nhm.. but actually, on other side, it will also create 80 HomekitOHItemProxy without real need for it.\nso, if we go for optimisation to probably at much earlier point - dont create HomekitOHItemProxy in first place which makes the logic even more complex.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433207670", "createdAt": "2020-06-01T12:34:56Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();\n+            final State saturation = commandCache.containsKey(SATURATION_COMMAND)\n+                    ? commandCache.remove(SATURATION_COMMAND)\n+                    : ((HSBType) currentState).getSaturation();\n+            final State brightness = commandCache.containsKey(BRIGHTNESS_COMMAND)\n+                    ? commandCache.remove(BRIGHTNESS_COMMAND)\n+                    : ((HSBType) currentState).getBrightness();\n+            ((ColorItem) item).send(new HSBType((DecimalType) hue, (PercentType) saturation, (PercentType) brightness));\n+            logger.trace(\"send HSB command for item {} with following values h {} s{} b{}\", item, hue, saturation,\n+                    brightness);\n+        } else if (item instanceof DimmerItem) { // not ColorItem but DimmerItem\n+            final State on = commandCache.remove(ON_COMMAND);\n+            final State brightness = commandCache.remove(BRIGHTNESS_COMMAND);\n+\n+            // if \"ON\" command received we dont need to send brightness.\n+            // TODO: make brightness suppression on \"On\" configurable.\n+            if (on != null) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send((OnOffType) on);\n+            } else {\n+                if (brightness != null) {\n+                    logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                    ((DimmerItem) item).send((PercentType) brightness);\n+                }\n+            }\n+        }\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        if (commandCache == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDU1Nw=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE4NDYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozODo0N1rOGdGF7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjozOTozMFrOGdJBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MTcwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n          \n          \n            \n                                : ((HSBType) currentState).getHue();\n          \n          \n            \n                        final State hue = commandCache.getOrDefault(HUE_COMMAND, ((HSBType) currentState).getHue());\n          \n      \n    \n    \n  \n\nand clear the total cache at the end of the method.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433161709", "createdAt": "2020-06-01T10:38:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwOTY1Mw==", "bodyText": "yes, probably better readable.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433209653", "createdAt": "2020-06-01T12:39:30Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    // delay, how long wait for further commands.\n+    // TODO: make it configurable ?\n+    private final int DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    @Nullable\n+    private ConcurrentHashMap<String, State> commandCache;\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    private void sendCommand() {\n+        if (item instanceof ColorItem) {\n+            final State currentState = item.getState() instanceof UnDefType ? HSBType.BLACK : item.getState();\n+            final State hue = commandCache.containsKey(HUE_COMMAND) ? commandCache.remove(HUE_COMMAND)\n+                    : ((HSBType) currentState).getHue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MTcwOQ=="}, "originalCommit": {"oid": "c3ad86b3c376938b1d6de1ed3d2a5f30f6920737"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY2ODE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowMjo0NlrOGdUiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowMjo0NlrOGdUiFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5ODI5NA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433398294", "createdAt": "2020-06-01T18:02:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY2ODg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowMjo1OFrOGdUikQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1NTo0OFrOGdYBRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5ODQxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n          \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433398417", "createdAt": "2020-06-01T18:02:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NTQyOQ==", "bodyText": "thanks. for some reasons i used to have loggers static and im typing \"static\" automatically.\ni will fix that one.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433455429", "createdAt": "2020-06-01T19:55:48Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5ODQxNw=="}, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY3MDY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowMzoyOFrOGdUjsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowMzoyOFrOGdUjsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5ODcwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();\n          \n          \n            \n                private Map<String, State> commandCache = new ConcurrentHashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433398704", "createdAt": "2020-06-01T18:03:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    public static final int DIMMER_MODE_NONE = 0;\n+    public static final int DIMMER_MODE_FILTER_BRIGHTNESS_100 = 1;\n+    public static final int DIMMER_MODE_FILTER_ON = 2;\n+    public static final int DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 = 3;\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private int dimmerMode = DIMMER_MODE_NONE;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY3NjU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowNTozMlrOGdUnoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowNTozMlrOGdUnoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM5OTcxMg==", "bodyText": "all if statements should have brackets", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433399712", "createdAt": "2020-06-01T18:05:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    public static final int DIMMER_MODE_NONE = 0;\n+    public static final int DIMMER_MODE_FILTER_BRIGHTNESS_100 = 1;\n+    public static final int DIMMER_MODE_FILTER_ON = 2;\n+    public static final int DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 = 3;\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private int dimmerMode = DIMMER_MODE_NONE;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(int mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    private void sendCommand() {\n+        final OnOffType on = (OnOffType) commandCache.remove(ON_COMMAND);\n+        final PercentType brightness = (PercentType) commandCache.remove(BRIGHTNESS_COMMAND);\n+        final DecimalType hue = (DecimalType) commandCache.remove(HUE_COMMAND);\n+        final PercentType saturation = (PercentType) commandCache.remove(SATURATION_COMMAND);\n+\n+        if (on != null) {\n+            // always sends OFF.\n+            // sends ON only if\n+            // - DIMMER_MODE_NONE is enabled OR\n+            // - DIMMER_MODE_FILTER_BRIGHTNESS_100 is enabled OR\n+            // - DIMMER_MODE_FILTER_ON_EXCEPT100 is not enabled and brightness is null or below 100\n+            if ((on == OnOffType.OFF) || (dimmerMode == DIMMER_MODE_NONE)\n+                    || (dimmerMode == DIMMER_MODE_FILTER_BRIGHTNESS_100)\n+                    || ((dimmerMode == DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100)\n+                            && ((brightness == null) || (brightness.intValue() == 100)))) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send(on);\n+            }\n+        }\n+\n+        // if hue or saturation present, send an HSBType state update. no filter applied for HUE & Saturation\n+        if ((hue != null) || (saturation != null)) {\n+            if (item instanceof ColorItem) {\n+                // logic for ColorItem = combine hue, saturation and brightness update to one command\n+                final HSBType currentState = item.getState() instanceof UnDefType ? HSBType.BLACK\n+                        : (HSBType) item.getState();\n+                ((ColorItem) item).send(new HSBType(hue != null ? hue : currentState.getHue(),\n+                        saturation != null ? saturation : currentState.getSaturation(),\n+                        brightness != null ? brightness : currentState.getBrightness()));\n+                logger.trace(\"send HSB command for item {} with following values hue={} saturation={} brightness={}\",\n+                        item, hue, saturation, brightness);\n+            }\n+        } else if ((brightness != null) && (item instanceof DimmerItem)) {\n+            // sends brightness:\n+            // - DIMMER_MODE_NONE\n+            // - DIMMER_MODE_FILTER_ON\n+            // - other modes (DIMMER_MODE_FILTER_BRIGHTNESS_100 or DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100) and\n+            // <100%.\n+            if ((dimmerMode == DIMMER_MODE_NONE) || (dimmerMode == DIMMER_MODE_FILTER_ON)\n+                    || (brightness.intValue() < 100)) {\n+                logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                ((DimmerItem) item).send(brightness);\n+            }\n+        }\n+        commandCache.clear();\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        commandCache.put(commandType, state);\n+        logger.trace(\"add command to command cache: item {}, command type {}, command state {}. cache state after: {}\",\n+                this, commandType, state, commandCache);\n+\n+        // if cache has already HUE+SATURATION or BRIGHTNESS+ON then we don't expect any further relevant command\n+        if ((commandCache.containsKey(HUE_COMMAND) && commandCache.containsKey(SATURATION_COMMAND))\n+                || (commandCache.containsKey(BRIGHTNESS_COMMAND) && commandCache.containsKey(ON_COMMAND))) {\n+            if (future != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTY4Mzg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowNzo0OFrOGdUsYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODowNzo0OFrOGdUsYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwMDkzMA==", "bodyText": "This doesn't look like a safe cast", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433400930", "createdAt": "2020-06-01T18:07:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    public static final int DIMMER_MODE_NONE = 0;\n+    public static final int DIMMER_MODE_FILTER_BRIGHTNESS_100 = 1;\n+    public static final int DIMMER_MODE_FILTER_ON = 2;\n+    public static final int DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 = 3;\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private int dimmerMode = DIMMER_MODE_NONE;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(int mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    private void sendCommand() {\n+        final OnOffType on = (OnOffType) commandCache.remove(ON_COMMAND);\n+        final PercentType brightness = (PercentType) commandCache.remove(BRIGHTNESS_COMMAND);\n+        final DecimalType hue = (DecimalType) commandCache.remove(HUE_COMMAND);\n+        final PercentType saturation = (PercentType) commandCache.remove(SATURATION_COMMAND);\n+\n+        if (on != null) {\n+            // always sends OFF.\n+            // sends ON only if\n+            // - DIMMER_MODE_NONE is enabled OR\n+            // - DIMMER_MODE_FILTER_BRIGHTNESS_100 is enabled OR\n+            // - DIMMER_MODE_FILTER_ON_EXCEPT100 is not enabled and brightness is null or below 100\n+            if ((on == OnOffType.OFF) || (dimmerMode == DIMMER_MODE_NONE)\n+                    || (dimmerMode == DIMMER_MODE_FILTER_BRIGHTNESS_100)\n+                    || ((dimmerMode == DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100)\n+                            && ((brightness == null) || (brightness.intValue() == 100)))) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send(on);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTcwMzQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoxNDoxMVrOGdU4-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDowNDoyMFrOGdYRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNDE1NQ==", "bodyText": "You should adjust this logic to take into account that DimmerItem only cares about the BRIGHTNESS_COMMAND and ON_COMMAND and a ColorItem only cares about the HUE_COMMAND and SATURATION_COMMAND.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433404155", "createdAt": "2020-06-01T18:14:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    public static final int DIMMER_MODE_NONE = 0;\n+    public static final int DIMMER_MODE_FILTER_BRIGHTNESS_100 = 1;\n+    public static final int DIMMER_MODE_FILTER_ON = 2;\n+    public static final int DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 = 3;\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private int dimmerMode = DIMMER_MODE_NONE;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(int mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    private void sendCommand() {\n+        final OnOffType on = (OnOffType) commandCache.remove(ON_COMMAND);\n+        final PercentType brightness = (PercentType) commandCache.remove(BRIGHTNESS_COMMAND);\n+        final DecimalType hue = (DecimalType) commandCache.remove(HUE_COMMAND);\n+        final PercentType saturation = (PercentType) commandCache.remove(SATURATION_COMMAND);\n+\n+        if (on != null) {\n+            // always sends OFF.\n+            // sends ON only if\n+            // - DIMMER_MODE_NONE is enabled OR\n+            // - DIMMER_MODE_FILTER_BRIGHTNESS_100 is enabled OR\n+            // - DIMMER_MODE_FILTER_ON_EXCEPT100 is not enabled and brightness is null or below 100\n+            if ((on == OnOffType.OFF) || (dimmerMode == DIMMER_MODE_NONE)\n+                    || (dimmerMode == DIMMER_MODE_FILTER_BRIGHTNESS_100)\n+                    || ((dimmerMode == DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100)\n+                            && ((brightness == null) || (brightness.intValue() == 100)))) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send(on);\n+            }\n+        }\n+\n+        // if hue or saturation present, send an HSBType state update. no filter applied for HUE & Saturation\n+        if ((hue != null) || (saturation != null)) {\n+            if (item instanceof ColorItem) {\n+                // logic for ColorItem = combine hue, saturation and brightness update to one command\n+                final HSBType currentState = item.getState() instanceof UnDefType ? HSBType.BLACK\n+                        : (HSBType) item.getState();\n+                ((ColorItem) item).send(new HSBType(hue != null ? hue : currentState.getHue(),\n+                        saturation != null ? saturation : currentState.getSaturation(),\n+                        brightness != null ? brightness : currentState.getBrightness()));\n+                logger.trace(\"send HSB command for item {} with following values hue={} saturation={} brightness={}\",\n+                        item, hue, saturation, brightness);\n+            }\n+        } else if ((brightness != null) && (item instanceof DimmerItem)) {\n+            // sends brightness:\n+            // - DIMMER_MODE_NONE\n+            // - DIMMER_MODE_FILTER_ON\n+            // - other modes (DIMMER_MODE_FILTER_BRIGHTNESS_100 or DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100) and\n+            // <100%.\n+            if ((dimmerMode == DIMMER_MODE_NONE) || (dimmerMode == DIMMER_MODE_FILTER_ON)\n+                    || (brightness.intValue() < 100)) {\n+                logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                ((DimmerItem) item).send(brightness);\n+            }\n+        }\n+        commandCache.clear();\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        commandCache.put(commandType, state);\n+        logger.trace(\"add command to command cache: item {}, command type {}, command state {}. cache state after: {}\",\n+                this, commandType, state, commandCache);\n+\n+        // if cache has already HUE+SATURATION or BRIGHTNESS+ON then we don't expect any further relevant command\n+        if ((commandCache.containsKey(HUE_COMMAND) && commandCache.containsKey(SATURATION_COMMAND))\n+                || (commandCache.containsKey(BRIGHTNESS_COMMAND) && commandCache.containsKey(ON_COMMAND))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1Nzk3MA==", "bodyText": "ColorItem can handle \"On\" and \"Brightness\" as well as it extends the DimmerItem. so, probably i only need to exclude the combination \"DimmerItem + hue or/and saturation\"", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433457970", "createdAt": "2020-06-01T20:00:51Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    public static final int DIMMER_MODE_NONE = 0;\n+    public static final int DIMMER_MODE_FILTER_BRIGHTNESS_100 = 1;\n+    public static final int DIMMER_MODE_FILTER_ON = 2;\n+    public static final int DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 = 3;\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private int dimmerMode = DIMMER_MODE_NONE;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(int mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    private void sendCommand() {\n+        final OnOffType on = (OnOffType) commandCache.remove(ON_COMMAND);\n+        final PercentType brightness = (PercentType) commandCache.remove(BRIGHTNESS_COMMAND);\n+        final DecimalType hue = (DecimalType) commandCache.remove(HUE_COMMAND);\n+        final PercentType saturation = (PercentType) commandCache.remove(SATURATION_COMMAND);\n+\n+        if (on != null) {\n+            // always sends OFF.\n+            // sends ON only if\n+            // - DIMMER_MODE_NONE is enabled OR\n+            // - DIMMER_MODE_FILTER_BRIGHTNESS_100 is enabled OR\n+            // - DIMMER_MODE_FILTER_ON_EXCEPT100 is not enabled and brightness is null or below 100\n+            if ((on == OnOffType.OFF) || (dimmerMode == DIMMER_MODE_NONE)\n+                    || (dimmerMode == DIMMER_MODE_FILTER_BRIGHTNESS_100)\n+                    || ((dimmerMode == DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100)\n+                            && ((brightness == null) || (brightness.intValue() == 100)))) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send(on);\n+            }\n+        }\n+\n+        // if hue or saturation present, send an HSBType state update. no filter applied for HUE & Saturation\n+        if ((hue != null) || (saturation != null)) {\n+            if (item instanceof ColorItem) {\n+                // logic for ColorItem = combine hue, saturation and brightness update to one command\n+                final HSBType currentState = item.getState() instanceof UnDefType ? HSBType.BLACK\n+                        : (HSBType) item.getState();\n+                ((ColorItem) item).send(new HSBType(hue != null ? hue : currentState.getHue(),\n+                        saturation != null ? saturation : currentState.getSaturation(),\n+                        brightness != null ? brightness : currentState.getBrightness()));\n+                logger.trace(\"send HSB command for item {} with following values hue={} saturation={} brightness={}\",\n+                        item, hue, saturation, brightness);\n+            }\n+        } else if ((brightness != null) && (item instanceof DimmerItem)) {\n+            // sends brightness:\n+            // - DIMMER_MODE_NONE\n+            // - DIMMER_MODE_FILTER_ON\n+            // - other modes (DIMMER_MODE_FILTER_BRIGHTNESS_100 or DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100) and\n+            // <100%.\n+            if ((dimmerMode == DIMMER_MODE_NONE) || (dimmerMode == DIMMER_MODE_FILTER_ON)\n+                    || (brightness.intValue() < 100)) {\n+                logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                ((DimmerItem) item).send(brightness);\n+            }\n+        }\n+        commandCache.clear();\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        commandCache.put(commandType, state);\n+        logger.trace(\"add command to command cache: item {}, command type {}, command state {}. cache state after: {}\",\n+                this, commandType, state, commandCache);\n+\n+        // if cache has already HUE+SATURATION or BRIGHTNESS+ON then we don't expect any further relevant command\n+        if ((commandCache.containsKey(HUE_COMMAND) && commandCache.containsKey(SATURATION_COMMAND))\n+                || (commandCache.containsKey(BRIGHTNESS_COMMAND) && commandCache.containsKey(ON_COMMAND))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNDE1NQ=="}, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1OTU2Mw==", "bodyText": "Ah, you are right about the ColorItem extending DimmerItem.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433459563", "createdAt": "2020-06-01T20:04:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    public static final int DIMMER_MODE_NONE = 0;\n+    public static final int DIMMER_MODE_FILTER_BRIGHTNESS_100 = 1;\n+    public static final int DIMMER_MODE_FILTER_ON = 2;\n+    public static final int DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 = 3;\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private int dimmerMode = DIMMER_MODE_NONE;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(int mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    private void sendCommand() {\n+        final OnOffType on = (OnOffType) commandCache.remove(ON_COMMAND);\n+        final PercentType brightness = (PercentType) commandCache.remove(BRIGHTNESS_COMMAND);\n+        final DecimalType hue = (DecimalType) commandCache.remove(HUE_COMMAND);\n+        final PercentType saturation = (PercentType) commandCache.remove(SATURATION_COMMAND);\n+\n+        if (on != null) {\n+            // always sends OFF.\n+            // sends ON only if\n+            // - DIMMER_MODE_NONE is enabled OR\n+            // - DIMMER_MODE_FILTER_BRIGHTNESS_100 is enabled OR\n+            // - DIMMER_MODE_FILTER_ON_EXCEPT100 is not enabled and brightness is null or below 100\n+            if ((on == OnOffType.OFF) || (dimmerMode == DIMMER_MODE_NONE)\n+                    || (dimmerMode == DIMMER_MODE_FILTER_BRIGHTNESS_100)\n+                    || ((dimmerMode == DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100)\n+                            && ((brightness == null) || (brightness.intValue() == 100)))) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send(on);\n+            }\n+        }\n+\n+        // if hue or saturation present, send an HSBType state update. no filter applied for HUE & Saturation\n+        if ((hue != null) || (saturation != null)) {\n+            if (item instanceof ColorItem) {\n+                // logic for ColorItem = combine hue, saturation and brightness update to one command\n+                final HSBType currentState = item.getState() instanceof UnDefType ? HSBType.BLACK\n+                        : (HSBType) item.getState();\n+                ((ColorItem) item).send(new HSBType(hue != null ? hue : currentState.getHue(),\n+                        saturation != null ? saturation : currentState.getSaturation(),\n+                        brightness != null ? brightness : currentState.getBrightness()));\n+                logger.trace(\"send HSB command for item {} with following values hue={} saturation={} brightness={}\",\n+                        item, hue, saturation, brightness);\n+            }\n+        } else if ((brightness != null) && (item instanceof DimmerItem)) {\n+            // sends brightness:\n+            // - DIMMER_MODE_NONE\n+            // - DIMMER_MODE_FILTER_ON\n+            // - other modes (DIMMER_MODE_FILTER_BRIGHTNESS_100 or DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100) and\n+            // <100%.\n+            if ((dimmerMode == DIMMER_MODE_NONE) || (dimmerMode == DIMMER_MODE_FILTER_ON)\n+                    || (brightness.intValue() < 100)) {\n+                logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                ((DimmerItem) item).send(brightness);\n+            }\n+        }\n+        commandCache.clear();\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        commandCache.put(commandType, state);\n+        logger.trace(\"add command to command cache: item {}, command type {}, command state {}. cache state after: {}\",\n+                this, commandType, state, commandCache);\n+\n+        // if cache has already HUE+SATURATION or BRIGHTNESS+ON then we don't expect any further relevant command\n+        if ((commandCache.containsKey(HUE_COMMAND) && commandCache.containsKey(SATURATION_COMMAND))\n+                || (commandCache.containsKey(BRIGHTNESS_COMMAND) && commandCache.containsKey(ON_COMMAND))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNDE1NQ=="}, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTcwOTc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoxNjowNVrOGdU8rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoxNjowNVrOGdU8rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNTEwMg==", "bodyText": "Might as well cast a wider net on what the config could return.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (delayConfig instanceof BigDecimal) {\n          \n          \n            \n                            proxyItem.setDelay(((BigDecimal) delayConfig).intValue());\n          \n          \n            \n                        }\n          \n          \n            \n                        if (delayConfig instanceof Number) {\n          \n          \n            \n                            proxyItem.setDelay(((Number) delayConfig).intValue());\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433405102", "createdAt": "2020-06-01T18:16:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java", "diffHunk": "@@ -141,6 +180,28 @@ public boolean isMemberOfAccessoryGroup() {\n         return parentGroupItem != null;\n     }\n \n+    private void parseConfiguration() {\n+        if (configuration != null) {\n+            Object dimmerModeConfig = configuration.get(DIMMER_MODE);\n+            if (dimmerModeConfig instanceof String) {\n+                final String dimmerModeConfigStr = (String) dimmerModeConfig;\n+                if (dimmerModeConfigStr.equalsIgnoreCase(\"none\")) {\n+                    proxyItem.setDimmerMode(HomekitOHItemProxy.DIMMER_MODE_NONE);\n+                } else if (dimmerModeConfigStr.equalsIgnoreCase(\"filterOn\")) {\n+                    proxyItem.setDimmerMode(HomekitOHItemProxy.DIMMER_MODE_FILTER_ON);\n+                } else if (dimmerModeConfigStr.equalsIgnoreCase(\"filterBrightness100\")) {\n+                    proxyItem.setDimmerMode(HomekitOHItemProxy.DIMMER_MODE_FILTER_BRIGHTNESS_100);\n+                } else if (dimmerModeConfigStr.equalsIgnoreCase(\"filterOnExceptBrightness100\")) {\n+                    proxyItem.setDimmerMode(HomekitOHItemProxy.DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100);\n+                }\n+            }\n+            Object delayConfig = configuration.get(DELAY);\n+            if (delayConfig instanceof BigDecimal) {\n+                proxyItem.setDelay(((BigDecimal) delayConfig).intValue());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTcxODIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoxODo0MVrOGdVCAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1Nzo0NlrOGdYFLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNjQ2NQ==", "bodyText": "I'm not sure how much good cancelling with interrupt would do here, might cause more problems than if you just let the future complete if it was already running.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            future.cancel(true);\n          \n          \n            \n                            future.cancel(false);", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433406465", "createdAt": "2020-06-01T18:18:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    public static final int DIMMER_MODE_NONE = 0;\n+    public static final int DIMMER_MODE_FILTER_BRIGHTNESS_100 = 1;\n+    public static final int DIMMER_MODE_FILTER_ON = 2;\n+    public static final int DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 = 3;\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private int dimmerMode = DIMMER_MODE_NONE;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(int mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    private void sendCommand() {\n+        final OnOffType on = (OnOffType) commandCache.remove(ON_COMMAND);\n+        final PercentType brightness = (PercentType) commandCache.remove(BRIGHTNESS_COMMAND);\n+        final DecimalType hue = (DecimalType) commandCache.remove(HUE_COMMAND);\n+        final PercentType saturation = (PercentType) commandCache.remove(SATURATION_COMMAND);\n+\n+        if (on != null) {\n+            // always sends OFF.\n+            // sends ON only if\n+            // - DIMMER_MODE_NONE is enabled OR\n+            // - DIMMER_MODE_FILTER_BRIGHTNESS_100 is enabled OR\n+            // - DIMMER_MODE_FILTER_ON_EXCEPT100 is not enabled and brightness is null or below 100\n+            if ((on == OnOffType.OFF) || (dimmerMode == DIMMER_MODE_NONE)\n+                    || (dimmerMode == DIMMER_MODE_FILTER_BRIGHTNESS_100)\n+                    || ((dimmerMode == DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100)\n+                            && ((brightness == null) || (brightness.intValue() == 100)))) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send(on);\n+            }\n+        }\n+\n+        // if hue or saturation present, send an HSBType state update. no filter applied for HUE & Saturation\n+        if ((hue != null) || (saturation != null)) {\n+            if (item instanceof ColorItem) {\n+                // logic for ColorItem = combine hue, saturation and brightness update to one command\n+                final HSBType currentState = item.getState() instanceof UnDefType ? HSBType.BLACK\n+                        : (HSBType) item.getState();\n+                ((ColorItem) item).send(new HSBType(hue != null ? hue : currentState.getHue(),\n+                        saturation != null ? saturation : currentState.getSaturation(),\n+                        brightness != null ? brightness : currentState.getBrightness()));\n+                logger.trace(\"send HSB command for item {} with following values hue={} saturation={} brightness={}\",\n+                        item, hue, saturation, brightness);\n+            }\n+        } else if ((brightness != null) && (item instanceof DimmerItem)) {\n+            // sends brightness:\n+            // - DIMMER_MODE_NONE\n+            // - DIMMER_MODE_FILTER_ON\n+            // - other modes (DIMMER_MODE_FILTER_BRIGHTNESS_100 or DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100) and\n+            // <100%.\n+            if ((dimmerMode == DIMMER_MODE_NONE) || (dimmerMode == DIMMER_MODE_FILTER_ON)\n+                    || (brightness.intValue() < 100)) {\n+                logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                ((DimmerItem) item).send(brightness);\n+            }\n+        }\n+        commandCache.clear();\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        commandCache.put(commandType, state);\n+        logger.trace(\"add command to command cache: item {}, command type {}, command state {}. cache state after: {}\",\n+                this, commandType, state, commandCache);\n+\n+        // if cache has already HUE+SATURATION or BRIGHTNESS+ON then we don't expect any further relevant command\n+        if ((commandCache.containsKey(HUE_COMMAND) && commandCache.containsKey(SATURATION_COMMAND))\n+                || (commandCache.containsKey(BRIGHTNESS_COMMAND) && commandCache.containsKey(ON_COMMAND))) {\n+            if (future != null)\n+                future.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NjQyOQ==", "bodyText": "it should make much difference in that case. we would interrupt \"sendCommand\" which we will re-run directly after cancelation. but you are right, false is probably the saver option.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433456429", "createdAt": "2020-06-01T19:57:46Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter Initial contribution\n+ *\n+ */\n+\n+public class HomekitOHItemProxy {\n+    private static final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+    public static final String HUE_COMMAND = \"hue\";\n+    public static final String SATURATION_COMMAND = \"saturation\";\n+    public static final String BRIGHTNESS_COMMAND = \"brightness\";\n+    public static final String ON_COMMAND = \"on\";\n+\n+    public static final int DIMMER_MODE_NONE = 0;\n+    public static final int DIMMER_MODE_FILTER_BRIGHTNESS_100 = 1;\n+    public static final int DIMMER_MODE_FILTER_ON = 2;\n+    public static final int DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 = 3;\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private int dimmerMode = DIMMER_MODE_NONE;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private ConcurrentHashMap<String, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(int mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    private void sendCommand() {\n+        final OnOffType on = (OnOffType) commandCache.remove(ON_COMMAND);\n+        final PercentType brightness = (PercentType) commandCache.remove(BRIGHTNESS_COMMAND);\n+        final DecimalType hue = (DecimalType) commandCache.remove(HUE_COMMAND);\n+        final PercentType saturation = (PercentType) commandCache.remove(SATURATION_COMMAND);\n+\n+        if (on != null) {\n+            // always sends OFF.\n+            // sends ON only if\n+            // - DIMMER_MODE_NONE is enabled OR\n+            // - DIMMER_MODE_FILTER_BRIGHTNESS_100 is enabled OR\n+            // - DIMMER_MODE_FILTER_ON_EXCEPT100 is not enabled and brightness is null or below 100\n+            if ((on == OnOffType.OFF) || (dimmerMode == DIMMER_MODE_NONE)\n+                    || (dimmerMode == DIMMER_MODE_FILTER_BRIGHTNESS_100)\n+                    || ((dimmerMode == DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100)\n+                            && ((brightness == null) || (brightness.intValue() == 100)))) {\n+                logger.trace(\"send OnOff command for item {} with value {}\", item, on);\n+                ((DimmerItem) item).send(on);\n+            }\n+        }\n+\n+        // if hue or saturation present, send an HSBType state update. no filter applied for HUE & Saturation\n+        if ((hue != null) || (saturation != null)) {\n+            if (item instanceof ColorItem) {\n+                // logic for ColorItem = combine hue, saturation and brightness update to one command\n+                final HSBType currentState = item.getState() instanceof UnDefType ? HSBType.BLACK\n+                        : (HSBType) item.getState();\n+                ((ColorItem) item).send(new HSBType(hue != null ? hue : currentState.getHue(),\n+                        saturation != null ? saturation : currentState.getSaturation(),\n+                        brightness != null ? brightness : currentState.getBrightness()));\n+                logger.trace(\"send HSB command for item {} with following values hue={} saturation={} brightness={}\",\n+                        item, hue, saturation, brightness);\n+            }\n+        } else if ((brightness != null) && (item instanceof DimmerItem)) {\n+            // sends brightness:\n+            // - DIMMER_MODE_NONE\n+            // - DIMMER_MODE_FILTER_ON\n+            // - other modes (DIMMER_MODE_FILTER_BRIGHTNESS_100 or DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100) and\n+            // <100%.\n+            if ((dimmerMode == DIMMER_MODE_NONE) || (dimmerMode == DIMMER_MODE_FILTER_ON)\n+                    || (brightness.intValue() < 100)) {\n+                logger.trace(\"send brightness command for item {} with value {}\", item, brightness);\n+                ((DimmerItem) item).send(brightness);\n+            }\n+        }\n+        commandCache.clear();\n+    }\n+\n+    public synchronized void sendCommandProxy(final String commandType, final State state) {\n+        commandCache.put(commandType, state);\n+        logger.trace(\"add command to command cache: item {}, command type {}, command state {}. cache state after: {}\",\n+                this, commandType, state, commandCache);\n+\n+        // if cache has already HUE+SATURATION or BRIGHTNESS+ON then we don't expect any further relevant command\n+        if ((commandCache.containsKey(HUE_COMMAND) && commandCache.containsKey(SATURATION_COMMAND))\n+                || (commandCache.containsKey(BRIGHTNESS_COMMAND) && commandCache.containsKey(ON_COMMAND))) {\n+            if (future != null)\n+                future.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNjQ2NQ=="}, "originalCommit": {"oid": "b75818f339adf072f01b01f7afecc9970d76c31c"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTcyODgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyMTo1M1rOGdVIag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTowOTowMVrOGdaOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwODEwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final int DIMMER_MODE_NONE = 0;\n          \n          \n            \n                public static final int DIMMER_MODE_NORMAL = 0;\n          \n      \n    \n    \n  \n\nI would suggest an enum for the mode: NORMAL, SUPPRESS_ON, SUPPRESS_BRIGHTNESS, SMART with explantation as comments", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433408106", "createdAt": "2020-06-01T18:21:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -48,18 +47,24 @@\n     public static final String BRIGHTNESS_COMMAND = \"brightness\";\n     public static final String ON_COMMAND = \"on\";\n \n-    // delay, how long wait for further commands.\n-    // TODO: make it configurable ?\n-    private final int DELAY = 50;\n+    public static final int DIMMER_MODE_NONE = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c277960f95693c79905bfa08cb4b87b6e10525"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NTUxOQ==", "bodyText": "good idea. done", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433485519", "createdAt": "2020-06-01T20:57:02Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -48,18 +47,24 @@\n     public static final String BRIGHTNESS_COMMAND = \"brightness\";\n     public static final String ON_COMMAND = \"on\";\n \n-    // delay, how long wait for further commands.\n-    // TODO: make it configurable ?\n-    private final int DELAY = 50;\n+    public static final int DIMMER_MODE_NONE = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwODEwNg=="}, "originalCommit": {"oid": "a0c277960f95693c79905bfa08cb4b87b6e10525"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MTU4OA==", "bodyText": "you could also do this for the command types above", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433491588", "createdAt": "2020-06-01T21:09:01Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -48,18 +47,24 @@\n     public static final String BRIGHTNESS_COMMAND = \"brightness\";\n     public static final String ON_COMMAND = \"on\";\n \n-    // delay, how long wait for further commands.\n-    // TODO: make it configurable ?\n-    private final int DELAY = 50;\n+    public static final int DIMMER_MODE_NONE = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwODEwNg=="}, "originalCommit": {"oid": "a0c277960f95693c79905bfa08cb4b87b6e10525"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTc1Mzg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyOTozN1rOGdVYRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODoyOTozN1rOGdVYRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMjE2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (dimmerModeConfig instanceof String) {\n          \n          \n            \n                        if (dimmerModeConfig instanceof String) {\n          \n          \n            \n                            setDimmerMode(DimmerMode.valueOf((String) dimmerModeConfig);\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433412165", "createdAt": "2020-06-01T18:29:37Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitTaggedItem.java", "diffHunk": "@@ -176,6 +180,28 @@ public boolean isMemberOfAccessoryGroup() {\n         return parentGroupItem != null;\n     }\n \n+    private void parseConfiguration() {\n+        if (configuration != null) {\n+            Object dimmerModeConfig = configuration.get(DIMMER_MODE);\n+            if (dimmerModeConfig instanceof String) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0c277960f95693c79905bfa08cb4b87b6e10525"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDQxNjkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjoxNzowOFrOGdb7BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjoxNzowOFrOGdb7BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxOTM2NQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433519365", "createdAt": "2020-06-01T22:17:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitCommandType.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal;\n+\n+/**\n+ *\n+ * Different command types supported by HomekitOHItemProxy.\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+public enum HomekitCommandType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb23d3437b04903ad025452671114f48ee85a9f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDQxNzE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitDimmerMode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjoxNzoxNlrOGdb7Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyMzowOVrOGdvHmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxOTQwNw==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433519407", "createdAt": "2020-06-01T22:17:16Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitDimmerMode.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Dimmer commands are handled differently by different devices.\n+ * Some devices expect only the brightness updates, some other expect brightness as well as \"On/Off\" commands.\n+ * This enum describes different modes of dimmer handling in the context of HomeKit binding.\n+ *\n+ * Following modes are supported:\n+ * DIMMER_MODE_NORMAL - no filtering. The commands will be send to device as received from HomeKit.\n+ * DIMMER_MODE_FILTER_ON - ON events are filtered out. only OFF and brightness information are sent\n+ * DIMMER_MODE_FILTER_BRIGHTNESS_100 - only Brightness=100% is filtered out. everything else unchanged. This allows\n+ * custom logic for soft launch in devices.\n+ * DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 - ON events are filter out in all cases except of Brightness = 100%.\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+public enum HomekitDimmerMode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb23d3437b04903ad025452671114f48ee85a9f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMzg4MA==", "bodyText": "right. forgot that one. fixed", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433833880", "createdAt": "2020-06-02T12:23:09Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitDimmerMode.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Dimmer commands are handled differently by different devices.\n+ * Some devices expect only the brightness updates, some other expect brightness as well as \"On/Off\" commands.\n+ * This enum describes different modes of dimmer handling in the context of HomeKit binding.\n+ *\n+ * Following modes are supported:\n+ * DIMMER_MODE_NORMAL - no filtering. The commands will be send to device as received from HomeKit.\n+ * DIMMER_MODE_FILTER_ON - ON events are filtered out. only OFF and brightness information are sent\n+ * DIMMER_MODE_FILTER_BRIGHTNESS_100 - only Brightness=100% is filtered out. everything else unchanged. This allows\n+ * custom logic for soft launch in devices.\n+ * DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 - ON events are filter out in all cases except of Brightness = 100%.\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+public enum HomekitDimmerMode {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxOTQwNw=="}, "originalCommit": {"oid": "8fb23d3437b04903ad025452671114f48ee85a9f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDQyODExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjoyMjoyMFrOGdcBqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjoyMjo1MFrOGdvG2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyMTA2NA==", "bodyText": "Why not just make the item field a DimmerItem?", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433521064", "createdAt": "2020-06-01T22:22:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import static org.openhab.io.homekit.internal.HomekitCommandType.*;\n+import static org.openhab.io.homekit.internal.HomekitDimmerMode.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class HomekitOHItemProxy {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+\n+    @Nullable\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private HomekitDimmerMode dimmerMode = DIMMER_MODE_NORMAL;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private Map<HomekitCommandType, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(HomekitDimmerMode mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private void sendCommand() {\n+\n+        if (!(item instanceof DimmerItem)) {\n+            // currently supports only DimmerItem and ColorItem (which extends DimmerItem)\n+            logger.debug(\"unexpected item type {}. Only DimmerItem and ColorItem are supported.\", item);\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb23d3437b04903ad025452671114f48ee85a9f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMzY4OQ==", "bodyText": "i was just thinking, maybe in the future we will need to add further item types, e.g. groups.", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r433833689", "createdAt": "2020-06-02T12:22:50Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import static org.openhab.io.homekit.internal.HomekitCommandType.*;\n+import static org.openhab.io.homekit.internal.HomekitDimmerMode.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class HomekitOHItemProxy {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+\n+    @Nullable\n+    private ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private HomekitDimmerMode dimmerMode = DIMMER_MODE_NORMAL;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private Map<HomekitCommandType, State> commandCache = new ConcurrentHashMap<>();\n+\n+    public HomekitOHItemProxy(final Item item) {\n+        this.item = item;\n+    }\n+\n+    public Item getItem() {\n+        return item;\n+    }\n+\n+    public void setDimmerMode(HomekitDimmerMode mode) {\n+        dimmerMode = mode;\n+    }\n+\n+    public void setDelay(int delay) {\n+        this.delay = delay;\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private void sendCommand() {\n+\n+        if (!(item instanceof DimmerItem)) {\n+            // currently supports only DimmerItem and ColorItem (which extends DimmerItem)\n+            logger.debug(\"unexpected item type {}. Only DimmerItem and ColorItem are supported.\", item);\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyMTA2NA=="}, "originalCommit": {"oid": "8fb23d3437b04903ad025452671114f48ee85a9f"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQxOTM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitDimmerMode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxMDo1NlrOGd5WAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoyNzo1NlrOGd6ACg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTQwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Map<String, HomekitDimmerMode> TAG_MAP = new HashMap<>();\n          \n          \n            \n            \n          \n          \n            \n                static {\n          \n          \n            \n                    for (HomekitDimmerMode type : HomekitDimmerMode.values()) {\n          \n          \n            \n                        TAG_MAP.put(type.tag.toUpperCase(), type);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private static final Map<String, HomekitDimmerMode> TAG_MAP = Arrays.stream(HomekitDimmerMode.values())\n          \n          \n            \n                        .collect(Collectors.toMap(type -> type.tag.toUpperCase(), type -> type));", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r434001409", "createdAt": "2020-06-02T16:10:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitDimmerMode.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Dimmer commands are handled differently by different devices.\n+ * Some devices expect only the brightness updates, some other expect brightness as well as \"On/Off\" commands.\n+ * This enum describes different modes of dimmer handling in the context of HomeKit binding.\n+ *\n+ * Following modes are supported:\n+ * DIMMER_MODE_NORMAL - no filtering. The commands will be send to device as received from HomeKit.\n+ * DIMMER_MODE_FILTER_ON - ON events are filtered out. only OFF and brightness information are sent\n+ * DIMMER_MODE_FILTER_BRIGHTNESS_100 - only Brightness=100% is filtered out. everything else unchanged. This allows\n+ * custom logic for soft launch in devices.\n+ * DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 - ON events are filter out in all cases except of Brightness = 100%.\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public enum HomekitDimmerMode {\n+    DIMMER_MODE_NORMAL(\"normal\"),\n+    DIMMER_MODE_FILTER_ON(\"filterOn\"),\n+    DIMMER_MODE_FILTER_BRIGHTNESS_100(\"filterBrightness100\"),\n+    DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100(\"filterOnExceptBrightness100\");\n+\n+    private static final Map<String, HomekitDimmerMode> TAG_MAP = new HashMap<>();\n+\n+    static {\n+        for (HomekitDimmerMode type : HomekitDimmerMode.values()) {\n+            TAG_MAP.put(type.tag.toUpperCase(), type);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6601d623464a3080422f8ed4fb25b3f0435d6329"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAxMjE3MA==", "bodyText": "cool. one-liner", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r434012170", "createdAt": "2020-06-02T16:27:56Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitDimmerMode.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Dimmer commands are handled differently by different devices.\n+ * Some devices expect only the brightness updates, some other expect brightness as well as \"On/Off\" commands.\n+ * This enum describes different modes of dimmer handling in the context of HomeKit binding.\n+ *\n+ * Following modes are supported:\n+ * DIMMER_MODE_NORMAL - no filtering. The commands will be send to device as received from HomeKit.\n+ * DIMMER_MODE_FILTER_ON - ON events are filtered out. only OFF and brightness information are sent\n+ * DIMMER_MODE_FILTER_BRIGHTNESS_100 - only Brightness=100% is filtered out. everything else unchanged. This allows\n+ * custom logic for soft launch in devices.\n+ * DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100 - ON events are filter out in all cases except of Brightness = 100%.\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+public enum HomekitDimmerMode {\n+    DIMMER_MODE_NORMAL(\"normal\"),\n+    DIMMER_MODE_FILTER_ON(\"filterOn\"),\n+    DIMMER_MODE_FILTER_BRIGHTNESS_100(\"filterBrightness100\"),\n+    DIMMER_MODE_FILTER_ON_EXCEPT_BRIGHTNESS_100(\"filterOnExceptBrightness100\");\n+\n+    private static final Map<String, HomekitDimmerMode> TAG_MAP = new HashMap<>();\n+\n+    static {\n+        for (HomekitDimmerMode type : HomekitDimmerMode.values()) {\n+            TAG_MAP.put(type.tag.toUpperCase(), type);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTQwOQ=="}, "originalCommit": {"oid": "6601d623464a3080422f8ed4fb25b3f0435d6329"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQyMjMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxMTo0MVrOGd5X6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxMTo0MVrOGd5X6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMTg5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int DEFAULT_DELAY = 50;\n          \n          \n            \n                private static final int DEFAULT_DELAY = 50; // in ms", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r434001896", "createdAt": "2020-06-02T16:11:41Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import static org.openhab.io.homekit.internal.HomekitCommandType.*;\n+import static org.openhab.io.homekit.internal.HomekitDimmerMode.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class HomekitOHItemProxy {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+\n+    private static final int DEFAULT_DELAY = 50;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6601d623464a3080422f8ed4fb25b3f0435d6329"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzQyMzg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxMjowNlrOGd5Y-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNjoxMjowNlrOGd5Y-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAwMjE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> future;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> future;", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r434002169", "createdAt": "2020-06-02T16:12:06Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import static org.openhab.io.homekit.internal.HomekitCommandType.*;\n+import static org.openhab.io.homekit.internal.HomekitDimmerMode.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class HomekitOHItemProxy {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+\n+    private static final int DEFAULT_DELAY = 50;\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+\n+    @Nullable\n+    private ScheduledFuture<?> future;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6601d623464a3080422f8ed4fb25b3f0435d6329"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjgxODU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NzowNVrOGf9JGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NzowNVrOGf9JGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDc5NA==", "bodyText": "move final fields above non final fields", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r436160794", "createdAt": "2020-06-05T20:57:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import static org.openhab.io.homekit.internal.HomekitCommandType.*;\n+import static org.openhab.io.homekit.internal.HomekitDimmerMode.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class HomekitOHItemProxy {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+\n+    private static final int DEFAULT_DELAY = 50; // in ms\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+\n+\n+    private @Nullable ScheduledFuture<?> future;\n+\n+    private final Item item;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0b4c66b09c696d2abd18f7e5c4dc8a9733e9b6"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjgxODc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NzoxMFrOGf9JPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NzoxMFrOGf9JPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDgyOQ==", "bodyText": "remove blank line", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r436160829", "createdAt": "2020-06-05T20:57:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import static org.openhab.io.homekit.internal.HomekitCommandType.*;\n+import static org.openhab.io.homekit.internal.HomekitDimmerMode.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class HomekitOHItemProxy {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+\n+    private static final int DEFAULT_DELAY = 50; // in ms\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0b4c66b09c696d2abd18f7e5c4dc8a9733e9b6"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjgxOTU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1NzoyOVrOGf9JwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxMDowMzoxNFrOGgC9Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDk2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<HomekitCommandType, State> commandCache = new ConcurrentHashMap<>();\n          \n          \n            \n                private final Map<HomekitCommandType, State> commandCache = new ConcurrentHashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r436160961", "createdAt": "2020-06-05T20:57:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import static org.openhab.io.homekit.internal.HomekitCommandType.*;\n+import static org.openhab.io.homekit.internal.HomekitDimmerMode.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class HomekitOHItemProxy {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+\n+    private static final int DEFAULT_DELAY = 50; // in ms\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+\n+\n+    private @Nullable ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private HomekitDimmerMode dimmerMode = DIMMER_MODE_NORMAL;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private Map<HomekitCommandType, State> commandCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c0b4c66b09c696d2abd18f7e5c4dc8a9733e9b6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI1NjA2Nw==", "bodyText": "@cpmeister  thank for the review. suggest changes committed, i.e. final added to map, all finals are moved up before non-final. blank lines removed. spotless executed", "url": "https://github.com/openhab/openhab-addons/pull/7825#discussion_r436256067", "createdAt": "2020-06-06T10:03:14Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/HomekitOHItemProxy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.io.homekit.internal;\n+\n+import static org.openhab.io.homekit.internal.HomekitCommandType.*;\n+import static org.openhab.io.homekit.internal.HomekitDimmerMode.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.common.ThreadPoolManager;\n+import org.eclipse.smarthome.core.items.Item;\n+import org.eclipse.smarthome.core.library.items.ColorItem;\n+import org.eclipse.smarthome.core.library.items.DimmerItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ *\n+ * Proxy class that can collect multiple commands for the same openHAB item and merge them to one command.\n+ * e.g. Hue and Saturation update for Color Item\n+ * \n+ * @author Eugen Freiter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class HomekitOHItemProxy {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitOHItemProxy.class);\n+\n+    private static final int DEFAULT_DELAY = 50; // in ms\n+\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager\n+            .getScheduledPool(ThreadPoolManager.THREAD_POOL_NAME_COMMON);\n+\n+\n+    private @Nullable ScheduledFuture<?> future;\n+\n+    private final Item item;\n+\n+    private HomekitDimmerMode dimmerMode = DIMMER_MODE_NORMAL;\n+\n+    // delay, how long wait for further commands. in ms.\n+    private int delay = DEFAULT_DELAY;\n+    private Map<HomekitCommandType, State> commandCache = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MDk2MQ=="}, "originalCommit": {"oid": "0c0b4c66b09c696d2abd18f7e5c4dc8a9733e9b6"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4965, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}