{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjAzOTY1", "number": 7550, "title": "[smartthings] Initial contribution", "bodyText": "This replaces pull request #5013 from Feb 28, 2019.  I made all of the changes requested there. And, refactored to code to match the layout used after the new build process was created. The long delay was due it: a) Some of the requested changes I could not get to work. Specifically making the discovery process into a component. b) getting a stable Eclipse development environment working. c) Personally I moved.\nThis is my initial contribution of a binding for the Samsung Smartthings hub. It has been in development since Jan 2017. It has been available in my repo for more than two years now and has been tested by a number of users. Smartthings defines a set of \"capabilities\" that every device must conform to. This binding supports many of the Smartthings capability. Many have been tested by me or others who have downloaded the binding. But, not all capabilities have been tested. And, some of the capabilities that Samsung added in the past year have not been implemented because they mostly involved Samsung appliances that I do not own.\nSigned-off-by: Bob Raker rjraker@gmail.com (github: bobrak)", "createdAt": "2020-05-04T21:50:10Z", "url": "https://github.com/openhab/openhab-addons/pull/7550", "merged": true, "mergeCommit": {"oid": "fdbceb718d239c0422a090b3ef3be6f8833eb8af"}, "closed": true, "closedAt": "2020-09-19T21:47:38Z", "author": {"login": "BobRak"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoDzY_AFqTQyMzg1Mjk3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKhVjMgFqTQ5MjE1Nzg2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzODUyOTc4", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-423852978", "createdAt": "2020-06-03T19:14:19Z", "commit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 78, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOToxNDoyMFrOGepyyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDowNDowMFrOGfV4Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTIwOQ==", "bodyText": "Is this file part of the PR by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434795209", "createdAt": "2020-06-03T19:14:20Z", "author": {"login": "fwolter"}, "path": ".project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTI3Mg==", "bodyText": "Is this file part of the PR by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434795272", "createdAt": "2020-06-03T19:14:26Z", "author": {"login": "fwolter"}, "path": "bom/.project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTQxMg==", "bodyText": "Is this file part of the PR by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434795412", "createdAt": "2020-06-03T19:14:38Z", "author": {"login": "fwolter"}, "path": "bundles/.project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NjI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n          \n          \n            \n            This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so it can be added in a future release.\n          \n      \n    \n    \n  \n\nOR\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n          \n          \n            \n            This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can add it in a future release.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434796253", "createdAt": "2020-06-03T19:16:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NjUyNA==", "bodyText": "Correct spelling of openHAB:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n          \n          \n            \n            Discovery allows openHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434796524", "createdAt": "2020-06-03T19:16:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5ODExOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ** The binding will not work until this part has been completed, do not skip this part of the setup. **\n          \n          \n            \n            **The binding will not work until this part has been completed, do not skip this part of the setup.**", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434798118", "createdAt": "2020-06-03T19:19:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5ODUxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.\n          \n          \n            \n            The bridge requires the IP address and port used to connect the OpenHAB server to the Smartthings Hub.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434798515", "createdAt": "2020-06-03T19:20:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5OTM3OA==", "bodyText": "Is there a reason why you repeat \"smartthings\" in the parameter names? Would port be sufficient?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434799378", "createdAt": "2020-06-03T19:22:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of theSmartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n+* **smartthingsPort** is the port the Smartthings hub listens on. 39500 is the port assigned my Smartthings so it should be used unless you have a good reason for using another port.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5OTYzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **smartthingsIp** is the IP address of theSmartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n          \n          \n            \n            * **smartthingsIp** is the IP address of the Smartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434799637", "createdAt": "2020-06-03T19:22:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of theSmartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwMTg0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **thingTypeId** corresponds to the \"Preferences Reference\" in the Smartthings Capabilities document but without the capability. prefix. i.e. A dimmer switch in the Capabilities document has a Preferences reference of capability.switchLevel, therefore the <thingTypeId> is switchLevel.\n          \n          \n            \n            * **thingTypeId** corresponds to the \"Preferences Reference\" in the Smartthings Capabilities document but without the capability. prefix. i.e. A dimmer switch in the Capabilities document has a Preferences reference of capability.switchLevel, therefore the &lt;thingTypeId&gt; is switchLevel.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434801841", "createdAt": "2020-06-03T19:27:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of theSmartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n+* **smartthingsPort** is the port the Smartthings hub listens on. 39500 is the port assigned my Smartthings so it should be used unless you have a good reason for using another port.\n+\n+\n+### Thing Configuration\n+\n+Each attached thing must specify the type of device and it's Smartthings device name. The format of the Thing description is:\n+\n+    Thing <thingTypeId> name [ smartthingsName=\"<deviceName>\" ]\n+    \n+where:\n+\n+* **thingTypeId** corresponds to the \"Preferences Reference\" in the Smartthings Capabilities document but without the capability. prefix. i.e. A dimmer switch in the Capabilities document has a Preferences reference of capability.switchLevel, therefore the <thingTypeId> is switchLevel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwMzE0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            5. **channelId** corresponds the the attribute in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). for switch it would be \"switch\".\n          \n          \n            \n            5. **channelId** corresponds the the attribute in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). For switch it would be \"switch\".", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434803147", "createdAt": "2020-06-03T19:29:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of theSmartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n+* **smartthingsPort** is the port the Smartthings hub listens on. 39500 is the port assigned my Smartthings so it should be used unless you have a good reason for using another port.\n+\n+\n+### Thing Configuration\n+\n+Each attached thing must specify the type of device and it's Smartthings device name. The format of the Thing description is:\n+\n+    Thing <thingTypeId> name [ smartthingsName=\"<deviceName>\" ]\n+    \n+where:\n+\n+* **thingTypeId** corresponds to the \"Preferences Reference\" in the Smartthings Capabilities document but without the capability. prefix. i.e. A dimmer switch in the Capabilities document has a Preferences reference of capability.switchLevel, therefore the <thingTypeId> is switchLevel.\n+* **name** is what you want to call this thing and is used in defining the items that use this thing. \n+* **deviceName** is the name you assigned to the device when you discovered and connected to it in the Smartthings App\n+\n+\n+**Example**\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+        Thing switchLevel              KitchenLights           [ smartthingsName=\"Kitchen lights\" ]\n+        Thing contactSensor            MainGarageDoor          [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing temperatureMeasurement   MainGarageTemp          [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing battery                  MainGarageBattery       [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing switch                   OfficeLight             [ smartthingsName=\"Family Room\" ]\n+        Thing valve                    SimulatedValve          [ smartthingsName=\"Simulated Valve\" ]\n+    }\n+\n+## Items\n+\n+These are specified in the .items file. This section describes the specifics related to this binding. Please see the [Items documentation](https://www.openhab.org/docs/configuration/items.html) for a full explanation of configuring items.\n+\n+The most important thing is getting the **channel** specification correct. The general format is:\n+\n+    { channel=\"smartthings:<thingTypeId>:<hubName>:<thingName>:<channelId>\" }\n+\n+The parts (separated by :) are defined as:\n+\n+1. **smartthings** to specify this is a smartthings device\n+2. **thingTypeId** specifies the type of the thing  you are connecting to. This is the same as described in the last section.\n+3. **hubName** identifies the name of the hub specified above. This corresponds to the third segment in the **Bridge** definition.\n+4. **thingName** identifes the thing this is attached to and is the \"name\" you specified in the **Thing** definition.\n+5. **channelId** corresponds the the attribute in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). for switch it would be \"switch\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwNDM0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There is a conceptual difference between how openHAB and Smartthings configures the dimmer and switch parts of a Dimmer. The Smartthings dimmer (capability name: switchLevel) is only able to accept a numeric value between 0 and 100 representing the brightness percentage. The openHAB dimmer is able to accept both the percentage and on/off. The openHAB PaperUI shows a dimmer with both a slider and switch. The Off/On part of the level is not able to track changes made in the Smartthings App. However the openHab Dimmer has been defined with both level and switch channels. Therefore the dimmer and associated switch will work well together if the swithLevel Thing is selected in the discovery inbox. The Switch Thing can be left in the inbox. For an example see the KitchenLights thing and items above.\n          \n          \n            \n            There is a conceptual difference between how openHAB and Smartthings configures the dimmer and switch parts of a Dimmer. The Smartthings dimmer (capability name: switchLevel) is only able to accept a numeric value between 0 and 100 representing the brightness percentage. The openHAB dimmer is able to accept both the percentage and on/off. The openHAB PaperUI shows a dimmer with both a slider and switch. The Off/On part of the level is not able to track changes made in the Smartthings App. However the openHab Dimmer has been defined with both level and switch channels. Therefore the dimmer and associated switch will work well together if the switchLevel Thing is selected in the discovery inbox. The Switch Thing can be left in the inbox. For an example see the KitchenLights thing and items above.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434804340", "createdAt": "2020-06-03T19:31:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of theSmartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n+* **smartthingsPort** is the port the Smartthings hub listens on. 39500 is the port assigned my Smartthings so it should be used unless you have a good reason for using another port.\n+\n+\n+### Thing Configuration\n+\n+Each attached thing must specify the type of device and it's Smartthings device name. The format of the Thing description is:\n+\n+    Thing <thingTypeId> name [ smartthingsName=\"<deviceName>\" ]\n+    \n+where:\n+\n+* **thingTypeId** corresponds to the \"Preferences Reference\" in the Smartthings Capabilities document but without the capability. prefix. i.e. A dimmer switch in the Capabilities document has a Preferences reference of capability.switchLevel, therefore the <thingTypeId> is switchLevel.\n+* **name** is what you want to call this thing and is used in defining the items that use this thing. \n+* **deviceName** is the name you assigned to the device when you discovered and connected to it in the Smartthings App\n+\n+\n+**Example**\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+        Thing switchLevel              KitchenLights           [ smartthingsName=\"Kitchen lights\" ]\n+        Thing contactSensor            MainGarageDoor          [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing temperatureMeasurement   MainGarageTemp          [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing battery                  MainGarageBattery       [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing switch                   OfficeLight             [ smartthingsName=\"Family Room\" ]\n+        Thing valve                    SimulatedValve          [ smartthingsName=\"Simulated Valve\" ]\n+    }\n+\n+## Items\n+\n+These are specified in the .items file. This section describes the specifics related to this binding. Please see the [Items documentation](https://www.openhab.org/docs/configuration/items.html) for a full explanation of configuring items.\n+\n+The most important thing is getting the **channel** specification correct. The general format is:\n+\n+    { channel=\"smartthings:<thingTypeId>:<hubName>:<thingName>:<channelId>\" }\n+\n+The parts (separated by :) are defined as:\n+\n+1. **smartthings** to specify this is a smartthings device\n+2. **thingTypeId** specifies the type of the thing  you are connecting to. This is the same as described in the last section.\n+3. **hubName** identifies the name of the hub specified above. This corresponds to the third segment in the **Bridge** definition.\n+4. **thingName** identifes the thing this is attached to and is the \"name\" you specified in the **Thing** definition.\n+5. **channelId** corresponds the the attribute in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). for switch it would be \"switch\".\n+\n+**Example**\n+\n+    Dimmer  KitchenLights        \"Kitchen lights level\"     <slider>          { channel=\"smartthings:switchLevel:Home:KitchenLights:level\" }\n+    Switch  KitchenLightSwitch   \"Kitchen lights switch\"    <light>           { channel=\"smartthings:switchLevel:Home:KitchenLights:switch\" }\n+    Contact MainGarageDoor       \"Garage door status [%s]\" <garagedoor>       { channel=\"smartthings:contactSensor:Home:MainGarageDoor:contact\" }  \n+    Number  MainGarageTemp       \"Garage temperature [%.0f]\"  <temperature>   { channel=\"smartthings:temperatureMeasurement:Home:MainGarageTemp:temperature\" }  \n+    Number  MainGarageBattery    \"Garage battery [%.0f]\"  <battery>           { channel=\"smartthings:battery:Home:MainGarageBattery:battery\" }  \n+    Switch  OfficeLight          \"Office light\"    <light>                    { channel=\"smartthings:switch:Home:OfficeLight:switch\" }\n+    String  SimulatedValve       \"Simulated valve\"                            { channel=\"smartthings:valve:Home:SimulatedValve:valve\" }\n+\n+**Special note about Dimmers**\n+There is a conceptual difference between how openHAB and Smartthings configures the dimmer and switch parts of a Dimmer. The Smartthings dimmer (capability name: switchLevel) is only able to accept a numeric value between 0 and 100 representing the brightness percentage. The openHAB dimmer is able to accept both the percentage and on/off. The openHAB PaperUI shows a dimmer with both a slider and switch. The Off/On part of the level is not able to track changes made in the Smartthings App. However the openHab Dimmer has been defined with both level and switch channels. Therefore the dimmer and associated switch will work well together if the swithLevel Thing is selected in the discovery inbox. The Switch Thing can be left in the inbox. For an example see the KitchenLights thing and items above.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwNTgxNw==", "bodyText": "Could the thing type of a Smartthings valve be a switch instead of a string type?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434805817", "createdAt": "2020-06-03T19:35:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of theSmartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n+* **smartthingsPort** is the port the Smartthings hub listens on. 39500 is the port assigned my Smartthings so it should be used unless you have a good reason for using another port.\n+\n+\n+### Thing Configuration\n+\n+Each attached thing must specify the type of device and it's Smartthings device name. The format of the Thing description is:\n+\n+    Thing <thingTypeId> name [ smartthingsName=\"<deviceName>\" ]\n+    \n+where:\n+\n+* **thingTypeId** corresponds to the \"Preferences Reference\" in the Smartthings Capabilities document but without the capability. prefix. i.e. A dimmer switch in the Capabilities document has a Preferences reference of capability.switchLevel, therefore the <thingTypeId> is switchLevel.\n+* **name** is what you want to call this thing and is used in defining the items that use this thing. \n+* **deviceName** is the name you assigned to the device when you discovered and connected to it in the Smartthings App\n+\n+\n+**Example**\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+        Thing switchLevel              KitchenLights           [ smartthingsName=\"Kitchen lights\" ]\n+        Thing contactSensor            MainGarageDoor          [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing temperatureMeasurement   MainGarageTemp          [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing battery                  MainGarageBattery       [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing switch                   OfficeLight             [ smartthingsName=\"Family Room\" ]\n+        Thing valve                    SimulatedValve          [ smartthingsName=\"Simulated Valve\" ]\n+    }\n+\n+## Items\n+\n+These are specified in the .items file. This section describes the specifics related to this binding. Please see the [Items documentation](https://www.openhab.org/docs/configuration/items.html) for a full explanation of configuring items.\n+\n+The most important thing is getting the **channel** specification correct. The general format is:\n+\n+    { channel=\"smartthings:<thingTypeId>:<hubName>:<thingName>:<channelId>\" }\n+\n+The parts (separated by :) are defined as:\n+\n+1. **smartthings** to specify this is a smartthings device\n+2. **thingTypeId** specifies the type of the thing  you are connecting to. This is the same as described in the last section.\n+3. **hubName** identifies the name of the hub specified above. This corresponds to the third segment in the **Bridge** definition.\n+4. **thingName** identifes the thing this is attached to and is the \"name\" you specified in the **Thing** definition.\n+5. **channelId** corresponds the the attribute in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). for switch it would be \"switch\".\n+\n+**Example**\n+\n+    Dimmer  KitchenLights        \"Kitchen lights level\"     <slider>          { channel=\"smartthings:switchLevel:Home:KitchenLights:level\" }\n+    Switch  KitchenLightSwitch   \"Kitchen lights switch\"    <light>           { channel=\"smartthings:switchLevel:Home:KitchenLights:switch\" }\n+    Contact MainGarageDoor       \"Garage door status [%s]\" <garagedoor>       { channel=\"smartthings:contactSensor:Home:MainGarageDoor:contact\" }  \n+    Number  MainGarageTemp       \"Garage temperature [%.0f]\"  <temperature>   { channel=\"smartthings:temperatureMeasurement:Home:MainGarageTemp:temperature\" }  \n+    Number  MainGarageBattery    \"Garage battery [%.0f]\"  <battery>           { channel=\"smartthings:battery:Home:MainGarageBattery:battery\" }  \n+    Switch  OfficeLight          \"Office light\"    <light>                    { channel=\"smartthings:switch:Home:OfficeLight:switch\" }\n+    String  SimulatedValve       \"Simulated valve\"                            { channel=\"smartthings:valve:Home:SimulatedValve:valve\" }\n+\n+**Special note about Dimmers**\n+There is a conceptual difference between how openHAB and Smartthings configures the dimmer and switch parts of a Dimmer. The Smartthings dimmer (capability name: switchLevel) is only able to accept a numeric value between 0 and 100 representing the brightness percentage. The openHAB dimmer is able to accept both the percentage and on/off. The openHAB PaperUI shows a dimmer with both a slider and switch. The Off/On part of the level is not able to track changes made in the Smartthings App. However the openHab Dimmer has been defined with both level and switch channels. Therefore the dimmer and associated switch will work well together if the swithLevel Thing is selected in the discovery inbox. The Switch Thing can be left in the inbox. For an example see the KitchenLights thing and items above.\n+\n+**Special note about Valves**\n+Smarttings includes a **valve** which can be Open or Closed but openHAB does not include a Valve item type. Therefore, the valve is defined as a having an item type of String. And, therefore the item needs to be defined with an item type of string. It can be controlled in the sitemap by specifying the Element type of Switch and providing a mapping of: mappings=[open=\"Open\", closed=\"Close\"]. Such as:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwNzAxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use the Smartthings OpenHAB binding code needs to be installed on the Smartthings Hub.  Currently the Smartthings code is bundled with the binding. \n          \n          \n            \n            To use the Smartthings, OpenHAB binding code needs to be installed on the Smartthings Hub.  Currently the Smartthings code is bundled with the binding.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434807019", "createdAt": "2020-06-03T19:36:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/SmartthingsInstallation.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# Installation of Smartthings code\n+To use the Smartthings OpenHAB binding code needs to be installed on the Smartthings Hub.  Currently the Smartthings code is bundled with the binding. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgwOTA1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The files are located in the Git repo in the **contrib** directory structure.\n          \n          \n            \n            This is located in the openHAB Addons directory which is located [here](https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.smartthings/contrib).\n          \n          \n            \n            The files are located in the GitHub [repository](https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.smartthings/contrib).", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434809059", "createdAt": "2020-06-03T19:39:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/SmartthingsInstallation.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# Installation of Smartthings code\n+To use the Smartthings OpenHAB binding code needs to be installed on the Smartthings Hub.  Currently the Smartthings code is bundled with the binding. \n+\n+## Installation of artifacts on the Smartthings HUB\n+The following steps need to be done on the Smartthings hub using the web based [Smartthings developers tools](https://graph.api.smartthings.com/). \n+### Initial steps\n+These steps assume you already have a Smartthings Hub and have set it up. And, you have created an account.\n+1. Open the developers website using the link above.\n+2. Logon using the same email and password as on your Smartthings phone app.\n+3. Click on locations\n+4. Verify your hub is listed.\n+\n+### Copying Smartthings files\n+The files are located in the Git repo in the **contrib** directory structure.\n+This is located in the openHAB Addons directory which is located [here](https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.smartthings/contrib).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTI0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * In the selection screen select the devices you want to interact with OpenHAB. **Warning** devices not enabled (lacking the check mark in the box for the specific device) will be ** ignored ** by OpenHAB. \n          \n          \n            \n                 * In the selection screen select the devices you want to interact with OpenHAB. **Warning** devices not enabled (lacking the check mark in the box for the specific device) will be **ignored** by OpenHAB.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434811244", "createdAt": "2020-06-03T19:42:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/SmartthingsInstallation.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# Installation of Smartthings code\n+To use the Smartthings OpenHAB binding code needs to be installed on the Smartthings Hub.  Currently the Smartthings code is bundled with the binding. \n+\n+## Installation of artifacts on the Smartthings HUB\n+The following steps need to be done on the Smartthings hub using the web based [Smartthings developers tools](https://graph.api.smartthings.com/). \n+### Initial steps\n+These steps assume you already have a Smartthings Hub and have set it up. And, you have created an account.\n+1. Open the developers website using the link above.\n+2. Logon using the same email and password as on your Smartthings phone app.\n+3. Click on locations\n+4. Verify your hub is listed.\n+\n+### Copying Smartthings files\n+The files are located in the Git repo in the **contrib** directory structure.\n+This is located in the openHAB Addons directory which is located [here](https://github.com/openhab/openhab2-addons/tree/master/addons/binding/org.openhab.binding.smartthings/contrib).\n+If you are manually installing this binding from the BobRak repo it is located [here](https://github.com/BobRak/OpenHAB-Smartthings/tree/master/org.openhab.binding.smartthings/contrib)\n+\n+The following files need to be deployed\n+* OpenHabAppV2 - This is a SmartApp that receives requests from OpenHAB and returns the needed data\n+* OpenHabDeviceHandler - This is a lower level module that provides a connection between OpenHAB and the Hub using the LAN connection\n+\n+### Install OpenHabAppV2\n+1. Locate OpenHabAppV2.groovy in the /contrib/SmartApps Directory.\n+2. Open OpenHabAppV2.groovy in an editor (Some program you can use to copy the contents to the clipboard)\n+3. Copy the contents to the clipboard\n+4. Using the Smartthings developers tools:\n+5. Logon, if you are not logged on\n+6. Select **My SmartApps** \n+7. Click on the **+ New SmartApp** near the top right\n+8. Click on the **From Code** tab\n+9. Paste the contents of the clipboard\n+10. Click on the **Create** button near the bottom left\n+11. Click on **Publish -> For Me**\n+12. The SmartApp is now ready\n+\n+### Install OpenHabDeviceHandler\n+1. Locate OpenHabDeviceHandler.groovy in the /contrib/DeviceHandlers Directory.\n+2. Open OpenHabDeviceHandler.groovy in an editor (Some program you can use to copy the contents to the clipboard)\n+3. Copy the contents to the clipboard\n+4. Using the Smartthings developers tools:\n+5. Select **My Device Handlers** \n+6. Click on the **+ Create New Device Handler** near the top right\n+7. Click on the **From Code** tab\n+8. Paste the contents of the clipboard\n+9. Click on the **Create** button near the bottom left\n+10. Click on **Publish -> For Me**\n+11. The Device Handler is now ready\n+\n+### Create the Device\n+1. Using the Smartthings developers tools:\n+2. Select **My Devices** \n+3. Click on the **+ New Device** near the top right\n+4. Enter the following data in the form:\n+    * Name: OpenHabDevice\n+    * Label: OpenHabDevice\n+    * Device Network ID: This needs to be the MAC address of your OpenHAB server with no spaces or punctuation\n+    * Type: OpenHabDeviceHandler (This should be the last one on the list)\n+    * Location: (Select from the dropdown)\n+    * Hub: (Select from the dropdown)\n+5. Click on the **Create** button near the bottom left\n+6. In the Preferences section enter the following:\n+     * ip: (This is the IP address of your OpenHAB server)\n+     * mac: (This is the same as the Device Network ID but with : between segments\n+     * port: 8080 (This is the port of the OpenHAB application on your server)\n+     * Save the preferences\n+\n+## Configuration in the Smartthings Classic App\n+Next the App needs to be configured using **the Smartthings Classic App on your smartphone**.\n+1. Start the Smartthings App on your phone\n+2. Select **Automation** from the bottom menu\n+3. Select **SmartApps** from the top menu\n+4. Click on **+ Add a SmartApp**\n+5. Scroll to the bottom and select **My Apps**\n+6. Select **OpenHabAppV2**\n+     * In the selection screen select the devices you want to interact with OpenHAB. **Warning** devices not enabled (lacking the check mark in the box for the specific device) will be ** ignored ** by OpenHAB. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMTgwMg==", "bodyText": "How can the user contact you?\nIf you put each sentence in a separate line, reading the diffs would be easier.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you find devices that don't work as expected please let me know what it is that doesn't work and I'll try to figure it out and make the necessary correction or enhancement. As I said in the README file I have a limited number of devices and have tested with those and am sure they work as expected.  If you are having trouble with a device that I don't own we will have to work together to diagnose what needs to be changed. To that end The Smartthings binding writes logs when unexpected conditions arise. The Smartthings OpenHab SmartApp writes it's own logs and sends error conditions back to the OpenHAB binding for logging.\n          \n          \n            \n            If you find devices that don't work as expected please let me know what it is that doesn't work and I'll try to figure it out and make the necessary correction or enhancement. As I said in the README file I have a limited number of devices and have tested with those and am sure they work as expected.  If you are having trouble with a device that I don't own we will have to work together to diagnose what needs to be changed. To that end the Smartthings binding writes logs when unexpected conditions arise. The Smartthings OpenHab SmartApp writes its own logs and sends error conditions back to the OpenHAB binding for logging.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434811802", "createdAt": "2020-06-03T19:43:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/Troubleshooting.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# Smartthings Binding Troubleshooting Guidelines\n+If you find devices that don't work as expected please let me know what it is that doesn't work and I'll try to figure it out and make the necessary correction or enhancement. As I said in the README file I have a limited number of devices and have tested with those and am sure they work as expected.  If you are having trouble with a device that I don't own we will have to work together to diagnose what needs to be changed. To that end The Smartthings binding writes logs when unexpected conditions arise. The Smartthings OpenHab SmartApp writes it's own logs and sends error conditions back to the OpenHAB binding for logging.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxMzM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. If logged on to the server: cd /var/lib/openhab2/etc or if using Samba open file explorer to \\\\OPENHABIANPI\\openHAB-userdata\\etc\n          \n          \n            \n            1. If logged on to the server: cd /var/lib/openhab2/etc or if using Samba open file explorer to \\\\\\\\OPENHABIANPI\\openHAB-userdata\\etc", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434813384", "createdAt": "2020-06-03T19:46:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/Troubleshooting.md", "diffHunk": "@@ -0,0 +1,72 @@\n+# Smartthings Binding Troubleshooting Guidelines\n+If you find devices that don't work as expected please let me know what it is that doesn't work and I'll try to figure it out and make the necessary correction or enhancement. As I said in the README file I have a limited number of devices and have tested with those and am sure they work as expected.  If you are having trouble with a device that I don't own we will have to work together to diagnose what needs to be changed. To that end The Smartthings binding writes logs when unexpected conditions arise. The Smartthings OpenHab SmartApp writes it's own logs and sends error conditions back to the OpenHAB binding for logging.\n+\n+## Setting OpenHAB logs to Debug\n+You will need to edit the logging configuration file and set the log level for the Smartthings binding to debug.\n+\n+I am assuming you are running on Linux or Raspbian\n+\n+Follow these steps on your OpenHAB server:\n+1. If logged on to the server: cd /var/lib/openhab2/etc or if using Samba open file explorer to \\\\OPENHABIANPI\\openHAB-userdata\\etc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxNzk3Nw==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434817977", "createdAt": "2020-06-03T19:55:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTMyMg==", "bodyText": "This leads to a ClassCastException if more than this binding is installed. You should check the type with instanceof.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434821322", "createdAt": "2020-06-03T20:02:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMTg3Ng==", "bodyText": "Can this message be replaced by using the debugger? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434821876", "createdAt": "2020-06-03T20:03:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzA4NQ==", "bodyText": "activate() of the base class is invoked implicitly. You could remove this.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434823085", "createdAt": "2020-06-03T20:05:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyOTI3Mw==", "bodyText": "Did you check if thingHandlers need to be thread-safe? If I see correctly, handleEvent() is invoked from another thread than createHandler() and I see no synchronization in the framework's handleEvent() callers.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434829273", "createdAt": "2020-06-03T20:18:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();\n+            discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+        }\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public @Nullable Map<String, Object> sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        Map<String, Object> result = null;\n+        int status = response.getStatus();\n+        if (status == 200) {\n+            String responseStr = response.getContentAsString();\n+            if (responseStr != null && responseStr.length() > 0) {\n+                result = new HashMap<String, Object>();\n+                result = gson.fromJson(responseStr, result.getClass());\n+            }\n+        } else if (status == 202) {\n+            logger.info(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.info(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,\n+                    path, status);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Messages sent to the Smartthings binding from the hub via the SmartthingsServlet arrive here and are then\n+     * dispatched to the correct thing's handleStateMessage function\n+     *\n+     * @param event The event sent\n+     */\n+    @Override\n+    public void handleEvent(@Nullable Event event) {\n+        if (event != null) {\n+            String topic = event.getTopic();\n+            String data = (String) event.getProperty(\"data\");\n+            logger.trace(\"Event received on topic: {}\", topic);\n+            SmartthingsStateData stateData = new SmartthingsStateData();\n+            stateData = gson.fromJson(data, stateData.getClass());\n+            SmartthingsThingHandler handler = findHandler(stateData);\n+            if (handler != null) {\n+                handler.handleStateMessage(stateData);\n+            }\n+        }\n+    }\n+\n+    private @Nullable SmartthingsThingHandler findHandler(SmartthingsStateData stateData) {\n+        for (SmartthingsThingHandler handler : thingHandlers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNDQ4MA==", "bodyText": "You might want to throw an exception if you received an unexpected status code. You could remove the @Nullable from the method signature, then.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434834480", "createdAt": "2020-06-03T20:28:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();\n+            discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+        }\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public @Nullable Map<String, Object> sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        Map<String, Object> result = null;\n+        int status = response.getStatus();\n+        if (status == 200) {\n+            String responseStr = response.getContentAsString();\n+            if (responseStr != null && responseStr.length() > 0) {\n+                result = new HashMap<String, Object>();\n+                result = gson.fromJson(responseStr, result.getClass());\n+            }\n+        } else if (status == 202) {\n+            logger.info(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.info(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTIyMA==", "bodyText": "Is this an error or normal behavior? If program execution is reached here, result would be null. Is this intended behavior?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434835220", "createdAt": "2020-06-03T20:30:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();\n+            discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+        }\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public @Nullable Map<String, Object> sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        Map<String, Object> result = null;\n+        int status = response.getStatus();\n+        if (status == 200) {\n+            String responseStr = response.getContentAsString();\n+            if (responseStr != null && responseStr.length() > 0) {\n+                result = new HashMap<String, Object>();\n+                result = gson.fromJson(responseStr, result.getClass());\n+            }\n+        } else if (status == 202) {\n+            logger.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNTk2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected void unsetHttpClientFactory() {\n          \n          \n            \n                protected void unsetHttpClientFactory(HttpClientFactory httpClientFactory) {", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434835962", "createdAt": "2020-06-03T20:31:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();\n+            discoveryServiceRegs.remove(thingHandler.getThing().getUID());\n+        }\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public @Nullable Map<String, Object> sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        Map<String, Object> result = null;\n+        int status = response.getStatus();\n+        if (status == 200) {\n+            String responseStr = response.getContentAsString();\n+            if (responseStr != null && responseStr.length() > 0) {\n+                result = new HashMap<String, Object>();\n+                result = gson.fromJson(responseStr, result.getClass());\n+            }\n+        } else if (status == 202) {\n+            logger.info(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.info(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,\n+                    path, status);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Messages sent to the Smartthings binding from the hub via the SmartthingsServlet arrive here and are then\n+     * dispatched to the correct thing's handleStateMessage function\n+     *\n+     * @param event The event sent\n+     */\n+    @Override\n+    public void handleEvent(@Nullable Event event) {\n+        if (event != null) {\n+            String topic = event.getTopic();\n+            String data = (String) event.getProperty(\"data\");\n+            logger.trace(\"Event received on topic: {}\", topic);\n+            SmartthingsStateData stateData = new SmartthingsStateData();\n+            stateData = gson.fromJson(data, stateData.getClass());\n+            SmartthingsThingHandler handler = findHandler(stateData);\n+            if (handler != null) {\n+                handler.handleStateMessage(stateData);\n+            }\n+        }\n+    }\n+\n+    private @Nullable SmartthingsThingHandler findHandler(SmartthingsStateData stateData) {\n+        for (SmartthingsThingHandler handler : thingHandlers) {\n+            // There have been some reports of handler.getSmartthingsName() returning a null.\n+            // Need to find out where null is coming from\n+            if (handler.getSmartthingsName() == null) {\n+                logger.warn(\n+                        \"A thing handler \\\"smartthings name\\\" is unexpectedly null: for thing {} with display name: {} and with attribute: {}\",\n+                        handler.toString(), stateData.deviceDisplayName, stateData.capabilityAttribute);\n+                return null;\n+            }\n+            if (handler.getSmartthingsName().equals(stateData.deviceDisplayName)) {\n+                for (Channel ch : handler.getThing().getChannels()) {\n+                    String chId = ch.getUID().getId();\n+                    if (chId.equals(stateData.capabilityAttribute)) {\n+                        return handler;\n+                    }\n+                }\n+            }\n+        }\n+\n+        logger.warn(\n+                \"Unable to locate handler for display name: {} with attribute: {}. If this thing is included in your OpenHabAppV2 SmartApp in the Smartthings App on your phone it must also be configured in openHAB\",\n+                stateData.deviceDisplayName, stateData.capabilityAttribute);\n+        return null;\n+    }\n+\n+    @Reference\n+    public void setChannelTypeService(ChannelTypeRegistry registry) {\n+        channelTypeRegistry = registry;\n+    }\n+\n+    public void unsetChannelTypeService(ChannelTypeRegistry registry) {\n+        channelTypeRegistry = null;\n+    }\n+\n+    public ChannelTypeRegistry getChannelTypeRegistry() {\n+        return channelTypeRegistry;\n+    }\n+\n+    @Reference\n+    protected void setHttpClientFactory(HttpClientFactory httpClientFactory) {\n+        logger.debug(\"setHttpClientFactory this: {}\", this.toString());\n+        this.httpClient = httpClientFactory.getCommonHttpClient();\n+    }\n+\n+    protected void unsetHttpClientFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzNjkxNw==", "bodyText": "You could instantiate gson here or in the constructor. Then, you could remove the @Nullable.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434836917", "createdAt": "2020-06-03T20:33:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzODc4NQ==", "bodyText": "If you want to catch the exceptions thrown by registerServlet(), you should explicitly specify them, since Exception catches also RuntimeException.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } catch (ServletException | NamespaceException e) {", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434838785", "createdAt": "2020-06-03T20:37:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgzODkzOA==", "bodyText": "Please heed the null compiler warning here. Since httpService is set by the framework, you could also annotate the field with @NonNullByDefault({}).", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434838938", "createdAt": "2020-06-03T20:37:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MDM2OA==", "bodyText": "Can you remove these?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434840368", "createdAt": "2020-06-03T20:40:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        try {\n+            httpService.unregister(PATH);\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    // @Reference\n+    protected void setGson(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    protected void unsetGson() {\n+        this.gson = null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MjQ2Nw==", "bodyText": "You can do this more easier by rdr.lines().collect(Collectors.joining()). rdr must be of type BufferedReader, then.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434842467", "createdAt": "2020-06-03T20:44:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        try {\n+            httpService.unregister(PATH);\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    // @Reference\n+    protected void setGson(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    protected void unsetGson() {\n+        this.gson = null;\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest req, @Nullable HttpServletResponse resp)\n+            throws ServletException, IOException {\n+        if (req == null) {\n+            logger.info(\"SmartthingsServlet.service unexpectedly received a null request. Request not processed\");\n+            return;\n+        }\n+        String path = req.getRequestURI();\n+        logger.debug(\"Smartthings servlet service() called with: {}: {} {}\", req.getRemoteAddr(), req.getMethod(),\n+                path);\n+\n+        // See what is in the path\n+        String[] pathParts = path.replace(PATH + \"/\", \"\").split(\"/\");\n+        logger.debug(\"Smartthing servlet function requested: {} with Method: {}\", pathParts[0], req.getMethod());\n+\n+        if (pathParts.length != 1) {\n+            logger.warn(\n+                    \"Smartthing servlet recieved a path with zero or more than one parts. Only one part is allowed. path {}\",\n+                    path);\n+            return;\n+        }\n+\n+        if (pathParts[0].equals(\"state\")) {\n+            // This is device state info returned from Smartthings\n+            Reader rdr = req.getReader();\n+            StringBuffer sb = new StringBuffer();\n+            int c;\n+            while ((c = rdr.read()) != -1) {\n+                sb.append((char) c);\n+            }\n+            rdr.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0MjgwNg==", "bodyText": "Better use switch here.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434842806", "createdAt": "2020-06-03T20:45:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        try {\n+            httpService.unregister(PATH);\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    // @Reference\n+    protected void setGson(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    protected void unsetGson() {\n+        this.gson = null;\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest req, @Nullable HttpServletResponse resp)\n+            throws ServletException, IOException {\n+        if (req == null) {\n+            logger.info(\"SmartthingsServlet.service unexpectedly received a null request. Request not processed\");\n+            return;\n+        }\n+        String path = req.getRequestURI();\n+        logger.debug(\"Smartthings servlet service() called with: {}: {} {}\", req.getRemoteAddr(), req.getMethod(),\n+                path);\n+\n+        // See what is in the path\n+        String[] pathParts = path.replace(PATH + \"/\", \"\").split(\"/\");\n+        logger.debug(\"Smartthing servlet function requested: {} with Method: {}\", pathParts[0], req.getMethod());\n+\n+        if (pathParts.length != 1) {\n+            logger.warn(\n+                    \"Smartthing servlet recieved a path with zero or more than one parts. Only one part is allowed. path {}\",\n+                    path);\n+            return;\n+        }\n+\n+        if (pathParts[0].equals(\"state\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NDIzNw==", "bodyText": "What is your intention with the StringBuffer?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434844237", "createdAt": "2020-06-03T20:48:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @Nullable HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private @Nullable Gson gson;\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        gson = new Gson();\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);\n+        } catch (Exception e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        try {\n+            httpService.unregister(PATH);\n+        } catch (IllegalArgumentException ignored) {\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    // @Reference\n+    protected void setGson(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    protected void unsetGson() {\n+        this.gson = null;\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest req, @Nullable HttpServletResponse resp)\n+            throws ServletException, IOException {\n+        if (req == null) {\n+            logger.info(\"SmartthingsServlet.service unexpectedly received a null request. Request not processed\");\n+            return;\n+        }\n+        String path = req.getRequestURI();\n+        logger.debug(\"Smartthings servlet service() called with: {}: {} {}\", req.getRemoteAddr(), req.getMethod(),\n+                path);\n+\n+        // See what is in the path\n+        String[] pathParts = path.replace(PATH + \"/\", \"\").split(\"/\");\n+        logger.debug(\"Smartthing servlet function requested: {} with Method: {}\", pathParts[0], req.getMethod());\n+\n+        if (pathParts.length != 1) {\n+            logger.warn(\n+                    \"Smartthing servlet recieved a path with zero or more than one parts. Only one part is allowed. path {}\",\n+                    path);\n+            return;\n+        }\n+\n+        if (pathParts[0].equals(\"state\")) {\n+            // This is device state info returned from Smartthings\n+            Reader rdr = req.getReader();\n+            StringBuffer sb = new StringBuffer();\n+            int c;\n+            while ((c = rdr.read()) != -1) {\n+                sb.append((char) c);\n+            }\n+            rdr.close();\n+            logger.trace(\"Smartthing servlet processing \\\"state\\\" request. data: {}\", sb);\n+            publishEvent(STATE_EVENT_TOPIC, \"data\", sb.toString());\n+        } else if (pathParts[0].equals(\"discovery\")) {\n+            // This is discovery data returned from Smartthings\n+            Reader rdr = req.getReader();\n+            StringBuffer sb = new StringBuffer();\n+            int c;\n+            while ((c = rdr.read()) != -1) {\n+                sb.append((char) c);\n+            }\n+            rdr.close();\n+            logger.trace(\"Smartthing servlet processing \\\"discovery\\\" request. data: {}\", sb);\n+            publishEvent(DISCOVERY_EVENT_TOPIC, \"data\", sb.toString());\n+        } else if (pathParts[0].equals(\"error\")) {\n+            // This is an error message from smartthings\n+            Reader rdr = req.getReader();\n+            StringBuffer sb = new StringBuffer();\n+            int c;\n+            while ((c = rdr.read()) != -1) {\n+                sb.append((char) c);\n+            }\n+            rdr.close();\n+            logger.trace(\"Smartthing servlet processing \\\"error\\\" request. data: {}\", sb);\n+            Map<String, Object> map = new HashMap<String, Object>();\n+            map = gson.fromJson(sb.toString(), map.getClass());\n+            StringBuffer msg = new StringBuffer(\"Error message from Smartthings: \");\n+            msg.append(map.get(\"message\"));\n+            logger.warn(\"{}\", msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0NzEwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        double hue = (hsb.getHue().doubleValue() / 3.60) + 0.5; // add .5 to round\n          \n          \n            \n                        double hue = Math.round((hsb.getHue().doubleValue() / 3.60));", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434847104", "createdAt": "2020-06-03T20:53:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsColor100Converter.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converter class for Color Control.\n+ * This can't use the default because when closing the door the command that comes in is \"closed\" but \"close\" need to be\n+ * sent to Smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsColor100Converter extends SmartthingsConverter {\n+\n+    private Pattern rgbInputPattern = Pattern.compile(\"^#[0-9a-fA-F]{6}\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsColor100Converter.class);\n+\n+    public SmartthingsColor100Converter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String jsonMsg;\n+        // The command should be of HSBType. The hue component needs to be divided by 3.6 to convert 0-360 degrees to\n+        // 0-100 percent\n+        // The easiest way to do this is to create a new HSBType with the hue component changed.\n+        if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            double hue = (hsb.getHue().doubleValue() / 3.60) + 0.5; // add .5 to round", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0OTc4Mg==", "bodyText": "Suggestion: You already used regex here. Use it to split the hex code into parts, too. See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#group-int-", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434849782", "createdAt": "2020-06-03T20:58:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsColor100Converter.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converter class for Color Control.\n+ * This can't use the default because when closing the door the command that comes in is \"closed\" but \"close\" need to be\n+ * sent to Smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsColor100Converter extends SmartthingsConverter {\n+\n+    private Pattern rgbInputPattern = Pattern.compile(\"^#[0-9a-fA-F]{6}\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsColor100Converter.class);\n+\n+    public SmartthingsColor100Converter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String jsonMsg;\n+        // The command should be of HSBType. The hue component needs to be divided by 3.6 to convert 0-360 degrees to\n+        // 0-100 percent\n+        // The easiest way to do this is to create a new HSBType with the hue component changed.\n+        if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            double hue = (hsb.getHue().doubleValue() / 3.60) + 0.5; // add .5 to round\n+            long hueInt = (long) hue;\n+            HSBType hsb100 = new HSBType(new DecimalType(hueInt), hsb.getSaturation(), hsb.getBrightness());\n+            // now use the default converter to convert to a JSON string\n+            jsonMsg = defaultConvertToSmartthings(channelUid, hsb100);\n+        } else {\n+            jsonMsg = defaultConvertToSmartthings(channelUid, command);\n+        }\n+        return jsonMsg;\n+    }\n+\n+    /*\n+     * (non-Javadoc)\n+     *\n+     * @see org.openhab.binding.smartthings.internal.converter.SmartthingsConverter#convertToOpenHab(java.lang.String,\n+     * org.openhab.binding.smartthings.internal.SmartthingsStateData)\n+     */\n+    @Override\n+    public State convertToOpenHab(@Nullable String acceptedChannelType, SmartthingsStateData dataFromSmartthings) {\n+        // The color value from Smartthings will look like \"#123456\" which is the RGB color\n+        // This needs to be converted into HSB type\n+        String value = dataFromSmartthings.value;\n+        if (value == null) {\n+            logger.warn(\"Failed to convert color {} because Smartthings returned a null value.\",\n+                    dataFromSmartthings.deviceDisplayName);\n+            return UnDefType.UNDEF;\n+        }\n+\n+        // If the bulb is off the value maybe null, so better check\n+        State state;\n+        // First verify the format the string is valid\n+        Matcher matcher = rgbInputPattern.matcher(value);\n+        if (!matcher.matches()) {\n+            logger.warn(\n+                    \"The \\\"value\\\" in the following message is not a valid color. Expected a value like \\\"#123456\\\" instead of {}\",\n+                    dataFromSmartthings.toString());\n+            return UnDefType.UNDEF;\n+        }\n+\n+        // Get the RGB colors\n+        int rgb[] = new int[3];\n+        for (int i = 0, pos = 1; i < 3; i++, pos += 2) {\n+            String c = value.substring(pos, pos + 2);\n+            rgb[i] = Integer.parseInt(c, 16);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MDU0Mg==", "bodyText": "The javadoc doesn't suite to this class", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434850542", "createdAt": "2020-06-03T20:59:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsColorConverter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converter class for Door Control.\n+ * This can't use the default because when closing the door the command that comes in is \"closed\" but \"close\" need to be\n+ * sent to Smartthings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1MjQ4OQ==", "bodyText": "Is this annotation necessary?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434852489", "createdAt": "2020-06-03T21:02:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1ODM2Mw==", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n          \n          \n            \n                    smartthingsName = thing.getConfigAs(SmartthingsThingConfig.class).smartthingsName;", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434858363", "createdAt": "2020-06-03T21:09:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg1OTk2Ng==", "bodyText": "Can you remove this?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434859966", "createdAt": "2020-06-03T21:11:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n+        thingTypeId = thing.getThingTypeUID().getId();\n+    }\n+\n+    public abstract String convertToSmartthings(ChannelUID channelUid, Command command);\n+\n+    public abstract State convertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings);\n+\n+    /**\n+     * Provide a default converter in the base call so it can be used in sub-classes if needed\n+     *\n+     * @param command\n+     * @return The json string to send to Smartthings\n+     */\n+    protected String defaultConvertToSmartthings(ChannelUID channelUid, Command command) {\n+        String value;\n+\n+        if (command instanceof DateTimeType) {\n+            DateTimeType dt = (DateTimeType) command;\n+            value = dt.format(\"%m/%d/%Y %H.%M.%S\");\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            value = String.format(\"[%d, %d, %d ]\", hsb.getHue().intValue(), hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+        } else if (command instanceof DecimalType) {\n+            value = command.toString();\n+        } else if (command instanceof IncreaseDecreaseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof NextPreviousType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OnOffType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OpenClosedType) { // Need to surround with double quotes\n+            // OpenClosedType needs some tweeking. OpenClosedType.OPEN is fine but if the type is OpenClosedType.CLOSED\n+            // need to send close, not closed.\n+            // String commandStr = (command.toString().equalsIgnoreCase(\"open\")) ? \"open\" : \"close\";\n+            // value = surroundWithQuotes(commandStr.toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MDM2OQ==", "bodyText": "Is it handled here or can this comment be (re)moved?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434860369", "createdAt": "2020-06-03T21:12:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n+        thingTypeId = thing.getThingTypeUID().getId();\n+    }\n+\n+    public abstract String convertToSmartthings(ChannelUID channelUid, Command command);\n+\n+    public abstract State convertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings);\n+\n+    /**\n+     * Provide a default converter in the base call so it can be used in sub-classes if needed\n+     *\n+     * @param command\n+     * @return The json string to send to Smartthings\n+     */\n+    protected String defaultConvertToSmartthings(ChannelUID channelUid, Command command) {\n+        String value;\n+\n+        if (command instanceof DateTimeType) {\n+            DateTimeType dt = (DateTimeType) command;\n+            value = dt.format(\"%m/%d/%Y %H.%M.%S\");\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            value = String.format(\"[%d, %d, %d ]\", hsb.getHue().intValue(), hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+        } else if (command instanceof DecimalType) {\n+            value = command.toString();\n+        } else if (command instanceof IncreaseDecreaseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof NextPreviousType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OnOffType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OpenClosedType) { // Need to surround with double quotes\n+            // OpenClosedType needs some tweeking. OpenClosedType.OPEN is fine but if the type is OpenClosedType.CLOSED\n+            // need to send close, not closed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MTE2MA==", "bodyText": "Maybe you want to ignore this type and log it?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434861160", "createdAt": "2020-06-03T21:13:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n+        thingTypeId = thing.getThingTypeUID().getId();\n+    }\n+\n+    public abstract String convertToSmartthings(ChannelUID channelUid, Command command);\n+\n+    public abstract State convertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings);\n+\n+    /**\n+     * Provide a default converter in the base call so it can be used in sub-classes if needed\n+     *\n+     * @param command\n+     * @return The json string to send to Smartthings\n+     */\n+    protected String defaultConvertToSmartthings(ChannelUID channelUid, Command command) {\n+        String value;\n+\n+        if (command instanceof DateTimeType) {\n+            DateTimeType dt = (DateTimeType) command;\n+            value = dt.format(\"%m/%d/%Y %H.%M.%S\");\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            value = String.format(\"[%d, %d, %d ]\", hsb.getHue().intValue(), hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+        } else if (command instanceof DecimalType) {\n+            value = command.toString();\n+        } else if (command instanceof IncreaseDecreaseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof NextPreviousType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OnOffType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OpenClosedType) { // Need to surround with double quotes\n+            // OpenClosedType needs some tweeking. OpenClosedType.OPEN is fine but if the type is OpenClosedType.CLOSED\n+            // need to send close, not closed.\n+            // String commandStr = (command.toString().equalsIgnoreCase(\"open\")) ? \"open\" : \"close\";\n+            // value = surroundWithQuotes(commandStr.toLowerCase());\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof PercentType) {\n+            value = command.toString();\n+        } else if (command instanceof PointType) { // Not really sure how to deal with this one and don't see a use for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2MjA2OA==", "bodyText": "Is \"Contol\" correct?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434862068", "createdAt": "2020-06-03T21:15:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsConverter.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.NextPreviousType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.PlayPauseType;\n+import org.eclipse.smarthome.core.library.types.PointType;\n+import org.eclipse.smarthome.core.library.types.RewindFastforwardType;\n+import org.eclipse.smarthome.core.library.types.StopMoveType;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.types.UpDownType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingConfig;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Base converter class.\n+ * The converter classes are responsible for converting \"state\" messages from the smartthings hub into openHAB States.\n+ * And, converting handler.handleCommand() into messages to be sent to smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsConverter.class);\n+\n+    protected String smartthingsName;\n+    @Nullable\n+    protected String thingTypeId;\n+\n+    SmartthingsConverter(Thing thing) {\n+        smartthingsName = thing.getConfiguration().as(SmartthingsThingConfig.class).smartthingsName;\n+        thingTypeId = thing.getThingTypeUID().getId();\n+    }\n+\n+    public abstract String convertToSmartthings(ChannelUID channelUid, Command command);\n+\n+    public abstract State convertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings);\n+\n+    /**\n+     * Provide a default converter in the base call so it can be used in sub-classes if needed\n+     *\n+     * @param command\n+     * @return The json string to send to Smartthings\n+     */\n+    protected String defaultConvertToSmartthings(ChannelUID channelUid, Command command) {\n+        String value;\n+\n+        if (command instanceof DateTimeType) {\n+            DateTimeType dt = (DateTimeType) command;\n+            value = dt.format(\"%m/%d/%Y %H.%M.%S\");\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            value = String.format(\"[%d, %d, %d ]\", hsb.getHue().intValue(), hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+        } else if (command instanceof DecimalType) {\n+            value = command.toString();\n+        } else if (command instanceof IncreaseDecreaseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof NextPreviousType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OnOffType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof OpenClosedType) { // Need to surround with double quotes\n+            // OpenClosedType needs some tweeking. OpenClosedType.OPEN is fine but if the type is OpenClosedType.CLOSED\n+            // need to send close, not closed.\n+            // String commandStr = (command.toString().equalsIgnoreCase(\"open\")) ? \"open\" : \"close\";\n+            // value = surroundWithQuotes(commandStr.toLowerCase());\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof PercentType) {\n+            value = command.toString();\n+        } else if (command instanceof PointType) { // Not really sure how to deal with this one and don't see a use for\n+                                                   // it in Smartthings right now\n+            value = command.toFullString();\n+        } else if (command instanceof RefreshType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof RewindFastforwardType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof StopMoveType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof PlayPauseType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else if (command instanceof StringListType) {\n+            value = surroundWithQuotes(command.toString());\n+        } else if (command instanceof StringType) {\n+            value = surroundWithQuotes(command.toString());\n+        } else if (command instanceof UpDownType) { // Need to surround with double quotes\n+            value = surroundWithQuotes(command.toString().toLowerCase());\n+        } else {\n+            value = command.toString().toLowerCase();\n+        }\n+\n+        String jsonMsg = String.format(\n+                \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"value\\\": %s}\",\n+                thingTypeId, smartthingsName, channelUid.getId(), value);\n+\n+        return jsonMsg;\n+    }\n+\n+    private String surroundWithQuotes(String param) {\n+        return (new StringBuilder()).append('\"').append(param).append('\"').toString();\n+    }\n+\n+    protected State defaultConvertToOpenHab(@Nullable String acceptedChannelType,\n+            SmartthingsStateData dataFromSmartthings) {\n+        // If there is no stateMap the just return null State\n+        if (acceptedChannelType == null) {\n+            return UnDefType.NULL;\n+        }\n+\n+        String deviceType = dataFromSmartthings.capabilityAttribute;\n+        Object deviceValue = dataFromSmartthings.value;\n+\n+        // deviceValue can be null, handle that up front\n+        if (deviceValue == null) {\n+            return UnDefType.NULL;\n+        }\n+\n+        switch (acceptedChannelType) {\n+            case \"Color\":\n+                logger.warn(\n+                        \"Conversion of Color Contol-color is not currently supported. Need to provide support for message {}.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg2OTgxNg==", "bodyText": "I like this approach. You don't have to justify. IMHO you can remove this comment.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434869816", "createdAt": "2020-06-03T21:31:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsDefaultConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+\n+/**\n+ * This \"Converter\" is assigned to a channel when a special converter is not needed.\n+ * A channel specific converter is specified in the thing-type channel property smartthings-converter then that channel\n+ * is used.\n+ * If a channel specific converter is not found a convert based on the channel ID is used.\n+ * If there is no convert found then this Default converter is used.\n+ * Yes, it would be possible to change the SamrtthingsConverter class to not being abstract and implement these methods\n+ * there. But, this makes it explicit that the default converter is being used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MTA0MQ==", "bodyText": "What does Smartthings do with a command which could not be converted? Should this be logged?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434871041", "createdAt": "2020-06-03T21:34:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsHue100Converter.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Special converter for Smartthings hue values in the 0-100% range. OH2 uses 0-360 degrees\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsHue100Converter extends SmartthingsConverter {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHue100Converter.class);\n+\n+    public SmartthingsHue100Converter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String jsonMsg;\n+\n+        if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            double hue = hsb.getHue().doubleValue() / 3.60;\n+            String value = String.format(\"[%.0f, %d, %d ]\", hue, hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+            // debug message\n+            String logMsg = String.format(\"OpenHAB HSB = %s, Smartthings HSB = %s, RGB = #%6X (%.0f, %.0f, %.0f)\",\n+                    hsb.toString(), value, hsb.getRGB(), hsb.getRed().doubleValue() * 3.6,\n+                    hsb.getGreen().doubleValue() * 3.6, hsb.getBlue().doubleValue() * 3.6);\n+            logger.debug(\"{}\", logMsg);\n+\n+            jsonMsg = String.format(\n+                    \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"value\\\": %s}\",\n+                    thingTypeId, smartthingsName, channelUid.getId(), value);\n+\n+        } else {\n+            jsonMsg = defaultConvertToSmartthings(channelUid, command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MTk1Ng==", "bodyText": "It's good practice to add the unit to the variable name e.g. INITIAL_DELAY_SEC", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434871956", "createdAt": "2020-06-03T21:36:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3MzY3Mg==", "bodyText": "If I see correctly, super.activate() is invoked without this code, too.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434873672", "createdAt": "2020-06-03T21:40:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3NjI1Nw==", "bodyText": "Where is this map populated?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434876257", "createdAt": "2020-06-03T21:46:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3NjU0OQ==", "bodyText": "Map.get() can return null, if the key is not found. You should check for null here.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434876549", "createdAt": "2020-06-03T21:47:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Remove handler of things.\n+     */\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        if (thingHandler instanceof SmartthingsBridgeHandler) {\n+            ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.get(thingHandler.getThing().getUID());\n+            serviceReg.unregister();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MTE3OA==", "bodyText": "If I see correctly, this method is invoked also if another binding is stopped. You should check for identity here handlerFactory == smartthingsHandlerFactory, before setting it to null.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434881178", "createdAt": "2020-06-03T21:58:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Unsetting handlerFactory\");\n+        this.smartthingsHandlerFactory = null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MzUwOQ==", "bodyText": "Is there a case where this can be null?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434883509", "createdAt": "2020-06-03T22:04:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Unsetting handlerFactory\");\n+        this.smartthingsHandlerFactory = null;\n+    }\n+\n+    /**\n+     * Called from the UI when starting a search.\n+     */\n+    @Override\n+    public void startScan() {\n+        sendSmartthingsDiscoveryRequest();\n+    }\n+\n+    /**\n+     * Stops a running scan.\n+     */\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Starts background scanning for attached devices.\n+     */\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"SmartthingsDiscoveryService Starting background scan\");\n+        if (scanningJob == null || scanningJob.isCancelled()) {\n+            logger.debug(\"Starting background scanning job\");\n+            if (scanningRunnable != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NDM1Mw==", "bodyText": "The compiler complains, because this is not thread-safe: scanningJob could be set to null between the null check and the invocation of cancel(). You could store a reference to scanningJob in a local variable.\nYou don't need to check if the job is already cancelled.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434884353", "createdAt": "2020-06-03T22:06:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Unsetting handlerFactory\");\n+        this.smartthingsHandlerFactory = null;\n+    }\n+\n+    /**\n+     * Called from the UI when starting a search.\n+     */\n+    @Override\n+    public void startScan() {\n+        sendSmartthingsDiscoveryRequest();\n+    }\n+\n+    /**\n+     * Stops a running scan.\n+     */\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Starts background scanning for attached devices.\n+     */\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"SmartthingsDiscoveryService Starting background scan\");\n+        if (scanningJob == null || scanningJob.isCancelled()) {\n+            logger.debug(\"Starting background scanning job\");\n+            if (scanningRunnable != null) {\n+                this.scanningJob = scheduler.scheduleWithFixedDelay(this.scanningRunnable, INITIAL_DELAY, SCAN_INTERVAL,\n+                        TimeUnit.SECONDS);\n+                logger.debug(\"Background scanning job started\");\n+            } else {\n+                logger.debug(\"Background scanning job NOT started because the runnable has not been started yet\");\n+            }\n+        } else {\n+            logger.debug(\"ScanningJob active\");\n+        }\n+    }\n+\n+    /**\n+     * Stops background scanning for attached devices.\n+     */\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        if (scanningJob != null && !scanningJob.isCancelled()) {\n+            scanningJob.cancel(false);\n+            scanningJob = null;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NTkwMg==", "bodyText": "Syntactical sugar. Then, you could remove the inner class SmartthingsScan completely.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.scanningJob = scheduler.scheduleWithFixedDelay(this.scanningRunnable, INITIAL_DELAY, SCAN_INTERVAL,\n          \n          \n            \n                            this.scanningJob = scheduler.scheduleWithFixedDelay(this::sendSmartthingsDiscoveryRequest, INITIAL_DELAY, SCAN_INTERVAL,", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434885902", "createdAt": "2020-06-03T22:10:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int SEARCH_TIME = 30;\n+    private static final int INITIAL_DELAY = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    private SmartthingsScan scanningRunnable;\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, SEARCH_TIME);\n+\n+        gson = new Gson();\n+        this.scanningRunnable = new SmartthingsScan();\n+        logger.debug(\"Initializing discovery service with default constructor.\");\n+    }\n+\n+    @Override\n+    @Activate\n+    protected void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Setting handlerFactory {}\", handlerFactory);\n+        smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        logger.debug(\"Unsetting handlerFactory\");\n+        this.smartthingsHandlerFactory = null;\n+    }\n+\n+    /**\n+     * Called from the UI when starting a search.\n+     */\n+    @Override\n+    public void startScan() {\n+        sendSmartthingsDiscoveryRequest();\n+    }\n+\n+    /**\n+     * Stops a running scan.\n+     */\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Starts background scanning for attached devices.\n+     */\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.debug(\"SmartthingsDiscoveryService Starting background scan\");\n+        if (scanningJob == null || scanningJob.isCancelled()) {\n+            logger.debug(\"Starting background scanning job\");\n+            if (scanningRunnable != null) {\n+                this.scanningJob = scheduler.scheduleWithFixedDelay(this.scanningRunnable, INITIAL_DELAY, SCAN_INTERVAL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NzQ1Mw==", "bodyText": "Since this is a DTO class, you don't need null annotations at all. See https://www.openhab.org/docs/developer/guidelines.html#null-annotations", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434887453", "createdAt": "2020-06-03T22:14:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/dto/SmartthingsDeviceData.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.dto;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Mapping object for data returned from smartthings hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsDeviceData {\n+    @Nullable\n+    public String capability;\n+    @Nullable\n+    public String attribute;\n+    @Nullable\n+    public String name;\n+    @Nullable\n+    public String id;\n+\n+    // This is a hack that seems to make the null checking work\n+    public String getNonNullId() {\n+        if (id == null) {\n+            return \"\";\n+        } else {\n+            /* Note for code reviewer about the following retun statement:\n+                Code analysis says There is no need for a @NonNull annotation because it is set as default. Only @Nullable should be used\n+                But without it I get: Null type mismatch (type annotations): required '@NonNull String' but this expression has type '@Nullable String'\n+                Better suggestions?\n+            */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NzkwOQ==", "bodyText": "Can you remove the commented out code?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434887909", "createdAt": "2020-06-03T22:15:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/dto/SmartthingsDiscoveryData.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.dto;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Mapping object for data returned from smartthings hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsDiscoveryData {\n+    // private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryData.class);\n+    public long openHabStartTime;\n+    public long hubTime;\n+    // @Nullable\n+    // public String @Nullable [] data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4ODIyMQ==", "bodyText": "Can you remove this?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r434888221", "createdAt": "2020-06-03T22:16:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.osgi.framework.BundleContext;\n+//import org.eclipse.equinox.event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0ODQ4MQ==", "bodyText": "Can you remove this?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435448481", "createdAt": "2020-06-04T18:04:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.osgi.framework.BundleContext;\n+//import org.eclipse.equinox.event.\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SmartthingsBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsBridgeHandler extends ConfigStatusBridgeHandler {\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsBridgeHandler.class);\n+\n+    private SmartthingsBridgeConfig config;\n+\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private BundleContext bundleContext;\n+    // private SmartthingsDiscoveryService smartthingsDiscoveryService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NTE5Ng==", "bodyText": "What happens with bridgeHandler if the user configures more than one Bridge?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435455196", "createdAt": "2020-06-04T18:16:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+        logger.debug(\"SmartthingsHandlerFactory is now processing ThingTypeUID {}\", thingTypeUID.getAsString());\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2MTIyNw==", "bodyText": "Do you log the stack trace by intention (last parameter) or would logging the exception's message be sufficient? If this is a serious error, you should log to warn.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435461227", "createdAt": "2020-06-04T18:24:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ2OTY5MQ==", "bodyText": "Is this useful for any user? Can it be removed?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435469691", "createdAt": "2020-06-04T18:36:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3MDI4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (converterName == null || converterName.length() == 0) {\n          \n          \n            \n                        if (converterName == null || converterName.isEmpty()) {", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435470283", "createdAt": "2020-06-04T18:37:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3Mjg3Nw==", "bodyText": "getConverter() returns Nullable, so this could be removed.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435472877", "createdAt": "2020-06-04T18:40:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {\n+                // A converter was Not specified so use the channel id\n+                converterName = ch.getUID().getId();\n+            }\n+\n+            // Try to get the converter\n+            @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NDY3Mg==", "bodyText": "You might want to make the string a constant. This is less error-prone when it comes to refactoring.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435474672", "createdAt": "2020-06-04T18:43:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3NzgwNw==", "bodyText": "When exceptions like these are raised, it would point to a bug in your code, right? Better log to warn, then.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435477807", "createdAt": "2020-06-04T18:47:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {\n+                // A converter was Not specified so use the channel id\n+                converterName = ch.getUID().getId();\n+            }\n+\n+            // Try to get the converter\n+            @Nullable\n+            SmartthingsConverter cvtr = getConverter(converterName);\n+            if (cvtr == null) {\n+                // If there is no channel specific converter the get the \"default\" converter\n+                cvtr = getConverter(\"default\");\n+            }\n+\n+            if (cvtr != null) {\n+                // cvtr should never be null because there should always be a \"default\" converter\n+                converters.put(ch.getUID(), cvtr);\n+            }\n+\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    private @Nullable SmartthingsConverter getConverter(String converterName) {\n+        // Converter name will be a name such as \"switch\" which has to be converted into the full class name such as\n+        // org.openhab.binding.smartthings.internal.converter.SmartthingsSwitchConveter\n+        StringBuffer converterClassName = new StringBuffer(\n+                \"org.openhab.binding.smartthings.internal.converter.Smartthings\");\n+        converterClassName.append(Character.toUpperCase(converterName.charAt(0)));\n+        converterClassName.append(converterName.substring(1));\n+        converterClassName.append(\"Converter\");\n+        try {\n+            Constructor<?> constr = Class.forName(converterClassName.toString()).getDeclaredConstructor(Thing.class);\n+            constr.setAccessible(true);\n+            SmartthingsConverter cvtr = (SmartthingsConverter) constr.newInstance(thing);\n+            logger.debug(\"Using converter {}\", converterName);\n+            return cvtr;\n+        } catch (ClassNotFoundException e) {\n+            // Most of the time there is no channel specific converter, the default converter is all that is needed.\n+            logger.trace(\"No Custom converter exists for {} ({})\", converterName, converterClassName);\n+        } catch (NoSuchMethodException e) {\n+            logger.info(\"NoSuchMethodException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InvocationTargetException e) {\n+            logger.info(\"InvocationTargetException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (IllegalAccessException e) {\n+            logger.info(\"IllegalAccessException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InstantiationException e) {\n+            logger.info(\"InstantiationException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTI5OQ==", "bodyText": "Should these be warn?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435479299", "createdAt": "2020-06-04T18:50:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {\n+                // A converter was Not specified so use the channel id\n+                converterName = ch.getUID().getId();\n+            }\n+\n+            // Try to get the converter\n+            @Nullable\n+            SmartthingsConverter cvtr = getConverter(converterName);\n+            if (cvtr == null) {\n+                // If there is no channel specific converter the get the \"default\" converter\n+                cvtr = getConverter(\"default\");\n+            }\n+\n+            if (cvtr != null) {\n+                // cvtr should never be null because there should always be a \"default\" converter\n+                converters.put(ch.getUID(), cvtr);\n+            }\n+\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    private @Nullable SmartthingsConverter getConverter(String converterName) {\n+        // Converter name will be a name such as \"switch\" which has to be converted into the full class name such as\n+        // org.openhab.binding.smartthings.internal.converter.SmartthingsSwitchConveter\n+        StringBuffer converterClassName = new StringBuffer(\n+                \"org.openhab.binding.smartthings.internal.converter.Smartthings\");\n+        converterClassName.append(Character.toUpperCase(converterName.charAt(0)));\n+        converterClassName.append(converterName.substring(1));\n+        converterClassName.append(\"Converter\");\n+        try {\n+            Constructor<?> constr = Class.forName(converterClassName.toString()).getDeclaredConstructor(Thing.class);\n+            constr.setAccessible(true);\n+            SmartthingsConverter cvtr = (SmartthingsConverter) constr.newInstance(thing);\n+            logger.debug(\"Using converter {}\", converterName);\n+            return cvtr;\n+        } catch (ClassNotFoundException e) {\n+            // Most of the time there is no channel specific converter, the default converter is all that is needed.\n+            logger.trace(\"No Custom converter exists for {} ({})\", converterName, converterClassName);\n+        } catch (NoSuchMethodException e) {\n+            logger.info(\"NoSuchMethodException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InvocationTargetException e) {\n+            logger.info(\"InvocationTargetException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (IllegalAccessException e) {\n+            logger.info(\"IllegalAccessException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InstantiationException e) {\n+            logger.info(\"InstantiationException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Handle an update to the configuration\n+     */\n+    @Override\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\n+        logger.debug(\"Received configuration update for thing: {}\", thing.getUID().getAsString());\n+\n+        boolean configChanged = false;\n+\n+        Configuration configuration = editConfiguration();\n+        // Examine each new config parameter and if it is different than the existing then update it\n+        for (Entry<String, Object> configurationParameter : configurationParameters.entrySet()) {\n+            String paramName = configurationParameter.getKey();\n+            Object valueObject = configurationParameter.getValue();\n+            Object existingValue = configuration.get(paramName);\n+\n+            // Only 2 parameters to check and verify: smartthingsName and smartthingsLocation which is optional\n+            if (paramName.equals(\"smartthingsName\")) {\n+                if (!(valueObject instanceof String)) {\n+                    logger.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MTA2NA==", "bodyText": "You might want to add Samsung for users which are not familiar with Smartthings.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435481064", "createdAt": "2020-06-04T18:53:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"smartthings\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Smartthings Binding</name>\n+\t<description>This is the binding for Smartthings.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MjY2Nw==", "bodyText": "You could add <context>network-address</context> to let the parameter be validated by PaperUI.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435482667", "createdAt": "2020-06-04T18:56:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,2284 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"smartthings\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- The Bridge Type -->\n+\t<bridge-type id=\"smartthings\">\n+\t\t<label>Smartthings Hub</label>\n+\t\t<description>Smartthings Hub V2 that is attached to the same network</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsIp\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP address</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MzIyNQ==", "bodyText": "Words in labels should be capitalized. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435483225", "createdAt": "2020-06-04T18:57:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,2284 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"smartthings\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- The Bridge Type -->\n+\t<bridge-type id=\"smartthings\">\n+\t\t<label>Smartthings Hub</label>\n+\t\t<description>Smartthings Hub V2 that is attached to the same network</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsIp\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP address</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4MzUwNg==", "bodyText": "You could specify min/max here to let the parameter be validated by PaperUI.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435483506", "createdAt": "2020-06-04T18:57:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,2284 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"smartthings\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- The Bridge Type -->\n+\t<bridge-type id=\"smartthings\">\n+\t\t<label>Smartthings Hub</label>\n+\t\t<description>Smartthings Hub V2 that is attached to the same network</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsIp\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP address</label>\n+\t\t\t\t<description>IP address of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsPort\" type=\"integer\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NTk1Ng==", "bodyText": "You could re-use these config parameters by specifing them once and then reference them by adding e.g. <config-description-ref uri=\"thing-type:smartthings:mychannelparameters\"/>. See https://www.openhab.org/docs/developer/bindings/config-xml.html#example", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435485956", "createdAt": "2020-06-04T19:02:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,2284 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"smartthings\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- The Bridge Type -->\n+\t<bridge-type id=\"smartthings\">\n+\t\t<label>Smartthings Hub</label>\n+\t\t<description>Smartthings Hub V2 that is attached to the same network</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsIp\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP address</label>\n+\t\t\t\t<description>IP address of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsPort\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>IP port number</label>\n+\t\t\t\t<description>Port number of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\n+\t<!-- For all Things the thing-type id must match the Samsung Smartthings Capability Reference field \"Preferences Reference\" \n+\t\twithout the capability. prefix -->\n+\t<!-- And the channel id's must match the Samsung Smartthings Capability Reference field \"attribute\" -->\n+\t<!-- Make sure that additions / removals to this are updated in the SmartthingsBindingConstants.java file -->\n+\t<!-- Thing Types -->\n+\t<thing-type id=\"accelerationSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Acceleration Sensor</label>\n+\t\t<description>Acceleration Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"acceleration\" typeId=\"acceleration-channel\">\n+\t\t\t\t<label>acceleration</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NzQ0MQ==", "bodyText": "Sample?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435487441", "createdAt": "2020-06-04T19:05:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,2284 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"smartthings\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- The Bridge Type -->\n+\t<bridge-type id=\"smartthings\">\n+\t\t<label>Smartthings Hub</label>\n+\t\t<description>Smartthings Hub V2 that is attached to the same network</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsIp\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP address</label>\n+\t\t\t\t<description>IP address of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsPort\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>IP port number</label>\n+\t\t\t\t<description>Port number of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\n+\t<!-- For all Things the thing-type id must match the Samsung Smartthings Capability Reference field \"Preferences Reference\" \n+\t\twithout the capability. prefix -->\n+\t<!-- And the channel id's must match the Samsung Smartthings Capability Reference field \"attribute\" -->\n+\t<!-- Make sure that additions / removals to this are updated in the SmartthingsBindingConstants.java file -->\n+\t<!-- Thing Types -->\n+\t<thing-type id=\"accelerationSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Acceleration Sensor</label>\n+\t\t<description>Acceleration Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"acceleration\" typeId=\"acceleration-channel\">\n+\t\t\t\t<label>acceleration</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"airConditionerMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Air Conditioner Mode</label>\n+\t\t<description>Air Conditioner Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"airConditionerMode\" typeId=\"airConditionerMode-channel\">\n+\t\t\t\t<label>Air Conditioner Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"alarm\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Alarm</label>\n+\t\t<description>Alarm</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"alarm\" typeId=\"alarm-channel\">\n+\t\t\t\t<label>Alarm</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- TODO: Audio Notification - has no attributes but has commands - not sure how to handle -->\n+\n+\t<thing-type id=\"battery\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Battery status</label>\n+\t\t<description>An indication of the status of the battery</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"battery\" typeId=\"battery-channel\">\n+\t\t\t\t<label>battery</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"beacon\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Beacon</label>\n+\t\t<description>The presence value of the beacon</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"presence\" typeId=\"presence-channel\">\n+\t\t\t\t<label>presence</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"bulb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Bulb</label>\n+\t\t<description>Allows for the control of a bulb device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>bulb</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"button\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Button</label>\n+\t\t<description>Button</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"button\" typeId=\"button-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"carbonDioxideMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>CarbonDioxideMeasurement</label>\n+\t\t<description>Carbon Dioxide Measurement</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"carbonDioxide\" typeId=\"carbonDioxide-channel\">\n+\t\t\t\t<label>CarbonDioxide</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"carbonMonoxideDetector\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>carbonMonoxideDetector</label>\n+\t\t<description>Carbon Monoxide Detector</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"carbonMonoxide\" typeId=\"carbonMonoxide-channel\">\n+\t\t\t\t<label>CarbonMonoxide</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"colorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ColorControl</label>\n+\t\t<description>Color Control</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"hue\" typeId=\"hue-channel\">\n+\t\t\t\t<label>Hue</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- The Smartthings colorControl:hue hsa a range of 0-100% where OH2 uses the normal 0-360 degrees -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">hue100</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"saturation\" typeId=\"saturation-channel\">\n+\t\t\t\t<label>Saturation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"color\" typeId=\"color-channel\">\n+\t\t\t\t<label>Color</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- The Smartthings colorControl:color hsa a hue component range of 0-100% where OH2 uses the normal 0-360 degrees -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">color100</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- This is the new \"proposed\" color control -->\n+\t<thing-type id=\"color\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Color</label>\n+\t\t<description>Color</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"colorValue\" typeId=\"colorValue-channel\">\n+\t\t\t\t<label>Color Value</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- This converter handles both color and colorValue channels -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">color</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"switchlevel\" typeId=\"level-channel\">\n+\t\t\t\t<label>Switch Level</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"colorTemperature\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ColorTemperature</label>\n+\t\t<description>Color Temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"colorTemperature\" typeId=\"colorTemperature-channel\">\n+\t\t\t\t<label>ColorTemperature</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"consumable\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Consumable</label>\n+\t\t<description>Consumable</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"consumable\" typeId=\"consumable-channel\">\n+\t\t\t\t<label>Consumable</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"contactSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Contact sensor</label>\n+\t\t<description>Allows reading the value of a contact sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact-channel\">\n+\t\t\t\t<label>Contact</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"doorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Door control</label>\n+\t\t<description>Allow for the control of a door</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"door\" typeId=\"door-control-channel\">\n+\t\t\t\t<label>Door</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"dryerMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dryer mode</label>\n+\t\t<description>Controls a dryer temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"dryerMode\" typeId=\"dryer-mode-channel\">\n+\t\t\t\t<label>Dryer Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"dryerOperatingState\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dryer operating state</label>\n+\t\t<description>Dryer operating state info</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"machineState\" typeId=\"machine-state-channel\">\n+\t\t\t\t<label>Machine state</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"dryerJobState\" typeId=\"dryer-job-state-channel\">\n+\t\t\t\t<label>Dryer job state</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"completionTime\" typeId=\"completion-time-channel\">\n+\t\t\t\t<label>Completion time</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"energyMeter\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Energy meter</label>\n+\t\t<description>Read the energy consumption of an energy metering device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"energy\" typeId=\"energy-channel\">\n+\t\t\t\t<label>Energy</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Estimated Time Of Arrival -->\n+\t<thing-type id=\"estimatedTimeOfArrival\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>estimatedTimeOfArrival</label>\n+\t\t<description>Estimated Time Of Arrival</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"estimatedTimeOfArrival\" typeId=\"estimatedTimeOfArrival-channel\">\n+\t\t\t\t<label>estimatedTimeOfArrival</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Garage Door Control -->\n+\t<thing-type id=\"garageDoorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Garage Door Control</label>\n+\t\t<description>Garage Door Control</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"door\" typeId=\"door-control-channel\">\n+\t\t\t\t<label>Door</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Holdable Button -->\n+\t<thing-type id=\"holdableButton\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>holdableButton</label>\n+\t\t<description>holdableButton</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"button\" typeId=\"button-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"numberOfButtons\" typeId=\"numberOfButtons-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Illuminance Measurement -->\n+\t<thing-type id=\"illuminanceMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>IlluminanceMeasurement</label>\n+\t\t<description>Illuminance Measurement</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"illuminance\" typeId=\"illuminance-channel\">\n+\t\t\t\t<label>IlluminanceMeasurement</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Image Capture -->\n+\t<thing-type id=\"imageCapture\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ImageCapture</label>\n+\t\t<description>Allows for the capture of an image on devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"imageCapture\" typeId=\"imageCapture-channel\">\n+\t\t\t\t<label>ImageCapture</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Indicator -->\n+\t<thing-type id=\"indicator\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Indicator</label>\n+\t\t<description>The indicator capability gives you the ability to set the indicator LED light on a Z-Wave switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"indicatorStatus\" typeId=\"indicatorStatus-channel\">\n+\t\t\t\t<label>Indicator</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Infrared Level -->\n+\t<thing-type id=\"infraredLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Infrared Level</label>\n+\t\t<description>Allows for the control of the infrared level attribute of a device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"infraredLevel\" typeId=\"infraredLevel-channel\">\n+\t\t\t\t<label>infraredLevel</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Light -->\n+\t<thing-type id=\"light\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Light</label>\n+\t\t<description>Light</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Lock -->\n+\t<thing-type id=\"lock\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Lock</label>\n+\t\t<description>Allow for the control of a lock device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lock\" typeId=\"lock-channel\">\n+\t\t\t\t<label>Lock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Lock Only -->\n+\t<thing-type id=\"lockOnly\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Lock Only</label>\n+\t\t<description>Allow for the lock control of a lock device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lock\" typeId=\"lock-only-channel\">\n+\t\t\t\t<label>Lock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Media controller -->\n+\t<thing-type id=\"mediaController\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Media Controller</label>\n+\t\t<description>Allows for the control of a media controller device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"activities\" typeId=\"activities-channel\">\n+\t\t\t\t<label>Activities</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"currentActivity\" typeId=\"currentActivity-channel\">\n+\t\t\t\t<label>Current Activity</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Motion Sensor -->\n+\t<thing-type id=\"motionSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Motion Sensor</label>\n+\t\t<description>Allows for the ability to read motion sensor device states</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"motion\" typeId=\"motion-channel\">\n+\t\t\t\t<label>motion</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Music Player -->\n+\t<thing-type id=\"musicPlayer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Music Player</label>\n+\t\t<description>Allows for control of a music playing device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"status\" typeId=\"status-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"level\" typeId=\"volumeLevel-channel\">\n+\t\t\t\t<label>level</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"trackDescription\" typeId=\"trackDescription-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"trackData\" typeId=\"trackData-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"mute\" typeId=\"mute-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Outlet -->\n+\t<thing-type id=\"outlet\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Outlet</label>\n+\t\t<description>Allows for the control of an outlet device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Outlet</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- pHMeasurement -->\n+\t<thing-type id=\"pHMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>pH Measurement</label>\n+\t\t<description>Read the pH value off of a pH measurement capable device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"pH\" typeId=\"pH-channel\">\n+\t\t\t\t<label>pH Measurement</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"powerMeter\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Power meter</label>\n+\t\t<description>Allows for reading the power consumption from devices that report it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power-channel\">\n+\t\t\t\t<label>Power</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Power Source -->\n+\t<thing-type id=\"powerSource\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>PowerSource</label>\n+\t\t<description>The current power source for the device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"powerSource\" typeId=\"powerSource-channel\">\n+\t\t\t\t<label>PowerSource</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Presence Sensor -->\n+\t<thing-type id=\"presenceSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>presenceSensor</label>\n+\t\t<description>The ability to see the current status of a presence sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"presence\" typeId=\"presence-channel\">\n+\t\t\t\t<label>presence</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Relative Humidity Measurement -->\n+\t<thing-type id=\"relativeHumidityMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>HumiditySensor</label>\n+\t\t<description>Allow reading the relative humidity from devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity-channel\">\n+\t\t\t\t<label>Humidity</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"relaySwitch\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>RelaySwitch</label>\n+\t\t<description>Relay Switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- shock sensor -->\n+\t<thing-type id=\"shockSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ShockSensor</label>\n+\t\t<description>A Device that senses whether or not there is a shock</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"shock\" typeId=\"shock-channel\">\n+\t\t\t\t<label>shock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Signal Strength -->\n+\t<thing-type id=\"signalStrength\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Signal Strength</label>\n+\t\t<description>Gives the ability to read the signal stregth of Devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lqi\" typeId=\"lqi-channel\">\n+\t\t\t\t<label>LinkQualityIndicator</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi-channel\">\n+\t\t\t\t<label>Received Signal Strength Indication</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sleep sensor -->\n+\t<thing-type id=\"sleepSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>sleepSensor</label>\n+\t\t<description>A Device that senses whether or not someone is sleeping</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sleeping\" typeId=\"sleeping-channel\">\n+\t\t\t\t<label>sleeping value</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- smoke detector -->\n+\t<thing-type id=\"smokeDetector\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Smoke Detector</label>\n+\t\t<description>Measure smoke and optionally carbon monoxide levels</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"smoke\" typeId=\"smoke-channel\">\n+\t\t\t\t<label>Smoke</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"carbonMonoxide\" typeId=\"carbonMonoxide-channel\">\n+\t\t\t\t<label>Smoke</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sound Pressure Level -->\n+\t<thing-type id=\"soundPressureLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Sound Pressure Level</label>\n+\t\t<description>Sound Pressure Level</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"soundPressureLevel\" typeId=\"soundPressureLevel-channel\">\n+\t\t\t\t<label>soundPressureLevel</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sound Sensor -->\n+\t<thing-type id=\"soundSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Sound Sensor</label>\n+\t\t<description>A Device that senses sound</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sound\" typeId=\"sound-channel\">\n+\t\t\t\t<label>Sound Sensor</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Speech Recognition -->\n+\t<thing-type id=\"speechRecognition\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Speech Recognition</label>\n+\t\t<description>Speech Recognition</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"phraseSpoken\" typeId=\"phraseSpoken-channel\">\n+\t\t\t\t<label>Speech Recognition</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Step Sensor -->\n+\t<thing-type id=\"stepSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Step Sensor</label>\n+\t\t<description>A Device that works as a step counter</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"goal\" typeId=\"goal-channel\">\n+\t\t\t\t<label>Step Goal</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"steps\" typeId=\"steps-channel\">\n+\t\t\t\t<label>Current Step Count</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"switch\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Switch</label>\n+\t\t<description>Switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Switch Level -->\n+\t<thing-type id=\"switchLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Switch Level</label>\n+\t\t<description>Allows for the control of the level attribute of a light</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level-channel\">\n+\t\t\t\t<label>Level</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Tamper Alert -->\n+\t<thing-type id=\"tamperAlert\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Tamper Alert</label>\n+\t\t<description>Tamper Alert</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"tamper\" typeId=\"tamper-channel\">\n+\t\t\t\t<label>tamper</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"temperatureMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Temperature</label>\n+\t\t<description>Get the temperature from a Device that reports current temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature-channel\">\n+\t\t\t\t<label>Temperature</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat -->\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat</label>\n+\t\t<description>Allows for the control of a thermostat device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"heatingSetpoint\" typeId=\"heatingSetpoint-channel\">\n+\t\t\t\t<label>Heating Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"coolingSetpoint\" typeId=\"coolingSetpoint-channel\">\n+\t\t\t\t<label>Cooling Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatSetpoint\" typeId=\"thermostatSetpoint-channel\">\n+\t\t\t\t<label>Thermostat Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatMode\" typeId=\"thermostatMode-channel\">\n+\t\t\t\t<label>Thermostat Mode</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatFanMode\" typeId=\"thermostatFanMode-channel\">\n+\t\t\t\t<label>Thermostat Fan Mode</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatOperatingState\" typeId=\"thermostatOperatingState-channel\">\n+\t\t\t\t<label>thermostatOperatingState</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Cooling Setpoint -->\n+\t<thing-type id=\"thermostatCoolingSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Cooling Setpoint</label>\n+\t\t<description>Thermostat Cooling Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"coolingSetpoint\" typeId=\"coolingSetpoint-channel\">\n+\t\t\t\t<label>Cooling Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Fan Mode -->\n+\t<thing-type id=\"thermostatFanMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Fan Mode</label>\n+\t\t<description>Thermostat Fan Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatFanMode\" typeId=\"thermostatFanMode-channel\">\n+\t\t\t\t<label>Thermostat Fan Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Heating Setpoint -->\n+\t<thing-type id=\"thermostatHeatingSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Heating Setpoint</label>\n+\t\t<description>Thermostat Heating Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"heatingSetpoint\" typeId=\"heatingSetpoint-channel\">\n+\t\t\t\t<label>Heating Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Mode -->\n+\t<thing-type id=\"thermostatMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Mode</label>\n+\t\t<description>Thermostat Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatMode\" typeId=\"thermostatMode-channel\">\n+\t\t\t\t<label>Thermostat Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Operating State -->\n+\t<thing-type id=\"thermostatOperatingState\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Operating State</label>\n+\t\t<description>Thermostat Operating State</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatOperatingState\" typeId=\"thermostatOperatingState-channel\">\n+\t\t\t\t<label>thermostatOperatingState</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Setpoint -->\n+\t<thing-type id=\"thermostatSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Setpoint</label>\n+\t\t<description>Thermostat Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatSetpoint\" typeId=\"thermostatSetpoint-channel\">\n+\t\t\t\t<label>Thermostat Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"threeAxis\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Three Axis</label>\n+\t\t<description>Gives the three axis coordinates for devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"threeAxis\" typeId=\"three-axis-channel\">\n+\t\t\t\t<label>Three axis</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Timed Session -->\n+\t<thing-type id=\"timedSession\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Timed Session</label>\n+\t\t<description>Timed Session</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sessionStatus\" typeId=\"sessionStatus-channel\">\n+\t\t\t\t<label>Session Status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"timeRemaining\" typeId=\"timeRemaining-channel\">\n+\t\t\t\t<label>Time Remaining</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Touch Sensor -->\n+\t<thing-type id=\"touchSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Touch Sensor</label>\n+\t\t<description>Touch Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"touch\" typeId=\"touch-channel\">\n+\t\t\t\t<label>touch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Ultraviolet Index -->\n+\t<thing-type id=\"ultravioletIndex\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Ultraviolet Index</label>\n+\t\t<description>Gives the ability to get the ultraviolet index from devices that report it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"ultravioletIndex\" typeId=\"ultravioletIndex-channel\">\n+\t\t\t\t<label>Ultraviolet Index</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Valve -->\n+\t<thing-type id=\"valve\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Valve</label>\n+\t\t<description>Allows for the control of a valve device</description>\n+\t\t<channels>\n+\t\t\t<!-- <channel id=\"contact\" typeId=\"contact-channel\"> <label>Valve as Contact</label> <properties> <property name=\"smartthings-converter\">openCloseControl</property> \n+\t\t\t\t</properties> </channel> -->\n+\t\t\t<channel id=\"valve\" typeId=\"valve-channel\">\n+\t\t\t\t<label>Valve</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Voltage Measurement -->\n+\t<thing-type id=\"voltageMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Voltage Measurement</label>\n+\t\t<description>Get the value of voltage measured from devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage\" typeId=\"voltage-channel\">\n+\t\t\t\t<label>Voltage</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Water Sensor -->\n+\t<thing-type id=\"waterSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Water Sensor</label>\n+\t\t<description>Get the status off of a water sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"water\" typeId=\"water-channel\">\n+\t\t\t\t<label>water</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Window Shade -->\n+\t<thing-type id=\"windowShade\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Window Shade</label>\n+\t\t<description>Window Shade</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"windowShade\" typeId=\"windowShade-channel\">\n+\t\t\t\t<label>windowShade</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\n+\t<!-- ============= -->\n+\t<!-- Channel Types -->\n+\t<!-- ============= -->\n+\t<channel-type id=\"acceleration-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Smartthings Binding Channel</label>\n+\t\t<description>Sample channel for Smartthings Binding</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1670}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4NzY2OQ==", "bodyText": "Can you remove these?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435487669", "createdAt": "2020-06-04T19:05:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,2284 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"smartthings\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- The Bridge Type -->\n+\t<bridge-type id=\"smartthings\">\n+\t\t<label>Smartthings Hub</label>\n+\t\t<description>Smartthings Hub V2 that is attached to the same network</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsIp\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP address</label>\n+\t\t\t\t<description>IP address of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsPort\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>IP port number</label>\n+\t\t\t\t<description>Port number of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\n+\t<!-- For all Things the thing-type id must match the Samsung Smartthings Capability Reference field \"Preferences Reference\" \n+\t\twithout the capability. prefix -->\n+\t<!-- And the channel id's must match the Samsung Smartthings Capability Reference field \"attribute\" -->\n+\t<!-- Make sure that additions / removals to this are updated in the SmartthingsBindingConstants.java file -->\n+\t<!-- Thing Types -->\n+\t<thing-type id=\"accelerationSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Acceleration Sensor</label>\n+\t\t<description>Acceleration Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"acceleration\" typeId=\"acceleration-channel\">\n+\t\t\t\t<label>acceleration</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"airConditionerMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Air Conditioner Mode</label>\n+\t\t<description>Air Conditioner Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"airConditionerMode\" typeId=\"airConditionerMode-channel\">\n+\t\t\t\t<label>Air Conditioner Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"alarm\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Alarm</label>\n+\t\t<description>Alarm</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"alarm\" typeId=\"alarm-channel\">\n+\t\t\t\t<label>Alarm</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- TODO: Audio Notification - has no attributes but has commands - not sure how to handle -->\n+\n+\t<thing-type id=\"battery\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Battery status</label>\n+\t\t<description>An indication of the status of the battery</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"battery\" typeId=\"battery-channel\">\n+\t\t\t\t<label>battery</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"beacon\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Beacon</label>\n+\t\t<description>The presence value of the beacon</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"presence\" typeId=\"presence-channel\">\n+\t\t\t\t<label>presence</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"bulb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Bulb</label>\n+\t\t<description>Allows for the control of a bulb device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>bulb</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"button\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Button</label>\n+\t\t<description>Button</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"button\" typeId=\"button-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"carbonDioxideMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>CarbonDioxideMeasurement</label>\n+\t\t<description>Carbon Dioxide Measurement</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"carbonDioxide\" typeId=\"carbonDioxide-channel\">\n+\t\t\t\t<label>CarbonDioxide</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"carbonMonoxideDetector\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>carbonMonoxideDetector</label>\n+\t\t<description>Carbon Monoxide Detector</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"carbonMonoxide\" typeId=\"carbonMonoxide-channel\">\n+\t\t\t\t<label>CarbonMonoxide</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"colorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ColorControl</label>\n+\t\t<description>Color Control</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"hue\" typeId=\"hue-channel\">\n+\t\t\t\t<label>Hue</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- The Smartthings colorControl:hue hsa a range of 0-100% where OH2 uses the normal 0-360 degrees -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">hue100</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"saturation\" typeId=\"saturation-channel\">\n+\t\t\t\t<label>Saturation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"color\" typeId=\"color-channel\">\n+\t\t\t\t<label>Color</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- The Smartthings colorControl:color hsa a hue component range of 0-100% where OH2 uses the normal 0-360 degrees -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">color100</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- This is the new \"proposed\" color control -->\n+\t<thing-type id=\"color\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Color</label>\n+\t\t<description>Color</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"colorValue\" typeId=\"colorValue-channel\">\n+\t\t\t\t<label>Color Value</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- This converter handles both color and colorValue channels -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">color</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"switchlevel\" typeId=\"level-channel\">\n+\t\t\t\t<label>Switch Level</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"colorTemperature\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ColorTemperature</label>\n+\t\t<description>Color Temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"colorTemperature\" typeId=\"colorTemperature-channel\">\n+\t\t\t\t<label>ColorTemperature</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"consumable\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Consumable</label>\n+\t\t<description>Consumable</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"consumable\" typeId=\"consumable-channel\">\n+\t\t\t\t<label>Consumable</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"contactSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Contact sensor</label>\n+\t\t<description>Allows reading the value of a contact sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact-channel\">\n+\t\t\t\t<label>Contact</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"doorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Door control</label>\n+\t\t<description>Allow for the control of a door</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"door\" typeId=\"door-control-channel\">\n+\t\t\t\t<label>Door</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"dryerMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dryer mode</label>\n+\t\t<description>Controls a dryer temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"dryerMode\" typeId=\"dryer-mode-channel\">\n+\t\t\t\t<label>Dryer Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"dryerOperatingState\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dryer operating state</label>\n+\t\t<description>Dryer operating state info</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"machineState\" typeId=\"machine-state-channel\">\n+\t\t\t\t<label>Machine state</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"dryerJobState\" typeId=\"dryer-job-state-channel\">\n+\t\t\t\t<label>Dryer job state</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"completionTime\" typeId=\"completion-time-channel\">\n+\t\t\t\t<label>Completion time</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"energyMeter\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Energy meter</label>\n+\t\t<description>Read the energy consumption of an energy metering device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"energy\" typeId=\"energy-channel\">\n+\t\t\t\t<label>Energy</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Estimated Time Of Arrival -->\n+\t<thing-type id=\"estimatedTimeOfArrival\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>estimatedTimeOfArrival</label>\n+\t\t<description>Estimated Time Of Arrival</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"estimatedTimeOfArrival\" typeId=\"estimatedTimeOfArrival-channel\">\n+\t\t\t\t<label>estimatedTimeOfArrival</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Garage Door Control -->\n+\t<thing-type id=\"garageDoorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Garage Door Control</label>\n+\t\t<description>Garage Door Control</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"door\" typeId=\"door-control-channel\">\n+\t\t\t\t<label>Door</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Holdable Button -->\n+\t<thing-type id=\"holdableButton\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>holdableButton</label>\n+\t\t<description>holdableButton</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"button\" typeId=\"button-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"numberOfButtons\" typeId=\"numberOfButtons-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Illuminance Measurement -->\n+\t<thing-type id=\"illuminanceMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>IlluminanceMeasurement</label>\n+\t\t<description>Illuminance Measurement</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"illuminance\" typeId=\"illuminance-channel\">\n+\t\t\t\t<label>IlluminanceMeasurement</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Image Capture -->\n+\t<thing-type id=\"imageCapture\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ImageCapture</label>\n+\t\t<description>Allows for the capture of an image on devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"imageCapture\" typeId=\"imageCapture-channel\">\n+\t\t\t\t<label>ImageCapture</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Indicator -->\n+\t<thing-type id=\"indicator\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Indicator</label>\n+\t\t<description>The indicator capability gives you the ability to set the indicator LED light on a Z-Wave switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"indicatorStatus\" typeId=\"indicatorStatus-channel\">\n+\t\t\t\t<label>Indicator</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Infrared Level -->\n+\t<thing-type id=\"infraredLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Infrared Level</label>\n+\t\t<description>Allows for the control of the infrared level attribute of a device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"infraredLevel\" typeId=\"infraredLevel-channel\">\n+\t\t\t\t<label>infraredLevel</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Light -->\n+\t<thing-type id=\"light\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Light</label>\n+\t\t<description>Light</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Lock -->\n+\t<thing-type id=\"lock\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Lock</label>\n+\t\t<description>Allow for the control of a lock device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lock\" typeId=\"lock-channel\">\n+\t\t\t\t<label>Lock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Lock Only -->\n+\t<thing-type id=\"lockOnly\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Lock Only</label>\n+\t\t<description>Allow for the lock control of a lock device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lock\" typeId=\"lock-only-channel\">\n+\t\t\t\t<label>Lock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Media controller -->\n+\t<thing-type id=\"mediaController\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Media Controller</label>\n+\t\t<description>Allows for the control of a media controller device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"activities\" typeId=\"activities-channel\">\n+\t\t\t\t<label>Activities</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"currentActivity\" typeId=\"currentActivity-channel\">\n+\t\t\t\t<label>Current Activity</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Motion Sensor -->\n+\t<thing-type id=\"motionSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Motion Sensor</label>\n+\t\t<description>Allows for the ability to read motion sensor device states</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"motion\" typeId=\"motion-channel\">\n+\t\t\t\t<label>motion</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Music Player -->\n+\t<thing-type id=\"musicPlayer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Music Player</label>\n+\t\t<description>Allows for control of a music playing device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"status\" typeId=\"status-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"level\" typeId=\"volumeLevel-channel\">\n+\t\t\t\t<label>level</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"trackDescription\" typeId=\"trackDescription-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"trackData\" typeId=\"trackData-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"mute\" typeId=\"mute-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Outlet -->\n+\t<thing-type id=\"outlet\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Outlet</label>\n+\t\t<description>Allows for the control of an outlet device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Outlet</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- pHMeasurement -->\n+\t<thing-type id=\"pHMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>pH Measurement</label>\n+\t\t<description>Read the pH value off of a pH measurement capable device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"pH\" typeId=\"pH-channel\">\n+\t\t\t\t<label>pH Measurement</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"powerMeter\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Power meter</label>\n+\t\t<description>Allows for reading the power consumption from devices that report it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power-channel\">\n+\t\t\t\t<label>Power</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Power Source -->\n+\t<thing-type id=\"powerSource\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>PowerSource</label>\n+\t\t<description>The current power source for the device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"powerSource\" typeId=\"powerSource-channel\">\n+\t\t\t\t<label>PowerSource</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Presence Sensor -->\n+\t<thing-type id=\"presenceSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>presenceSensor</label>\n+\t\t<description>The ability to see the current status of a presence sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"presence\" typeId=\"presence-channel\">\n+\t\t\t\t<label>presence</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Relative Humidity Measurement -->\n+\t<thing-type id=\"relativeHumidityMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>HumiditySensor</label>\n+\t\t<description>Allow reading the relative humidity from devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity-channel\">\n+\t\t\t\t<label>Humidity</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"relaySwitch\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>RelaySwitch</label>\n+\t\t<description>Relay Switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- shock sensor -->\n+\t<thing-type id=\"shockSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ShockSensor</label>\n+\t\t<description>A Device that senses whether or not there is a shock</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"shock\" typeId=\"shock-channel\">\n+\t\t\t\t<label>shock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Signal Strength -->\n+\t<thing-type id=\"signalStrength\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Signal Strength</label>\n+\t\t<description>Gives the ability to read the signal stregth of Devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lqi\" typeId=\"lqi-channel\">\n+\t\t\t\t<label>LinkQualityIndicator</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi-channel\">\n+\t\t\t\t<label>Received Signal Strength Indication</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sleep sensor -->\n+\t<thing-type id=\"sleepSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>sleepSensor</label>\n+\t\t<description>A Device that senses whether or not someone is sleeping</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sleeping\" typeId=\"sleeping-channel\">\n+\t\t\t\t<label>sleeping value</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- smoke detector -->\n+\t<thing-type id=\"smokeDetector\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Smoke Detector</label>\n+\t\t<description>Measure smoke and optionally carbon monoxide levels</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"smoke\" typeId=\"smoke-channel\">\n+\t\t\t\t<label>Smoke</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"carbonMonoxide\" typeId=\"carbonMonoxide-channel\">\n+\t\t\t\t<label>Smoke</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sound Pressure Level -->\n+\t<thing-type id=\"soundPressureLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Sound Pressure Level</label>\n+\t\t<description>Sound Pressure Level</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"soundPressureLevel\" typeId=\"soundPressureLevel-channel\">\n+\t\t\t\t<label>soundPressureLevel</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sound Sensor -->\n+\t<thing-type id=\"soundSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Sound Sensor</label>\n+\t\t<description>A Device that senses sound</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sound\" typeId=\"sound-channel\">\n+\t\t\t\t<label>Sound Sensor</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Speech Recognition -->\n+\t<thing-type id=\"speechRecognition\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Speech Recognition</label>\n+\t\t<description>Speech Recognition</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"phraseSpoken\" typeId=\"phraseSpoken-channel\">\n+\t\t\t\t<label>Speech Recognition</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Step Sensor -->\n+\t<thing-type id=\"stepSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Step Sensor</label>\n+\t\t<description>A Device that works as a step counter</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"goal\" typeId=\"goal-channel\">\n+\t\t\t\t<label>Step Goal</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"steps\" typeId=\"steps-channel\">\n+\t\t\t\t<label>Current Step Count</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"switch\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Switch</label>\n+\t\t<description>Switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Switch Level -->\n+\t<thing-type id=\"switchLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Switch Level</label>\n+\t\t<description>Allows for the control of the level attribute of a light</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level-channel\">\n+\t\t\t\t<label>Level</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Tamper Alert -->\n+\t<thing-type id=\"tamperAlert\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Tamper Alert</label>\n+\t\t<description>Tamper Alert</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"tamper\" typeId=\"tamper-channel\">\n+\t\t\t\t<label>tamper</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"temperatureMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Temperature</label>\n+\t\t<description>Get the temperature from a Device that reports current temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature-channel\">\n+\t\t\t\t<label>Temperature</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat -->\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat</label>\n+\t\t<description>Allows for the control of a thermostat device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"heatingSetpoint\" typeId=\"heatingSetpoint-channel\">\n+\t\t\t\t<label>Heating Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"coolingSetpoint\" typeId=\"coolingSetpoint-channel\">\n+\t\t\t\t<label>Cooling Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatSetpoint\" typeId=\"thermostatSetpoint-channel\">\n+\t\t\t\t<label>Thermostat Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatMode\" typeId=\"thermostatMode-channel\">\n+\t\t\t\t<label>Thermostat Mode</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatFanMode\" typeId=\"thermostatFanMode-channel\">\n+\t\t\t\t<label>Thermostat Fan Mode</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatOperatingState\" typeId=\"thermostatOperatingState-channel\">\n+\t\t\t\t<label>thermostatOperatingState</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Cooling Setpoint -->\n+\t<thing-type id=\"thermostatCoolingSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Cooling Setpoint</label>\n+\t\t<description>Thermostat Cooling Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"coolingSetpoint\" typeId=\"coolingSetpoint-channel\">\n+\t\t\t\t<label>Cooling Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Fan Mode -->\n+\t<thing-type id=\"thermostatFanMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Fan Mode</label>\n+\t\t<description>Thermostat Fan Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatFanMode\" typeId=\"thermostatFanMode-channel\">\n+\t\t\t\t<label>Thermostat Fan Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Heating Setpoint -->\n+\t<thing-type id=\"thermostatHeatingSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Heating Setpoint</label>\n+\t\t<description>Thermostat Heating Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"heatingSetpoint\" typeId=\"heatingSetpoint-channel\">\n+\t\t\t\t<label>Heating Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Mode -->\n+\t<thing-type id=\"thermostatMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Mode</label>\n+\t\t<description>Thermostat Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatMode\" typeId=\"thermostatMode-channel\">\n+\t\t\t\t<label>Thermostat Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Operating State -->\n+\t<thing-type id=\"thermostatOperatingState\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Operating State</label>\n+\t\t<description>Thermostat Operating State</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatOperatingState\" typeId=\"thermostatOperatingState-channel\">\n+\t\t\t\t<label>thermostatOperatingState</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Setpoint -->\n+\t<thing-type id=\"thermostatSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Setpoint</label>\n+\t\t<description>Thermostat Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatSetpoint\" typeId=\"thermostatSetpoint-channel\">\n+\t\t\t\t<label>Thermostat Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"threeAxis\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Three Axis</label>\n+\t\t<description>Gives the three axis coordinates for devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"threeAxis\" typeId=\"three-axis-channel\">\n+\t\t\t\t<label>Three axis</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Timed Session -->\n+\t<thing-type id=\"timedSession\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Timed Session</label>\n+\t\t<description>Timed Session</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sessionStatus\" typeId=\"sessionStatus-channel\">\n+\t\t\t\t<label>Session Status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"timeRemaining\" typeId=\"timeRemaining-channel\">\n+\t\t\t\t<label>Time Remaining</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Touch Sensor -->\n+\t<thing-type id=\"touchSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Touch Sensor</label>\n+\t\t<description>Touch Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"touch\" typeId=\"touch-channel\">\n+\t\t\t\t<label>touch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Ultraviolet Index -->\n+\t<thing-type id=\"ultravioletIndex\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Ultraviolet Index</label>\n+\t\t<description>Gives the ability to get the ultraviolet index from devices that report it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"ultravioletIndex\" typeId=\"ultravioletIndex-channel\">\n+\t\t\t\t<label>Ultraviolet Index</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Valve -->\n+\t<thing-type id=\"valve\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Valve</label>\n+\t\t<description>Allows for the control of a valve device</description>\n+\t\t<channels>\n+\t\t\t<!-- <channel id=\"contact\" typeId=\"contact-channel\"> <label>Valve as Contact</label> <properties> <property name=\"smartthings-converter\">openCloseControl</property> \n+\t\t\t\t</properties> </channel> -->\n+\t\t\t<channel id=\"valve\" typeId=\"valve-channel\">\n+\t\t\t\t<label>Valve</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Voltage Measurement -->\n+\t<thing-type id=\"voltageMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Voltage Measurement</label>\n+\t\t<description>Get the value of voltage measured from devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage\" typeId=\"voltage-channel\">\n+\t\t\t\t<label>Voltage</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Water Sensor -->\n+\t<thing-type id=\"waterSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Water Sensor</label>\n+\t\t<description>Get the status off of a water sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"water\" typeId=\"water-channel\">\n+\t\t\t\t<label>water</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Window Shade -->\n+\t<thing-type id=\"windowShade\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Window Shade</label>\n+\t\t<description>Window Shade</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"windowShade\" typeId=\"windowShade-channel\">\n+\t\t\t\t<label>windowShade</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\n+\t<!-- ============= -->\n+\t<!-- Channel Types -->\n+\t<!-- ============= -->\n+\t<channel-type id=\"acceleration-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Smartthings Binding Channel</label>\n+\t\t<description>Sample channel for Smartthings Binding</description>\n+\t\t<category>Motion</category>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"active\">Active</option>\n+\t\t\t\t<option value=\"inactive\">Inactive</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"airConditionerMode-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Air Conditioner Mode</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"auto\">Auto</option>\n+\t\t\t\t<option value=\"cool\">Cool</option>\n+\t\t\t\t<option value=\"dry\">Dry</option>\n+\t\t\t\t<option value=\"coolClean\">Cool clean</option>\n+\t\t\t\t<option value=\"dryClean\">Dry clean</option>\n+\t\t\t\t<option value=\"fanOn\">Fan on</option>\n+\t\t\t\t<option value=\"fanAuto\">Fan auto</option>\n+\t\t\t\t<option value=\"fanCirculate\">Fan circulate</option>\n+\t\t\t\t<option value=\"heat\">Heat</option>\n+\t\t\t\t<option value=\"emergencyHeat\">Emergency heat</option>\n+\t\t\t</options>\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1698}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ4ODIxNg==", "bodyText": "Why is this commented out?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435488216", "createdAt": "2020-06-04T19:06:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,2284 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"smartthings\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- The Bridge Type -->\n+\t<bridge-type id=\"smartthings\">\n+\t\t<label>Smartthings Hub</label>\n+\t\t<description>Smartthings Hub V2 that is attached to the same network</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsIp\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP address</label>\n+\t\t\t\t<description>IP address of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsPort\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>IP port number</label>\n+\t\t\t\t<description>Port number of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\n+\t<!-- For all Things the thing-type id must match the Samsung Smartthings Capability Reference field \"Preferences Reference\" \n+\t\twithout the capability. prefix -->\n+\t<!-- And the channel id's must match the Samsung Smartthings Capability Reference field \"attribute\" -->\n+\t<!-- Make sure that additions / removals to this are updated in the SmartthingsBindingConstants.java file -->\n+\t<!-- Thing Types -->\n+\t<thing-type id=\"accelerationSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Acceleration Sensor</label>\n+\t\t<description>Acceleration Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"acceleration\" typeId=\"acceleration-channel\">\n+\t\t\t\t<label>acceleration</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"airConditionerMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Air Conditioner Mode</label>\n+\t\t<description>Air Conditioner Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"airConditionerMode\" typeId=\"airConditionerMode-channel\">\n+\t\t\t\t<label>Air Conditioner Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"alarm\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Alarm</label>\n+\t\t<description>Alarm</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"alarm\" typeId=\"alarm-channel\">\n+\t\t\t\t<label>Alarm</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- TODO: Audio Notification - has no attributes but has commands - not sure how to handle -->\n+\n+\t<thing-type id=\"battery\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Battery status</label>\n+\t\t<description>An indication of the status of the battery</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"battery\" typeId=\"battery-channel\">\n+\t\t\t\t<label>battery</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"beacon\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Beacon</label>\n+\t\t<description>The presence value of the beacon</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"presence\" typeId=\"presence-channel\">\n+\t\t\t\t<label>presence</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"bulb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Bulb</label>\n+\t\t<description>Allows for the control of a bulb device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>bulb</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"button\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Button</label>\n+\t\t<description>Button</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"button\" typeId=\"button-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"carbonDioxideMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>CarbonDioxideMeasurement</label>\n+\t\t<description>Carbon Dioxide Measurement</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"carbonDioxide\" typeId=\"carbonDioxide-channel\">\n+\t\t\t\t<label>CarbonDioxide</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"carbonMonoxideDetector\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>carbonMonoxideDetector</label>\n+\t\t<description>Carbon Monoxide Detector</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"carbonMonoxide\" typeId=\"carbonMonoxide-channel\">\n+\t\t\t\t<label>CarbonMonoxide</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"colorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ColorControl</label>\n+\t\t<description>Color Control</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"hue\" typeId=\"hue-channel\">\n+\t\t\t\t<label>Hue</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- The Smartthings colorControl:hue hsa a range of 0-100% where OH2 uses the normal 0-360 degrees -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">hue100</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"saturation\" typeId=\"saturation-channel\">\n+\t\t\t\t<label>Saturation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"color\" typeId=\"color-channel\">\n+\t\t\t\t<label>Color</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- The Smartthings colorControl:color hsa a hue component range of 0-100% where OH2 uses the normal 0-360 degrees -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">color100</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- This is the new \"proposed\" color control -->\n+\t<thing-type id=\"color\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Color</label>\n+\t\t<description>Color</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"colorValue\" typeId=\"colorValue-channel\">\n+\t\t\t\t<label>Color Value</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- This converter handles both color and colorValue channels -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">color</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"switchlevel\" typeId=\"level-channel\">\n+\t\t\t\t<label>Switch Level</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"colorTemperature\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ColorTemperature</label>\n+\t\t<description>Color Temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"colorTemperature\" typeId=\"colorTemperature-channel\">\n+\t\t\t\t<label>ColorTemperature</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"consumable\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Consumable</label>\n+\t\t<description>Consumable</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"consumable\" typeId=\"consumable-channel\">\n+\t\t\t\t<label>Consumable</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"contactSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Contact sensor</label>\n+\t\t<description>Allows reading the value of a contact sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact-channel\">\n+\t\t\t\t<label>Contact</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"doorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Door control</label>\n+\t\t<description>Allow for the control of a door</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"door\" typeId=\"door-control-channel\">\n+\t\t\t\t<label>Door</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"dryerMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dryer mode</label>\n+\t\t<description>Controls a dryer temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"dryerMode\" typeId=\"dryer-mode-channel\">\n+\t\t\t\t<label>Dryer Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"dryerOperatingState\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dryer operating state</label>\n+\t\t<description>Dryer operating state info</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"machineState\" typeId=\"machine-state-channel\">\n+\t\t\t\t<label>Machine state</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"dryerJobState\" typeId=\"dryer-job-state-channel\">\n+\t\t\t\t<label>Dryer job state</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"completionTime\" typeId=\"completion-time-channel\">\n+\t\t\t\t<label>Completion time</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"energyMeter\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Energy meter</label>\n+\t\t<description>Read the energy consumption of an energy metering device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"energy\" typeId=\"energy-channel\">\n+\t\t\t\t<label>Energy</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Estimated Time Of Arrival -->\n+\t<thing-type id=\"estimatedTimeOfArrival\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>estimatedTimeOfArrival</label>\n+\t\t<description>Estimated Time Of Arrival</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"estimatedTimeOfArrival\" typeId=\"estimatedTimeOfArrival-channel\">\n+\t\t\t\t<label>estimatedTimeOfArrival</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Garage Door Control -->\n+\t<thing-type id=\"garageDoorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Garage Door Control</label>\n+\t\t<description>Garage Door Control</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"door\" typeId=\"door-control-channel\">\n+\t\t\t\t<label>Door</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Holdable Button -->\n+\t<thing-type id=\"holdableButton\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>holdableButton</label>\n+\t\t<description>holdableButton</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"button\" typeId=\"button-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"numberOfButtons\" typeId=\"numberOfButtons-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Illuminance Measurement -->\n+\t<thing-type id=\"illuminanceMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>IlluminanceMeasurement</label>\n+\t\t<description>Illuminance Measurement</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"illuminance\" typeId=\"illuminance-channel\">\n+\t\t\t\t<label>IlluminanceMeasurement</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Image Capture -->\n+\t<thing-type id=\"imageCapture\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ImageCapture</label>\n+\t\t<description>Allows for the capture of an image on devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"imageCapture\" typeId=\"imageCapture-channel\">\n+\t\t\t\t<label>ImageCapture</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Indicator -->\n+\t<thing-type id=\"indicator\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Indicator</label>\n+\t\t<description>The indicator capability gives you the ability to set the indicator LED light on a Z-Wave switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"indicatorStatus\" typeId=\"indicatorStatus-channel\">\n+\t\t\t\t<label>Indicator</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Infrared Level -->\n+\t<thing-type id=\"infraredLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Infrared Level</label>\n+\t\t<description>Allows for the control of the infrared level attribute of a device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"infraredLevel\" typeId=\"infraredLevel-channel\">\n+\t\t\t\t<label>infraredLevel</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Light -->\n+\t<thing-type id=\"light\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Light</label>\n+\t\t<description>Light</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Lock -->\n+\t<thing-type id=\"lock\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Lock</label>\n+\t\t<description>Allow for the control of a lock device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lock\" typeId=\"lock-channel\">\n+\t\t\t\t<label>Lock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Lock Only -->\n+\t<thing-type id=\"lockOnly\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Lock Only</label>\n+\t\t<description>Allow for the lock control of a lock device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lock\" typeId=\"lock-only-channel\">\n+\t\t\t\t<label>Lock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Media controller -->\n+\t<thing-type id=\"mediaController\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Media Controller</label>\n+\t\t<description>Allows for the control of a media controller device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"activities\" typeId=\"activities-channel\">\n+\t\t\t\t<label>Activities</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"currentActivity\" typeId=\"currentActivity-channel\">\n+\t\t\t\t<label>Current Activity</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Motion Sensor -->\n+\t<thing-type id=\"motionSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Motion Sensor</label>\n+\t\t<description>Allows for the ability to read motion sensor device states</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"motion\" typeId=\"motion-channel\">\n+\t\t\t\t<label>motion</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Music Player -->\n+\t<thing-type id=\"musicPlayer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Music Player</label>\n+\t\t<description>Allows for control of a music playing device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"status\" typeId=\"status-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"level\" typeId=\"volumeLevel-channel\">\n+\t\t\t\t<label>level</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"trackDescription\" typeId=\"trackDescription-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"trackData\" typeId=\"trackData-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"mute\" typeId=\"mute-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Outlet -->\n+\t<thing-type id=\"outlet\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Outlet</label>\n+\t\t<description>Allows for the control of an outlet device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Outlet</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- pHMeasurement -->\n+\t<thing-type id=\"pHMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>pH Measurement</label>\n+\t\t<description>Read the pH value off of a pH measurement capable device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"pH\" typeId=\"pH-channel\">\n+\t\t\t\t<label>pH Measurement</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"powerMeter\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Power meter</label>\n+\t\t<description>Allows for reading the power consumption from devices that report it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power-channel\">\n+\t\t\t\t<label>Power</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Power Source -->\n+\t<thing-type id=\"powerSource\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>PowerSource</label>\n+\t\t<description>The current power source for the device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"powerSource\" typeId=\"powerSource-channel\">\n+\t\t\t\t<label>PowerSource</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Presence Sensor -->\n+\t<thing-type id=\"presenceSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>presenceSensor</label>\n+\t\t<description>The ability to see the current status of a presence sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"presence\" typeId=\"presence-channel\">\n+\t\t\t\t<label>presence</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Relative Humidity Measurement -->\n+\t<thing-type id=\"relativeHumidityMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>HumiditySensor</label>\n+\t\t<description>Allow reading the relative humidity from devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity-channel\">\n+\t\t\t\t<label>Humidity</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"relaySwitch\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>RelaySwitch</label>\n+\t\t<description>Relay Switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- shock sensor -->\n+\t<thing-type id=\"shockSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ShockSensor</label>\n+\t\t<description>A Device that senses whether or not there is a shock</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"shock\" typeId=\"shock-channel\">\n+\t\t\t\t<label>shock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Signal Strength -->\n+\t<thing-type id=\"signalStrength\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Signal Strength</label>\n+\t\t<description>Gives the ability to read the signal stregth of Devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lqi\" typeId=\"lqi-channel\">\n+\t\t\t\t<label>LinkQualityIndicator</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi-channel\">\n+\t\t\t\t<label>Received Signal Strength Indication</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sleep sensor -->\n+\t<thing-type id=\"sleepSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>sleepSensor</label>\n+\t\t<description>A Device that senses whether or not someone is sleeping</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sleeping\" typeId=\"sleeping-channel\">\n+\t\t\t\t<label>sleeping value</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- smoke detector -->\n+\t<thing-type id=\"smokeDetector\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Smoke Detector</label>\n+\t\t<description>Measure smoke and optionally carbon monoxide levels</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"smoke\" typeId=\"smoke-channel\">\n+\t\t\t\t<label>Smoke</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"carbonMonoxide\" typeId=\"carbonMonoxide-channel\">\n+\t\t\t\t<label>Smoke</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sound Pressure Level -->\n+\t<thing-type id=\"soundPressureLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Sound Pressure Level</label>\n+\t\t<description>Sound Pressure Level</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"soundPressureLevel\" typeId=\"soundPressureLevel-channel\">\n+\t\t\t\t<label>soundPressureLevel</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sound Sensor -->\n+\t<thing-type id=\"soundSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Sound Sensor</label>\n+\t\t<description>A Device that senses sound</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sound\" typeId=\"sound-channel\">\n+\t\t\t\t<label>Sound Sensor</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Speech Recognition -->\n+\t<thing-type id=\"speechRecognition\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Speech Recognition</label>\n+\t\t<description>Speech Recognition</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"phraseSpoken\" typeId=\"phraseSpoken-channel\">\n+\t\t\t\t<label>Speech Recognition</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Step Sensor -->\n+\t<thing-type id=\"stepSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Step Sensor</label>\n+\t\t<description>A Device that works as a step counter</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"goal\" typeId=\"goal-channel\">\n+\t\t\t\t<label>Step Goal</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"steps\" typeId=\"steps-channel\">\n+\t\t\t\t<label>Current Step Count</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"switch\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Switch</label>\n+\t\t<description>Switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Switch Level -->\n+\t<thing-type id=\"switchLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Switch Level</label>\n+\t\t<description>Allows for the control of the level attribute of a light</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level-channel\">\n+\t\t\t\t<label>Level</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Tamper Alert -->\n+\t<thing-type id=\"tamperAlert\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Tamper Alert</label>\n+\t\t<description>Tamper Alert</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"tamper\" typeId=\"tamper-channel\">\n+\t\t\t\t<label>tamper</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"temperatureMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Temperature</label>\n+\t\t<description>Get the temperature from a Device that reports current temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature-channel\">\n+\t\t\t\t<label>Temperature</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat -->\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat</label>\n+\t\t<description>Allows for the control of a thermostat device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"heatingSetpoint\" typeId=\"heatingSetpoint-channel\">\n+\t\t\t\t<label>Heating Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"coolingSetpoint\" typeId=\"coolingSetpoint-channel\">\n+\t\t\t\t<label>Cooling Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatSetpoint\" typeId=\"thermostatSetpoint-channel\">\n+\t\t\t\t<label>Thermostat Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatMode\" typeId=\"thermostatMode-channel\">\n+\t\t\t\t<label>Thermostat Mode</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatFanMode\" typeId=\"thermostatFanMode-channel\">\n+\t\t\t\t<label>Thermostat Fan Mode</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatOperatingState\" typeId=\"thermostatOperatingState-channel\">\n+\t\t\t\t<label>thermostatOperatingState</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Cooling Setpoint -->\n+\t<thing-type id=\"thermostatCoolingSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Cooling Setpoint</label>\n+\t\t<description>Thermostat Cooling Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"coolingSetpoint\" typeId=\"coolingSetpoint-channel\">\n+\t\t\t\t<label>Cooling Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Fan Mode -->\n+\t<thing-type id=\"thermostatFanMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Fan Mode</label>\n+\t\t<description>Thermostat Fan Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatFanMode\" typeId=\"thermostatFanMode-channel\">\n+\t\t\t\t<label>Thermostat Fan Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Heating Setpoint -->\n+\t<thing-type id=\"thermostatHeatingSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Heating Setpoint</label>\n+\t\t<description>Thermostat Heating Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"heatingSetpoint\" typeId=\"heatingSetpoint-channel\">\n+\t\t\t\t<label>Heating Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Mode -->\n+\t<thing-type id=\"thermostatMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Mode</label>\n+\t\t<description>Thermostat Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatMode\" typeId=\"thermostatMode-channel\">\n+\t\t\t\t<label>Thermostat Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Operating State -->\n+\t<thing-type id=\"thermostatOperatingState\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Operating State</label>\n+\t\t<description>Thermostat Operating State</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatOperatingState\" typeId=\"thermostatOperatingState-channel\">\n+\t\t\t\t<label>thermostatOperatingState</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Setpoint -->\n+\t<thing-type id=\"thermostatSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Setpoint</label>\n+\t\t<description>Thermostat Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatSetpoint\" typeId=\"thermostatSetpoint-channel\">\n+\t\t\t\t<label>Thermostat Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"threeAxis\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Three Axis</label>\n+\t\t<description>Gives the three axis coordinates for devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"threeAxis\" typeId=\"three-axis-channel\">\n+\t\t\t\t<label>Three axis</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Timed Session -->\n+\t<thing-type id=\"timedSession\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Timed Session</label>\n+\t\t<description>Timed Session</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sessionStatus\" typeId=\"sessionStatus-channel\">\n+\t\t\t\t<label>Session Status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"timeRemaining\" typeId=\"timeRemaining-channel\">\n+\t\t\t\t<label>Time Remaining</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Touch Sensor -->\n+\t<thing-type id=\"touchSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Touch Sensor</label>\n+\t\t<description>Touch Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"touch\" typeId=\"touch-channel\">\n+\t\t\t\t<label>touch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Ultraviolet Index -->\n+\t<thing-type id=\"ultravioletIndex\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Ultraviolet Index</label>\n+\t\t<description>Gives the ability to get the ultraviolet index from devices that report it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"ultravioletIndex\" typeId=\"ultravioletIndex-channel\">\n+\t\t\t\t<label>Ultraviolet Index</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Valve -->\n+\t<thing-type id=\"valve\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Valve</label>\n+\t\t<description>Allows for the control of a valve device</description>\n+\t\t<channels>\n+\t\t\t<!-- <channel id=\"contact\" typeId=\"contact-channel\"> <label>Valve as Contact</label> <properties> <property name=\"smartthings-converter\">openCloseControl</property> \n+\t\t\t\t</properties> </channel> -->\n+\t\t\t<channel id=\"valve\" typeId=\"valve-channel\">\n+\t\t\t\t<label>Valve</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Voltage Measurement -->\n+\t<thing-type id=\"voltageMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Voltage Measurement</label>\n+\t\t<description>Get the value of voltage measured from devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage\" typeId=\"voltage-channel\">\n+\t\t\t\t<label>Voltage</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Water Sensor -->\n+\t<thing-type id=\"waterSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Water Sensor</label>\n+\t\t<description>Get the status off of a water sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"water\" typeId=\"water-channel\">\n+\t\t\t\t<label>water</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Window Shade -->\n+\t<thing-type id=\"windowShade\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Window Shade</label>\n+\t\t<description>Window Shade</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"windowShade\" typeId=\"windowShade-channel\">\n+\t\t\t\t<label>windowShade</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\n+\t<!-- ============= -->\n+\t<!-- Channel Types -->\n+\t<!-- ============= -->\n+\t<channel-type id=\"acceleration-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Smartthings Binding Channel</label>\n+\t\t<description>Sample channel for Smartthings Binding</description>\n+\t\t<category>Motion</category>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"active\">Active</option>\n+\t\t\t\t<option value=\"inactive\">Inactive</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"airConditionerMode-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Air Conditioner Mode</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"auto\">Auto</option>\n+\t\t\t\t<option value=\"cool\">Cool</option>\n+\t\t\t\t<option value=\"dry\">Dry</option>\n+\t\t\t\t<option value=\"coolClean\">Cool clean</option>\n+\t\t\t\t<option value=\"dryClean\">Dry clean</option>\n+\t\t\t\t<option value=\"fanOn\">Fan on</option>\n+\t\t\t\t<option value=\"fanAuto\">Fan auto</option>\n+\t\t\t\t<option value=\"fanCirculate\">Fan circulate</option>\n+\t\t\t\t<option value=\"heat\">Heat</option>\n+\t\t\t\t<option value=\"emergencyHeat\">Emergency heat</option>\n+\t\t\t</options>\n+\n+\n+\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"alarm-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Alarm</label>\n+\t\t<category>Alarm</category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"both\">Both</option>\n+\t\t\t\t<option value=\"off\">Off</option>\n+\t\t\t\t<option value=\"siren\">Siren</option>\n+\t\t\t\t<option value=\"strobe\">Strobe</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"battery-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Battery</label>\n+\t\t<category>Battery</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"contact-channel\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Contact</label>\n+\t\t<category>contact</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"button-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Button</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"pushed\">Pushed</option>\n+\t\t\t\t<option value=\"held\">Held</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"carbonDioxide-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>carbon Dioxide</label>\n+\t\t<category>CarbonDioxide</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"carbonMonoxide-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Carbon Monoxide</label>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"clear\">Clear</option>\n+\t\t\t\t<option value=\"detected\">Detected</option>\n+\t\t\t\t<option value=\"tested\">Test button activated</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"hue-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>hue</label>\n+\t\t<category>Color</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"saturation-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>saturation</label>\n+\t\t<category>Color</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"color-channel\">\n+\t\t<item-type>Color</item-type>\n+\t\t<label>color</label>\n+\t\t<category>Color</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"colorValue-channel\">\n+\t\t<item-type>Color</item-type>\n+\t\t<label>color value</label>\n+\t\t<category>Color</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"colorTemperature-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Color Temperature</label>\n+\t\t<category>ColorLight</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"consumable-channel\">\n+\t\t<!-- For now assume that this will work for both the consumableStatus setConsumableStatus -->\n+\t\t<item-type>String</item-type>\n+\t\t<label>Consumable status</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"good\">Good</option>\n+\t\t\t\t<option value=\"maintenance_required\">Maintenance required</option>\n+\t\t\t\t<option value=\"missing\">Missing</option>\n+\t\t\t\t<option value=\"order\">Order</option>\n+\t\t\t\t<option value=\"replace\">Replace</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"door-control-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Door status</label>\n+\t\t<category>Door</category>\n+\t\t<!-- <state readOnly=\"true\" pattern=\"%s\"> <options> <option value=\"closed\">Closed</option> <option value=\"closing\">Closing</option> \n+\t\t\t<option value=\"open\">Open</option> <option value=\"opening\">Opening</option> <option value=\"unknown\">Unknown</option> </options> \n+\t\t\t</state> -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1808}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5MzU1Nw==", "bodyText": "Did you think about using Rollershutter here?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435493557", "createdAt": "2020-06-04T19:17:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,2284 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"smartthings\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- The Bridge Type -->\n+\t<bridge-type id=\"smartthings\">\n+\t\t<label>Smartthings Hub</label>\n+\t\t<description>Smartthings Hub V2 that is attached to the same network</description>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsIp\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP address</label>\n+\t\t\t\t<description>IP address of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsPort\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>IP port number</label>\n+\t\t\t\t<description>Port number of the Smartthings Hub</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\n+\t<!-- For all Things the thing-type id must match the Samsung Smartthings Capability Reference field \"Preferences Reference\" \n+\t\twithout the capability. prefix -->\n+\t<!-- And the channel id's must match the Samsung Smartthings Capability Reference field \"attribute\" -->\n+\t<!-- Make sure that additions / removals to this are updated in the SmartthingsBindingConstants.java file -->\n+\t<!-- Thing Types -->\n+\t<thing-type id=\"accelerationSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Acceleration Sensor</label>\n+\t\t<description>Acceleration Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"acceleration\" typeId=\"acceleration-channel\">\n+\t\t\t\t<label>acceleration</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"airConditionerMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Air Conditioner Mode</label>\n+\t\t<description>Air Conditioner Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"airConditionerMode\" typeId=\"airConditionerMode-channel\">\n+\t\t\t\t<label>Air Conditioner Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"alarm\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Alarm</label>\n+\t\t<description>Alarm</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"alarm\" typeId=\"alarm-channel\">\n+\t\t\t\t<label>Alarm</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- TODO: Audio Notification - has no attributes but has commands - not sure how to handle -->\n+\n+\t<thing-type id=\"battery\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Battery status</label>\n+\t\t<description>An indication of the status of the battery</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"battery\" typeId=\"battery-channel\">\n+\t\t\t\t<label>battery</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"beacon\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Beacon</label>\n+\t\t<description>The presence value of the beacon</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"presence\" typeId=\"presence-channel\">\n+\t\t\t\t<label>presence</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"bulb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Bulb</label>\n+\t\t<description>Allows for the control of a bulb device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>bulb</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"button\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Button</label>\n+\t\t<description>Button</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"button\" typeId=\"button-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"carbonDioxideMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>CarbonDioxideMeasurement</label>\n+\t\t<description>Carbon Dioxide Measurement</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"carbonDioxide\" typeId=\"carbonDioxide-channel\">\n+\t\t\t\t<label>CarbonDioxide</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"carbonMonoxideDetector\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>carbonMonoxideDetector</label>\n+\t\t<description>Carbon Monoxide Detector</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"carbonMonoxide\" typeId=\"carbonMonoxide-channel\">\n+\t\t\t\t<label>CarbonMonoxide</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"colorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ColorControl</label>\n+\t\t<description>Color Control</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"hue\" typeId=\"hue-channel\">\n+\t\t\t\t<label>Hue</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- The Smartthings colorControl:hue hsa a range of 0-100% where OH2 uses the normal 0-360 degrees -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">hue100</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"saturation\" typeId=\"saturation-channel\">\n+\t\t\t\t<label>Saturation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"color\" typeId=\"color-channel\">\n+\t\t\t\t<label>Color</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- The Smartthings colorControl:color hsa a hue component range of 0-100% where OH2 uses the normal 0-360 degrees -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">color100</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- This is the new \"proposed\" color control -->\n+\t<thing-type id=\"color\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Color</label>\n+\t\t<description>Color</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"colorValue\" typeId=\"colorValue-channel\">\n+\t\t\t\t<label>Color Value</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<!-- This converter handles both color and colorValue channels -->\n+\t\t\t\t\t<property name=\"smartthings-converter\">color</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"switchlevel\" typeId=\"level-channel\">\n+\t\t\t\t<label>Switch Level</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"colorTemperature\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ColorTemperature</label>\n+\t\t<description>Color Temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"colorTemperature\" typeId=\"colorTemperature-channel\">\n+\t\t\t\t<label>ColorTemperature</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"consumable\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Consumable</label>\n+\t\t<description>Consumable</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"consumable\" typeId=\"consumable-channel\">\n+\t\t\t\t<label>Consumable</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"contactSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Contact sensor</label>\n+\t\t<description>Allows reading the value of a contact sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact-channel\">\n+\t\t\t\t<label>Contact</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"doorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Door control</label>\n+\t\t<description>Allow for the control of a door</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"door\" typeId=\"door-control-channel\">\n+\t\t\t\t<label>Door</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"dryerMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dryer mode</label>\n+\t\t<description>Controls a dryer temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"dryerMode\" typeId=\"dryer-mode-channel\">\n+\t\t\t\t<label>Dryer Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"dryerOperatingState\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dryer operating state</label>\n+\t\t<description>Dryer operating state info</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"machineState\" typeId=\"machine-state-channel\">\n+\t\t\t\t<label>Machine state</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"dryerJobState\" typeId=\"dryer-job-state-channel\">\n+\t\t\t\t<label>Dryer job state</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"completionTime\" typeId=\"completion-time-channel\">\n+\t\t\t\t<label>Completion time</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"energyMeter\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Energy meter</label>\n+\t\t<description>Read the energy consumption of an energy metering device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"energy\" typeId=\"energy-channel\">\n+\t\t\t\t<label>Energy</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Estimated Time Of Arrival -->\n+\t<thing-type id=\"estimatedTimeOfArrival\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>estimatedTimeOfArrival</label>\n+\t\t<description>Estimated Time Of Arrival</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"estimatedTimeOfArrival\" typeId=\"estimatedTimeOfArrival-channel\">\n+\t\t\t\t<label>estimatedTimeOfArrival</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Garage Door Control -->\n+\t<thing-type id=\"garageDoorControl\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Garage Door Control</label>\n+\t\t<description>Garage Door Control</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"door\" typeId=\"door-control-channel\">\n+\t\t\t\t<label>Door</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Holdable Button -->\n+\t<thing-type id=\"holdableButton\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>holdableButton</label>\n+\t\t<description>holdableButton</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"button\" typeId=\"button-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"numberOfButtons\" typeId=\"numberOfButtons-channel\">\n+\t\t\t\t<label>Button</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Illuminance Measurement -->\n+\t<thing-type id=\"illuminanceMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>IlluminanceMeasurement</label>\n+\t\t<description>Illuminance Measurement</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"illuminance\" typeId=\"illuminance-channel\">\n+\t\t\t\t<label>IlluminanceMeasurement</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Image Capture -->\n+\t<thing-type id=\"imageCapture\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ImageCapture</label>\n+\t\t<description>Allows for the capture of an image on devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"imageCapture\" typeId=\"imageCapture-channel\">\n+\t\t\t\t<label>ImageCapture</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Indicator -->\n+\t<thing-type id=\"indicator\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Indicator</label>\n+\t\t<description>The indicator capability gives you the ability to set the indicator LED light on a Z-Wave switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"indicatorStatus\" typeId=\"indicatorStatus-channel\">\n+\t\t\t\t<label>Indicator</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Infrared Level -->\n+\t<thing-type id=\"infraredLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Infrared Level</label>\n+\t\t<description>Allows for the control of the infrared level attribute of a device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"infraredLevel\" typeId=\"infraredLevel-channel\">\n+\t\t\t\t<label>infraredLevel</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Light -->\n+\t<thing-type id=\"light\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Light</label>\n+\t\t<description>Light</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Lock -->\n+\t<thing-type id=\"lock\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Lock</label>\n+\t\t<description>Allow for the control of a lock device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lock\" typeId=\"lock-channel\">\n+\t\t\t\t<label>Lock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Lock Only -->\n+\t<thing-type id=\"lockOnly\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Lock Only</label>\n+\t\t<description>Allow for the lock control of a lock device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lock\" typeId=\"lock-only-channel\">\n+\t\t\t\t<label>Lock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Media controller -->\n+\t<thing-type id=\"mediaController\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Media Controller</label>\n+\t\t<description>Allows for the control of a media controller device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"activities\" typeId=\"activities-channel\">\n+\t\t\t\t<label>Activities</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"currentActivity\" typeId=\"currentActivity-channel\">\n+\t\t\t\t<label>Current Activity</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Motion Sensor -->\n+\t<thing-type id=\"motionSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Motion Sensor</label>\n+\t\t<description>Allows for the ability to read motion sensor device states</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"motion\" typeId=\"motion-channel\">\n+\t\t\t\t<label>motion</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Music Player -->\n+\t<thing-type id=\"musicPlayer\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Music Player</label>\n+\t\t<description>Allows for control of a music playing device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"status\" typeId=\"status-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"level\" typeId=\"volumeLevel-channel\">\n+\t\t\t\t<label>level</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"trackDescription\" typeId=\"trackDescription-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"trackData\" typeId=\"trackData-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"mute\" typeId=\"mute-channel\">\n+\t\t\t\t<label>status</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Outlet -->\n+\t<thing-type id=\"outlet\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Outlet</label>\n+\t\t<description>Allows for the control of an outlet device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Outlet</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- pHMeasurement -->\n+\t<thing-type id=\"pHMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>pH Measurement</label>\n+\t\t<description>Read the pH value off of a pH measurement capable device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"pH\" typeId=\"pH-channel\">\n+\t\t\t\t<label>pH Measurement</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"powerMeter\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Power meter</label>\n+\t\t<description>Allows for reading the power consumption from devices that report it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power-channel\">\n+\t\t\t\t<label>Power</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Power Source -->\n+\t<thing-type id=\"powerSource\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>PowerSource</label>\n+\t\t<description>The current power source for the device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"powerSource\" typeId=\"powerSource-channel\">\n+\t\t\t\t<label>PowerSource</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Presence Sensor -->\n+\t<thing-type id=\"presenceSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>presenceSensor</label>\n+\t\t<description>The ability to see the current status of a presence sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"presence\" typeId=\"presence-channel\">\n+\t\t\t\t<label>presence</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Relative Humidity Measurement -->\n+\t<thing-type id=\"relativeHumidityMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>HumiditySensor</label>\n+\t\t<description>Allow reading the relative humidity from devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity-channel\">\n+\t\t\t\t<label>Humidity</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"relaySwitch\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>RelaySwitch</label>\n+\t\t<description>Relay Switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- shock sensor -->\n+\t<thing-type id=\"shockSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>ShockSensor</label>\n+\t\t<description>A Device that senses whether or not there is a shock</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"shock\" typeId=\"shock-channel\">\n+\t\t\t\t<label>shock</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Signal Strength -->\n+\t<thing-type id=\"signalStrength\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Signal Strength</label>\n+\t\t<description>Gives the ability to read the signal stregth of Devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"lqi\" typeId=\"lqi-channel\">\n+\t\t\t\t<label>LinkQualityIndicator</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rssi\" typeId=\"rssi-channel\">\n+\t\t\t\t<label>Received Signal Strength Indication</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sleep sensor -->\n+\t<thing-type id=\"sleepSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>sleepSensor</label>\n+\t\t<description>A Device that senses whether or not someone is sleeping</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sleeping\" typeId=\"sleeping-channel\">\n+\t\t\t\t<label>sleeping value</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- smoke detector -->\n+\t<thing-type id=\"smokeDetector\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Smoke Detector</label>\n+\t\t<description>Measure smoke and optionally carbon monoxide levels</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"smoke\" typeId=\"smoke-channel\">\n+\t\t\t\t<label>Smoke</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"carbonMonoxide\" typeId=\"carbonMonoxide-channel\">\n+\t\t\t\t<label>Smoke</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sound Pressure Level -->\n+\t<thing-type id=\"soundPressureLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Sound Pressure Level</label>\n+\t\t<description>Sound Pressure Level</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"soundPressureLevel\" typeId=\"soundPressureLevel-channel\">\n+\t\t\t\t<label>soundPressureLevel</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Sound Sensor -->\n+\t<thing-type id=\"soundSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Sound Sensor</label>\n+\t\t<description>A Device that senses sound</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sound\" typeId=\"sound-channel\">\n+\t\t\t\t<label>Sound Sensor</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Speech Recognition -->\n+\t<thing-type id=\"speechRecognition\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Speech Recognition</label>\n+\t\t<description>Speech Recognition</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"phraseSpoken\" typeId=\"phraseSpoken-channel\">\n+\t\t\t\t<label>Speech Recognition</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Step Sensor -->\n+\t<thing-type id=\"stepSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Step Sensor</label>\n+\t\t<description>A Device that works as a step counter</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"goal\" typeId=\"goal-channel\">\n+\t\t\t\t<label>Step Goal</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"steps\" typeId=\"steps-channel\">\n+\t\t\t\t<label>Current Step Count</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"switch\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Switch</label>\n+\t\t<description>Switch</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Switch Level -->\n+\t<thing-type id=\"switchLevel\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Switch Level</label>\n+\t\t<description>Allows for the control of the level attribute of a light</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level-channel\">\n+\t\t\t\t<label>Level</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"switch\" typeId=\"switch-channel\">\n+\t\t\t\t<label>Switch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Tamper Alert -->\n+\t<thing-type id=\"tamperAlert\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Tamper Alert</label>\n+\t\t<description>Tamper Alert</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"tamper\" typeId=\"tamper-channel\">\n+\t\t\t\t<label>tamper</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\t<thing-type id=\"temperatureMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Temperature</label>\n+\t\t<description>Get the temperature from a Device that reports current temperature</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature-channel\">\n+\t\t\t\t<label>Temperature</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat -->\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat</label>\n+\t\t<description>Allows for the control of a thermostat device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"heatingSetpoint\" typeId=\"heatingSetpoint-channel\">\n+\t\t\t\t<label>Heating Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"coolingSetpoint\" typeId=\"coolingSetpoint-channel\">\n+\t\t\t\t<label>Cooling Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatSetpoint\" typeId=\"thermostatSetpoint-channel\">\n+\t\t\t\t<label>Thermostat Setpoint</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatMode\" typeId=\"thermostatMode-channel\">\n+\t\t\t\t<label>Thermostat Mode</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatFanMode\" typeId=\"thermostatFanMode-channel\">\n+\t\t\t\t<label>Thermostat Fan Mode</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"thermostatOperatingState\" typeId=\"thermostatOperatingState-channel\">\n+\t\t\t\t<label>thermostatOperatingState</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Cooling Setpoint -->\n+\t<thing-type id=\"thermostatCoolingSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Cooling Setpoint</label>\n+\t\t<description>Thermostat Cooling Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"coolingSetpoint\" typeId=\"coolingSetpoint-channel\">\n+\t\t\t\t<label>Cooling Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Fan Mode -->\n+\t<thing-type id=\"thermostatFanMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Fan Mode</label>\n+\t\t<description>Thermostat Fan Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatFanMode\" typeId=\"thermostatFanMode-channel\">\n+\t\t\t\t<label>Thermostat Fan Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Heating Setpoint -->\n+\t<thing-type id=\"thermostatHeatingSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Heating Setpoint</label>\n+\t\t<description>Thermostat Heating Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"heatingSetpoint\" typeId=\"heatingSetpoint-channel\">\n+\t\t\t\t<label>Heating Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Mode -->\n+\t<thing-type id=\"thermostatMode\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Mode</label>\n+\t\t<description>Thermostat Mode</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatMode\" typeId=\"thermostatMode-channel\">\n+\t\t\t\t<label>Thermostat Mode</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Operating State -->\n+\t<thing-type id=\"thermostatOperatingState\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Operating State</label>\n+\t\t<description>Thermostat Operating State</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatOperatingState\" typeId=\"thermostatOperatingState-channel\">\n+\t\t\t\t<label>thermostatOperatingState</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Thermostat Setpoint -->\n+\t<thing-type id=\"thermostatSetpoint\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Thermostat Setpoint</label>\n+\t\t<description>Thermostat Setpoint</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"thermostatSetpoint\" typeId=\"thermostatSetpoint-channel\">\n+\t\t\t\t<label>Thermostat Setpoint</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"threeAxis\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Three Axis</label>\n+\t\t<description>Gives the three axis coordinates for devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"threeAxis\" typeId=\"three-axis-channel\">\n+\t\t\t\t<label>Three axis</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Timed Session -->\n+\t<thing-type id=\"timedSession\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Timed Session</label>\n+\t\t<description>Timed Session</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sessionStatus\" typeId=\"sessionStatus-channel\">\n+\t\t\t\t<label>Session Status</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"timeRemaining\" typeId=\"timeRemaining-channel\">\n+\t\t\t\t<label>Time Remaining</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Touch Sensor -->\n+\t<thing-type id=\"touchSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Touch Sensor</label>\n+\t\t<description>Touch Sensor</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"touch\" typeId=\"touch-channel\">\n+\t\t\t\t<label>touch</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Ultraviolet Index -->\n+\t<thing-type id=\"ultravioletIndex\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Ultraviolet Index</label>\n+\t\t<description>Gives the ability to get the ultraviolet index from devices that report it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"ultravioletIndex\" typeId=\"ultravioletIndex-channel\">\n+\t\t\t\t<label>Ultraviolet Index</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Valve -->\n+\t<thing-type id=\"valve\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Valve</label>\n+\t\t<description>Allows for the control of a valve device</description>\n+\t\t<channels>\n+\t\t\t<!-- <channel id=\"contact\" typeId=\"contact-channel\"> <label>Valve as Contact</label> <properties> <property name=\"smartthings-converter\">openCloseControl</property> \n+\t\t\t\t</properties> </channel> -->\n+\t\t\t<channel id=\"valve\" typeId=\"valve-channel\">\n+\t\t\t\t<label>Valve</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Voltage Measurement -->\n+\t<thing-type id=\"voltageMeasurement\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Voltage Measurement</label>\n+\t\t<description>Get the value of voltage measured from devices that support it</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage\" typeId=\"voltage-channel\">\n+\t\t\t\t<label>Voltage</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Water Sensor -->\n+\t<thing-type id=\"waterSensor\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Water Sensor</label>\n+\t\t<description>Get the status off of a water sensor device</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"water\" typeId=\"water-channel\">\n+\t\t\t\t<label>water</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Window Shade -->\n+\t<thing-type id=\"windowShade\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"smartthings\" />\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Window Shade</label>\n+\t\t<description>Window Shade</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"windowShade\" typeId=\"windowShade-channel\">\n+\t\t\t\t<label>windowShade</label>\n+\t\t\t\t<properties>\n+\t\t\t\t\t<property name=\"smartthings-converter\">openCloseControl</property>\n+\t\t\t\t</properties>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"smartthingsName\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Smartthings Name</label>\n+\t\t\t\t<description>User assigned Smartthings device name</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"smartthingsLocation\" type=\"text\">\n+\t\t\t\t<label>Smartthings Location</label>\n+\t\t\t\t<description>Where the device is located</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\n+\n+\t<!-- ============= -->\n+\t<!-- Channel Types -->\n+\t<!-- ============= -->\n+\t<channel-type id=\"acceleration-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Smartthings Binding Channel</label>\n+\t\t<description>Sample channel for Smartthings Binding</description>\n+\t\t<category>Motion</category>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"active\">Active</option>\n+\t\t\t\t<option value=\"inactive\">Inactive</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"airConditionerMode-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Air Conditioner Mode</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"auto\">Auto</option>\n+\t\t\t\t<option value=\"cool\">Cool</option>\n+\t\t\t\t<option value=\"dry\">Dry</option>\n+\t\t\t\t<option value=\"coolClean\">Cool clean</option>\n+\t\t\t\t<option value=\"dryClean\">Dry clean</option>\n+\t\t\t\t<option value=\"fanOn\">Fan on</option>\n+\t\t\t\t<option value=\"fanAuto\">Fan auto</option>\n+\t\t\t\t<option value=\"fanCirculate\">Fan circulate</option>\n+\t\t\t\t<option value=\"heat\">Heat</option>\n+\t\t\t\t<option value=\"emergencyHeat\">Emergency heat</option>\n+\t\t\t</options>\n+\n+\n+\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"alarm-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Alarm</label>\n+\t\t<category>Alarm</category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"both\">Both</option>\n+\t\t\t\t<option value=\"off\">Off</option>\n+\t\t\t\t<option value=\"siren\">Siren</option>\n+\t\t\t\t<option value=\"strobe\">Strobe</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"battery-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Battery</label>\n+\t\t<category>Battery</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"contact-channel\">\n+\t\t<item-type>Contact</item-type>\n+\t\t<label>Contact</label>\n+\t\t<category>contact</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"button-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Button</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"pushed\">Pushed</option>\n+\t\t\t\t<option value=\"held\">Held</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"carbonDioxide-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>carbon Dioxide</label>\n+\t\t<category>CarbonDioxide</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"carbonMonoxide-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Carbon Monoxide</label>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"clear\">Clear</option>\n+\t\t\t\t<option value=\"detected\">Detected</option>\n+\t\t\t\t<option value=\"tested\">Test button activated</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"hue-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>hue</label>\n+\t\t<category>Color</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"saturation-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>saturation</label>\n+\t\t<category>Color</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"color-channel\">\n+\t\t<item-type>Color</item-type>\n+\t\t<label>color</label>\n+\t\t<category>Color</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"colorValue-channel\">\n+\t\t<item-type>Color</item-type>\n+\t\t<label>color value</label>\n+\t\t<category>Color</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"colorTemperature-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Color Temperature</label>\n+\t\t<category>ColorLight</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"consumable-channel\">\n+\t\t<!-- For now assume that this will work for both the consumableStatus setConsumableStatus -->\n+\t\t<item-type>String</item-type>\n+\t\t<label>Consumable status</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"good\">Good</option>\n+\t\t\t\t<option value=\"maintenance_required\">Maintenance required</option>\n+\t\t\t\t<option value=\"missing\">Missing</option>\n+\t\t\t\t<option value=\"order\">Order</option>\n+\t\t\t\t<option value=\"replace\">Replace</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"door-control-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Door status</label>\n+\t\t<category>Door</category>\n+\t\t<!-- <state readOnly=\"true\" pattern=\"%s\"> <options> <option value=\"closed\">Closed</option> <option value=\"closing\">Closing</option> \n+\t\t\t<option value=\"open\">Open</option> <option value=\"opening\">Opening</option> <option value=\"unknown\">Unknown</option> </options> \n+\t\t\t</state> -->\n+\t</channel-type>\n+\n+\t<channel-type id=\"dryer-mode-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Dryer temperature</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"regular\">Regular</option>\n+\t\t\t\t<option value=\"lowHeat\">Low heat</option>\n+\t\t\t\t<option value=\"highHeat\">High heat</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"dryer-job-state-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Dryer job state</label>\n+\t</channel-type>\n+\n+\t<channel-type id=\"machine-state-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Machine operating state</label>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"pause\">Pause</option>\n+\t\t\t\t<option value=\"run\">Run</option>\n+\t\t\t\t<option value=\"stop\">Stop</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Energy</label>\n+\t\t<category>Energy</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power</label>\n+\t\t<category>Energy</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"estimatedTimeOfArrival-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Estimated Time Of Arrival</label>\n+\t</channel-type>\n+\n+\t<channel-type id=\"numberOfButtons-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Number Of Buttons</label>\n+\t</channel-type>\n+\n+\t<channel-type id=\"illuminance-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>illuminance</label>\n+\t</channel-type>\n+\n+\t<channel-type id=\"imageCapture-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Image Capture</label>\n+\t\t<category>Recorder</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"indicatorStatus-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Indicator status</label>\n+\t\t<category>Light</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"infraredLevel-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current infrared light level</label>\n+\t\t<category>Light</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"lock-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Lock state</label>\n+\t\t<category></category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"locked\">Locked</option>\n+\t\t\t\t<option value=\"unknown\">Unknown</option>\n+\t\t\t\t<option value=\"unlocked\">Unlocked</option>\n+\t\t\t\t<option value=\"unlocked with timeout\">Unlocked with timeout</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"lock-only-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Lock state</label>\n+\t\t<category></category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"locked\">Locked</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"activities-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Media activity</label>\n+\t\t<category>Player</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"currentActivity-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Current media activity</label>\n+\t\t<category>Player</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"motion-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Motion sensor</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"active\">Active</option>\n+\t\t\t\t<option value=\"inactive\">Inactive</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"status-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Current status</label>\n+\t\t<category>Player</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"level-channel\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Light level</label>\n+\t\t<category>DimmableLight</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"volumeLevel-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Volume level</label>\n+\t\t<category>SoundVolume</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"trackDescription-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Description of current track</label>\n+\t\t<category>Player</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"trackData-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Track data</label>\n+\t\t<category>Player</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"mute-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Mute</label>\n+\t\t<category>Player</category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"muted\">Muted</option>\n+\t\t\t\t<option value=\"unmuted\">Unmuted</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"pH-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>pH level</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"powerSource-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Power source</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"battery\">Battery power</option>\n+\t\t\t\t<option value=\"dc\">DC power</option>\n+\t\t\t\t<option value=\"mains\">AC power</option>\n+\t\t\t\t<option value=\"unknown\">Unknown</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"presence-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Presence</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"not present\">Not present</option>\n+\t\t\t\t<option value=\"present\">Present</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Relative humidity</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"shock-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Shock</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"clear\">Clear</option>\n+\t\t\t\t<option value=\"detected\">Detected</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"lqi-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Link quality indication</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"rssi-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Received signal strength indication</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"sleeping-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Sleeping</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"not sleeping\">Not sleeping</option>\n+\t\t\t\t<option value=\"sleeping\">Sleeping</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"smoke-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Smoke</label>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"clear\">Clear</option>\n+\t\t\t\t<option value=\"detected\">Detected</option>\n+\t\t\t\t<option value=\"tested\">Test button activated</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"soundPressureLevel-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Sound pressure level</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"sound-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Sound detected</label>\n+\t\t<state readOnly=\"true\" pattern=\"%s\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"detected\">Detected</option>\n+\t\t\t\t<option value=\"not_detected\">Not detected</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"phraseSpoken-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Spoken phrase</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"goal-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current step goal</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"steps-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current step count</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"switch-channel\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Switch</label>\n+\t\t<description>This is a switch</description>\n+\t\t<category>switch</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"tamper-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Tamper alert sensor</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"clear\">Clear</option>\n+\t\t\t\t<option value=\"detected\">Detected</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current temperature</label>\n+\t\t<category>Temperature</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"heatingSetpoint-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Heating setpoint</label>\n+\t\t<category>Temperature</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"coolingSetpoint-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cooling setpoint</label>\n+\t\t<category>Temperature</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"thermostatSetpoint-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current setpoint</label>\n+\t\t<category>Temperature</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"thermostatMode-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Thermostat mode</label>\n+\t\t<category>Temperature</category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"auto\">Auto</option>\n+\t\t\t\t<option value=\"eco\">Eco</option>\n+\t\t\t\t<option value=\"cool\">Cool</option>\n+\t\t\t\t<option value=\"heat\">Heat</option>\n+\t\t\t\t<option value=\"emergency heat\">Emergency heat</option>\n+\t\t\t\t<option value=\"rush hourheat\">Rush hour</option>\n+\t\t\t\t<option value=\"off\">Off</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"thermostatFanMode-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Fan mode</label>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"auto\">Auto</option>\n+\t\t\t\t<option value=\"circulate\">Circulate</option>\n+\t\t\t\t<option value=\"on\">On</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"thermostatOperatingState-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Operating state</label>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"cooling\">Cooling</option>\n+\t\t\t\t<option value=\"fan only\">Fan only</option>\n+\t\t\t\t<option value=\"heating\">Heating</option>\n+\t\t\t\t<option value=\"idle\">Idle</option>\n+\t\t\t\t<option value=\"pending cool\">Pending cool</option>\n+\t\t\t\t<option value=\"pending heat\">Pending heat</option>\n+\t\t\t\t<option value=\"vent economizer\">Vent economizer</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"timeRemaining-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Time remaining</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"completion-time-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Completion time</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"three-axis-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Three axis channel</label>\n+\t\t<description>This string contains the x, y, z coordinates</description>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"sessionStatus-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Timed session status</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"canceled\">Canceled</option>\n+\t\t\t\t<option value=\"paused\">Paused</option>\n+\t\t\t\t<option value=\"running\">Running</option>\n+\t\t\t\t<option value=\"stopped\">Stopped</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"touch-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Device touched, or not</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"touched\">Touched</option>\n+\t\t\t\t<option value=\"\">Not touched</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"ultravioletIndex-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Ultraviolet Index</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"valve-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Valve status</label>\n+\t\t<category></category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"closed\">Closed</option>\n+\t\t\t\t<option value=\"open\">Open</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"voltage-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage measurement</label>\n+\t\t<category></category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"water-channel\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Water sensor</label>\n+\t\t<category></category>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"dry\">Dry</option>\n+\t\t\t\t<option value=\"wet\">Wet</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"windowShade-channel\">\n+\t\t<item-type>String</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 2269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5NDYxNw==", "bodyText": "Can you remove this formatting from your PR?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435494617", "createdAt": "2020-06-04T19:19:03Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -1,6 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5NDgzMQ==", "bodyText": "Is this file part of the PR by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435494831", "createdAt": "2020-06-04T19:19:31Z", "author": {"login": "fwolter"}, "path": "features/.project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNDM1Ng==", "bodyText": "The handler object can be re-used after configuration updates. So, to have the most recent configuration stored in config, it should be retrieved in initialize(), which is invoked on every config update.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435504356", "createdAt": "2020-06-04T19:38:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwODM5NA==", "bodyText": "If I see correctly, in this method, the configuration is validated. This is already done in initialize(). Does this method has any other purpose?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435508394", "createdAt": "2020-06-04T19:46:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.info(\"Attempt to send command to the Smartthings hub failed with exception\", e);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.debug(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+\n+        // Output timing information\n+        long openHabTime = (stateData.openHabStartTime > 0) ? System.currentTimeMillis() - stateData.openHabStartTime\n+                : 0;\n+        logger.debug(\"State timing data, Request time until data received and processed {}, Hub processing time: {} \",\n+                openHabTime, stateData.hubTime);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(\"smartthings-converter\"); // Will be null if no explicit\n+                                                                                    // converter was specified\n+            if (converterName == null || converterName.length() == 0) {\n+                // A converter was Not specified so use the channel id\n+                converterName = ch.getUID().getId();\n+            }\n+\n+            // Try to get the converter\n+            @Nullable\n+            SmartthingsConverter cvtr = getConverter(converterName);\n+            if (cvtr == null) {\n+                // If there is no channel specific converter the get the \"default\" converter\n+                cvtr = getConverter(\"default\");\n+            }\n+\n+            if (cvtr != null) {\n+                // cvtr should never be null because there should always be a \"default\" converter\n+                converters.put(ch.getUID(), cvtr);\n+            }\n+\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    private @Nullable SmartthingsConverter getConverter(String converterName) {\n+        // Converter name will be a name such as \"switch\" which has to be converted into the full class name such as\n+        // org.openhab.binding.smartthings.internal.converter.SmartthingsSwitchConveter\n+        StringBuffer converterClassName = new StringBuffer(\n+                \"org.openhab.binding.smartthings.internal.converter.Smartthings\");\n+        converterClassName.append(Character.toUpperCase(converterName.charAt(0)));\n+        converterClassName.append(converterName.substring(1));\n+        converterClassName.append(\"Converter\");\n+        try {\n+            Constructor<?> constr = Class.forName(converterClassName.toString()).getDeclaredConstructor(Thing.class);\n+            constr.setAccessible(true);\n+            SmartthingsConverter cvtr = (SmartthingsConverter) constr.newInstance(thing);\n+            logger.debug(\"Using converter {}\", converterName);\n+            return cvtr;\n+        } catch (ClassNotFoundException e) {\n+            // Most of the time there is no channel specific converter, the default converter is all that is needed.\n+            logger.trace(\"No Custom converter exists for {} ({})\", converterName, converterClassName);\n+        } catch (NoSuchMethodException e) {\n+            logger.info(\"NoSuchMethodException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InvocationTargetException e) {\n+            logger.info(\"InvocationTargetException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (IllegalAccessException e) {\n+            logger.info(\"IllegalAccessException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        } catch (InstantiationException e) {\n+            logger.info(\"InstantiationException occurred for {} ({}) {}\", converterName, converterClassName,\n+                    e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Handle an update to the configuration\n+     */\n+    @Override\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNzQ2Ng==", "bodyText": "I'm not sure if the location of the additional readme files, at the same level as the Readme.md is correct. @cpmeister Would doc/ fit better?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r435517466", "createdAt": "2020-06-04T20:04:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/SmartthingsInstallation.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# Installation of Smartthings code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MzcxMzYy", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-428371362", "createdAt": "2020-06-10T19:40:11Z", "commit": {"oid": "0dc6d35a9131f9d0e3fa151ff5a92205f6b83722"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0MDoxMVrOGiDqDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNjozOVrOGiFGpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NDY4Nw==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438364687", "createdAt": "2020-06-10T19:40:11Z", "author": {"login": "BobRak"}, "path": ".project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTIwOQ=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NTEyMw==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438365123", "createdAt": "2020-06-10T19:41:00Z", "author": {"login": "BobRak"}, "path": ".project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTIwOQ=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NTI3Mg==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438365272", "createdAt": "2020-06-10T19:41:19Z", "author": {"login": "BobRak"}, "path": "bom/.project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTI3Mg=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NTM4Nw==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438365387", "createdAt": "2020-06-10T19:41:32Z", "author": {"login": "BobRak"}, "path": "bundles/.project", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NTQxMg=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NjEyNw==", "bodyText": "Updated and changed OpenHAB to openHAB everywhere except in filenames", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438366127", "createdAt": "2020-06-10T19:42:56Z", "author": {"login": "BobRak"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NjUyNA=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NjkyNg==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438366926", "createdAt": "2020-06-10T19:44:26Z", "author": {"login": "BobRak"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5ODExOA=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NzcxNQ==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438367715", "createdAt": "2020-06-10T19:45:51Z", "author": {"login": "BobRak"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5ODUxNQ=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2OTQwMw==", "bodyText": "I don't want to change this at this point because a number of people have downloaded this binding from my GitHub repo. If they then download it from openHAB and the parameter names are different it would break their installation", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438369403", "createdAt": "2020-06-10T19:49:08Z", "author": {"login": "BobRak"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,145 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports all of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](Troubleshooting.md) to collect the required data so I can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows OpenHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required OpenHAB software installed. [Follow these instructions](SmartthingsInstallation.md)\n+\n+** The binding will not work until this part has been completed, do not skip this part of the setup. **\n+\n+## OpenHAB Configuration\n+\n+This binding is an OpenHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the OpenHAB server to the Smarrthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of theSmartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n+* **smartthingsPort** is the port the Smartthings hub listens on. 39500 is the port assigned my Smartthings so it should be used unless you have a good reason for using another port.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5OTM3OA=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM3MzU3NA==", "bodyText": "Moved to new /doc directory", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438373574", "createdAt": "2020-06-10T19:56:55Z", "author": {"login": "BobRak"}, "path": "bundles/org.openhab.binding.smartthings/SmartthingsInstallation.md", "diffHunk": "@@ -0,0 +1,79 @@\n+# Installation of Smartthings code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNzQ2Ng=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NzMyNw==", "bodyText": "This map has been removed. It was left over from an earlier implementation", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438387327", "createdAt": "2020-06-10T20:24:36Z", "author": {"login": "BobRak"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg3NjI1Nw=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODAxNA==", "bodyText": "Removed", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438388014", "createdAt": "2020-06-10T20:25:57Z", "author": {"login": "BobRak"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgxNzk3Nw=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODM4OQ==", "bodyText": "removed", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r438388389", "createdAt": "2020-06-10T20:26:39Z", "author": {"login": "BobRak"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeRegistry;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+    private Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegs = new HashMap<>();\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler;\n+    private @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistry;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+        // testing by bob\n+        ChannelTypeRegistry ctr = getChannelTypeRegistry();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(org.osgi.service.component.ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMzA4NQ=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODEzNzAx", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-438813701", "createdAt": "2020-06-28T21:14:11Z", "commit": {"oid": "0dc6d35a9131f9d0e3fa151ff5a92205f6b83722"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMzM0NTQ0", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-442334544", "createdAt": "2020-07-03T11:00:32Z", "commit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMTowMDozMlrOGssu_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMjowOVrOGsvtzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyMzQ1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n          \n          \n            \n            This binding integrates the Samsung Smartthings Hub into openHAB. This is implemented as an openHAB 2 binding.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449523454", "createdAt": "2020-07-03T11:00:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyNDAyNw==", "bodyText": "Since PaperUI will be replaced in OH3, can you make this more abstract and remove PaperUI?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449524027", "createdAt": "2020-07-03T11:02:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports most of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](doc/Troubleshooting.md) to collect the required data so it can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows openHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyNDI2OQ==", "bodyText": "It should be compatible with OH3, too.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This binding is an openHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n          \n          \n            \n            This binding is an openHAB binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449524269", "createdAt": "2020-07-03T11:02:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports most of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](doc/Troubleshooting.md) to collect the required data so it can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows openHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required openHAB software installed. [Follow these instructions](doc/SmartthingsInstallation.md)\n+\n+**The binding will not work until this part has been completed, do not skip this part of the setup.**\n+\n+## openHAB Configuration\n+\n+This binding is an openHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUyNTg0MA==", "bodyText": "You could link to the capabilities list here agian.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449525840", "createdAt": "2020-07-03T11:07:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports most of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](doc/Troubleshooting.md) to collect the required data so it can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows openHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required openHAB software installed. [Follow these instructions](doc/SmartthingsInstallation.md)\n+\n+**The binding will not work until this part has been completed, do not skip this part of the setup.**\n+\n+## openHAB Configuration\n+\n+This binding is an openHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the openHAB server to the Smartthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of the Smartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n+* **smartthingsPort** is the port the Smartthings hub listens on. 39500 is the port assigned by Smartthings so it should be used unless you have a good reason for using another port.\n+\n+**Warning** This binding only supports one Bridge. If you try to configure a second bridge it will be ignored.\n+\n+### Thing Configuration\n+\n+Each attached thing must specify the type of device and it's Smartthings device name. The format of the Thing description is:\n+\n+    Thing <thingTypeId> name [ smartthingsName=\"<deviceName>\" ]\n+    \n+where:\n+\n+* **thingTypeId** corresponds to the \"Preferences Reference\" in the Smartthings Capabilities document but without the capability. prefix. i.e. A dimmer switch in the Capabilities document has a Preferences reference of capability.switchLevel, therefore the &lt;thingTypeId&gt; is switchLevel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzMDU5NA==", "bodyText": "Can you remove the reference to PaperUI?\nIf I understand correctly, you are adding an openHAB Dimmer and an openHAB Switch, when the user configures a Smartthings switchLevel. But I don't really understand the purpose of the openHAB Switch in this context. You can configure an openHAB Dimmer and use it as a Switch in the Sitemap. OpenHAB takes care of mapping the on/off state to the dimmer value. Maybe I miss something.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449530594", "createdAt": "2020-07-03T11:19:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+# Samsung Smartthings Binding\n+\n+This binding integrates the Samsung Smartthings Hub into OpenHAB. This is implemented as an OpenHAB 2 binding.\n+\n+**This binding only works with the Smartthings Classic App**\n+\n+## Supported things\n+\n+This binding supports most of the Smartthings devices that are defined in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). If you find a device that doesn't work [follow these instructions](doc/Troubleshooting.md) to collect the required data so it can be added in a future release.\n+\n+## Discovery\n+\n+Discovery allows openHAB to examine a binding and automatically find the Things available on that binding. Discovery is supported and has been extensively tested.\n+\n+Discovery is not run automatically on startup. Therefore to run the discovery process perform the following:\n+\n+1. Start the PaperUI\n+2. Click on **Configuration > Things**\n+3. Click on **ADD THINGS** and select the Smartthings Binding.\n+4. On the displayed screen select the Smartthings Hub.\n+5. In the Configurations Parameters section enter the IP of Smartthings hub and enter the port number, which is probably 39500. Click on the check mark\n+6. Click on **Inbox**\n+7. At the bottom of the screen click on **SEARCH FOR THINGS**\n+8. Select **Smartthings Binding**\n+9. You should now see the Smartthings Things in the Inbox\n+10. More information on using discovery is available in the [configuration tutorial](https://www.openhab.org/docs/configuration)\n+\n+## Smartthings Configuration\n+\n+Prior to running the binding the Smartthings hub must have the required openHAB software installed. [Follow these instructions](doc/SmartthingsInstallation.md)\n+\n+**The binding will not work until this part has been completed, do not skip this part of the setup.**\n+\n+## openHAB Configuration\n+\n+This binding is an openHAB 2 binding and uses the Bridge / Thing design with the Smartthings Hub being the Bridge and the controlled modules being the Things. The following definitions are specified in the .things file.\n+\n+### Bridge Configuration\n+\n+The bridge requires the IP address and port used to connect the openHAB server to the Smartthings Hub.\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+\n+where:\n+\n+* **smartthings:smartthings:Home** identifies this is a smartthings hub named Home. The first two segments must be smartthings:smartthings. You can choose any unique name for the the last segment. The last segment is used when you identify items connected to this hubthingTypeId. \n+* **smartthingsIp** is the IP address of the Smartthings Hub. Your router should be configured such that the Smartthings Hub is always assigned to this IP address.\n+* **smartthingsPort** is the port the Smartthings hub listens on. 39500 is the port assigned by Smartthings so it should be used unless you have a good reason for using another port.\n+\n+**Warning** This binding only supports one Bridge. If you try to configure a second bridge it will be ignored.\n+\n+### Thing Configuration\n+\n+Each attached thing must specify the type of device and it's Smartthings device name. The format of the Thing description is:\n+\n+    Thing <thingTypeId> name [ smartthingsName=\"<deviceName>\" ]\n+    \n+where:\n+\n+* **thingTypeId** corresponds to the \"Preferences Reference\" in the Smartthings Capabilities document but without the capability. prefix. i.e. A dimmer switch in the Capabilities document has a Preferences reference of capability.switchLevel, therefore the &lt;thingTypeId&gt; is switchLevel.\n+* **name** is what you want to call this thing and is used in defining the items that use this thing. \n+* **deviceName** is the name you assigned to the device when you discovered and connected to it in the Smartthings App\n+\n+\n+**Example**\n+\n+    Bridge smartthings:smartthings:Home    [ smartthingsIp=\"192.168.1.12\", smartthingsPort=39500 ] {\n+        Thing switchLevel              KitchenLights           [ smartthingsName=\"Kitchen lights\" ]\n+        Thing contactSensor            MainGarageDoor          [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing temperatureMeasurement   MainGarageTemp          [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing battery                  MainGarageBattery       [ smartthingsName=\"Garage Door Open Sensor\" ]\n+        Thing switch                   OfficeLight             [ smartthingsName=\"Family Room\" ]\n+        Thing valve                    SimulatedValve          [ smartthingsName=\"Simulated Valve\" ]\n+    }\n+\n+## Items\n+\n+These are specified in the .items file. This section describes the specifics related to this binding. Please see the [Items documentation](https://www.openhab.org/docs/configuration/items.html) for a full explanation of configuring items.\n+\n+The most important thing is getting the **channel** specification correct. The general format is:\n+\n+    { channel=\"smartthings:<thingTypeId>:<hubName>:<thingName>:<channelId>\" }\n+\n+The parts (separated by :) are defined as:\n+\n+1. **smartthings** to specify this is a smartthings device\n+2. **thingTypeId** specifies the type of the thing  you are connecting to. This is the same as described in the last section.\n+3. **hubName** identifies the name of the hub specified above. This corresponds to the third segment in the **Bridge** definition.\n+4. **thingName** identifes the thing this is attached to and is the \"name\" you specified in the **Thing** definition.\n+5. **channelId** corresponds the the attribute in the [Smartthings Capabilities list](http://docs.smartthings.com/en/latest/capabilities-reference.html). For switch it would be \"switch\".\n+\n+**Example**\n+\n+    Dimmer  KitchenLights        \"Kitchen lights level\"     <slider>          { channel=\"smartthings:switchLevel:Home:KitchenLights:level\" }\n+    Switch  KitchenLightSwitch   \"Kitchen lights switch\"    <light>           { channel=\"smartthings:switchLevel:Home:KitchenLights:switch\" }\n+    Contact MainGarageDoor       \"Garage door status [%s]\" <garagedoor>       { channel=\"smartthings:contactSensor:Home:MainGarageDoor:contact\" }  \n+    Number  MainGarageTemp       \"Garage temperature [%.0f]\"  <temperature>   { channel=\"smartthings:temperatureMeasurement:Home:MainGarageTemp:temperature\" }  \n+    Number  MainGarageBattery    \"Garage battery [%.0f]\"  <battery>           { channel=\"smartthings:battery:Home:MainGarageBattery:battery\" }  \n+    Switch  OfficeLight          \"Office light\"    <light>                    { channel=\"smartthings:switch:Home:OfficeLight:switch\" }\n+    String  SimulatedValve       \"Simulated valve\"                            { channel=\"smartthings:valve:Home:SimulatedValve:valve\" }\n+\n+**Special note about Dimmers**\n+There is a conceptual difference between how openHAB and Smartthings configures the dimmer and switch parts of a Dimmer. The Smartthings dimmer (capability name: switchLevel) is only able to accept a numeric value between 0 and 100 representing the brightness percentage. The openHAB dimmer is able to accept both the percentage and on/off. The openHAB PaperUI shows a dimmer with both a slider and switch. The Off/On part of the level is not able to track changes made in the Smartthings App. However the openHab Dimmer has been defined with both level and switch channels. Therefore the dimmer and associated switch will work well together if the switchLevel Thing is selected in the discovery inbox. The Switch Thing can be left in the inbox. For an example see the KitchenLights thing and items above.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzMzE0MA==", "bodyText": "Loggers should be final. Please check the other occurrences, too.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449533140", "createdAt": "2020-07-03T11:25:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzNTc3Ng==", "bodyText": "Since you rebased the upstream branch (which is good), you need to align the version number.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>2.5.5-SNAPSHOT</version>\n          \n          \n            \n                <version>2.5.7-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449535776", "createdAt": "2020-07-03T11:32:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/pom.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.5-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTUzODE1Mg==", "bodyText": "Is there a reason why you disabled the null annotations? Can these be Nullable?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449538152", "createdAt": "2020-07-03T11:38:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler = null;\n+    private @NonNullByDefault({}) ThingUID bridgeUID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MTAyMg==", "bodyText": "createHandler() and handleEvent() can be invoked concurrently, so this List should be thread-safe.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n          \n          \n            \n                private List<SmartthingsThingHandler> thingHandlers = Collections.synchronizedList(new ArrayList<>());", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449541022", "createdAt": "2020-07-03T11:46:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler = null;\n+    private @NonNullByDefault({}) ThingUID bridgeUID;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MTQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (SmartthingsThingHandler handler : thingHandlers) {\n          \n          \n            \n                    synchronized (thingHandlers) {\n          \n          \n            \n                    for (SmartthingsThingHandler handler : thingHandlers) {", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449541416", "createdAt": "2020-07-03T11:47:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler = null;\n+    private @NonNullByDefault({}) ThingUID bridgeUID;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            // This binding only supports one bridge. If the user tries to add a second bridge register and error and\n+            // ignore\n+            if (bridgeHandler != null) {\n+                logger.warn(\n+                        \"The Smartthings binding only supports one bridge. Please change your configuration to only use one Bridge. This bridge {} will be ignored.\",\n+                        thing.getUID().getAsString());\n+                return null;\n+            }\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            bridgeUID = thing.getUID();\n+            logger.debug(\"SmartthingsHandlerFactory created BridgeHandler for {}\", thingTypeUID.getAsString());\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            // Make sure this thing belongs to the registered Bridge\n+            if (bridgeUID != null && !bridgeUID.equals(thing.getBridgeUID())) {\n+                logger.warn(\"Thing: {} is being ignored because it does not belong to the registered bridge.\",\n+                        thing.getLabel());\n+                return null;\n+            }\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            logger.debug(\"SmartthingsHandlerFactory created ThingHandler for {}, {}\",\n+                    thing.getConfiguration().get(\"smartthingsName\"), thing.getUID().getAsString());\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public void sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        int status = response.getStatus();\n+        if (status == 202) {\n+            logger.debug(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.warn(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,\n+                    path, status);\n+        }\n+    }\n+\n+    /**\n+     * Messages sent to the Smartthings binding from the hub via the SmartthingsServlet arrive here and are then\n+     * dispatched to the correct thing's handleStateMessage function\n+     *\n+     * @param event The event sent\n+     */\n+    @Override\n+    public synchronized void handleEvent(@Nullable Event event) {\n+        if (event != null) {\n+            String data = (String) event.getProperty(\"data\");\n+            SmartthingsStateData stateData = new SmartthingsStateData();\n+            stateData = gson.fromJson(data, stateData.getClass());\n+            SmartthingsThingHandler handler = findHandler(stateData);\n+            if (handler != null) {\n+                handler.handleStateMessage(stateData);\n+            }\n+        }\n+    }\n+\n+    private @Nullable SmartthingsThingHandler findHandler(SmartthingsStateData stateData) {\n+        for (SmartthingsThingHandler handler : thingHandlers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0Mjg0MA==", "bodyText": "I don't see any reason why this could be null. Are you sure this happens with the current implementation?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449542840", "createdAt": "2020-07-03T11:50:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsBridgeHandler;\n+import org.openhab.binding.smartthings.internal.handler.SmartthingsThingHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link SmartthingsHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { ThingHandlerFactory.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"binding.smarthings\", property = \"event.topics=org/openhab/binding/smartthings/state\")\n+public class SmartthingsHandlerFactory extends BaseThingHandlerFactory implements ThingHandlerFactory, EventHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsHandlerFactory.class);\n+\n+    private @NonNullByDefault({}) SmartthingsBridgeHandler bridgeHandler = null;\n+    private @NonNullByDefault({}) ThingUID bridgeUID;\n+    private Gson gson;\n+    private List<SmartthingsThingHandler> thingHandlers = new ArrayList<SmartthingsThingHandler>();\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return THING_TYPE_SMARTTHINGS.equals(thingTypeUID) || SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    public SmartthingsHandlerFactory() {\n+        // Get a Gson instance\n+        gson = new Gson();\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_SMARTTHINGS)) {\n+            // This binding only supports one bridge. If the user tries to add a second bridge register and error and\n+            // ignore\n+            if (bridgeHandler != null) {\n+                logger.warn(\n+                        \"The Smartthings binding only supports one bridge. Please change your configuration to only use one Bridge. This bridge {} will be ignored.\",\n+                        thing.getUID().getAsString());\n+                return null;\n+            }\n+            bridgeHandler = new SmartthingsBridgeHandler((Bridge) thing, this, bundleContext);\n+            bridgeUID = thing.getUID();\n+            logger.debug(\"SmartthingsHandlerFactory created BridgeHandler for {}\", thingTypeUID.getAsString());\n+            return bridgeHandler;\n+        } else if (SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID)) {\n+            // Everything but the bridge is handled by this one handler\n+            // Make sure this thing belongs to the registered Bridge\n+            if (bridgeUID != null && !bridgeUID.equals(thing.getBridgeUID())) {\n+                logger.warn(\"Thing: {} is being ignored because it does not belong to the registered bridge.\",\n+                        thing.getLabel());\n+                return null;\n+            }\n+            SmartthingsThingHandler thingHandler = new SmartthingsThingHandler(thing, this);\n+            thingHandlers.add(thingHandler);\n+            logger.debug(\"SmartthingsHandlerFactory created ThingHandler for {}, {}\",\n+                    thing.getConfiguration().get(\"smartthingsName\"), thing.getUID().getAsString());\n+            return thingHandler;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send a command to the Smartthings Hub\n+     *\n+     * @param path http path which tells Smartthings what to execute\n+     * @param data data to send\n+     * @return Response from Smartthings\n+     * @throws InterruptedException\n+     * @throws TimeoutException\n+     * @throws ExecutionException\n+     */\n+    public void sendDeviceCommand(String path, String data)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse response = httpClient\n+                .newRequest(bridgeHandler.getSmartthingsIp(), bridgeHandler.getSmartthingsPort())\n+                .timeout(3, TimeUnit.SECONDS).path(path).method(HttpMethod.POST)\n+                .content(new StringContentProvider(data), \"application/json\").send();\n+\n+        int status = response.getStatus();\n+        if (status == 202) {\n+            logger.debug(\n+                    \"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {} (This is the normal code from Smartthings)\",\n+                    data, path, status);\n+        } else {\n+            logger.warn(\"Sent message \\\"{}\\\" with path \\\"{}\\\" to the Smartthings hub, recieved HTTP status {}\", data,\n+                    path, status);\n+        }\n+    }\n+\n+    /**\n+     * Messages sent to the Smartthings binding from the hub via the SmartthingsServlet arrive here and are then\n+     * dispatched to the correct thing's handleStateMessage function\n+     *\n+     * @param event The event sent\n+     */\n+    @Override\n+    public synchronized void handleEvent(@Nullable Event event) {\n+        if (event != null) {\n+            String data = (String) event.getProperty(\"data\");\n+            SmartthingsStateData stateData = new SmartthingsStateData();\n+            stateData = gson.fromJson(data, stateData.getClass());\n+            SmartthingsThingHandler handler = findHandler(stateData);\n+            if (handler != null) {\n+                handler.handleStateMessage(stateData);\n+            }\n+        }\n+    }\n+\n+    private @Nullable SmartthingsThingHandler findHandler(SmartthingsStateData stateData) {\n+        for (SmartthingsThingHandler handler : thingHandlers) {\n+            // There have been some reports of handler.getSmartthingsName() returning a null.\n+            // Need to find out where null is coming from\n+            if (handler.getSmartthingsName() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzczNg==", "bodyText": "Logging to info should be used rarely. This could be debug. Can you check the other occurrences, too?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449543736", "createdAt": "2020-07-03T11:53:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.osgi.service.http.NamespaceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @NonNullByDefault({}) HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private Gson gson = new Gson();\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        if (httpService == null) {\n+            logger.info(\"SmartthingsServlet.activate: httpService is unexpectedly null\");\n+            return;\n+        }\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+            logger.info(\"Started Smartthings servlet at {}\", PATH);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU0MzgyNQ==", "bodyText": "This could be warn.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449543825", "createdAt": "2020-07-03T11:53:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.osgi.service.http.NamespaceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @NonNullByDefault({}) HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private Gson gson = new Gson();\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        if (httpService == null) {\n+            logger.info(\"SmartthingsServlet.activate: httpService is unexpectedly null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU1OTM5Mw==", "bodyText": "This doesn't need to be logged, since this is the normal case if other bindings beside yours are installed.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449559393", "createdAt": "2020-07-03T12:32:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, DISCOVERY_TIMEOUT_SEC);\n+        gson = new Gson();\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        if (handlerFactory instanceof SmartthingsHandlerFactory) {\n+            smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+        } else {\n+            logger.debug(\"Ignoring setThingHandlerFactory for {}\", handlerFactory.getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2MzkyNw==", "bodyText": "The representation property is the name of the property.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(new ThingUID(uidStr)).withProperties(properties)\n          \n          \n            \n                            .withRepresentationProperty(deviceData.id).withBridge(bridgeUid).withLabel(name).build();\n          \n          \n            \n                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(new ThingUID(uidStr)).withProperties(properties)\n          \n          \n            \n                            .withRepresentationProperty(\"deviceId\").withBridge(bridgeUid).withLabel(name).build();", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449563927", "createdAt": "2020-07-03T12:43:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDiscoveryData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;\n+\n+    /*\n+     * default constructor\n+     */\n+    public SmartthingsDiscoveryService() {\n+        super(SmartthingsBindingConstants.SUPPORTED_THING_TYPES_UIDS, DISCOVERY_TIMEOUT_SEC);\n+        gson = new Gson();\n+    }\n+\n+    @Reference\n+    protected void setThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        if (handlerFactory instanceof SmartthingsHandlerFactory) {\n+            smartthingsHandlerFactory = (SmartthingsHandlerFactory) handlerFactory;\n+        } else {\n+            logger.debug(\"Ignoring setThingHandlerFactory for {}\", handlerFactory.getClass().getName());\n+        }\n+    }\n+\n+    protected void unsetThingHandlerFactory(ThingHandlerFactory handlerFactory) {\n+        // Make sure it is this handleFactory that should be unset\n+        if (handlerFactory == smartthingsHandlerFactory) {\n+            this.smartthingsHandlerFactory = null;\n+        }\n+    }\n+\n+    /**\n+     * Called from the UI when starting a search.\n+     */\n+    @Override\n+    public void startScan() {\n+        sendSmartthingsDiscoveryRequest();\n+    }\n+\n+    /**\n+     * Stops a running scan.\n+     */\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Starts background scanning for attached devices.\n+     */\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        if (scanningJob == null) {\n+            this.scanningJob = scheduler.scheduleWithFixedDelay(this::sendSmartthingsDiscoveryRequest,\n+                    INITIAL_DELAY_SEC, SCAN_INTERVAL_SEC, TimeUnit.SECONDS);\n+            logger.debug(\"Discovery background scanning job started\");\n+        }\n+    }\n+\n+    /**\n+     * Stops background scanning for attached devices.\n+     */\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        final ScheduledFuture<?> currentScanningJob = scanningJob;\n+        if (currentScanningJob != null) {\n+            currentScanningJob.cancel(false);\n+            scanningJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Start the discovery process by sending a discovery request to the Smartthings Hub\n+     */\n+    private void sendSmartthingsDiscoveryRequest() {\n+        final SmartthingsHandlerFactory currentSmartthingsHandlerFactory = smartthingsHandlerFactory;\n+        if (currentSmartthingsHandlerFactory != null) {\n+            try {\n+                String discoveryMsg = String.format(\"{\\\"discovery\\\": \\\"yes\\\", \\\"openHabStartTime\\\": %d}\",\n+                        System.currentTimeMillis());\n+                currentSmartthingsHandlerFactory.sendDeviceCommand(\"/discovery\", discoveryMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"Attempt to send command to the Smartthings hub failed with: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Handle discovery data returned from the Smartthings hub.\n+     * The data is delivered into the SmartthingServlet. From there it is sent here via the Event service\n+     */\n+    @Override\n+    public void handleEvent(@Nullable Event event) {\n+        if (event == null) {\n+            logger.info(\"SmartthingsDiscoveryService.handleEvent: event is uexpectedly null\");\n+            return;\n+        }\n+        String topic = event.getTopic();\n+        String data = (String) event.getProperty(\"data\");\n+        if (data == null) {\n+            logger.debug(\"Event received on topic: {} but the data field is null\", topic);\n+            return;\n+        } else {\n+            logger.debug(\"Event received on topic: {}\", topic);\n+        }\n+\n+        // Two classes are required.\n+        // 1. SmarthingsDiscoveryData contains timing info and the discovery data which is sent as an array of Strings\n+        // 2. SmartthingDeviceData contains the device data for one device.\n+        // First the SmarthingsDiscoveryData is converted from json to java. Then each data string is converted into\n+        // device data\n+        SmartthingsDiscoveryData discoveryData = gson.fromJson(data, SmartthingsDiscoveryData.class);\n+\n+        if (discoveryData.data != null) {\n+            for (String deviceStr : discoveryData.data) {\n+                SmartthingsDeviceData deviceData = gson.fromJson(deviceStr, SmartthingsDeviceData.class);\n+                createDevice(deviceData);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Create a device with the data from the Smartthings hub\n+     *\n+     * @param deviceData Device data from the hub\n+     */\n+    private void createDevice(SmartthingsDeviceData deviceData) {\n+        logger.trace(\"Discovery: Creating device: ThingType {} with name {}\", deviceData.capability, deviceData.name);\n+\n+        // Build the UID as a string smartthings:{ThingType}:{BridgeName}:{DeviceName}\n+        String name = deviceData.name; // Note: this is necessary for null analysis to work\n+        if (name == null) {\n+            logger.info(\n+                    \"Unexpectedly received data for a device with no name. Check the Smartthings hub devices and make sure every device has a name\");\n+            return;\n+        }\n+        String deviceNameNoSpaces = name.replaceAll(\"\\\\s\", \"_\");\n+        String smartthingsDeviceName = findIllegalChars.matcher(deviceNameNoSpaces).replaceAll(\"\");\n+        final SmartthingsHandlerFactory currentSmartthingsHandlerFactory = smartthingsHandlerFactory;\n+        if (currentSmartthingsHandlerFactory == null) {\n+            logger.info(\n+                    \"SmartthingsDiscoveryService: smartthingshandlerfactory is unexpectedly null, could not create device {}\",\n+                    deviceData);\n+            return;\n+        }\n+        ThingUID bridgeUid = currentSmartthingsHandlerFactory.getBridgeHandler().getThing().getUID();\n+        String bridgeId = bridgeUid.getId();\n+        String uidStr = String.format(\"smartthings:%s:%s:%s\", deviceData.capability, bridgeId, smartthingsDeviceName);\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"smartthingsName\", name);\n+        properties.put(\"deviceId\", deviceData.id);\n+\n+        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(new ThingUID(uidStr)).withProperties(properties)\n+                .withRepresentationProperty(deviceData.id).withBridge(bridgeUid).withLabel(name).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2NTExMA==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging\nThen, the whole method could be removed.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449565110", "createdAt": "2020-07-03T12:45:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsBridgeHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusBridgeHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.osgi.framework.BundleContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SmartthingsBridgeHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsBridgeHandler extends ConfigStatusBridgeHandler {\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsBridgeHandler.class);\n+\n+    private SmartthingsBridgeConfig config;\n+\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private BundleContext bundleContext;\n+\n+    public SmartthingsBridgeHandler(Bridge bridge, SmartthingsHandlerFactory smartthingsHandlerFactory,\n+            BundleContext bundleContext) {\n+        super(bridge);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        this.bundleContext = bundleContext;\n+        config = getThing().getConfiguration().as(SmartthingsBridgeConfig.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        // Commands are handled by the \"Things\"\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Validate the config\n+        if (!validateConfig(this.config)) {\n+            return;\n+        }\n+\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"Smartthings Handler disposed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2ODMxOQ==", "bodyText": "If you write the comment in a separate line, it won't be garbled by the auto formatter.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449568319", "createdAt": "2020-07-03T12:53:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    private final String smartthingsConverterName = \"smartthings-converter\";\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+    }\n+\n+    /**\n+     * Called when openHAB receives a command for this handler\n+     *\n+     * @param channelUID The channel the command was sent to\n+     * @param command The command sent\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = getBridge();\n+\n+        // Check if the bridge has not been initialized yet\n+        if (bridge == null) {\n+            logger.debug(\n+                    \"The bridge has not been initialized yet. Can not process command for channel {} with command {}.\",\n+                    channelUID.getAsString(), command.toFullString());\n+            return;\n+        }\n+\n+        SmartthingsBridgeHandler smartthingsBridgeHandler = (SmartthingsBridgeHandler) bridge.getHandler();\n+        if (smartthingsBridgeHandler != null\n+                && smartthingsBridgeHandler.getThing().getStatus().equals(ThingStatus.ONLINE)) {\n+            String thingTypeId = thing.getThingTypeUID().getId();\n+            String smartthingsType = getSmartthingsAttributeFromChannel(channelUID);\n+\n+            SmartthingsConverter converter = converters.get(channelUID);\n+\n+            String path;\n+            String jsonMsg;\n+            if (command instanceof RefreshType) {\n+                path = \"/state\";\n+                // Go to ST hub and ask for current state\n+                jsonMsg = String.format(\n+                        \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"openHabStartTime\\\": %d}\",\n+                        thingTypeId, smartthingsName, smartthingsType, System.currentTimeMillis());\n+            } else {\n+                // Send update to ST hub\n+                path = \"/update\";\n+                jsonMsg = converter.convertToSmartthings(channelUID, command);\n+\n+                // The smartthings hub won't (can't) return a response to this call. But, it will send a separate\n+                // message back to the SmartthingBridgeHandler.receivedPushMessage handler\n+            }\n+\n+            try {\n+                smartthingsHandlerFactory.sendDeviceCommand(path, jsonMsg);\n+                // Smartthings will not return a response to this message but will send it's response message\n+                // which will get picked up by the SmartthingBridgeHandler.receivedPushMessage handler\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"Attempt to send command to the Smartthings hub failed with exception: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get the Smartthings capability reference \"attribute\" from the channel properties.\n+     * In OpenHAB each channel id corresponds to the Smartthings attribute. In the ChannelUID the\n+     * channel id is the last segment\n+     *\n+     * @param channelUID\n+     * @return channel id\n+     */\n+    private String getSmartthingsAttributeFromChannel(ChannelUID channelUID) {\n+        String id = channelUID.getId();\n+        return id;\n+    }\n+\n+    /**\n+     * State messages sent from the hub arrive here, are processed and the openHab state is updated.\n+     *\n+     * @param stateData\n+     */\n+    public void handleStateMessage(SmartthingsStateData stateData) {\n+        // First locate the channel\n+        Channel matchingChannel = null;\n+        for (Channel ch : thing.getChannels()) {\n+            if (ch.getUID().getAsString().endsWith(stateData.capabilityAttribute)) {\n+                matchingChannel = ch;\n+                break;\n+            }\n+        }\n+        if (matchingChannel == null) {\n+            return;\n+        }\n+\n+        SmartthingsConverter converter = converters.get(matchingChannel.getUID());\n+\n+        // If value from Smartthings is null then stop here\n+        State state;\n+        if (stateData.value != null) {\n+            state = converter.convertToOpenHab(matchingChannel.getAcceptedItemType(), stateData);\n+        } else {\n+            state = UnDefType.NULL;\n+        }\n+\n+        updateState(matchingChannel.getUID(), state);\n+        logger.trace(\"Smartthings updated State for channel: {} to {}\", matchingChannel.getUID().getAsString(),\n+                state.toString());\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n+        if (!validateConfig(config)) {\n+            return;\n+        }\n+        smartthingsName = config.smartthingsName;\n+\n+        // Create converters for each channel\n+        for (Channel ch : thing.getChannels()) {\n+            @Nullable\n+            String converterName = ch.getProperties().get(smartthingsConverterName); // Will be null if no\n+                                                                                     // explicit\n+            // converter was specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4358054660ea626c7f635598e720fd26011c9dc"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MjMwMA==", "bodyText": "To which recommended change do you refer? The line should be kept wrapped.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449572300", "createdAt": "2020-07-03T13:02:09Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -1,6 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5NDYxNw=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNzAwMjcy", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-442700272", "createdAt": "2020-07-05T19:19:36Z", "commit": {"oid": "49fbc91b6a168503a2a2573d34f3c87b0e50f37d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOToxOTozNlrOGtET4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxOToxOTozNlrOGtET4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwOTcyOA==", "bodyText": "These lines will still changed by your PR. You could copy those lines from the mainline file https://github.com/openhab/openhab-addons/blob/2.5.x/bundles/pom.xml so that they won't appear in you PR.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r449909728", "createdAt": "2020-07-05T19:19:36Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -1,6 +1,4 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49fbc91b6a168503a2a2573d34f3c87b0e50f37d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MTI1MzAy", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-445125302", "createdAt": "2020-07-08T21:00:34Z", "commit": {"oid": "833f652e5014f7b2713e0d392495844d095262a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NTUwNTc0", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-484550574", "createdAt": "2020-09-08T23:01:15Z", "commit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzowMToxNVrOHOwyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMzoyMToxMFrOHOxKcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MTM3Nw==", "bodyText": "I think that just checking for Number instances would be a safer catchall\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (deviceValue instanceof Double) {\n          \n          \n            \n                            double d = ((Double) deviceValue).doubleValue();\n          \n          \n            \n                            d *= 3.6;\n          \n          \n            \n                            return new DecimalType(d);\n          \n          \n            \n                        } else if (deviceValue instanceof Long) {\n          \n          \n            \n                            double d = ((Long) deviceValue).longValue();\n          \n          \n            \n                            d *= 3.6;\n          \n          \n            \n                            return new DecimalType(d);\n          \n          \n            \n                        } else if (deviceValue instanceof Number) {\n          \n          \n            \n                            double d = ((Number) deviceValue).doubleValue();\n          \n          \n            \n                            d *= 3.6;\n          \n          \n            \n                            return new DecimalType(d);\n          \n          \n            \n                        }\n          \n      \n    \n    \n  \n\nYou should also make a similar change in the SmartthingsConverter class.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485241377", "createdAt": "2020-09-08T23:01:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsHue100Converter.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.HSBType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Converter class for Smartthings capability \"Color Control\".\n+ * The Smartthings \"Color Control\" capability represents the hue values in the 0-100% range. OH2 uses 0-360 degrees\n+ * For this converter only the hue is coming into openHAB and it is a number\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsHue100Converter extends SmartthingsConverter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsHue100Converter.class);\n+\n+    public SmartthingsHue100Converter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String jsonMsg;\n+\n+        if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            double hue = hsb.getHue().doubleValue() / 3.60;\n+            String value = String.format(\"[%.0f, %d, %d ]\", hue, hsb.getSaturation().intValue(),\n+                    hsb.getBrightness().intValue());\n+            jsonMsg = String.format(\n+                    \"{\\\"capabilityKey\\\": \\\"%s\\\", \\\"deviceDisplayName\\\": \\\"%s\\\", \\\"capabilityAttribute\\\": \\\"%s\\\", \\\"value\\\": %s}\",\n+                    thingTypeId, smartthingsName, channelUid.getId(), value);\n+        } else {\n+            jsonMsg = defaultConvertToSmartthings(channelUid, command);\n+        }\n+\n+        return jsonMsg;\n+    }\n+\n+    @Override\n+    public State convertToOpenHab(@Nullable String acceptedChannelType, SmartthingsStateData dataFromSmartthings) {\n+        // Here we have to multiply the value from Smartthings by 3.6 to convert from 0-100 to 0-360\n+        String deviceType = dataFromSmartthings.capabilityAttribute;\n+        Object deviceValue = dataFromSmartthings.value;\n+\n+        if (deviceValue == null) {\n+            logger.warn(\"Failed to convert Number {} because Smartthings returned a null value.\", deviceType);\n+            return UnDefType.UNDEF;\n+        }\n+\n+        if (\"Number\".contentEquals(acceptedChannelType)) {\n+            if (deviceValue instanceof String) {\n+                double d = Double.parseDouble((String) deviceValue);\n+                d *= 3.6;\n+                return new DecimalType(d);\n+            } else if (deviceValue instanceof Double) {\n+                double d = ((Double) deviceValue).doubleValue();\n+                d *= 3.6;\n+                return new DecimalType(d);\n+            } else if (deviceValue instanceof Long) {\n+                double d = ((Long) deviceValue).longValue();\n+                d *= 3.6;\n+                return new DecimalType(d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjA2NQ==", "bodyText": "if surroundWithQuotes was protected instead of private then you could reuse it here.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    smartthingsValue = (new StringBuilder()).append('\"').append(smartthingsValue).append('\"').toString();\n          \n          \n            \n                    smartthingsValue = surroundWithQuotes(smartthingsValue);", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485242065", "createdAt": "2020-09-08T23:03:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/converter/SmartthingsOpenCloseControlConverter.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.converter;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+\n+/**\n+ * Converter class for Door Control.\n+ * This can't use the default because when closing the door the command that comes in as \"closed\" but \"close\" needs to\n+ * be\n+ * sent to Smartthings\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsOpenCloseControlConverter extends SmartthingsConverter {\n+\n+    public SmartthingsOpenCloseControlConverter(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public String convertToSmartthings(ChannelUID channelUid, Command command) {\n+        String smartthingsValue = (command.toString().toLowerCase().equals(\"open\")) ? \"open\" : \"close\";\n+        smartthingsValue = (new StringBuilder()).append('\"').append(smartthingsValue).append('\"').toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0MjcwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private SmartthingsHandlerFactory smartthingsHandlerFactory;\n          \n          \n            \n                private @Nullable SmartthingsHandlerFactory smartthingsHandlerFactory;", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485242701", "createdAt": "2020-09-08T23:05:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mjc0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> scanningJob;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> scanningJob;", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485242749", "createdAt": "2020-09-08T23:05:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;\n+\n+    @Nullable\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+\n+    @Nullable\n+    private ScheduledFuture<?> scanningJob;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mjg4Mw==", "bodyText": "Can you make this private and final?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485242883", "createdAt": "2020-09-08T23:06:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/discovery/SmartthingsDiscoveryService.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsDeviceData;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Smartthings Discovery service\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = { DiscoveryService.class,\n+        EventHandler.class }, immediate = true, configurationPid = \"discovery.smartthings\", property = \"event.topics=org/openhab/binding/smartthings/discovery\")\n+public class SmartthingsDiscoveryService extends AbstractDiscoveryService implements EventHandler {\n+    private static final int DISCOVERY_TIMEOUT_SEC = 30;\n+    private static final int INITIAL_DELAY_SEC = 10; // Delay 10 sec to give time for bridge and things to be created\n+    private static final int SCAN_INTERVAL_SEC = 600;\n+\n+    private final Pattern findIllegalChars = Pattern.compile(\"[^A-Za-z0-9_-]\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsDiscoveryService.class);\n+\n+    public Gson gson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0Mzc2Mg==", "bodyText": "I think you forgot to remove this.\nFrom BobRak: What is it that you think should be removed? Line 63, 64 or both. Without those lines it won't compile because both smartthingsName and config are NonNull and it won't compile. Is there a better solution?\nFrom cpmeister: I suggested a solution in my next review.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485243762", "createdAt": "2020-09-08T23:08:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNDM1Ng=="}, "originalCommit": {"oid": "09540b50b6b7c7130cfcb60b60d8c006569abd38"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NDk0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>2.5.7-SNAPSHOT</version>\n          \n          \n            \n                <version>2.5.9-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485244940", "createdAt": "2020-09-08T23:12:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/pom.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.7-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NjEwOQ==", "bodyText": "Does gson allow you to convert json into a Map<String, Object>? How would that even work, what class is it using for the Object values?", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485246109", "createdAt": "2020-09-08T23:16:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/SmartthingsServlet.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal;\n+\n+import static org.openhab.binding.smartthings.internal.SmartthingsBindingConstants.*;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.event.Event;\n+import org.osgi.service.event.EventAdmin;\n+import org.osgi.service.http.HttpService;\n+import org.osgi.service.http.NamespaceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Receives all Http data from the Smartthings Hub\n+ *\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+@SuppressWarnings(\"serial\")\n+@Component(immediate = true, service = HttpServlet.class)\n+public class SmartthingsServlet extends HttpServlet {\n+    private static final String PATH = \"/smartthings\";\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsServlet.class);\n+    private @NonNullByDefault({}) HttpService httpService;\n+    private @Nullable EventAdmin eventAdmin;\n+    private Gson gson = new Gson();\n+\n+    @Activate\n+    protected void activate(Map<String, Object> config) {\n+        if (httpService == null) {\n+            logger.warn(\"SmartthingsServlet.activate: httpService is unexpectedly null\");\n+            return;\n+        }\n+        try {\n+            Dictionary<String, String> servletParams = new Hashtable<String, String>();\n+            httpService.registerServlet(PATH, this, servletParams, httpService.createDefaultHttpContext());\n+        } catch (ServletException | NamespaceException e) {\n+            logger.warn(\"Could not start Smartthings servlet service: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Deactivate\n+    protected void deactivate(ComponentContext componentContext) {\n+        if (httpService != null) {\n+            try {\n+                httpService.unregister(PATH);\n+            } catch (IllegalArgumentException ignored) {\n+            }\n+        }\n+    }\n+\n+    @Reference\n+    protected void setHttpService(HttpService httpService) {\n+        this.httpService = httpService;\n+    }\n+\n+    protected void unsetHttpService(HttpService httpService) {\n+        this.httpService = null;\n+    }\n+\n+    @Reference\n+    protected void setEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = eventAdmin;\n+    }\n+\n+    protected void unsetEventAdmin(EventAdmin eventAdmin) {\n+        this.eventAdmin = null;\n+    }\n+\n+    @Override\n+    protected void service(@Nullable HttpServletRequest req, @Nullable HttpServletResponse resp)\n+            throws ServletException, IOException {\n+        if (req == null) {\n+            logger.debug(\"SmartthingsServlet.service unexpectedly received a null request. Request not processed\");\n+            return;\n+        }\n+        String path = req.getRequestURI();\n+\n+        // See what is in the path\n+        String[] pathParts = path.replace(PATH + \"/\", \"\").split(\"/\");\n+        if (pathParts.length != 1) {\n+            logger.warn(\n+                    \"Smartthing servlet received a path with zero or more than one parts. Only one part is allowed. path {}\",\n+                    path);\n+            return;\n+        }\n+\n+        BufferedReader rdr = new BufferedReader(req.getReader());\n+        String s = rdr.lines().collect(Collectors.joining());\n+        switch (pathParts[0]) {\n+            case \"state\":\n+                // This is device state info returned from Smartthings\n+                logger.debug(\"Smartthing servlet processing \\\"state\\\" request. data: {}\", s);\n+                publishEvent(STATE_EVENT_TOPIC, \"data\", s);\n+                break;\n+            case \"discovery\":\n+                // This is discovery data returned from Smartthings\n+                logger.trace(\"Smartthing servlet processing \\\"discovery\\\" request. data: {}\", s);\n+                publishEvent(DISCOVERY_EVENT_TOPIC, \"data\", s);\n+                break;\n+            case \"error\":\n+                // This is an error message from smartthings\n+                Map<String, Object> map = new HashMap<String, Object>();\n+                map = gson.fromJson(s, map.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI0NzYwMw==", "bodyText": "Is this list generated or do you have to update by hand? You should look into finding a way to generate it automatically if possible.", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r485247603", "createdAt": "2020-09-08T23:21:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/contrib/smartthings/SmartApps/OpenHabAppV2.groovy", "diffHunk": "@@ -0,0 +1,1052 @@\n+/**\n+ *  OpenHabAppV2\n+ *\n+ *  Description\n+ *   Provides two way communications between a Smartthings Hub and OpenHAB\n+ *   Messages from OpenHAB with the following paths are supported and perform the following functions\n+ *    /state  - returns the state of the specified device and attribute, i.e. on, off, 95\n+ *    /update - Updates the state of the specified device and attribute\n+ *    /discovery - Returns a list of the devices\n+ *    /error - Returns error messages to OpenHAB for logging\n+ *   Messages are sent to OpenHAB with the following paths\n+ *    /smartthings/push - When an event occurs on a monitored device the new value is sent to OpenHAB\n+ *\n+ *  Authors\n+ *   - rjraker@gmail.com - 1/30/17 - Modified for use with Smartthings\n+ *   - st.john.johnson@gmail.com and jeremiah.wuenschel@gmail.com- original code for interface with another device\n+ *\n+ *  Copyright 2016 - 2020\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License. You may obtain a copy of the License at:\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License\n+ *  for the specific language governing permissions and limitations under the License.\n+ */\n+import groovy.json.JsonSlurper\n+import groovy.json.JsonOutput\n+import groovy.json.JsonBuilder\n+import groovy.transform.Field\n+\n+// Massive lookup tree\n+@Field CAPABILITY_MAP = [\n+    \"accelerationSensor\": [\n+        name: \"Acceleration Sensor\",\n+        capability: \"capability.accelerationSensor\",\n+        attributes: [\n+            \"acceleration\"\n+        ]\n+    ],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cbd5280440b712f1c13d1c2df22032ad9adab97"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDcxMDgz", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-490071083", "createdAt": "2020-09-16T22:50:22Z", "commit": {"oid": "3c1ccff8e948ded227e39048c1ffd79e624a9db4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjo1MDoyM1rOHTGzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjo1MDoyM1rOHTGzOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5NjQxMA==", "bodyText": "The configuration might not be valid at construction, so instead use a default config instance to make the nonnull annotation happy.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    config = getThing().getConfiguration().as(SmartthingsThingConfig.class);\n          \n          \n            \n                    config = new SmartthingsThingConfig();", "url": "https://github.com/openhab/openhab-addons/pull/7550#discussion_r489796410", "createdAt": "2020-09-16T22:50:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.smartthings/src/main/java/org/openhab/binding/smartthings/internal/handler/SmartthingsThingHandler.java", "diffHunk": "@@ -0,0 +1,270 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.smartthings.internal.handler;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.status.ConfigStatusMessage;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.ConfigStatusThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.smartthings.internal.SmartthingsBindingConstants;\n+import org.openhab.binding.smartthings.internal.SmartthingsHandlerFactory;\n+import org.openhab.binding.smartthings.internal.converter.SmartthingsConverter;\n+import org.openhab.binding.smartthings.internal.dto.SmartthingsStateData;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Bob Raker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartthingsThingHandler extends ConfigStatusThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SmartthingsThingHandler.class);\n+\n+    private SmartthingsThingConfig config;\n+    private String smartthingsName;\n+    private SmartthingsHandlerFactory smartthingsHandlerFactory;\n+    private Map<ChannelUID, SmartthingsConverter> converters = new HashMap<ChannelUID, SmartthingsConverter>();\n+\n+    private final String smartthingsConverterName = \"smartthings-converter\";\n+\n+    public SmartthingsThingHandler(Thing thing, SmartthingsHandlerFactory smartthingsHandlerFactory) {\n+        super(thing);\n+        this.smartthingsHandlerFactory = smartthingsHandlerFactory;\n+        smartthingsName = \"\"; // Initialize here so it can be NonNull but it should always get a value in initialize()\n+        config = getThing().getConfiguration().as(SmartthingsThingConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1ccff8e948ded227e39048c1ffd79e624a9db4"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b224141a7f6bbd95de3663bc45dfaf2ffb12c75f", "author": {"user": {"login": "BobRak", "name": "Bob Raker"}}, "url": "https://github.com/openhab/openhab-addons/commit/b224141a7f6bbd95de3663bc45dfaf2ffb12c75f", "committedDate": "2020-09-18T19:31:15Z", "message": "Initial Smartthings commit\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa7459a3df196d8a453f5ff208a6347de1b90122", "author": {"user": {"login": "BobRak", "name": "Bob Raker"}}, "url": "https://github.com/openhab/openhab-addons/commit/fa7459a3df196d8a453f5ff208a6347de1b90122", "committedDate": "2020-09-18T19:31:15Z", "message": "Added support for washing machines\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fefa15e8fde89edd14f9bce99c32115c9519b35", "author": {"user": {"login": "BobRak", "name": "Bob Raker"}}, "url": "https://github.com/openhab/openhab-addons/commit/7fefa15e8fde89edd14f9bce99c32115c9519b35", "committedDate": "2020-09-18T19:31:15Z", "message": "Update bundles/org.openhab.binding.smartthings/README.md\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>\nSigned-off-by: Bob Raker <rjraker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "677e933d2d684531d6adfb046ccfafd0891e3354", "author": {"user": {"login": "BobRak", "name": "Bob Raker"}}, "url": "https://github.com/openhab/openhab-addons/commit/677e933d2d684531d6adfb046ccfafd0891e3354", "committedDate": "2020-09-18T19:31:16Z", "message": "Commit changes requested by code review\nSigned-off-by: Bob Raker <rjraker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01353e89c75809b813c6d397656cbbfb8eb14edc", "author": {"user": {"login": "BobRak", "name": "Bob Raker"}}, "url": "https://github.com/openhab/openhab-addons/commit/01353e89c75809b813c6d397656cbbfb8eb14edc", "committedDate": "2020-09-18T19:31:16Z", "message": "Updates to smartthings based on second code review\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1250ea5074e191a02eaa23db561f1d006f96a160", "author": {"user": {"login": "BobRak", "name": "Bob Raker"}}, "url": "https://github.com/openhab/openhab-addons/commit/1250ea5074e191a02eaa23db561f1d006f96a160", "committedDate": "2020-09-18T19:31:16Z", "message": "Make bundles/pom.xml look like original\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97956a034454958a8edf593c99f8a5aed2ce64d9", "author": {"user": {"login": "BobRak", "name": "Bob Raker"}}, "url": "https://github.com/openhab/openhab-addons/commit/97956a034454958a8edf593c99f8a5aed2ce64d9", "committedDate": "2020-09-18T19:31:16Z", "message": "Minor logging changes:\n1. Reduced discovery logging as it was the majority of what was logged.\n2. Changed log level from TRACE to DEBUG for \"state\" messages from Smartthings. These are useful to confirm Smartthings is sending data.\n\nUpdated the 2 Smartthings groovy files to remove timing data since it has been removed from the openHAB code\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddde0393e8993f6053aa69d8bc15a5bf351378c4", "author": {"user": {"login": "BobRak", "name": "Bob Raker"}}, "url": "https://github.com/openhab/openhab-addons/commit/ddde0393e8993f6053aa69d8bc15a5bf351378c4", "committedDate": "2020-09-18T19:32:32Z", "message": "Hopefully final code review changes and added the ability to update Thing network timeout\n\nSigned-off-by: Bob Raker <rjraker@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTU3ODYy", "url": "https://github.com/openhab/openhab-addons/pull/7550#pullrequestreview-492157862", "createdAt": "2020-09-19T21:46:53Z", "commit": {"oid": "ddde0393e8993f6053aa69d8bc15a5bf351378c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 736, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}