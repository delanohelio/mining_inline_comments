{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzMzOTEx", "number": 8250, "title": "[helioseasycontrols] Modbus: HeliosEasyControls - Initial Contribution", "bodyText": "This binding is an extension of the existing Modbus binding to add support for Helios Heat-Recovery Ventilation devices which come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. This PR's goal is to integrate this as a new binding into the OH core.\nI had implemented an OH1 binding in 2016 (see thread https://community.openhab.org/t/helios-binding-for-modbus-tcp/5578) and recently upgraded this to OH2. Using @ssalonen's guidance and inputs I based my implementation on his existing Modbus binding.\nThe binding allows to fully integrate Helios ventilation devices into OH and control essentially the full range of functionality provided via its web interface.\nThe latest build of the JAR can be found here: https://github.com/bern77/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.modbus.helioseasycontrols/org.openhab.binding.modbus.helioseasycontrols-2.5.8-SNAPSHOT.jar", "createdAt": "2020-08-03T18:35:06Z", "url": "https://github.com/openhab/openhab-addons/pull/8250", "merged": true, "mergeCommit": {"oid": "0447658114763590f8c6b6e771402b4ad60e8328"}, "closed": true, "closedAt": "2020-09-19T20:51:40Z", "author": {"login": "bern77"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7mZ6zgFqTQ2MDU2ODQ5OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKcmsYgFqTQ5MjAwODc3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTY4NDk4", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-460568498", "createdAt": "2020-08-04T07:39:12Z", "commit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzozOToxMlrOG7UwqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzowNzowNlrOG7fiTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1OTMwNA==", "bodyText": "Please remove this gitginore from this PR", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464859304", "createdAt": "2020-08-04T07:39:12Z", "author": {"login": "ssalonen"}, "path": "bundles/.gitignore", "diffHunk": "@@ -0,0 +1,2 @@\n+/org.openhab.binding.modbus/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg1OTY1Nw==", "bodyText": "Why was this git ignore file removed? Should be restored", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464859657", "createdAt": "2020-08-04T07:39:54Z", "author": {"login": "ssalonen"}, "path": ".gitignore", "diffHunk": "@@ -1,24 +0,0 @@\n-.antlr*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2MDIxNA==", "bodyText": "You are free to use spaces in the title :)", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464860214", "createdAt": "2020-08-04T07:40:57Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2MTc0OA==", "bodyText": "I would remove this sentence", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464861748", "createdAt": "2020-08-04T07:43:49Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2MzY0Mw==", "bodyText": "It might help newbies to be more explicit and explain the \"Modbus bridge\"\nLoaning from sunspec documentation:\n\nYou need first to set up a TCP or Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device.\n\nRe port and unit ID\n\nUse port number 502 and unit ID 180.\n\nOr do you mean that binding hardcodes the values?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464863643", "createdAt": "2020-08-04T07:47:20Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2NDcwOA==", "bodyText": "OFF = winter time, ON = summer time", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464864708", "createdAt": "2020-08-04T07:49:18Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2NjExNw==", "bodyText": "Please use Number:ElectricPotential channel type over Number. This way the number also carries the unit (volts)", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464866117", "createdAt": "2020-08-04T07:51:54Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2Njg3NQ==", "bodyText": "Please use Number:Dimensionless with % as unit, same for all % channels", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464866875", "createdAt": "2020-08-04T07:53:19Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2NzY4OA==", "bodyText": "Use suitable Number:Xxx, check out if some other binding uses pom as unit", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464867688", "createdAt": "2020-08-04T07:54:38Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2NzkxMw==", "bodyText": "Number:Temperature", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464867913", "createdAt": "2020-08-04T07:55:00Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2ControlSteps                | CO2 control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControlStatus               | VOC control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControlSetValue             | VOC control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControlSteps                | VOC control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| comfortTemp                      | comfortTemp                    | Comfort Temperature                                              | Number   | 10.0 - 25.0                                                                                          |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2ODg5Ng==", "bodyText": "More info https://www.openhab.org/docs/concepts/units-of-measurement.html", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464868896", "createdAt": "2020-08-04T07:56:40Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2NzY4OA=="}, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3MDEwOQ==", "bodyText": "Number:Time with unit of hour?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464870109", "createdAt": "2020-08-04T07:58:50Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2ControlSteps                | CO2 control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControlStatus               | VOC control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControlSetValue             | VOC control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControlSteps                | VOC control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| comfortTemp                      | comfortTemp                    | Comfort Temperature                                              | Number   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | timeZoneDifferenceToGmt        | Time Zone Difference to GMT                                      | Number   | -12 - 14                                                                                             |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3MDE3MA==", "bodyText": "Number:Time. Same for the other channels representing duration", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464870170", "createdAt": "2020-08-04T07:58:57Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2ControlSteps                | CO2 control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControlStatus               | VOC control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControlSetValue             | VOC control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControlSteps                | VOC control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| comfortTemp                      | comfortTemp                    | Comfort Temperature                                              | Number   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | timeZoneDifferenceToGmt        | Time Zone Difference to GMT                                      | Number   | -12 - 14                                                                                             |\r\n+| dateFormat                       | dateFormat                     | Date format                                                      | Number   | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | heatExchangerType              | Heat exchanger type                                              | Number   | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | partyModeDuration              | Party mode duration (in minutes)                                 | Number   | 5 - 180                                                                                              |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3MTI5MA==", "bodyText": "Use ON OFF, not 0/1\nWould it make sense to name channel more explicit, e.g. operatingModeManual?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464871290", "createdAt": "2020-08-04T08:00:57Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2ControlSteps                | CO2 control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControlStatus               | VOC control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControlSetValue             | VOC control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControlSteps                | VOC control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| comfortTemp                      | comfortTemp                    | Comfort Temperature                                              | Number   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | timeZoneDifferenceToGmt        | Time Zone Difference to GMT                                      | Number   | -12 - 14                                                                                             |\r\n+| dateFormat                       | dateFormat                     | Date format                                                      | Number   | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | heatExchangerType              | Heat exchanger type                                              | Number   | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | partyModeDuration              | Party mode duration (in minutes)                                 | Number   | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | partyModeFanStage              | Party mode fan stage                                             | Number   | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | partyModeRemainingTime         | Party mode remaining time                                        | Number   | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | partyModeStatus                | Party mode status                                                | Switch   |                                                                                                      |\r\n+| standbyModeDuration              | standbyModeDuration            | Standby mode duration (in minutes)                               | Number   | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | standbyModeFanStage            | Standby mode fan stage                                           | Number   | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | standbyModeRemainingTime       | Standby mode remaining time                                      | Number   | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | standbyModeStatus              | Standby mode status                                              | Switch   |                                                                                                      |\r\n+| operatingMode                    | operatingMode                  | Operating mode (automatic/manual)                                | Switch   | 0 = automatic, 1 = manual                                                                            |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3MTg3NQ==", "bodyText": "Use units of measurement here as well", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464871875", "createdAt": "2020-08-04T08:01:58Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2ControlSteps                | CO2 control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControlStatus               | VOC control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControlSetValue             | VOC control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControlSteps                | VOC control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| comfortTemp                      | comfortTemp                    | Comfort Temperature                                              | Number   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | timeZoneDifferenceToGmt        | Time Zone Difference to GMT                                      | Number   | -12 - 14                                                                                             |\r\n+| dateFormat                       | dateFormat                     | Date format                                                      | Number   | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | heatExchangerType              | Heat exchanger type                                              | Number   | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | partyModeDuration              | Party mode duration (in minutes)                                 | Number   | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | partyModeFanStage              | Party mode fan stage                                             | Number   | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | partyModeRemainingTime         | Party mode remaining time                                        | Number   | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | partyModeStatus                | Party mode status                                                | Switch   |                                                                                                      |\r\n+| standbyModeDuration              | standbyModeDuration            | Standby mode duration (in minutes)                               | Number   | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | standbyModeFanStage            | Standby mode fan stage                                           | Number   | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | standbyModeRemainingTime       | Standby mode remaining time                                      | Number   | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | standbyModeStatus              | Standby mode status                                              | Switch   |                                                                                                      |\r\n+| operatingMode                    | operatingMode                  | Operating mode (automatic/manual)                                | Switch   | 0 = automatic, 1 = manual                                                                            |\r\n+| fanStage                         | fanStage                       | Fan stage                                                        | Number   | 0 - 4                                                                                                |\r\n+| percentageFanStage               | percentageFanStage             | Fan stage in percent                                             | Number   | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | temperature                    | Ouside air temperature in \u00b0C                                     | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | temperature                    | Supply air temperature in \u00b0C                                     | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | temperature                    | Outgoing air temperature in \u00b0C                                   | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | temperature                    | Extract air temperature in \u00b0C                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | temperature                    | Pre-heater intake temperature in \u00b0C                              | Number   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | temperature                    | After-heater return temperature in \u00b0C                            | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidity                       | External humidity sensor 1                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidity                       | External humidity sensor 2                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidity                       | External humidity sensor 3                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidity                       | External humidity sensor 4                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidity                       | External humidity sensor 5                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidity                       | External humidity sensor 6                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidity                       | External humidity sensor 7                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidity                       | External humidity sensor 8                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | temperature                    | External temperature sensor 1                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | temperature                    | External temperature sensor 2                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | temperature                    | External temperature sensor 3                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | temperature                    | External temperature sensor 4                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | temperature                    | External temperature sensor 5                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | temperature                    | External temperature sensor 6                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | temperature                    | External temperature sensor 7                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | temperature                    | External temperature sensor 8                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2                            | External CO2 sensor 1                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2                            | External CO2 sensor 2                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2                            | External CO2 sensor 3                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2                            | External CO2 sensor 4                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2                            | External CO2 sensor 5                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2                            | External CO2 sensor 6                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2                            | External CO2 sensor 7                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2                            | External CO2 sensor 8                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | voc                            | External VOC sensor 1                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | voc                            | External VOC sensor 2                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | voc                            | External VOC sensor 3                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | voc                            | External VOC sensor 4                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | voc                            | External VOC sensor 5                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | voc                            | External VOC sensor 6                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | voc                            | External VOC sensor 7                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | voc                            | External VOC sensor 8                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | temperature                    | After-heater intake temperature in \u00b0C                            | Number   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | weekProfileNhz                 | Week profile after-heater                                        | Number   | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | serNo                          | Serial number                                                    | String   |                                                                                                      |\r\n+| prodCode                         | prodCode                       | Production Code                                                  | String   |                                                                                                      |\r\n+| supplyAirRpm                     | rpm                            | Supply air fan RPM                                               | Number   | 0 - 9999                                                                                             |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3MjAyOA==", "bodyText": "Number:time", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464872028", "createdAt": "2020-08-04T08:02:15Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2ControlSteps                | CO2 control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControlStatus               | VOC control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControlSetValue             | VOC control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControlSteps                | VOC control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| comfortTemp                      | comfortTemp                    | Comfort Temperature                                              | Number   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | timeZoneDifferenceToGmt        | Time Zone Difference to GMT                                      | Number   | -12 - 14                                                                                             |\r\n+| dateFormat                       | dateFormat                     | Date format                                                      | Number   | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | heatExchangerType              | Heat exchanger type                                              | Number   | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | partyModeDuration              | Party mode duration (in minutes)                                 | Number   | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | partyModeFanStage              | Party mode fan stage                                             | Number   | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | partyModeRemainingTime         | Party mode remaining time                                        | Number   | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | partyModeStatus                | Party mode status                                                | Switch   |                                                                                                      |\r\n+| standbyModeDuration              | standbyModeDuration            | Standby mode duration (in minutes)                               | Number   | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | standbyModeFanStage            | Standby mode fan stage                                           | Number   | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | standbyModeRemainingTime       | Standby mode remaining time                                      | Number   | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | standbyModeStatus              | Standby mode status                                              | Switch   |                                                                                                      |\r\n+| operatingMode                    | operatingMode                  | Operating mode (automatic/manual)                                | Switch   | 0 = automatic, 1 = manual                                                                            |\r\n+| fanStage                         | fanStage                       | Fan stage                                                        | Number   | 0 - 4                                                                                                |\r\n+| percentageFanStage               | percentageFanStage             | Fan stage in percent                                             | Number   | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | temperature                    | Ouside air temperature in \u00b0C                                     | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | temperature                    | Supply air temperature in \u00b0C                                     | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | temperature                    | Outgoing air temperature in \u00b0C                                   | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | temperature                    | Extract air temperature in \u00b0C                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | temperature                    | Pre-heater intake temperature in \u00b0C                              | Number   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | temperature                    | After-heater return temperature in \u00b0C                            | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidity                       | External humidity sensor 1                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidity                       | External humidity sensor 2                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidity                       | External humidity sensor 3                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidity                       | External humidity sensor 4                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidity                       | External humidity sensor 5                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidity                       | External humidity sensor 6                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidity                       | External humidity sensor 7                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidity                       | External humidity sensor 8                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | temperature                    | External temperature sensor 1                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | temperature                    | External temperature sensor 2                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | temperature                    | External temperature sensor 3                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | temperature                    | External temperature sensor 4                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | temperature                    | External temperature sensor 5                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | temperature                    | External temperature sensor 6                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | temperature                    | External temperature sensor 7                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | temperature                    | External temperature sensor 8                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2                            | External CO2 sensor 1                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2                            | External CO2 sensor 2                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2                            | External CO2 sensor 3                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2                            | External CO2 sensor 4                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2                            | External CO2 sensor 5                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2                            | External CO2 sensor 6                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2                            | External CO2 sensor 7                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2                            | External CO2 sensor 8                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | voc                            | External VOC sensor 1                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | voc                            | External VOC sensor 2                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | voc                            | External VOC sensor 3                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | voc                            | External VOC sensor 4                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | voc                            | External VOC sensor 5                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | voc                            | External VOC sensor 6                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | voc                            | External VOC sensor 7                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | voc                            | External VOC sensor 8                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | temperature                    | After-heater intake temperature in \u00b0C                            | Number   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | weekProfileNhz                 | Week profile after-heater                                        | Number   | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | serNo                          | Serial number                                                    | String   |                                                                                                      |\r\n+| prodCode                         | prodCode                       | Production Code                                                  | String   |                                                                                                      |\r\n+| supplyAirRpm                     | rpm                            | Supply air fan RPM                                               | Number   | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | rpm                            | Extract air fan RPM                                              | Number   | 0 - 9999                                                                                             |\r\n+| logout                           | logout                         | Logout                                                           | Switch   | 1 = logout                                                                                           |\r\n+| holidayProgramme                 | holidayProgramme               | Holiday programme                                                | Number   | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | holidayProgrammeFanStage       | Holiday programme fan stage                                      | Number   | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | holidayProgrammeStart          | Holiday programme start                                          | DateTime |                                                                                                      |\r\n+| holidayProgrammeEnd              | holidayProgrammeEnd            | Holiday programme end                                            | DateTime |                                                                                                      |\r\n+| holidayProgrammeInterval         | holidayProgrammeInterval       | Holiday programme interval in hours                              | Number   | 1 - 24                                                                                               |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3MzE2NQ==", "bodyText": "Is this really in percents? I am confused with 2^32 - 1 \ud83d\ude05", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464873165", "createdAt": "2020-08-04T08:04:20Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2ControlSteps                | CO2 control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControlStatus               | VOC control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControlSetValue             | VOC control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControlSteps                | VOC control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| comfortTemp                      | comfortTemp                    | Comfort Temperature                                              | Number   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | timeZoneDifferenceToGmt        | Time Zone Difference to GMT                                      | Number   | -12 - 14                                                                                             |\r\n+| dateFormat                       | dateFormat                     | Date format                                                      | Number   | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | heatExchangerType              | Heat exchanger type                                              | Number   | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | partyModeDuration              | Party mode duration (in minutes)                                 | Number   | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | partyModeFanStage              | Party mode fan stage                                             | Number   | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | partyModeRemainingTime         | Party mode remaining time                                        | Number   | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | partyModeStatus                | Party mode status                                                | Switch   |                                                                                                      |\r\n+| standbyModeDuration              | standbyModeDuration            | Standby mode duration (in minutes)                               | Number   | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | standbyModeFanStage            | Standby mode fan stage                                           | Number   | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | standbyModeRemainingTime       | Standby mode remaining time                                      | Number   | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | standbyModeStatus              | Standby mode status                                              | Switch   |                                                                                                      |\r\n+| operatingMode                    | operatingMode                  | Operating mode (automatic/manual)                                | Switch   | 0 = automatic, 1 = manual                                                                            |\r\n+| fanStage                         | fanStage                       | Fan stage                                                        | Number   | 0 - 4                                                                                                |\r\n+| percentageFanStage               | percentageFanStage             | Fan stage in percent                                             | Number   | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | temperature                    | Ouside air temperature in \u00b0C                                     | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | temperature                    | Supply air temperature in \u00b0C                                     | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | temperature                    | Outgoing air temperature in \u00b0C                                   | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | temperature                    | Extract air temperature in \u00b0C                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | temperature                    | Pre-heater intake temperature in \u00b0C                              | Number   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | temperature                    | After-heater return temperature in \u00b0C                            | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidity                       | External humidity sensor 1                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidity                       | External humidity sensor 2                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidity                       | External humidity sensor 3                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidity                       | External humidity sensor 4                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidity                       | External humidity sensor 5                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidity                       | External humidity sensor 6                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidity                       | External humidity sensor 7                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidity                       | External humidity sensor 8                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | temperature                    | External temperature sensor 1                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | temperature                    | External temperature sensor 2                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | temperature                    | External temperature sensor 3                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | temperature                    | External temperature sensor 4                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | temperature                    | External temperature sensor 5                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | temperature                    | External temperature sensor 6                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | temperature                    | External temperature sensor 7                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | temperature                    | External temperature sensor 8                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2                            | External CO2 sensor 1                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2                            | External CO2 sensor 2                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2                            | External CO2 sensor 3                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2                            | External CO2 sensor 4                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2                            | External CO2 sensor 5                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2                            | External CO2 sensor 6                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2                            | External CO2 sensor 7                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2                            | External CO2 sensor 8                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | voc                            | External VOC sensor 1                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | voc                            | External VOC sensor 2                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | voc                            | External VOC sensor 3                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | voc                            | External VOC sensor 4                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | voc                            | External VOC sensor 5                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | voc                            | External VOC sensor 6                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | voc                            | External VOC sensor 7                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | voc                            | External VOC sensor 8                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | temperature                    | After-heater intake temperature in \u00b0C                            | Number   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | weekProfileNhz                 | Week profile after-heater                                        | Number   | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | serNo                          | Serial number                                                    | String   |                                                                                                      |\r\n+| prodCode                         | prodCode                       | Production Code                                                  | String   |                                                                                                      |\r\n+| supplyAirRpm                     | rpm                            | Supply air fan RPM                                               | Number   | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | rpm                            | Extract air fan RPM                                              | Number   | 0 - 9999                                                                                             |\r\n+| logout                           | logout                         | Logout                                                           | Switch   | 1 = logout                                                                                           |\r\n+| holidayProgramme                 | holidayProgramme               | Holiday programme                                                | Number   | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | holidayProgrammeFanStage       | Holiday programme fan stage                                      | Number   | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | holidayProgrammeStart          | Holiday programme start                                          | DateTime |                                                                                                      |\r\n+| holidayProgrammeEnd              | holidayProgrammeEnd            | Holiday programme end                                            | DateTime |                                                                                                      |\r\n+| holidayProgrammeInterval         | holidayProgrammeInterval       | Holiday programme interval in hours                              | Number   | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | holidayProgrammeActivationTime | Holiday programme activation time in minutes                     | Number   | 5 - 300                                                                                              |\r\n+| vhzType                          | vhzType                        | Pre-heater type                                                  | Number   | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | functionTypeKwlEm              | Function KWL-EM                                                  | Number   | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | runOnTimeVhzNhz                | Stopping time preheater/afterheater in seconds                   | Number   | 60 - 120                                                                                             |\r\n+| externalContact                  | externalContact                | External contact                                                 | Number   | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | errorOutputFunction            | Error output function (collective error or just error)           | Number   | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | filterChange                   | Filter change                                                    | Switch   |                                                                                                      |\r\n+| filterChangeInterval             | filterChangeInterval           | Filter change interval in months                                 | Number   | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | filterChangeRemainingTime      | Filter change remaining time in minutes                          | Number   | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | filterChangeReset              | Reset filter change remaining time                               | Number   | 0 - 1                                                                                                |\r\n+| bypassRoomTemperature            | bypassRoomTemperature          | Bypass room temperature in \u00b0C                                    | Number   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | bypassMinOutsideTemperature    | Bypass outside temperature in \u00b0C                                 | Number   | 5 - 20                                                                                               |\r\n+| tbd                              | tbd                            | No description available for this parameter in the specification | Number   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | factorySettingWzu              | Factory setting WZU                                              | Switch   | 1 = reset individual switching times                                                                 |\r\n+| factoryReset                     | factoryReset                   | Factory reset                                                    | Switch   | 1 = reset start                                                                                      |\r\n+| supplyAirFanStage                | fanStage                       | Supply air fan stage                                             | Number   | 0 - 4                                                                                                |\r\n+| extractAirFanStage               | fanStage                       | Extract air fan stage                                            | Number   | 0 - 4                                                                                                |\r\n+| fanStageStepped0to2v             | fanStageStepped1               | Fan stage for stepped mode - range 0-2V                          | Number   | 0 - 2                                                                                                |\r\n+| fanStageStepped2to4v             | fanStageStepped2               | Fan stage for stepped mode - range 2-4V                          | Number   | 0 - 4                                                                                                |\r\n+| fanStageStepped4to6v             | fanStageStepped2               | Fan stage for stepped mode - range 4-6V                          | Number   | 0 - 4                                                                                                |\r\n+| fanStageStepped6to8v             | fanStageStepped2               | Fan stage for stepped mode - range 6-8V                          | Number   | 0 - 4                                                                                                |\r\n+| fanStageStepped8to10v            | fanStageStepped2               | Fan stage for stepped mode - range 8-10V                         | Number   | 0 - 4                                                                                                |\r\n+| offsetExtractAir                 | offsetExtractAir               | Offset extract air                                               | Number   | float                                                                                                |\r\n+| assignmentFanStages              | assignmentFanStages            | Assignment fan stages - stepped or 0-10V                         | Number   | 0 = 0-10V, 1 = stepped                                                                               |\r\n+| sensorNameHumidityAndTemp1       | sensorName                     | Sensor name - humidity and temperature 1                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp2       | sensorName                     | Sensor name - humidity and temperature 2                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp3       | sensorName                     | Sensor name - humidity and temperature 3                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp4       | sensorName                     | Sensor name - humidity and temperature 4                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp5       | sensorName                     | Sensor name - humidity and temperature 5                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp6       | sensorName                     | Sensor name - humidity and temperature 6                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp7       | sensorName                     | Sensor name - humidity and temperature 7                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp8       | sensorName                     | Sensor name - humidity and temperature 8                         | String   |                                                                                                      |\r\n+| sensorNameCo21                   | sensorName                     | Sensor name - CO2 1                                              | String   |                                                                                                      |\r\n+| sensorNameCo22                   | sensorName                     | Sensor name - CO2 2                                              | String   |                                                                                                      |\r\n+| sensorNameCo23                   | sensorName                     | Sensor name - CO2 3                                              | String   |                                                                                                      |\r\n+| sensorNameCo24                   | sensorName                     | Sensor name - CO2 4                                              | String   |                                                                                                      |\r\n+| sensorNameCo25                   | sensorName                     | Sensor name - CO2 5                                              | String   |                                                                                                      |\r\n+| sensorNameCo26                   | sensorName                     | Sensor name - CO2 6                                              | String   |                                                                                                      |\r\n+| sensorNameCo27                   | sensorName                     | Sensor name - CO2 7                                              | String   |                                                                                                      |\r\n+| sensorNameCo28                   | sensorName                     | Sensor name - CO2 8                                              | String   |                                                                                                      |\r\n+| sensorNameVoc1                   | sensorName                     | Sensor name - VOC 1                                              | String   |                                                                                                      |\r\n+| sensorNameVoc2                   | sensorName                     | Sensor name - VOC 2                                              | String   |                                                                                                      |\r\n+| sensorNameVoc3                   | sensorName                     | Sensor name - VOC 3                                              | String   |                                                                                                      |\r\n+| sensorNameVoc4                   | sensorName                     | Sensor name - VOC 4                                              | String   |                                                                                                      |\r\n+| sensorNameVoc5                   | sensorName                     | Sensor name - VOC 5                                              | String   |                                                                                                      |\r\n+| sensorNameVoc6                   | sensorName                     | Sensor name - VOC 6                                              | String   |                                                                                                      |\r\n+| sensorNameVoc7                   | sensorName                     | Sensor name - VOC 7                                              | String   |                                                                                                      |\r\n+| sensorNameVoc8                   | sensorName                     | Sensor name - VOC 8                                              | String   |                                                                                                      |\r\n+| softwareVersionBasis             | softwareVersionBasis           | Software version basis (format xx.xx)                            | String   |                                                                                                      |\r\n+| operatingHoursSupplyAirVent      | operatingHours                 | Operating hours supply air fan (in minutes)                      | Number   | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursExtractAirVent     | operatingHours                 | Operating hours extract air fan (in minutes)                     | Number   | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursVhz                | operatingHours                 | Operating hours preheater (in minutes)                           | Number   | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursNhz                | operatingHours                 | Operating hours afterheater (in minutes)                         | Number   | 0 - 2^32-1                                                                                           |\r\n+| outputPowerVhz                   | outputPower                    | Output power of preheater (in percent)                           | Number   | 0 - 2^32-1                                                                                           |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3NDM4Mw==", "bodyText": "Url should probably point to openhab repo, although not merged yet", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464874383", "createdAt": "2020-08-04T08:06:34Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,307 @@\n+# Modbus.HeliosEasyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+This implementation was done for my personal use for a KWL EC 500W L device.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+A Helios Ventilation device can be added either manually in Paper UI or via a `.things` file via a Modbus Bridge providing the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Type                   |  Description                                                     | ItemType | Values                                                                                               |\r\n+|----------------------------------|--------------------------------|------------------------------------------------------------------|----------|------------------------------------------------------------------------------------------------------|\r\n+| articleDescription               | articleDescription             | The KWL's article description                                    | String   |                                                                                                      |\r\n+| refNo                            | refNo                          | The KWL's reference number                                       | String   |                                                                                                      |\r\n+| macAddress                       | macAddress                     | The KWL's MAC Address                                            | String   |                                                                                                      |\r\n+| language                         | language                       | The KWL user interface's language                                | String   | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | date                           | The KWL's system date                                            | DateTime |                                                                                                      |\r\n+| time                             | time                           | The KWL's system time                                            | DateTime |                                                                                                      |\r\n+| summerWinter                     | summerWinter                   | Indicates if summertime or wintertime is active                  | Switch   | 0 = wintertime, 1 = summertime                                                                       |\r\n+| autoSwUpdate                     | autoSwUpdate                   | Indicates if automatic software updates are enable               | Switch   |                                                                                                      |\r\n+| accessHeliosPortal               | accessHeliosPortal             | Indicates if access to Helios portal is enabled                  | Switch   |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 1                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 2                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 3                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | voltageFanStage                | Voltage of extract air fan mapped to fan stage 4                 | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 1                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 2                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 3                  | Number   | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | voltageFanStage                | Voltage of supply air fan mapped to fan stage 4                  | Number   | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | minFanStage                    | Minimum fan stage (0 or 1)                                       | Number   | 0, 1                                                                                                 |\r\n+| kwlBe                            | kwlBe                          | Slide switch controller KWL-BE activated                         | Switch   |                                                                                                      |\r\n+| kwlBec                           | kwlBec                         | Comfort controller KWL-BEC activated                             | Switch   |                                                                                                      |\r\n+| unitConfig                       | unitConfig                     | Ventilation unit configuration (type of house)                   | Number   | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | preHeaterStatus                | Pre-Heater Status                                                | Switch   |                                                                                                      |\r\n+| kwlFtfConfig0                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 0                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 1                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 2                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 3                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 4                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 5                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 6                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | kwlFtfConfig                   | Humidity/temperature sensor configuration 7                      | Number   | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControlStatus          | Humidity control status                                          | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControlSetValue        | Humidity control set value (in percent)                          | Number   | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControlSteps           | Humidity control steps (in percent)                              | Number   | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityStopTime               | Humidity stop time in hours (0-24)                               | Number   | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2ControlStatus               | CO2 control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2ControlSetValue             | CO2 control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2ControlSteps                | CO2 control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControlStatus               | VOC control status                                               | Number   | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControlSetValue             | VOC control set value (in ppm)                                   | Number   | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControlSteps                | VOC control steps (in ppm)                                       | Number   | 50 - 400                                                                                             |\r\n+| comfortTemp                      | comfortTemp                    | Comfort Temperature                                              | Number   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | timeZoneDifferenceToGmt        | Time Zone Difference to GMT                                      | Number   | -12 - 14                                                                                             |\r\n+| dateFormat                       | dateFormat                     | Date format                                                      | Number   | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | heatExchangerType              | Heat exchanger type                                              | Number   | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | partyModeDuration              | Party mode duration (in minutes)                                 | Number   | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | partyModeFanStage              | Party mode fan stage                                             | Number   | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | partyModeRemainingTime         | Party mode remaining time                                        | Number   | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | partyModeStatus                | Party mode status                                                | Switch   |                                                                                                      |\r\n+| standbyModeDuration              | standbyModeDuration            | Standby mode duration (in minutes)                               | Number   | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | standbyModeFanStage            | Standby mode fan stage                                           | Number   | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | standbyModeRemainingTime       | Standby mode remaining time                                      | Number   | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | standbyModeStatus              | Standby mode status                                              | Switch   |                                                                                                      |\r\n+| operatingMode                    | operatingMode                  | Operating mode (automatic/manual)                                | Switch   | 0 = automatic, 1 = manual                                                                            |\r\n+| fanStage                         | fanStage                       | Fan stage                                                        | Number   | 0 - 4                                                                                                |\r\n+| percentageFanStage               | percentageFanStage             | Fan stage in percent                                             | Number   | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | temperature                    | Ouside air temperature in \u00b0C                                     | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | temperature                    | Supply air temperature in \u00b0C                                     | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | temperature                    | Outgoing air temperature in \u00b0C                                   | Number   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | temperature                    | Extract air temperature in \u00b0C                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | temperature                    | Pre-heater intake temperature in \u00b0C                              | Number   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | temperature                    | After-heater return temperature in \u00b0C                            | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidity                       | External humidity sensor 1                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidity                       | External humidity sensor 2                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidity                       | External humidity sensor 3                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidity                       | External humidity sensor 4                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidity                       | External humidity sensor 5                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidity                       | External humidity sensor 6                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidity                       | External humidity sensor 7                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidity                       | External humidity sensor 8                                       | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | temperature                    | External temperature sensor 1                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | temperature                    | External temperature sensor 2                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | temperature                    | External temperature sensor 3                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | temperature                    | External temperature sensor 4                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | temperature                    | External temperature sensor 5                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | temperature                    | External temperature sensor 6                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | temperature                    | External temperature sensor 7                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | temperature                    | External temperature sensor 8                                    | Number   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2                            | External CO2 sensor 1                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2                            | External CO2 sensor 2                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2                            | External CO2 sensor 3                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2                            | External CO2 sensor 4                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2                            | External CO2 sensor 5                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2                            | External CO2 sensor 6                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2                            | External CO2 sensor 7                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2                            | External CO2 sensor 8                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | voc                            | External VOC sensor 1                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | voc                            | External VOC sensor 2                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | voc                            | External VOC sensor 3                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | voc                            | External VOC sensor 4                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | voc                            | External VOC sensor 5                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | voc                            | External VOC sensor 6                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | voc                            | External VOC sensor 7                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | voc                            | External VOC sensor 8                                            | Number   | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | temperature                    | After-heater intake temperature in \u00b0C                            | Number   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | weekProfileNhz                 | Week profile after-heater                                        | Number   | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | serNo                          | Serial number                                                    | String   |                                                                                                      |\r\n+| prodCode                         | prodCode                       | Production Code                                                  | String   |                                                                                                      |\r\n+| supplyAirRpm                     | rpm                            | Supply air fan RPM                                               | Number   | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | rpm                            | Extract air fan RPM                                              | Number   | 0 - 9999                                                                                             |\r\n+| logout                           | logout                         | Logout                                                           | Switch   | 1 = logout                                                                                           |\r\n+| holidayProgramme                 | holidayProgramme               | Holiday programme                                                | Number   | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | holidayProgrammeFanStage       | Holiday programme fan stage                                      | Number   | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | holidayProgrammeStart          | Holiday programme start                                          | DateTime |                                                                                                      |\r\n+| holidayProgrammeEnd              | holidayProgrammeEnd            | Holiday programme end                                            | DateTime |                                                                                                      |\r\n+| holidayProgrammeInterval         | holidayProgrammeInterval       | Holiday programme interval in hours                              | Number   | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | holidayProgrammeActivationTime | Holiday programme activation time in minutes                     | Number   | 5 - 300                                                                                              |\r\n+| vhzType                          | vhzType                        | Pre-heater type                                                  | Number   | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | functionTypeKwlEm              | Function KWL-EM                                                  | Number   | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | runOnTimeVhzNhz                | Stopping time preheater/afterheater in seconds                   | Number   | 60 - 120                                                                                             |\r\n+| externalContact                  | externalContact                | External contact                                                 | Number   | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | errorOutputFunction            | Error output function (collective error or just error)           | Number   | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | filterChange                   | Filter change                                                    | Switch   |                                                                                                      |\r\n+| filterChangeInterval             | filterChangeInterval           | Filter change interval in months                                 | Number   | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | filterChangeRemainingTime      | Filter change remaining time in minutes                          | Number   | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | filterChangeReset              | Reset filter change remaining time                               | Number   | 0 - 1                                                                                                |\r\n+| bypassRoomTemperature            | bypassRoomTemperature          | Bypass room temperature in \u00b0C                                    | Number   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | bypassMinOutsideTemperature    | Bypass outside temperature in \u00b0C                                 | Number   | 5 - 20                                                                                               |\r\n+| tbd                              | tbd                            | No description available for this parameter in the specification | Number   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | factorySettingWzu              | Factory setting WZU                                              | Switch   | 1 = reset individual switching times                                                                 |\r\n+| factoryReset                     | factoryReset                   | Factory reset                                                    | Switch   | 1 = reset start                                                                                      |\r\n+| supplyAirFanStage                | fanStage                       | Supply air fan stage                                             | Number   | 0 - 4                                                                                                |\r\n+| extractAirFanStage               | fanStage                       | Extract air fan stage                                            | Number   | 0 - 4                                                                                                |\r\n+| fanStageStepped0to2v             | fanStageStepped1               | Fan stage for stepped mode - range 0-2V                          | Number   | 0 - 2                                                                                                |\r\n+| fanStageStepped2to4v             | fanStageStepped2               | Fan stage for stepped mode - range 2-4V                          | Number   | 0 - 4                                                                                                |\r\n+| fanStageStepped4to6v             | fanStageStepped2               | Fan stage for stepped mode - range 4-6V                          | Number   | 0 - 4                                                                                                |\r\n+| fanStageStepped6to8v             | fanStageStepped2               | Fan stage for stepped mode - range 6-8V                          | Number   | 0 - 4                                                                                                |\r\n+| fanStageStepped8to10v            | fanStageStepped2               | Fan stage for stepped mode - range 8-10V                         | Number   | 0 - 4                                                                                                |\r\n+| offsetExtractAir                 | offsetExtractAir               | Offset extract air                                               | Number   | float                                                                                                |\r\n+| assignmentFanStages              | assignmentFanStages            | Assignment fan stages - stepped or 0-10V                         | Number   | 0 = 0-10V, 1 = stepped                                                                               |\r\n+| sensorNameHumidityAndTemp1       | sensorName                     | Sensor name - humidity and temperature 1                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp2       | sensorName                     | Sensor name - humidity and temperature 2                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp3       | sensorName                     | Sensor name - humidity and temperature 3                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp4       | sensorName                     | Sensor name - humidity and temperature 4                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp5       | sensorName                     | Sensor name - humidity and temperature 5                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp6       | sensorName                     | Sensor name - humidity and temperature 6                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp7       | sensorName                     | Sensor name - humidity and temperature 7                         | String   |                                                                                                      |\r\n+| sensorNameHumidityAndTemp8       | sensorName                     | Sensor name - humidity and temperature 8                         | String   |                                                                                                      |\r\n+| sensorNameCo21                   | sensorName                     | Sensor name - CO2 1                                              | String   |                                                                                                      |\r\n+| sensorNameCo22                   | sensorName                     | Sensor name - CO2 2                                              | String   |                                                                                                      |\r\n+| sensorNameCo23                   | sensorName                     | Sensor name - CO2 3                                              | String   |                                                                                                      |\r\n+| sensorNameCo24                   | sensorName                     | Sensor name - CO2 4                                              | String   |                                                                                                      |\r\n+| sensorNameCo25                   | sensorName                     | Sensor name - CO2 5                                              | String   |                                                                                                      |\r\n+| sensorNameCo26                   | sensorName                     | Sensor name - CO2 6                                              | String   |                                                                                                      |\r\n+| sensorNameCo27                   | sensorName                     | Sensor name - CO2 7                                              | String   |                                                                                                      |\r\n+| sensorNameCo28                   | sensorName                     | Sensor name - CO2 8                                              | String   |                                                                                                      |\r\n+| sensorNameVoc1                   | sensorName                     | Sensor name - VOC 1                                              | String   |                                                                                                      |\r\n+| sensorNameVoc2                   | sensorName                     | Sensor name - VOC 2                                              | String   |                                                                                                      |\r\n+| sensorNameVoc3                   | sensorName                     | Sensor name - VOC 3                                              | String   |                                                                                                      |\r\n+| sensorNameVoc4                   | sensorName                     | Sensor name - VOC 4                                              | String   |                                                                                                      |\r\n+| sensorNameVoc5                   | sensorName                     | Sensor name - VOC 5                                              | String   |                                                                                                      |\r\n+| sensorNameVoc6                   | sensorName                     | Sensor name - VOC 6                                              | String   |                                                                                                      |\r\n+| sensorNameVoc7                   | sensorName                     | Sensor name - VOC 7                                              | String   |                                                                                                      |\r\n+| sensorNameVoc8                   | sensorName                     | Sensor name - VOC 8                                              | String   |                                                                                                      |\r\n+| softwareVersionBasis             | softwareVersionBasis           | Software version basis (format xx.xx)                            | String   |                                                                                                      |\r\n+| operatingHoursSupplyAirVent      | operatingHours                 | Operating hours supply air fan (in minutes)                      | Number   | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursExtractAirVent     | operatingHours                 | Operating hours extract air fan (in minutes)                     | Number   | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursVhz                | operatingHours                 | Operating hours preheater (in minutes)                           | Number   | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursNhz                | operatingHours                 | Operating hours afterheater (in minutes)                         | Number   | 0 - 2^32-1                                                                                           |\r\n+| outputPowerVhz                   | outputPower                    | Output power of preheater (in percent)                           | Number   | 0 - 2^32-1                                                                                           |\r\n+| outputPowerNhz                   | outputPower                    | Output power of afterheater (in percent)                         | Number   | 0 - 2^32-1                                                                                           |\r\n+| resetFlag                        | resetFlag                      | Reset flag                                                       | Switch   | 1 = reset flag                                                                                       |\r\n+| errors                           | errors                         | Errors as integer value                                          | Number   | 0 - 2^32-1                                                                                           |\r\n+| warnings                         | warnings                       | Warnings as integer value                                        | Number   | 0 - 2^32-1                                                                                           |\r\n+| infos                            | infos                          | Infos as integer value                                           | Number   | 0 - 2^32-1                                                                                           |\r\n+| noOfErrors                       | noOfErrors                     | Number of bit-coded errors                                       | Number   | 0 - 32                                                                                               |\r\n+| noOfWarnings                     | noOfWarnings                   | Number of bit-coded warnings                                     | Number   | 0 - 8                                                                                                |\r\n+| noOfInfos                        | noOfInfos                      | Number of bit-coded infos                                        | Number   | 0 - 8                                                                                                |\r\n+| errorsMsg                        | message                        | Errors as string                                                 | String   |                                                                                                      |\r\n+| warningsMsg                      | message                        | Warnings as string                                               | String   |                                                                                                      |\r\n+| infosMsg                         | message                        | Infos as string                                                  | String   |                                                                                                      |\r\n+| statusFlags                      | message                        | Status flags                                                     | String   |                                                                                                      |\r\n+| sensorConfigKwlFtf1              | sensorConfig                   | Sensor configuration (installed or not) KWL-FTF 1                | Number   | 0 = no sensor, 1 = sensor installed                                                                  |\r\n+| sensorConfigKwlFtf2              | sensorConfig                   | Sensor configuration (installed or not) KWL-FTF 2                | Number   | 0 = no sensor, 1 = sensor installed                                                                  |\r\n+| sensorConfigKwlFtf3              | sensorConfig                   | Sensor configuration (installed or not) KWL-FTF 3                | Number   | 0 = no sensor, 1 = sensor installed                                                                  |\r\n+| sensorConfigKwlFtf4              | sensorConfig                   | Sensor configuration (installed or not) KWL-FTF 4                | Number   | 0 = no sensor, 1 = sensor installed                                                                  |\r\n+| sensorConfigKwlFtf5              | sensorConfig                   | Sensor configuration (installed or not) KWL-FTF 5                | Number   | 0 = no sensor, 1 = sensor installed                                                                  |\r\n+| sensorConfigKwlFtf6              | sensorConfig                   | Sensor configuration (installed or not) KWL-FTF 6                | Number   | 0 = no sensor, 1 = sensor installed                                                                  |\r\n+| sensorConfigKwlFtf7              | sensorConfig                   | Sensor configuration (installed or not) KWL-FTF 7                | Number   | 0 = no sensor, 1 = sensor installed                                                                  |\r\n+| sensorConfigKwlFtf8              | sensorConfig                   | Sensor configuration (installed or not) KWL-FTF 8                | Number   | 0 = no sensor, 1 = sensor installed                                                                  |\r\n+| globalManualWebUpdate            | globalManualWebUpdate          | Manual update of data (profile 8LXGP, XWP, firmware, SD files)   | Switch   | 1 = start update                                                                                     |\r\n+| portalGlobalsErrorForWeb         | portalGlobalsErrorForWeb       | Always the latest error that has occurred                        | Number   | 1 - 255                                                                                              |\r\n+| clearError                       | clearError                     | Clear error (PortalGlobals.ErrorForWeb)                          | Switch   | 1 = reset error                                                                                      |\r\n+| bypassStatus                     | bypassStatus                   | Status of the bypass                                             | Switch   | 0 = closed, 1 = open                                                                                 |\r\n+| bypassFromDay                    | day                            | Bypass active from day                                           | Number   | 1 - 31                                                                                               |\r\n+| bypassFromMonth                  | month                          | Bypass active from month                                         | Number   | 1 - 12                                                                                               |\r\n+| bypassToDay                      | day                            | Bypass active to day                                             | Number   | 1 - 31                                                                                               |\r\n+| bypassToMonth                    | month                          | Bypass active to month                                           | Number   | 1 - 12                                                                                               |\r\n+\r\n+Please also see `variables.json` for further details: https://github.com/bern77/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/variables.json\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg3NzA1MQ==", "bodyText": "Not sure if it matters but let eclipse generate a proper random number", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464877051", "createdAt": "2020-08-04T08:11:30Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosException.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\n+\n+public class HeliosException extends Exception {\n+\n+    private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg4MDA3Nw==", "bodyText": "I would prefer simply  \"Modbus TCP\". To me gateway implies separate device", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464880077", "createdAt": "2020-08-04T08:17:12Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1065 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"modbus\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+    xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+    <thing-type id=\"helios-ventilation-easycontrols\">\n+    \n+        <supported-bridge-type-refs>\n+            <bridge-type-ref id=\"tcp\" />\n+        </supported-bridge-type-refs>\n+    \n+        <label>Helios Ventilation</label>\n+        <description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway TCP</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg4MTY1MQ==", "bodyText": "You can also use logger.error with this type of critical error", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r464881651", "createdAt": "2020-08-04T08:20:02Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMTQxMA==", "bodyText": "Check dev guidelines on logging levels https://www.openhab.org/docs/developer/guidelines.html#f-logging\nThis one should be perhaps logged with debug level or dropped all together (as thing status is updated). Also, it might be good give some context - now only exception message is logged.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465011410", "createdAt": "2020-08-04T12:25:29Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMjM3NA==", "bodyText": "See comment on logging levels above", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465012374", "createdAt": "2020-08-04T12:27:10Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMjUxNQ==", "bodyText": "Logging levels", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465012515", "createdAt": "2020-08-04T12:27:26Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMzk0NQ==", "bodyText": "Check logging level. Consider updating thing status on failed writes", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465013945", "createdAt": "2020-08-04T12:30:07Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 282}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxNDAxNA==", "bodyText": "Check logging level. Consider updating thing status on failed writes", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465014014", "createdAt": "2020-08-04T12:30:15Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxNDUwOA==", "bodyText": "Document cases when the exception is raised", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465014508", "createdAt": "2020-08-04T12:31:11Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxNTIzNA==", "bodyText": "Document when exception is raised", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465015234", "createdAt": "2020-08-04T12:32:30Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r\n+                logger.error(\r\n+                        \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     * @throws HeliosException\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 344}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxNzA2Nw==", "bodyText": "Please consider renaming the parameter... The lambda you are implementing is the callback, not the argument itself. Call it e.g. failureInfo", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465017067", "createdAt": "2020-08-04T12:35:52Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r\n+                logger.error(\r\n+                        \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void readValue(String variableName) throws HeliosException {\r\n+        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (v.hasReadAccess()) {\r\n+            try {\r\n+                lock.acquire(); // will block until lock is available\r\n+            } catch (InterruptedException e) {\r\n+                logger.error(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                return;\r\n+            }\r\n+            // write variable name to register\r\n+            String payload = v.getVariableString();\r\n+            this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                    HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                    HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                        this.comms.submitOneTimePoll(\r\n+                                new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                        HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                        HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                pollResult -> {\r\n+                                    lock.release();\r\n+                                    Optional<ModbusRegisterArray> registers = (Optional<ModbusRegisterArray>) pollResult\r\n+                                            .getRegisters();\r\n+                                    if (registers.isPresent()) {\r\n+                                        processResponse(v, registers.get());\r\n+                                    }\r\n+                                }, failureCallback -> {\r\n+                                    handleError(\"{} encountered error reading from device: {}\",\r\n+                                            failureCallback.getCause().getMessage(), lock);\r\n+                                });\r\n+                    }, failureCallback -> {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 379}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxODQ0OA==", "bodyText": "How do you want to handle the timezones? For example, should the binding write dates as UTC to the device?\nIf I understood correctly, the current implementation ignores the time zone all together", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465018448", "createdAt": "2020-08-04T12:38:24Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r\n+                logger.error(\r\n+                        \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void readValue(String variableName) throws HeliosException {\r\n+        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (v.hasReadAccess()) {\r\n+            try {\r\n+                lock.acquire(); // will block until lock is available\r\n+            } catch (InterruptedException e) {\r\n+                logger.error(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                return;\r\n+            }\r\n+            // write variable name to register\r\n+            String payload = v.getVariableString();\r\n+            this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                    HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                    HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                        this.comms.submitOneTimePoll(\r\n+                                new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                        HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                        HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                pollResult -> {\r\n+                                    lock.release();\r\n+                                    Optional<ModbusRegisterArray> registers = (Optional<ModbusRegisterArray>) pollResult\r\n+                                            .getRegisters();\r\n+                                    if (registers.isPresent()) {\r\n+                                        processResponse(v, registers.get());\r\n+                                    }\r\n+                                }, failureCallback -> {\r\n+                                    handleError(\"{} encountered error reading from device: {}\",\r\n+                                            failureCallback.getCause().getMessage(), lock);\r\n+                                });\r\n+                    }, failureCallback -> {\r\n+                        handleError(\"{} encountered error writing to device: {}\",\r\n+                                failureCallback.getCause().getMessage(), lock);\r\n+                    });\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMjU1NA==", "bodyText": "This is now assuming system default timezone... Is that what you want?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465022554", "createdAt": "2020-08-04T12:45:22Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r\n+                logger.error(\r\n+                        \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void readValue(String variableName) throws HeliosException {\r\n+        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (v.hasReadAccess()) {\r\n+            try {\r\n+                lock.acquire(); // will block until lock is available\r\n+            } catch (InterruptedException e) {\r\n+                logger.error(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                return;\r\n+            }\r\n+            // write variable name to register\r\n+            String payload = v.getVariableString();\r\n+            this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                    HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                    HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                        this.comms.submitOneTimePoll(\r\n+                                new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                        HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                        HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                pollResult -> {\r\n+                                    lock.release();\r\n+                                    Optional<ModbusRegisterArray> registers = (Optional<ModbusRegisterArray>) pollResult\r\n+                                            .getRegisters();\r\n+                                    if (registers.isPresent()) {\r\n+                                        processResponse(v, registers.get());\r\n+                                    }\r\n+                                }, failureCallback -> {\r\n+                                    handleError(\"{} encountered error reading from device: {}\",\r\n+                                            failureCallback.getCause().getMessage(), lock);\r\n+                                });\r\n+                    }, failureCallback -> {\r\n+                        handleError(\"{} encountered error writing to device: {}\",\r\n+                                failureCallback.getCause().getMessage(), lock);\r\n+                    });\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 446}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNDU1OQ==", "bodyText": "Provide appropriate charset explicitly, e.g. StandardCharsets.US_ASCII or StandardCharsets.UTF8", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465024559", "createdAt": "2020-08-04T12:48:49Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r\n+                logger.error(\r\n+                        \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void readValue(String variableName) throws HeliosException {\r\n+        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (v.hasReadAccess()) {\r\n+            try {\r\n+                lock.acquire(); // will block until lock is available\r\n+            } catch (InterruptedException e) {\r\n+                logger.error(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                return;\r\n+            }\r\n+            // write variable name to register\r\n+            String payload = v.getVariableString();\r\n+            this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                    HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                    HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                        this.comms.submitOneTimePoll(\r\n+                                new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                        HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                        HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                pollResult -> {\r\n+                                    lock.release();\r\n+                                    Optional<ModbusRegisterArray> registers = (Optional<ModbusRegisterArray>) pollResult\r\n+                                            .getRegisters();\r\n+                                    if (registers.isPresent()) {\r\n+                                        processResponse(v, registers.get());\r\n+                                    }\r\n+                                }, failureCallback -> {\r\n+                                    handleError(\"{} encountered error reading from device: {}\",\r\n+                                            failureCallback.getCause().getMessage(), lock);\r\n+                                });\r\n+                    }, failureCallback -> {\r\n+                        handleError(\"{} encountered error writing to device: {}\",\r\n+                                failureCallback.getCause().getMessage(), lock);\r\n+                    });\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            }\r\n+        } catch (Exception e) {\r\n+            // falling back to default date format (apparently using the configured format has failed)\r\n+            if (dateTimeParts != null) {\r\n+                dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            } else {\r\n+                logger.error(\"{} couldn't parse the provided date string: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), date);\r\n+                return new DateTimeType();\r\n+            }\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Prepares the payload for the request\r\n+     *\r\n+     * @param payload The String representation of the payload\r\n+     * @return The Register representation of the payload\r\n+     */\r\n+    private ModbusRegister[] preparePayload(String payload) {\r\n+\r\n+        // determine number of registers\r\n+        int l = (payload.length() + 1) / 2; // +1 because we need to include at least one termination symbol 0x00\r\n+        if ((payload.length() + 1) % 2 != 0) {\r\n+            l++;\r\n+        }\r\n+\r\n+        ModbusRegister reg[] = new ModbusRegister[l];\r\n+        byte[] b = payload.getBytes();\r\n+        int ch = 0;\r\n+        for (int i = 0; i < reg.length; i++) {\r\n+            byte b1 = ch < b.length ? b[ch] : (byte) 0x00; // terminate with 0x00 if at the end of the payload\r\n+            ch++;\r\n+            byte b2 = ch < b.length ? b[ch] : (byte) 0x00;\r\n+            ch++;\r\n+            reg[i] = new ModbusRegister(b1, b2);\r\n+        }\r\n+        return reg;\r\n+    }\r\n+\r\n+    /**\r\n+     * Decodes the Helios device' response and returns the actual value of the variable\r\n+     *\r\n+     * @param response The registers received from the Helios device\r\n+     * @return The value or <tt>null</tt> if an error occurred\r\n+     */\r\n+    private void processResponse(HeliosVariable v, ModbusRegisterArray registers) {\r\n+        // decode response\r\n+        byte[] b = new byte[registers.size() * 2];\r\n+        int actSize = 0; // track the actual size of the useable array (excluding any 0x00\r\n+                         // characters)\r\n+        for (int i = 0; i < registers.size(); i++) {\r\n+            byte[] reg = registers.getRegister(i).getBytes();\r\n+            if (reg.length == 2) { // only add to the array if it's a useable character\r\n+                if (reg[0] != 0x00) {\r\n+                    b[actSize++] = reg[0];\r\n+                }\r\n+                if (reg[1] != 0x00) {\r\n+                    b[actSize++] = reg[1];\r\n+                }\r\n+            }\r\n+        }\r\n+        b = Arrays.copyOf(b, actSize); // before creating a string of it the array needs to be\r\n+                                       // truncated\r\n+        String r = new String(b);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 513}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNjA3OQ==", "bodyText": "Can you have many = in the string? If so, you can defend yourself with the limit parameter of String.split", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465026079", "createdAt": "2020-08-04T12:51:23Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r\n+                logger.error(\r\n+                        \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void readValue(String variableName) throws HeliosException {\r\n+        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (v.hasReadAccess()) {\r\n+            try {\r\n+                lock.acquire(); // will block until lock is available\r\n+            } catch (InterruptedException e) {\r\n+                logger.error(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                return;\r\n+            }\r\n+            // write variable name to register\r\n+            String payload = v.getVariableString();\r\n+            this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                    HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                    HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                        this.comms.submitOneTimePoll(\r\n+                                new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                        HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                        HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                pollResult -> {\r\n+                                    lock.release();\r\n+                                    Optional<ModbusRegisterArray> registers = (Optional<ModbusRegisterArray>) pollResult\r\n+                                            .getRegisters();\r\n+                                    if (registers.isPresent()) {\r\n+                                        processResponse(v, registers.get());\r\n+                                    }\r\n+                                }, failureCallback -> {\r\n+                                    handleError(\"{} encountered error reading from device: {}\",\r\n+                                            failureCallback.getCause().getMessage(), lock);\r\n+                                });\r\n+                    }, failureCallback -> {\r\n+                        handleError(\"{} encountered error writing to device: {}\",\r\n+                                failureCallback.getCause().getMessage(), lock);\r\n+                    });\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            }\r\n+        } catch (Exception e) {\r\n+            // falling back to default date format (apparently using the configured format has failed)\r\n+            if (dateTimeParts != null) {\r\n+                dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            } else {\r\n+                logger.error(\"{} couldn't parse the provided date string: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), date);\r\n+                return new DateTimeType();\r\n+            }\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Prepares the payload for the request\r\n+     *\r\n+     * @param payload The String representation of the payload\r\n+     * @return The Register representation of the payload\r\n+     */\r\n+    private ModbusRegister[] preparePayload(String payload) {\r\n+\r\n+        // determine number of registers\r\n+        int l = (payload.length() + 1) / 2; // +1 because we need to include at least one termination symbol 0x00\r\n+        if ((payload.length() + 1) % 2 != 0) {\r\n+            l++;\r\n+        }\r\n+\r\n+        ModbusRegister reg[] = new ModbusRegister[l];\r\n+        byte[] b = payload.getBytes();\r\n+        int ch = 0;\r\n+        for (int i = 0; i < reg.length; i++) {\r\n+            byte b1 = ch < b.length ? b[ch] : (byte) 0x00; // terminate with 0x00 if at the end of the payload\r\n+            ch++;\r\n+            byte b2 = ch < b.length ? b[ch] : (byte) 0x00;\r\n+            ch++;\r\n+            reg[i] = new ModbusRegister(b1, b2);\r\n+        }\r\n+        return reg;\r\n+    }\r\n+\r\n+    /**\r\n+     * Decodes the Helios device' response and returns the actual value of the variable\r\n+     *\r\n+     * @param response The registers received from the Helios device\r\n+     * @return The value or <tt>null</tt> if an error occurred\r\n+     */\r\n+    private void processResponse(HeliosVariable v, ModbusRegisterArray registers) {\r\n+        // decode response\r\n+        byte[] b = new byte[registers.size() * 2];\r\n+        int actSize = 0; // track the actual size of the useable array (excluding any 0x00\r\n+                         // characters)\r\n+        for (int i = 0; i < registers.size(); i++) {\r\n+            byte[] reg = registers.getRegister(i).getBytes();\r\n+            if (reg.length == 2) { // only add to the array if it's a useable character\r\n+                if (reg[0] != 0x00) {\r\n+                    b[actSize++] = reg[0];\r\n+                }\r\n+                if (reg[1] != 0x00) {\r\n+                    b[actSize++] = reg[1];\r\n+                }\r\n+            }\r\n+        }\r\n+        b = Arrays.copyOf(b, actSize); // before creating a string of it the array needs to be\r\n+                                       // truncated\r\n+        String r = new String(b);\r\n+        String[] parts = r.split(\"=\"); // remove the part \"vXXXX=\" from the string\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 514}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyODU1OQ==", "bodyText": "Check logging level. Should thing status change?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465028559", "createdAt": "2020-08-04T12:55:17Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyOTA0NQ==", "bodyText": "What type of exceptions are catched by this?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465029045", "createdAt": "2020-08-04T12:56:04Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzMzE2MA==", "bodyText": "It's great that user can refresh the data on demand. Unfortunately, I think openHAB commands all channels REFRESH on startup, generating a lot of traffic since there are so many channels.\nOne way to handle this is to throttle refreshes. See FMI weather binding as one example https://github.com/openhab/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.fmiweather/src/main/java/org/openhab/binding/fmiweather/internal/AbstractWeatherHandler.java", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465033160", "createdAt": "2020-08-04T13:02:50Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzNDgyOQ==", "bodyText": "scheduler.submit is a cleaner way to schedule a runnable to be executed immediately on the background, you can drop the other arguments", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465034829", "createdAt": "2020-08-04T13:05:29Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzNTg1NA==", "bodyText": "You might want to check the type? Just to avoid handling nonsense command types", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465035854", "createdAt": "2020-08-04T13:07:06Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 273}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwOTIxOTg4", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-460921988", "createdAt": "2020-08-04T15:24:18Z", "commit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToyNDoxOFrOG7lhpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToyNTowOVrOG7lkBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzMzk4OA==", "bodyText": "Add NonnullByDefault per coding conventions", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465133988", "createdAt": "2020-08-04T15:24:18Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsConfiguration.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsConfiguration} class contains fields mapping thing configuration parameters.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsConfiguration {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzNDI4OQ==", "bodyText": "NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465134289", "createdAt": "2020-08-04T15:24:44Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import static org.openhab.binding.modbus.helioseasycontrols.internal.HeliosEasyControlsBindingConstants.THING_TYPE_HELIOS_VENTILATION_EASY_CONTROLS;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\r\n+import org.osgi.service.component.annotations.Component;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandlerFactory} is responsible for creating things and thing\r\n+ * handlers.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@Component(configurationPid = \"binding.helioseasycontrols\", service = ThingHandlerFactory.class)\r\n+public class HeliosEasyControlsHandlerFactory extends BaseThingHandlerFactory {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzNDUxMg==", "bodyText": "NonnullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465134512", "createdAt": "2020-08-04T15:25:00Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosException.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\n+\n+public class HeliosException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzNDU5OA==", "bodyText": "NonnullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465134598", "createdAt": "2020-08-04T15:25:09Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosVariable.java", "diffHunk": "@@ -0,0 +1,298 @@\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\n+\n+/**\n+ * This class represents a variable of the Helios modbus.\n+ *\n+ * @author Bernhard Bauer - Initial contribution\n+ * @version 2.0\n+ */\n+public class HeliosVariable implements Comparable<HeliosVariable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bed51709166571e1d10385bd331f3b280e9dac8", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/9bed51709166571e1d10385bd331f3b280e9dac8", "committedDate": "2020-08-06T18:23:34Z", "message": "Use UoM when writing to device\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}, "afterCommit": {"oid": "86f42d3a5d2de1b69427d610051fe77fbbe46396", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/86f42d3a5d2de1b69427d610051fe77fbbe46396", "committedDate": "2020-08-06T18:33:12Z", "message": "Use UoM when writing to device\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86f42d3a5d2de1b69427d610051fe77fbbe46396", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/86f42d3a5d2de1b69427d610051fe77fbbe46396", "committedDate": "2020-08-06T18:33:12Z", "message": "Use UoM when writing to device\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}, "afterCommit": {"oid": "0df2ab2d0d560fed3667345ad86d566acb870512", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/0df2ab2d0d560fed3667345ad86d566acb870512", "committedDate": "2020-08-30T10:29:42Z", "message": "Discarded unwanted changes to other bindings\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0df2ab2d0d560fed3667345ad86d566acb870512", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/0df2ab2d0d560fed3667345ad86d566acb870512", "committedDate": "2020-08-30T10:29:42Z", "message": "Discarded unwanted changes to other bindings\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}, "afterCommit": {"oid": "5e8ad2f12137c73d3a54209fbe1db00ab92971d4", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/5e8ad2f12137c73d3a54209fbe1db00ab92971d4", "committedDate": "2020-08-30T10:41:04Z", "message": "Discarded unwanted changes to other bindings\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjI1MTA4", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-478225108", "createdAt": "2020-08-30T18:34:34Z", "commit": {"oid": "5e8ad2f12137c73d3a54209fbe1db00ab92971d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxODozNDozNFrOHJkxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxODozNDozNFrOHJkxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwMTY3Ng==", "bodyText": "You need to update the version number to 2.5.9-SNAPSHOT to be able to compile.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479801676", "createdAt": "2020-08-30T18:34:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/pom.xml", "diffHunk": "@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n+\r\n+  <modelVersion>4.0.0</modelVersion>\r\n+\r\n+  <parent>\r\n+    <groupId>org.openhab.addons.bundles</groupId>\r\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\r\n+    <version>2.5.8-SNAPSHOT</version>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e8ad2f12137c73d3a54209fbe1db00ab92971d4"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjI5NzEz", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-478229713", "createdAt": "2020-08-30T19:53:03Z", "commit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxOTo1MzowM1rOHJlNVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDoyNDozNlrOHJlY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwODg1Mg==", "bodyText": "If you put each sentence in a separate line, reading the diffs would be easier.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479808852", "createdAt": "2020-08-30T19:53:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwODg4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\n          \n          \n            \n            You first need to set up a Modbus bridge according to the [Modbus documentation](insert link here). Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479808889", "createdAt": "2020-08-30T19:53:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwOTIwMQ==", "bodyText": "Could you add another column indicating if a Channel is read-only or writeable?\nTo make the table better readable on small displays, you could combine the values column and the description column. Also, you could remove the unit column, as it is redundant to the Item Type column. Moreover, the user can also specify \u00b0F with Number:Temperature types. If it's percent or ppm could be stated in the description.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479809201", "createdAt": "2020-08-30T19:56:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwOTgwOA==", "bodyText": "Does the user know what KWL stands for?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479809808", "createdAt": "2020-08-30T20:02:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwOTg1Mw==", "bodyText": "Are these rather properties than Channels?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479809853", "createdAt": "2020-08-30T20:03:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgwOTkxOQ==", "bodyText": "Is there any reason why these Channels are separated?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479809919", "createdAt": "2020-08-30T20:04:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMDQ2OA==", "bodyText": "What's the purpose of this Channel? You can retrieve the UTC offset via OH. See https://www.openhab.org/javadoc/v2.5/org/eclipse/smarthome/core/i18n/timezoneprovider", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479810468", "createdAt": "2020-08-30T20:09:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMDYxMQ==", "bodyText": "The user can specify the date format on its own in the sitemap or items configuration. Is this Channel necessary?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479810611", "createdAt": "2020-08-30T20:10:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMDg0Mw==", "bodyText": "Also properties?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479810843", "createdAt": "2020-08-30T20:13:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMDg4OA==", "bodyText": "What's the purpose of this Channel?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479810888", "createdAt": "2020-08-30T20:14:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTEzMQ==", "bodyText": "I'd remove it, then.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811131", "createdAt": "2020-08-30T20:16:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r\n+| holidayProgramme                 | operation       | Holiday programme                                                | Number                   |      | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage                                      | Number                   |      | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                          | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                            | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours                              | Number:Time              | h    | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes                     | Number:Time              | min  | 5 - 300                                                                                              |\r\n+| vhzType                          | unitConfig      | Pre-heater type                                                  | Number                   |      | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | unitConfig      | Function KWL-EM                                                  | Number                   |      | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds                   | Number:Time              | s    | 60 - 120                                                                                             |\r\n+| externalContact                  | unitConfig      | External contact                                                 | Number                   |      | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error)           | Number                   |      | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | unitConfig      | Filter change                                                    | Switch                   |      |                                                                                                      |\r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months                                 | Number                   |      | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes                          | Number:Time              | min  | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | general         | Reset filter change remaining time                               | Switch                   |      | ON = reset                                                                                           |\r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C                                 | Number:Temperature       | \u00b0C   | 5 - 20                                                                                               |\r\n+| tbd                              | general         | No description available for this parameter in the specification | Number:Temperature       | \u00b0C   | 3 - 10                                                                                               |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTI0OA==", "bodyText": "Actually OH is not intended to configure Things, including factory resets. Is there a use case for these parameters?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811248", "createdAt": "2020-08-30T20:17:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r\n+| holidayProgramme                 | operation       | Holiday programme                                                | Number                   |      | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage                                      | Number                   |      | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                          | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                            | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours                              | Number:Time              | h    | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes                     | Number:Time              | min  | 5 - 300                                                                                              |\r\n+| vhzType                          | unitConfig      | Pre-heater type                                                  | Number                   |      | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | unitConfig      | Function KWL-EM                                                  | Number                   |      | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds                   | Number:Time              | s    | 60 - 120                                                                                             |\r\n+| externalContact                  | unitConfig      | External contact                                                 | Number                   |      | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error)           | Number                   |      | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | unitConfig      | Filter change                                                    | Switch                   |      |                                                                                                      |\r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months                                 | Number                   |      | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes                          | Number:Time              | min  | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | general         | Reset filter change remaining time                               | Switch                   |      | ON = reset                                                                                           |\r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C                                 | Number:Temperature       | \u00b0C   | 5 - 20                                                                                               |\r\n+| tbd                              | general         | No description available for this parameter in the specification | Number:Temperature       | \u00b0C   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | general         | Factory setting WZU                                              | Switch                   |      | ON = reset individual switching times                                                                |\r\n+| factoryReset                     | general         | Factory reset                                                    | Switch                   |      | ON = reset start                                                                                     |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTMxNQ==", "bodyText": "Are the following names rather properties?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811315", "createdAt": "2020-08-30T20:18:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r\n+| holidayProgramme                 | operation       | Holiday programme                                                | Number                   |      | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage                                      | Number                   |      | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                          | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                            | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours                              | Number:Time              | h    | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes                     | Number:Time              | min  | 5 - 300                                                                                              |\r\n+| vhzType                          | unitConfig      | Pre-heater type                                                  | Number                   |      | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | unitConfig      | Function KWL-EM                                                  | Number                   |      | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds                   | Number:Time              | s    | 60 - 120                                                                                             |\r\n+| externalContact                  | unitConfig      | External contact                                                 | Number                   |      | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error)           | Number                   |      | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | unitConfig      | Filter change                                                    | Switch                   |      |                                                                                                      |\r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months                                 | Number                   |      | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes                          | Number:Time              | min  | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | general         | Reset filter change remaining time                               | Switch                   |      | ON = reset                                                                                           |\r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C                                 | Number:Temperature       | \u00b0C   | 5 - 20                                                                                               |\r\n+| tbd                              | general         | No description available for this parameter in the specification | Number:Temperature       | \u00b0C   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | general         | Factory setting WZU                                              | Switch                   |      | ON = reset individual switching times                                                                |\r\n+| factoryReset                     | general         | Factory reset                                                    | Switch                   |      | ON = reset start                                                                                     |\r\n+| supplyAirFanStage                | operation       | Supply air fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| extractAirFanStage               | operation       | Extract air fan stage                                            | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped0to2v             | unitConfig      | Fan stage for stepped mode - range 0-2V                          | Number                   |      | 0 - 2                                                                                                |\r\n+| fanStageStepped2to4v             | unitConfig      | Fan stage for stepped mode - range 2-4V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped4to6v             | unitConfig      | Fan stage for stepped mode - range 4-6V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped6to8v             | unitConfig      | Fan stage for stepped mode - range 6-8V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped8to10v            | unitConfig      | Fan stage for stepped mode - range 8-10V                         | Number                   |      | 0 - 4                                                                                                |\r\n+| offsetExtractAir                 | unitConfig      | Offset extract air                                               | Number                   |      | float                                                                                                |\r\n+| assignmentFanStages              | unitConfig      | Assignment fan stages - stepped or 0-10V                         | Switch                   |      | OFF = 0-10V, ON = stepped                                                                            |\r\n+| sensorNameHumidityAndTemp1       | humidityControl | Sensor name - humidity and temperature 1                         | String                   |      |                                                                                                      |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTM1Ng==", "bodyText": "Property?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811356", "createdAt": "2020-08-30T20:19:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r\n+| holidayProgramme                 | operation       | Holiday programme                                                | Number                   |      | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage                                      | Number                   |      | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                          | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                            | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours                              | Number:Time              | h    | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes                     | Number:Time              | min  | 5 - 300                                                                                              |\r\n+| vhzType                          | unitConfig      | Pre-heater type                                                  | Number                   |      | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | unitConfig      | Function KWL-EM                                                  | Number                   |      | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds                   | Number:Time              | s    | 60 - 120                                                                                             |\r\n+| externalContact                  | unitConfig      | External contact                                                 | Number                   |      | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error)           | Number                   |      | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | unitConfig      | Filter change                                                    | Switch                   |      |                                                                                                      |\r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months                                 | Number                   |      | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes                          | Number:Time              | min  | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | general         | Reset filter change remaining time                               | Switch                   |      | ON = reset                                                                                           |\r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C                                 | Number:Temperature       | \u00b0C   | 5 - 20                                                                                               |\r\n+| tbd                              | general         | No description available for this parameter in the specification | Number:Temperature       | \u00b0C   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | general         | Factory setting WZU                                              | Switch                   |      | ON = reset individual switching times                                                                |\r\n+| factoryReset                     | general         | Factory reset                                                    | Switch                   |      | ON = reset start                                                                                     |\r\n+| supplyAirFanStage                | operation       | Supply air fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| extractAirFanStage               | operation       | Extract air fan stage                                            | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped0to2v             | unitConfig      | Fan stage for stepped mode - range 0-2V                          | Number                   |      | 0 - 2                                                                                                |\r\n+| fanStageStepped2to4v             | unitConfig      | Fan stage for stepped mode - range 2-4V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped4to6v             | unitConfig      | Fan stage for stepped mode - range 4-6V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped6to8v             | unitConfig      | Fan stage for stepped mode - range 6-8V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped8to10v            | unitConfig      | Fan stage for stepped mode - range 8-10V                         | Number                   |      | 0 - 4                                                                                                |\r\n+| offsetExtractAir                 | unitConfig      | Offset extract air                                               | Number                   |      | float                                                                                                |\r\n+| assignmentFanStages              | unitConfig      | Assignment fan stages - stepped or 0-10V                         | Switch                   |      | OFF = 0-10V, ON = stepped                                                                            |\r\n+| sensorNameHumidityAndTemp1       | humidityControl | Sensor name - humidity and temperature 1                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp2       | humidityControl | Sensor name - humidity and temperature 2                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp3       | humidityControl | Sensor name - humidity and temperature 3                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp4       | humidityControl | Sensor name - humidity and temperature 4                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp5       | humidityControl | Sensor name - humidity and temperature 5                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp6       | humidityControl | Sensor name - humidity and temperature 6                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp7       | humidityControl | Sensor name - humidity and temperature 7                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp8       | humidityControl | Sensor name - humidity and temperature 8                         | String                   |      |                                                                                                      |\r\n+| sensorNameCo21                   | co2Control      | Sensor name - CO2 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo22                   | co2Control      | Sensor name - CO2 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo23                   | co2Control      | Sensor name - CO2 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo24                   | co2Control      | Sensor name - CO2 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo25                   | co2Control      | Sensor name - CO2 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo26                   | co2Control      | Sensor name - CO2 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo27                   | co2Control      | Sensor name - CO2 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo28                   | co2Control      | Sensor name - CO2 8                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc1                   | vocControl      | Sensor name - VOC 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc2                   | vocControl      | Sensor name - VOC 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc3                   | vocControl      | Sensor name - VOC 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc4                   | vocControl      | Sensor name - VOC 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc5                   | vocControl      | Sensor name - VOC 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc6                   | vocControl      | Sensor name - VOC 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc7                   | vocControl      | Sensor name - VOC 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc8                   | vocControl      | Sensor name - VOC 8                                              | String                   |      |                                                                                                      |\r\n+| softwareVersionBasis             | general         | Software version basis (format xx.xx)                            | String                   |      |                                                                                                      |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQwMA==", "bodyText": "What's the purpose of this Channel?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811400", "createdAt": "2020-08-30T20:19:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r\n+| holidayProgramme                 | operation       | Holiday programme                                                | Number                   |      | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage                                      | Number                   |      | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                          | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                            | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours                              | Number:Time              | h    | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes                     | Number:Time              | min  | 5 - 300                                                                                              |\r\n+| vhzType                          | unitConfig      | Pre-heater type                                                  | Number                   |      | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | unitConfig      | Function KWL-EM                                                  | Number                   |      | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds                   | Number:Time              | s    | 60 - 120                                                                                             |\r\n+| externalContact                  | unitConfig      | External contact                                                 | Number                   |      | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error)           | Number                   |      | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | unitConfig      | Filter change                                                    | Switch                   |      |                                                                                                      |\r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months                                 | Number                   |      | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes                          | Number:Time              | min  | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | general         | Reset filter change remaining time                               | Switch                   |      | ON = reset                                                                                           |\r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C                                 | Number:Temperature       | \u00b0C   | 5 - 20                                                                                               |\r\n+| tbd                              | general         | No description available for this parameter in the specification | Number:Temperature       | \u00b0C   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | general         | Factory setting WZU                                              | Switch                   |      | ON = reset individual switching times                                                                |\r\n+| factoryReset                     | general         | Factory reset                                                    | Switch                   |      | ON = reset start                                                                                     |\r\n+| supplyAirFanStage                | operation       | Supply air fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| extractAirFanStage               | operation       | Extract air fan stage                                            | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped0to2v             | unitConfig      | Fan stage for stepped mode - range 0-2V                          | Number                   |      | 0 - 2                                                                                                |\r\n+| fanStageStepped2to4v             | unitConfig      | Fan stage for stepped mode - range 2-4V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped4to6v             | unitConfig      | Fan stage for stepped mode - range 4-6V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped6to8v             | unitConfig      | Fan stage for stepped mode - range 6-8V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped8to10v            | unitConfig      | Fan stage for stepped mode - range 8-10V                         | Number                   |      | 0 - 4                                                                                                |\r\n+| offsetExtractAir                 | unitConfig      | Offset extract air                                               | Number                   |      | float                                                                                                |\r\n+| assignmentFanStages              | unitConfig      | Assignment fan stages - stepped or 0-10V                         | Switch                   |      | OFF = 0-10V, ON = stepped                                                                            |\r\n+| sensorNameHumidityAndTemp1       | humidityControl | Sensor name - humidity and temperature 1                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp2       | humidityControl | Sensor name - humidity and temperature 2                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp3       | humidityControl | Sensor name - humidity and temperature 3                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp4       | humidityControl | Sensor name - humidity and temperature 4                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp5       | humidityControl | Sensor name - humidity and temperature 5                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp6       | humidityControl | Sensor name - humidity and temperature 6                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp7       | humidityControl | Sensor name - humidity and temperature 7                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp8       | humidityControl | Sensor name - humidity and temperature 8                         | String                   |      |                                                                                                      |\r\n+| sensorNameCo21                   | co2Control      | Sensor name - CO2 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo22                   | co2Control      | Sensor name - CO2 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo23                   | co2Control      | Sensor name - CO2 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo24                   | co2Control      | Sensor name - CO2 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo25                   | co2Control      | Sensor name - CO2 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo26                   | co2Control      | Sensor name - CO2 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo27                   | co2Control      | Sensor name - CO2 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo28                   | co2Control      | Sensor name - CO2 8                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc1                   | vocControl      | Sensor name - VOC 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc2                   | vocControl      | Sensor name - VOC 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc3                   | vocControl      | Sensor name - VOC 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc4                   | vocControl      | Sensor name - VOC 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc5                   | vocControl      | Sensor name - VOC 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc6                   | vocControl      | Sensor name - VOC 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc7                   | vocControl      | Sensor name - VOC 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc8                   | vocControl      | Sensor name - VOC 8                                              | String                   |      |                                                                                                      |\r\n+| softwareVersionBasis             | general         | Software version basis (format xx.xx)                            | String                   |      |                                                                                                      |\r\n+| operatingHoursSupplyAirVent      | general         | Operating hours supply air fan (in minutes)                      | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursExtractAirVent     | general         | Operating hours extract air fan (in minutes)                     | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursVhz                | general         | Operating hours preheater (in minutes)                           | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursNhz                | general         | Operating hours afterheater (in minutes)                         | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| outputPowerVhz                   | general         | Output power of preheater (in percent)                           | Number:Dimensionless     | %    | 0 - 2^32-1                                                                                           |\r\n+| outputPowerNhz                   | general         | Output power of afterheater (in percent)                         | Number:Dimensionless     | %    | 0 - 2^32-1                                                                                           |\r\n+| resetFlag                        | general         | Reset flag                                                       | Switch                   |      | ON = reset flag                                                                                      |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTQ5MA==", "bodyText": "Properties?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811490", "createdAt": "2020-08-30T20:20:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r\n+| holidayProgramme                 | operation       | Holiday programme                                                | Number                   |      | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage                                      | Number                   |      | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                          | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                            | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours                              | Number:Time              | h    | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes                     | Number:Time              | min  | 5 - 300                                                                                              |\r\n+| vhzType                          | unitConfig      | Pre-heater type                                                  | Number                   |      | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | unitConfig      | Function KWL-EM                                                  | Number                   |      | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds                   | Number:Time              | s    | 60 - 120                                                                                             |\r\n+| externalContact                  | unitConfig      | External contact                                                 | Number                   |      | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error)           | Number                   |      | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | unitConfig      | Filter change                                                    | Switch                   |      |                                                                                                      |\r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months                                 | Number                   |      | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes                          | Number:Time              | min  | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | general         | Reset filter change remaining time                               | Switch                   |      | ON = reset                                                                                           |\r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C                                 | Number:Temperature       | \u00b0C   | 5 - 20                                                                                               |\r\n+| tbd                              | general         | No description available for this parameter in the specification | Number:Temperature       | \u00b0C   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | general         | Factory setting WZU                                              | Switch                   |      | ON = reset individual switching times                                                                |\r\n+| factoryReset                     | general         | Factory reset                                                    | Switch                   |      | ON = reset start                                                                                     |\r\n+| supplyAirFanStage                | operation       | Supply air fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| extractAirFanStage               | operation       | Extract air fan stage                                            | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped0to2v             | unitConfig      | Fan stage for stepped mode - range 0-2V                          | Number                   |      | 0 - 2                                                                                                |\r\n+| fanStageStepped2to4v             | unitConfig      | Fan stage for stepped mode - range 2-4V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped4to6v             | unitConfig      | Fan stage for stepped mode - range 4-6V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped6to8v             | unitConfig      | Fan stage for stepped mode - range 6-8V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped8to10v            | unitConfig      | Fan stage for stepped mode - range 8-10V                         | Number                   |      | 0 - 4                                                                                                |\r\n+| offsetExtractAir                 | unitConfig      | Offset extract air                                               | Number                   |      | float                                                                                                |\r\n+| assignmentFanStages              | unitConfig      | Assignment fan stages - stepped or 0-10V                         | Switch                   |      | OFF = 0-10V, ON = stepped                                                                            |\r\n+| sensorNameHumidityAndTemp1       | humidityControl | Sensor name - humidity and temperature 1                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp2       | humidityControl | Sensor name - humidity and temperature 2                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp3       | humidityControl | Sensor name - humidity and temperature 3                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp4       | humidityControl | Sensor name - humidity and temperature 4                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp5       | humidityControl | Sensor name - humidity and temperature 5                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp6       | humidityControl | Sensor name - humidity and temperature 6                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp7       | humidityControl | Sensor name - humidity and temperature 7                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp8       | humidityControl | Sensor name - humidity and temperature 8                         | String                   |      |                                                                                                      |\r\n+| sensorNameCo21                   | co2Control      | Sensor name - CO2 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo22                   | co2Control      | Sensor name - CO2 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo23                   | co2Control      | Sensor name - CO2 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo24                   | co2Control      | Sensor name - CO2 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo25                   | co2Control      | Sensor name - CO2 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo26                   | co2Control      | Sensor name - CO2 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo27                   | co2Control      | Sensor name - CO2 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo28                   | co2Control      | Sensor name - CO2 8                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc1                   | vocControl      | Sensor name - VOC 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc2                   | vocControl      | Sensor name - VOC 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc3                   | vocControl      | Sensor name - VOC 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc4                   | vocControl      | Sensor name - VOC 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc5                   | vocControl      | Sensor name - VOC 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc6                   | vocControl      | Sensor name - VOC 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc7                   | vocControl      | Sensor name - VOC 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc8                   | vocControl      | Sensor name - VOC 8                                              | String                   |      |                                                                                                      |\r\n+| softwareVersionBasis             | general         | Software version basis (format xx.xx)                            | String                   |      |                                                                                                      |\r\n+| operatingHoursSupplyAirVent      | general         | Operating hours supply air fan (in minutes)                      | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursExtractAirVent     | general         | Operating hours extract air fan (in minutes)                     | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursVhz                | general         | Operating hours preheater (in minutes)                           | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursNhz                | general         | Operating hours afterheater (in minutes)                         | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| outputPowerVhz                   | general         | Output power of preheater (in percent)                           | Number:Dimensionless     | %    | 0 - 2^32-1                                                                                           |\r\n+| outputPowerNhz                   | general         | Output power of afterheater (in percent)                         | Number:Dimensionless     | %    | 0 - 2^32-1                                                                                           |\r\n+| resetFlag                        | general         | Reset flag                                                       | Switch                   |      | ON = reset flag                                                                                      |\r\n+| errors                           | general         | Errors as integer value                                          | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| warnings                         | general         | Warnings as integer value                                        | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| infos                            | general         | Infos as integer value                                           | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| noOfErrors                       | general         | Number of bit-coded errors                                       | Number                   |      | 0 - 32                                                                                               |\r\n+| noOfWarnings                     | general         | Number of bit-coded warnings                                     | Number                   |      | 0 - 8                                                                                                |\r\n+| noOfInfos                        | general         | Number of bit-coded infos                                        | Number                   |      | 0 - 8                                                                                                |\r\n+| errorsMsg                        | general         | Errors as string                                                 | String                   |      |                                                                                                      |\r\n+| warningsMsg                      | general         | Warnings as string                                               | String                   |      |                                                                                                      |\r\n+| infosMsg                         | general         | Infos as string                                                  | String                   |      |                                                                                                      |\r\n+| statusFlags                      | general         | Status flags                                                     | String                   |      |                                                                                                      |\r\n+| sensorConfigKwlFtf1              | general         | Sensor configuration (installed or not) KWL-FTF 1                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf2              | general         | Sensor configuration (installed or not) KWL-FTF 2                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf3              | general         | Sensor configuration (installed or not) KWL-FTF 3                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf4              | humidityControl | Sensor configuration (installed or not) KWL-FTF 4                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf5              | humidityControl | Sensor configuration (installed or not) KWL-FTF 5                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf6              | humidityControl | Sensor configuration (installed or not) KWL-FTF 6                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf7              | humidityControl | Sensor configuration (installed or not) KWL-FTF 7                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf8              | humidityControl | Sensor configuration (installed or not) KWL-FTF 8                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTUzNw==", "bodyText": "This sounds like an Action, rather a Channel.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811537", "createdAt": "2020-08-30T20:21:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r\n+| holidayProgramme                 | operation       | Holiday programme                                                | Number                   |      | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage                                      | Number                   |      | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                          | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                            | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours                              | Number:Time              | h    | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes                     | Number:Time              | min  | 5 - 300                                                                                              |\r\n+| vhzType                          | unitConfig      | Pre-heater type                                                  | Number                   |      | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | unitConfig      | Function KWL-EM                                                  | Number                   |      | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds                   | Number:Time              | s    | 60 - 120                                                                                             |\r\n+| externalContact                  | unitConfig      | External contact                                                 | Number                   |      | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error)           | Number                   |      | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | unitConfig      | Filter change                                                    | Switch                   |      |                                                                                                      |\r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months                                 | Number                   |      | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes                          | Number:Time              | min  | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | general         | Reset filter change remaining time                               | Switch                   |      | ON = reset                                                                                           |\r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C                                 | Number:Temperature       | \u00b0C   | 5 - 20                                                                                               |\r\n+| tbd                              | general         | No description available for this parameter in the specification | Number:Temperature       | \u00b0C   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | general         | Factory setting WZU                                              | Switch                   |      | ON = reset individual switching times                                                                |\r\n+| factoryReset                     | general         | Factory reset                                                    | Switch                   |      | ON = reset start                                                                                     |\r\n+| supplyAirFanStage                | operation       | Supply air fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| extractAirFanStage               | operation       | Extract air fan stage                                            | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped0to2v             | unitConfig      | Fan stage for stepped mode - range 0-2V                          | Number                   |      | 0 - 2                                                                                                |\r\n+| fanStageStepped2to4v             | unitConfig      | Fan stage for stepped mode - range 2-4V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped4to6v             | unitConfig      | Fan stage for stepped mode - range 4-6V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped6to8v             | unitConfig      | Fan stage for stepped mode - range 6-8V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped8to10v            | unitConfig      | Fan stage for stepped mode - range 8-10V                         | Number                   |      | 0 - 4                                                                                                |\r\n+| offsetExtractAir                 | unitConfig      | Offset extract air                                               | Number                   |      | float                                                                                                |\r\n+| assignmentFanStages              | unitConfig      | Assignment fan stages - stepped or 0-10V                         | Switch                   |      | OFF = 0-10V, ON = stepped                                                                            |\r\n+| sensorNameHumidityAndTemp1       | humidityControl | Sensor name - humidity and temperature 1                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp2       | humidityControl | Sensor name - humidity and temperature 2                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp3       | humidityControl | Sensor name - humidity and temperature 3                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp4       | humidityControl | Sensor name - humidity and temperature 4                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp5       | humidityControl | Sensor name - humidity and temperature 5                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp6       | humidityControl | Sensor name - humidity and temperature 6                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp7       | humidityControl | Sensor name - humidity and temperature 7                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp8       | humidityControl | Sensor name - humidity and temperature 8                         | String                   |      |                                                                                                      |\r\n+| sensorNameCo21                   | co2Control      | Sensor name - CO2 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo22                   | co2Control      | Sensor name - CO2 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo23                   | co2Control      | Sensor name - CO2 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo24                   | co2Control      | Sensor name - CO2 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo25                   | co2Control      | Sensor name - CO2 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo26                   | co2Control      | Sensor name - CO2 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo27                   | co2Control      | Sensor name - CO2 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo28                   | co2Control      | Sensor name - CO2 8                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc1                   | vocControl      | Sensor name - VOC 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc2                   | vocControl      | Sensor name - VOC 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc3                   | vocControl      | Sensor name - VOC 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc4                   | vocControl      | Sensor name - VOC 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc5                   | vocControl      | Sensor name - VOC 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc6                   | vocControl      | Sensor name - VOC 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc7                   | vocControl      | Sensor name - VOC 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc8                   | vocControl      | Sensor name - VOC 8                                              | String                   |      |                                                                                                      |\r\n+| softwareVersionBasis             | general         | Software version basis (format xx.xx)                            | String                   |      |                                                                                                      |\r\n+| operatingHoursSupplyAirVent      | general         | Operating hours supply air fan (in minutes)                      | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursExtractAirVent     | general         | Operating hours extract air fan (in minutes)                     | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursVhz                | general         | Operating hours preheater (in minutes)                           | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursNhz                | general         | Operating hours afterheater (in minutes)                         | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| outputPowerVhz                   | general         | Output power of preheater (in percent)                           | Number:Dimensionless     | %    | 0 - 2^32-1                                                                                           |\r\n+| outputPowerNhz                   | general         | Output power of afterheater (in percent)                         | Number:Dimensionless     | %    | 0 - 2^32-1                                                                                           |\r\n+| resetFlag                        | general         | Reset flag                                                       | Switch                   |      | ON = reset flag                                                                                      |\r\n+| errors                           | general         | Errors as integer value                                          | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| warnings                         | general         | Warnings as integer value                                        | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| infos                            | general         | Infos as integer value                                           | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| noOfErrors                       | general         | Number of bit-coded errors                                       | Number                   |      | 0 - 32                                                                                               |\r\n+| noOfWarnings                     | general         | Number of bit-coded warnings                                     | Number                   |      | 0 - 8                                                                                                |\r\n+| noOfInfos                        | general         | Number of bit-coded infos                                        | Number                   |      | 0 - 8                                                                                                |\r\n+| errorsMsg                        | general         | Errors as string                                                 | String                   |      |                                                                                                      |\r\n+| warningsMsg                      | general         | Warnings as string                                               | String                   |      |                                                                                                      |\r\n+| infosMsg                         | general         | Infos as string                                                  | String                   |      |                                                                                                      |\r\n+| statusFlags                      | general         | Status flags                                                     | String                   |      |                                                                                                      |\r\n+| sensorConfigKwlFtf1              | general         | Sensor configuration (installed or not) KWL-FTF 1                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf2              | general         | Sensor configuration (installed or not) KWL-FTF 2                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf3              | general         | Sensor configuration (installed or not) KWL-FTF 3                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf4              | humidityControl | Sensor configuration (installed or not) KWL-FTF 4                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf5              | humidityControl | Sensor configuration (installed or not) KWL-FTF 5                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf6              | humidityControl | Sensor configuration (installed or not) KWL-FTF 6                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf7              | humidityControl | Sensor configuration (installed or not) KWL-FTF 7                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf8              | humidityControl | Sensor configuration (installed or not) KWL-FTF 8                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| globalManualWebUpdate            | humidityControl | Manual update of data (profile 8LXGP, XWP, firmware, SD files)   | Switch                   |      | ON = start update                                                                                    |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTY2Ng==", "bodyText": "Action?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811666", "createdAt": "2020-08-30T20:22:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-ventilation-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                      | Item Type                | Unit | Values                                                                                               |\r\n+| -------------------------------- | --------------- | ---------------------------------------------------------------- | ------------------------ | ---- | ---------------------------------------------------------------------------------------------------- |\r\n+| articleDescription               | general         | The KWL's article description                                    | String                   |      |                                                                                                      |\r\n+| refNo                            | general         | The KWL's reference number                                       | String                   |      |                                                                                                      |\r\n+| macAddress                       | general         | The KWL's MAC Address                                            | String                   |      |                                                                                                      |\r\n+| language                         | general         | The KWL user interface's language                                | String                   |      | de, en, fr, hr, hu, it, pl, sk, sl                                                                   |\r\n+| date                             | general         | The KWL's system date                                            | DateTime                 |      |                                                                                                      |\r\n+| time                             | general         | The KWL's system time                                            | DateTime                 |      |                                                                                                      |\r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active                  | Switch                   |      | OFF = wintertime, ON = summertime                                                                    |\r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable               | Switch                   |      |                                                                                                      |\r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                  | Switch                   |      |                                                                                                      |\r\n+| voltageFanStage1ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 1                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 2                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 3                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4ExtractAir       | unitConfig      | Voltage of extract air fan mapped to fan stage 4                 | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage1SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 1                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage2SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 2                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage3SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 3                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| voltageFanStage4SupplyAir        | unitConfig      | Voltage of supply air fan mapped to fan stage 4                  | Number:ElectricPotential | V    | 1.6 - 10                                                                                             |\r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1)                                       | Number                   |      | 0, 1                                                                                                 |\r\n+| kwlBe                            | unitConfig      | Slide switch controller KWL-BE activated                         | Switch                   |      |                                                                                                      |\r\n+| kwlBec                           | unitConfig      | Comfort controller KWL-BEC activated                             | Switch                   |      |                                                                                                      |\r\n+| unitConfig                       | unitConfig      | Ventilation unit configuration (type of house)                   | Number                   |      | 1 = DiBt, 2 = passive-house                                                                          |\r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                | Switch                   |      |                                                                                                      |\r\n+| kwlFtfConfig0                    | humidityControl | Humidity/temperature sensor configuration 0                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig1                    | humidityControl | Humidity/temperature sensor configuration 1                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig2                    | humidityControl | Humidity/temperature sensor configuration 2                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig3                    | humidityControl | Humidity/temperature sensor configuration 3                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig4                    | humidityControl | Humidity/temperature sensor configuration 4                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig5                    | humidityControl | Humidity/temperature sensor configuration 5                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig6                    | humidityControl | Humidity/temperature sensor configuration 6                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| kwlFtfConfig7                    | humidityControl | Humidity/temperature sensor configuration 7                      | Number                   |      | 1 = only humidity, 2 = only temperature, 3 = combined                                                |\r\n+| humidityControlStatus            | humidityControl | Humidity control status                                          | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent)                          | Number:Dimensionless     | %    | 20 - 80                                                                                              |\r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent)                              | Number:Dimensionless     | %    | 5 - 20                                                                                               |\r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24)                               | Number:Time              | h    | 0 - 24                                                                                               |\r\n+| co2ControlStatus                 | co2Control      | CO2 control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| vocControlStatus                 | vocControl      | VOC control status                                               | Number                   |      | 0 = off, 1 = stepped, 2 = stepless                                                                   |\r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm)                                   | Number:Dimensionless     | ppm  | 300 - 2000                                                                                           |\r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm)                                       | Number:Dimensionless     | ppm  | 50 - 400                                                                                             |\r\n+| comfortTemp                      | unitConfig      | Comfort Temperature                                              | Number:Temperature       | \u00b0C   | 10.0 - 25.0                                                                                          |\r\n+| timeZoneDifferenceToGmt          | general         | Time Zone Difference to GMT                                      | Number:Time              | h    | -12 - 14                                                                                             |\r\n+| dateFormat                       | general         | Date format                                                      | Number                   |      | 0 = dd.mm.yyyy, 1 = mm.dd.yyyy, 2 = yyyy.mm.dd                                                       |\r\n+| heatExchangerType                | unitConfig      | Heat exchanger type                                              | Number                   |      | 0 = plastic, 1 = aluminium, 2 = enthalpy                                                             |\r\n+| partyModeDuration                | operation       | Party mode duration (in minutes)                                 | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| partyModeFanStage                | operation       | Party mode fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| partyModeRemainingTime           | operation       | Party mode remaining time                                        | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| partyModeStatus                  | operation       | Party mode status                                                | Switch                   |      |                                                                                                      |\r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes)                               | Number:Time              | min  | 5 - 180                                                                                              |\r\n+| standbyModeFanStage              | operation       | Standby mode fan stage                                           | Number                   |      | 0 - 4                                                                                                |\r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time                                      | Number:Time              | min  | 0 - 180                                                                                              |\r\n+| standbyModeStatus                | operation       | Standby mode status                                              | Switch                   |      |                                                                                                      |\r\n+| operatingMode                    | operation       | Operating mode (automatic/manual)                                | Switch                   |      | OFF = automatic, ON = manual                                                                         |\r\n+| fanStage                         | operation       | Fan stage                                                        | Number                   |      | 0 - 4                                                                                                |\r\n+| percentageFanStage               | operation       | Fan stage in percent                                             | Number:Dimensionless     | %    | 0 - 100                                                                                              |\r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C                                     | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C                                   | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C                              | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8                                       | Number:Dimensionless     | %    | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8                                    | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8                                            | Number:Dimensionless     | ppm  | -0.0 - 9998.9                                                                                        |\r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C                            | Number:Temperature       | \u00b0C   | -27.0 - 9998.9                                                                                       |\r\n+| weekProfileNhz                   | profiles        | Week profile after-heater                                        | Number                   |      | 0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off |\r\n+| serNo                            | general         | Serial number                                                    | String                   |      |                                                                                                      |\r\n+| prodCode                         | general         | Production Code                                                  | String                   |      |                                                                                                      |\r\n+| supplyAirRpm                     | general         | Supply air fan RPM                                               | Number                   |      | 0 - 9999                                                                                             |\r\n+| extractAirRpm                    | general         | Extract air fan RPM                                              | Number                   |      | 0 - 9999                                                                                             |\r\n+| logout                           | general         | Logout                                                           | Switch                   |      | ON = logout                                                                                          |\r\n+| holidayProgramme                 | operation       | Holiday programme                                                | Number                   |      | 0 = off, 1 = interval, 2 = constant                                                                  |\r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage                                      | Number                   |      | 0 - 4                                                                                                |\r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                          | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                            | DateTime                 |      |                                                                                                      |\r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours                              | Number:Time              | h    | 1 - 24                                                                                               |\r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes                     | Number:Time              | min  | 5 - 300                                                                                              |\r\n+| vhzType                          | unitConfig      | Pre-heater type                                                  | Number                   |      | 1 = EH-Basis, 2 EH-ERW, 3 = SEWT, 4 = LEWT                                                           |\r\n+| functionTypeKwlEm                | unitConfig      | Function KWL-EM                                                  | Number                   |      | 1 = function 1, 2 = function 2                                                                       |\r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds                   | Number:Time              | s    | 60 - 120                                                                                             |\r\n+| externalContact                  | unitConfig      | External contact                                                 | Number                   |      | 1 -6 (function 1-6)                                                                                  |\r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error)           | Number                   |      | 1 = collective error, 2 = only error                                                                 |\r\n+| filterChange                     | unitConfig      | Filter change                                                    | Switch                   |      |                                                                                                      |\r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months                                 | Number                   |      | 1 - 12                                                                                               |\r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes                          | Number:Time              | min  | 1 - 55000                                                                                            |\r\n+| filterChangeReset                | general         | Reset filter change remaining time                               | Switch                   |      | ON = reset                                                                                           |\r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C                                    | Number:Temperature       | \u00b0C   | 10 - 40                                                                                              |\r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C                                 | Number:Temperature       | \u00b0C   | 5 - 20                                                                                               |\r\n+| tbd                              | general         | No description available for this parameter in the specification | Number:Temperature       | \u00b0C   | 3 - 10                                                                                               |\r\n+| factorySettingWzu                | general         | Factory setting WZU                                              | Switch                   |      | ON = reset individual switching times                                                                |\r\n+| factoryReset                     | general         | Factory reset                                                    | Switch                   |      | ON = reset start                                                                                     |\r\n+| supplyAirFanStage                | operation       | Supply air fan stage                                             | Number                   |      | 0 - 4                                                                                                |\r\n+| extractAirFanStage               | operation       | Extract air fan stage                                            | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped0to2v             | unitConfig      | Fan stage for stepped mode - range 0-2V                          | Number                   |      | 0 - 2                                                                                                |\r\n+| fanStageStepped2to4v             | unitConfig      | Fan stage for stepped mode - range 2-4V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped4to6v             | unitConfig      | Fan stage for stepped mode - range 4-6V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped6to8v             | unitConfig      | Fan stage for stepped mode - range 6-8V                          | Number                   |      | 0 - 4                                                                                                |\r\n+| fanStageStepped8to10v            | unitConfig      | Fan stage for stepped mode - range 8-10V                         | Number                   |      | 0 - 4                                                                                                |\r\n+| offsetExtractAir                 | unitConfig      | Offset extract air                                               | Number                   |      | float                                                                                                |\r\n+| assignmentFanStages              | unitConfig      | Assignment fan stages - stepped or 0-10V                         | Switch                   |      | OFF = 0-10V, ON = stepped                                                                            |\r\n+| sensorNameHumidityAndTemp1       | humidityControl | Sensor name - humidity and temperature 1                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp2       | humidityControl | Sensor name - humidity and temperature 2                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp3       | humidityControl | Sensor name - humidity and temperature 3                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp4       | humidityControl | Sensor name - humidity and temperature 4                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp5       | humidityControl | Sensor name - humidity and temperature 5                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp6       | humidityControl | Sensor name - humidity and temperature 6                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp7       | humidityControl | Sensor name - humidity and temperature 7                         | String                   |      |                                                                                                      |\r\n+| sensorNameHumidityAndTemp8       | humidityControl | Sensor name - humidity and temperature 8                         | String                   |      |                                                                                                      |\r\n+| sensorNameCo21                   | co2Control      | Sensor name - CO2 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo22                   | co2Control      | Sensor name - CO2 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo23                   | co2Control      | Sensor name - CO2 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo24                   | co2Control      | Sensor name - CO2 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo25                   | co2Control      | Sensor name - CO2 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo26                   | co2Control      | Sensor name - CO2 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo27                   | co2Control      | Sensor name - CO2 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameCo28                   | co2Control      | Sensor name - CO2 8                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc1                   | vocControl      | Sensor name - VOC 1                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc2                   | vocControl      | Sensor name - VOC 2                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc3                   | vocControl      | Sensor name - VOC 3                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc4                   | vocControl      | Sensor name - VOC 4                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc5                   | vocControl      | Sensor name - VOC 5                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc6                   | vocControl      | Sensor name - VOC 6                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc7                   | vocControl      | Sensor name - VOC 7                                              | String                   |      |                                                                                                      |\r\n+| sensorNameVoc8                   | vocControl      | Sensor name - VOC 8                                              | String                   |      |                                                                                                      |\r\n+| softwareVersionBasis             | general         | Software version basis (format xx.xx)                            | String                   |      |                                                                                                      |\r\n+| operatingHoursSupplyAirVent      | general         | Operating hours supply air fan (in minutes)                      | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursExtractAirVent     | general         | Operating hours extract air fan (in minutes)                     | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursVhz                | general         | Operating hours preheater (in minutes)                           | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| operatingHoursNhz                | general         | Operating hours afterheater (in minutes)                         | Number:Time              | min  | 0 - 2^32-1                                                                                           |\r\n+| outputPowerVhz                   | general         | Output power of preheater (in percent)                           | Number:Dimensionless     | %    | 0 - 2^32-1                                                                                           |\r\n+| outputPowerNhz                   | general         | Output power of afterheater (in percent)                         | Number:Dimensionless     | %    | 0 - 2^32-1                                                                                           |\r\n+| resetFlag                        | general         | Reset flag                                                       | Switch                   |      | ON = reset flag                                                                                      |\r\n+| errors                           | general         | Errors as integer value                                          | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| warnings                         | general         | Warnings as integer value                                        | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| infos                            | general         | Infos as integer value                                           | Number                   |      | 0 - 2^32-1                                                                                           |\r\n+| noOfErrors                       | general         | Number of bit-coded errors                                       | Number                   |      | 0 - 32                                                                                               |\r\n+| noOfWarnings                     | general         | Number of bit-coded warnings                                     | Number                   |      | 0 - 8                                                                                                |\r\n+| noOfInfos                        | general         | Number of bit-coded infos                                        | Number                   |      | 0 - 8                                                                                                |\r\n+| errorsMsg                        | general         | Errors as string                                                 | String                   |      |                                                                                                      |\r\n+| warningsMsg                      | general         | Warnings as string                                               | String                   |      |                                                                                                      |\r\n+| infosMsg                         | general         | Infos as string                                                  | String                   |      |                                                                                                      |\r\n+| statusFlags                      | general         | Status flags                                                     | String                   |      |                                                                                                      |\r\n+| sensorConfigKwlFtf1              | general         | Sensor configuration (installed or not) KWL-FTF 1                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf2              | general         | Sensor configuration (installed or not) KWL-FTF 2                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf3              | general         | Sensor configuration (installed or not) KWL-FTF 3                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf4              | humidityControl | Sensor configuration (installed or not) KWL-FTF 4                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf5              | humidityControl | Sensor configuration (installed or not) KWL-FTF 5                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf6              | humidityControl | Sensor configuration (installed or not) KWL-FTF 6                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf7              | humidityControl | Sensor configuration (installed or not) KWL-FTF 7                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| sensorConfigKwlFtf8              | humidityControl | Sensor configuration (installed or not) KWL-FTF 8                | Switch                   |      | OFF = no sensor, ON = sensor installed                                                               |\r\n+| globalManualWebUpdate            | humidityControl | Manual update of data (profile 8LXGP, XWP, firmware, SD files)   | Switch                   |      | ON = start update                                                                                    |\r\n+| portalGlobalsErrorForWeb         | humidityControl | Always the latest error that has occurred                        | Number                   |      | 1 - 255                                                                                              |\r\n+| clearError                       | humidityControl | Clear error (PortalGlobals.ErrorForWeb)                          | Switch                   |      | ON = reset error                                                                                     |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMTgzMw==", "bodyText": "You don't mention the enableDiscovery config parameter. It's good practice to add a table with the parameters here. Like here https://www.openhab.org/addons/bindings/telegram/#thing-configuration", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479811833", "createdAt": "2020-08-30T20:24:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,306 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway. See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+You first need to set up a Modbus bridge according to the Modbus documentation. Things in this extension will use the selected bridge to connect to the device. The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample. It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe93b066ed31c30349260f513cfb5dfa3e46d71a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjMxOTgz", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-478231983", "createdAt": "2020-08-30T20:30:17Z", "commit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMDozMDoxN1rOHJla_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQyMTozMTo0NlrOHJlxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjM1MA==", "bodyText": "Are you aware that private fields don't need to be commented?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812350", "createdAt": "2020-08-30T20:30:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjQ4Ng==", "bodyText": "Better write the field name out.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @Nullable Map<String, HeliosVariable> vMap;\n          \n          \n            \n                private @Nullable Map<String, HeliosVariable> variableMap;", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812486", "createdAt": "2020-08-30T20:31:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjUyMw==", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\n          \n          \n            \n                private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812523", "createdAt": "2020-08-30T20:31:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjY0OQ==", "bodyText": "It's good practice to use base type.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\n          \n          \n            \n                private static Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812649", "createdAt": "2020-08-30T20:33:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjczNA==", "bodyText": "Is this static by intention? What happens if the user creates more than one Thing of this type?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812734", "createdAt": "2020-08-30T20:34:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjc1NA==", "bodyText": "This field is never used", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812754", "createdAt": "2020-08-30T20:34:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjg2MQ==", "bodyText": "Constructors don't need to be commented either.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812861", "createdAt": "2020-08-30T20:35:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjg5MA==", "bodyText": "Can you make this a field to save resources?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812890", "createdAt": "2020-08-30T20:36:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMjk2Mw==", "bodyText": "You need to close these readers when you are finished. You could use Java's auto closable feature.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479812963", "createdAt": "2020-08-30T20:37:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxMzk2Ng==", "bodyText": "Better use scheduleWithFixedDelay(). See https://www.openhab.org/docs/developer/guidelines.html#e-runtime-behavior point 2", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479813966", "createdAt": "2020-08-30T20:48:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 246}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNDA0NQ==", "bodyText": "You can eliminate the compiler warning by storing the config to a local variable and do a null check on that. Same for the vMap occurrences.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479814045", "createdAt": "2020-08-30T20:49:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNDE3OQ==", "bodyText": "It's uncommon to end the error message with a period.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.handleError(\"Modbus communication interface is unavailable.\",\n          \n          \n            \n                            this.handleError(\"Modbus communication interface is unavailable\",", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479814179", "createdAt": "2020-08-30T20:50:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNDMwNQ==", "bodyText": "Syntactical sugar. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scheduler.submit(new Runnable() {\n          \n          \n            \n                            @Override\n          \n          \n            \n                            public void run() {\n          \n          \n            \n                                readValue(channelId);\n          \n          \n            \n                            }\n          \n          \n            \n                        });\n          \n          \n            \n                        scheduler.submit(() -> readValue(channelId));", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479814305", "createdAt": "2020-08-30T20:51:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNDU2NA==", "bodyText": "The status update is logged, too. You could remove the log message and include the message in the status update. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479814564", "createdAt": "2020-08-30T20:54:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNDg5NA==", "bodyText": "OH should update the Channel for you. The delay could lead to unintened updates if the user clicks to fast.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479814894", "createdAt": "2020-08-30T20:57:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 379}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTI1NA==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479815254", "createdAt": "2020-08-30T21:01:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 455}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTQwNw==", "bodyText": "See my comment in the readme.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479815407", "createdAt": "2020-08-30T21:04:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 464}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTU4Mg==", "bodyText": "Better check the length in the else branch, too.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479815582", "createdAt": "2020-08-30T21:05:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 504}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTYyNw==", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479815627", "createdAt": "2020-08-30T21:06:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            }\r\n+        } catch (Exception e) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 520}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTc3MA==", "bodyText": "Isn't the date format fixed in the protocol?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479815770", "createdAt": "2020-08-30T21:07:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 496}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTgyMw==", "bodyText": "You could throw an exception here, instead of returning a dummy value.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479815823", "createdAt": "2020-08-30T21:08:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            }\r\n+        } catch (Exception e) {\r\n+            // falling back to default date format (apparently using the configured format has failed)\r\n+            if (dateTimeParts != null) {\r\n+                dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            } else {\r\n+                logger.warn(\"{} couldn't parse the provided date string: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), date);\r\n+                return new DateTimeType(); // return at least a valid DateTimeType object\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 528}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTg5NQ==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479815895", "createdAt": "2020-08-30T21:09:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            }\r\n+        } catch (Exception e) {\r\n+            // falling back to default date format (apparently using the configured format has failed)\r\n+            if (dateTimeParts != null) {\r\n+                dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            } else {\r\n+                logger.warn(\"{} couldn't parse the provided date string: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), date);\r\n+                return new DateTimeType(); // return at least a valid DateTimeType object\r\n+            }\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    private @Nullable QuantityType<?> toQuantityType(String value, @Nullable String unit) {\r\n+        if (unit == null) {\r\n+            return null;\r\n+        } else if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.DAY);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.HOUR);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.MINUTE);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.SECOND);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.VOLT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PERCENT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PARTS_PER_MILLION);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SIUnits.CELSIUS);\r\n+        } else {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: Set date, time and UTC delta together => also additional channel required\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 558}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNjI1NQ==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479816255", "createdAt": "2020-08-30T21:12:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            }\r\n+        } catch (Exception e) {\r\n+            // falling back to default date format (apparently using the configured format has failed)\r\n+            if (dateTimeParts != null) {\r\n+                dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            } else {\r\n+                logger.warn(\"{} couldn't parse the provided date string: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), date);\r\n+                return new DateTimeType(); // return at least a valid DateTimeType object\r\n+            }\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    private @Nullable QuantityType<?> toQuantityType(String value, @Nullable String unit) {\r\n+        if (unit == null) {\r\n+            return null;\r\n+        } else if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.DAY);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.HOUR);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.MINUTE);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.SECOND);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.VOLT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PERCENT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PARTS_PER_MILLION);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SIUnits.CELSIUS);\r\n+        } else {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: Set date, time and UTC delta together => also additional channel required\r\n+\r\n+    /**\r\n+     * Prepares the payload for the request\r\n+     *\r\n+     * @param payload The String representation of the payload\r\n+     * @return The Register representation of the payload\r\n+     */\r\n+    private ModbusRegister[] preparePayload(String payload) {\r\n+\r\n+        // determine number of registers\r\n+        int l = (payload.length() + 1) / 2; // +1 because we need to include at least one termination symbol 0x00\r\n+        if ((payload.length() + 1) % 2 != 0) {\r\n+            l++;\r\n+        }\r\n+\r\n+        ModbusRegister reg[] = new ModbusRegister[l];\r\n+        byte[] b = payload.getBytes();\r\n+        int ch = 0;\r\n+        for (int i = 0; i < reg.length; i++) {\r\n+            byte b1 = ch < b.length ? b[ch] : (byte) 0x00; // terminate with 0x00 if at the end of the payload\r\n+            ch++;\r\n+            byte b2 = ch < b.length ? b[ch] : (byte) 0x00;\r\n+            ch++;\r\n+            reg[i] = new ModbusRegister(b1, b2);\r\n+        }\r\n+        return reg;\r\n+    }\r\n+\r\n+    /**\r\n+     * Decodes the Helios device' response and updates the channel with the actual value of the variable\r\n+     *\r\n+     * @param response The registers received from the Helios device\r\n+     * @return The value or <tt>null</tt> if an error occurred\r\n+     */\r\n+    private void processResponse(HeliosVariable v, ModbusRegisterArray registers) {\r\n+        // decode response\r\n+        byte[] b = new byte[registers.size() * 2];\r\n+        int actSize = 0; // track the actual size of the usable array (excluding any 0x00\r\n+                         // characters)\r\n+        for (int i = 0; i < registers.size(); i++) {\r\n+            byte[] reg = registers.getRegister(i).getBytes();\r\n+            if (reg.length == 2) { // only add to the array if it's a usable character\r\n+                if (reg[0] != 0x00) {\r\n+                    b[actSize++] = reg[0];\r\n+                }\r\n+                if (reg[1] != 0x00) {\r\n+                    b[actSize++] = reg[1];\r\n+                }\r\n+            }\r\n+        }\r\n+        b = Arrays.copyOf(b, actSize); // before creating a string of it the array needs to be\r\n+                                       // truncated\r\n+        String r = new String(b, StandardCharsets.US_ASCII);\r\n+        String[] parts = r.split(\"=\", 2); // remove the part \"vXXXX=\" from the string\r\n+        // making sure we have a proper response and the response matches the requested variable\r\n+        if ((parts.length == 2) && (v.getVariableString().equals(parts[0]))) {\r\n+            String variableType = v.getType();\r\n+            Channel channel = getThing().getChannel(v.getGroupAndName());\r\n+            String itemType;\r\n+            if (channel != null) {\r\n+                itemType = channel.getAcceptedItemType();\r\n+                if (itemType != null) {\r\n+                    switch (itemType) {\r\n+                        case \"Number\":\r\n+                            if (((variableType.equals(HeliosVariable.TYPE_INTEGER))\r\n+                                    || (variableType == HeliosVariable.TYPE_FLOAT)) && (!parts[1].equals(\"-\"))) {\r\n+                                State state = null;\r\n+                                if (v.getUnit() == null) {\r\n+                                    state = DecimalType.valueOf(parts[1]);\r\n+                                } else { // QuantityType\r\n+                                    state = this.toQuantityType(parts[1], v.getUnit());\r\n+                                }\r\n+                                if (state != null) {\r\n+                                    updateState(v.getGroupAndName(), state);\r\n+                                    updateStatus(ThingStatus.ONLINE);\r\n+                                    // update date format and UTC offset upon read\r\n+                                    if (v.getName().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT)) {\r\n+                                        this.dateFormat = Integer.parseInt(parts[1]);\r\n+                                    } else if (v.getName()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT)) {\r\n+                                        this.utcOffset = Integer.parseInt(parts[1]);\r\n+                                    }\r\n+                                }\r\n+                            }\r\n+                            break;\r\n+                        case \"Switch\":\r\n+                            if (variableType.equals(HeliosVariable.TYPE_INTEGER)) {\r\n+                                updateState(v.getGroupAndName(), parts[1].equals(\"1\") ? OnOffType.ON : OnOffType.OFF);\r\n+                            }\r\n+                            break;\r\n+                        case \"String\":\r\n+                            if (variableType.equals(HeliosVariable.TYPE_STRING)) {\r\n+                                updateState(v.getGroupAndName(), StringType.valueOf(parts[1]));\r\n+                            }\r\n+                            break;\r\n+                        case \"DateTime\":\r\n+                            if (variableType.equals(HeliosVariable.TYPE_STRING)) {\r\n+                                updateState(v.getGroupAndName(), toDateTime(parts[1]));\r\n+                            }\r\n+                            break;\r\n+                    }\r\n+                } else { // itemType was null\r\n+                    logger.warn(\"{} couldn't determine item type of variable {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), v.getName());\r\n+                }\r\n+            } else { // channel was null\r\n+                logger.warn(\"{} couldn't find channel for variable {}\", HeliosEasyControlsHandler.class.getSimpleName(),\r\n+                        v.getName());\r\n+            }\r\n+        } else { // another variable was read\r\n+            logger.warn(\"{} tried to read value from variable {} and the result provided by the device was {}\",\r\n+                    HeliosEasyControlsHandler.class.getSimpleName(), v.getName(), r);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Logs an error (as a warning entry) and updates the thing status\r\n+     *\r\n+     * @param errorMsg The error message to be logged and provided with the Thing's status update\r\n+     * @param status The Thing's new status\r\n+     */\r\n+    private void handleError(String errorMsg, ThingStatusDetail status) {\r\n+        logger.warn(\"{}\", errorMsg);\r\n+        updateStatus(ThingStatus.OFFLINE, status, errorMsg);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 682}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNjI5Nw==", "bodyText": "The logger is never used.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479816297", "createdAt": "2020-08-30T21:13:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandlerFactory.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import static org.openhab.binding.modbus.helioseasycontrols.internal.HeliosEasyControlsBindingConstants.THING_TYPE_HELIOS_VENTILATION_EASY_CONTROLS;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\r\n+import org.osgi.service.component.annotations.Component;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandlerFactory} is responsible for creating things and thing\r\n+ * handlers.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+@Component(configurationPid = \"binding.helioseasycontrols\", service = ThingHandlerFactory.class)\r\n+public class HeliosEasyControlsHandlerFactory extends BaseThingHandlerFactory {\r\n+\r\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\r\n+            .singleton(THING_TYPE_HELIOS_VENTILATION_EASY_CONTROLS);\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandlerFactory.class);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNjU3NQ==", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String v = Integer.toString(this.variable);\n          \n          \n            \n                    while (v.length() < 5) {\n          \n          \n            \n                        v = '0' + v;\n          \n          \n            \n                    }\n          \n          \n            \n                    v = 'v' + v;\n          \n          \n            \n                    return v;\n          \n          \n            \n                    return String.format(\"v%05d\", variable);", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479816575", "createdAt": "2020-08-30T21:16:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosVariable.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * This class represents a variable of the Helios modbus.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ * @version 2.0\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosVariable implements Comparable<HeliosVariable> {\r\n+\r\n+    /**\r\n+     * Read access\r\n+     */\r\n+    public static final String ACCESS_R = \"R\";\r\n+\r\n+    /**\r\n+     * Write access\r\n+     */\r\n+    public static final String ACCESS_W = \"W\";\r\n+\r\n+    /**\r\n+     * Read and write access\r\n+     */\r\n+    public static final String ACCESS_RW = \"RW\";\r\n+\r\n+    /**\r\n+     * Integer type\r\n+     */\r\n+    public static final String TYPE_INTEGER = \"int\";\r\n+\r\n+    /**\r\n+     * Float type\r\n+     */\r\n+    public static final String TYPE_FLOAT = \"float\";\r\n+\r\n+    /**\r\n+     * String type\r\n+     */\r\n+    public static final String TYPE_STRING = \"string\";\r\n+\r\n+    /**\r\n+     * Unit Volt\r\n+     */\r\n+    public static final String UNIT_VOLT = \"V\";\r\n+\r\n+    /**\r\n+     * Unit %\r\n+     */\r\n+    public static final String UNIT_PERCENT = \"%\";\r\n+\r\n+    /**\r\n+     * Unit ppm\r\n+     */\r\n+    public static final String UNIT_PPM = \"ppm\";\r\n+\r\n+    /**\r\n+     * Unit degrees Celsius\r\n+     */\r\n+    public static final String UNIT_TEMP = \"\u00b0C\";\r\n+\r\n+    /**\r\n+     * Unit day\r\n+     */\r\n+    public static final String UNIT_DAY = \"d\";\r\n+\r\n+    /**\r\n+     * Unit hour\r\n+     */\r\n+    public static final String UNIT_HOUR = \"h\";\r\n+\r\n+    /**\r\n+     * Unit minute\r\n+     */\r\n+    public static final String UNIT_MIN = \"min\";\r\n+\r\n+    /**\r\n+     * Unit second\r\n+     */\r\n+    public static final String UNIT_SEC = \"s\";\r\n+\r\n+    /**\r\n+     * The variable number\r\n+     */\r\n+    private int variable;\r\n+\r\n+    /**\r\n+     * The variable name\r\n+     */\r\n+    private String name;\r\n+\r\n+    /**\r\n+     * The variable group\r\n+     */\r\n+    private @Nullable String group;\r\n+\r\n+    /**\r\n+     * The access to the variable\r\n+     */\r\n+    private String access;\r\n+\r\n+    /**\r\n+     * The length of the variable (number of chars)\r\n+     */\r\n+    private int length;\r\n+\r\n+    /**\r\n+     * The register count for this variable\r\n+     */\r\n+    private int count;\r\n+\r\n+    /**\r\n+     * The variable type\r\n+     */\r\n+    private String type;\r\n+\r\n+    /**\r\n+     * The variable's unit\r\n+     */\r\n+    private @Nullable String unit;\r\n+\r\n+    /**\r\n+     * The minimal value (or null if not applicable)\r\n+     */\r\n+    private @Nullable Double minVal;\r\n+\r\n+    /**\r\n+     * The maximum value (or null if not applicable)\r\n+     */\r\n+    private @Nullable Double maxVal;\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     * @param unit Variable's unit\r\n+     * @param minVal Minimum value (only applicable for numeric values)\r\n+     * @param maxVal Maximum value (only applicable for numeric values)\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type, @Nullable String unit, @Nullable Double minVal, @Nullable Double maxVal) {\r\n+        this.variable = variable;\r\n+        this.name = name;\r\n+        this.group = group;\r\n+        this.access = access;\r\n+        this.length = length;\r\n+        this.count = count;\r\n+        this.type = type;\r\n+        this.unit = unit;\r\n+        this.minVal = minVal;\r\n+        this.maxVal = maxVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     * @param unit Variable's unit\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type, String unit) {\r\n+        this(variable, name, group, access, length, count, type, unit, null, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type) {\r\n+        this(variable, name, group, access, length, count, type, null, null, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for variable\r\n+     *\r\n+     * @return variable\r\n+     */\r\n+    public int getVariable() {\r\n+        return this.variable;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a formatted string representation for the variable\r\n+     *\r\n+     * @return String The string representation for the variable (e.g. 'v00020' for variable number 20)\r\n+     */\r\n+    public String getVariableString() {\r\n+        String v = Integer.toString(this.variable);\r\n+        while (v.length() < 5) {\r\n+            v = '0' + v;\r\n+        }\r\n+        v = 'v' + v;\r\n+        return v;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNjcxMQ==", "bodyText": "Primitive types should be used where possible. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Long l = new Double(value).longValue();\n          \n          \n            \n                                long l = new Double(value).longValue();", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479816711", "createdAt": "2020-08-30T21:17:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosVariable.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * This class represents a variable of the Helios modbus.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ * @version 2.0\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosVariable implements Comparable<HeliosVariable> {\r\n+\r\n+    /**\r\n+     * Read access\r\n+     */\r\n+    public static final String ACCESS_R = \"R\";\r\n+\r\n+    /**\r\n+     * Write access\r\n+     */\r\n+    public static final String ACCESS_W = \"W\";\r\n+\r\n+    /**\r\n+     * Read and write access\r\n+     */\r\n+    public static final String ACCESS_RW = \"RW\";\r\n+\r\n+    /**\r\n+     * Integer type\r\n+     */\r\n+    public static final String TYPE_INTEGER = \"int\";\r\n+\r\n+    /**\r\n+     * Float type\r\n+     */\r\n+    public static final String TYPE_FLOAT = \"float\";\r\n+\r\n+    /**\r\n+     * String type\r\n+     */\r\n+    public static final String TYPE_STRING = \"string\";\r\n+\r\n+    /**\r\n+     * Unit Volt\r\n+     */\r\n+    public static final String UNIT_VOLT = \"V\";\r\n+\r\n+    /**\r\n+     * Unit %\r\n+     */\r\n+    public static final String UNIT_PERCENT = \"%\";\r\n+\r\n+    /**\r\n+     * Unit ppm\r\n+     */\r\n+    public static final String UNIT_PPM = \"ppm\";\r\n+\r\n+    /**\r\n+     * Unit degrees Celsius\r\n+     */\r\n+    public static final String UNIT_TEMP = \"\u00b0C\";\r\n+\r\n+    /**\r\n+     * Unit day\r\n+     */\r\n+    public static final String UNIT_DAY = \"d\";\r\n+\r\n+    /**\r\n+     * Unit hour\r\n+     */\r\n+    public static final String UNIT_HOUR = \"h\";\r\n+\r\n+    /**\r\n+     * Unit minute\r\n+     */\r\n+    public static final String UNIT_MIN = \"min\";\r\n+\r\n+    /**\r\n+     * Unit second\r\n+     */\r\n+    public static final String UNIT_SEC = \"s\";\r\n+\r\n+    /**\r\n+     * The variable number\r\n+     */\r\n+    private int variable;\r\n+\r\n+    /**\r\n+     * The variable name\r\n+     */\r\n+    private String name;\r\n+\r\n+    /**\r\n+     * The variable group\r\n+     */\r\n+    private @Nullable String group;\r\n+\r\n+    /**\r\n+     * The access to the variable\r\n+     */\r\n+    private String access;\r\n+\r\n+    /**\r\n+     * The length of the variable (number of chars)\r\n+     */\r\n+    private int length;\r\n+\r\n+    /**\r\n+     * The register count for this variable\r\n+     */\r\n+    private int count;\r\n+\r\n+    /**\r\n+     * The variable type\r\n+     */\r\n+    private String type;\r\n+\r\n+    /**\r\n+     * The variable's unit\r\n+     */\r\n+    private @Nullable String unit;\r\n+\r\n+    /**\r\n+     * The minimal value (or null if not applicable)\r\n+     */\r\n+    private @Nullable Double minVal;\r\n+\r\n+    /**\r\n+     * The maximum value (or null if not applicable)\r\n+     */\r\n+    private @Nullable Double maxVal;\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     * @param unit Variable's unit\r\n+     * @param minVal Minimum value (only applicable for numeric values)\r\n+     * @param maxVal Maximum value (only applicable for numeric values)\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type, @Nullable String unit, @Nullable Double minVal, @Nullable Double maxVal) {\r\n+        this.variable = variable;\r\n+        this.name = name;\r\n+        this.group = group;\r\n+        this.access = access;\r\n+        this.length = length;\r\n+        this.count = count;\r\n+        this.type = type;\r\n+        this.unit = unit;\r\n+        this.minVal = minVal;\r\n+        this.maxVal = maxVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     * @param unit Variable's unit\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type, String unit) {\r\n+        this(variable, name, group, access, length, count, type, unit, null, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type) {\r\n+        this(variable, name, group, access, length, count, type, null, null, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for variable\r\n+     *\r\n+     * @return variable\r\n+     */\r\n+    public int getVariable() {\r\n+        return this.variable;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a formatted string representation for the variable\r\n+     *\r\n+     * @return String The string representation for the variable (e.g. 'v00020' for variable number 20)\r\n+     */\r\n+    public String getVariableString() {\r\n+        String v = Integer.toString(this.variable);\r\n+        while (v.length() < 5) {\r\n+            v = '0' + v;\r\n+        }\r\n+        v = 'v' + v;\r\n+        return v;\r\n+    }\r\n+\r\n+    /**\r\n+     * Setter for name\r\n+     *\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for name\r\n+     *\r\n+     * @return name\r\n+     */\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for group\r\n+     *\r\n+     * @return group\r\n+     */\r\n+    public @Nullable String getGroup() {\r\n+        return this.group;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for access\r\n+     *\r\n+     * @return access\r\n+     */\r\n+    public String getAccess() {\r\n+        return this.access;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for length\r\n+     *\r\n+     * @return length\r\n+     */\r\n+    public int getLength() {\r\n+        return this.length;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for count\r\n+     *\r\n+     * @return count\r\n+     */\r\n+    public int getCount() {\r\n+        return this.count;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for the type\r\n+     */\r\n+    public String getType() {\r\n+        return this.type;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for the unit\r\n+     */\r\n+    public @Nullable String getUnit() {\r\n+        return this.unit;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for minimum value\r\n+     *\r\n+     * @return minimum value\r\n+     */\r\n+    public @Nullable Double getMinVal() {\r\n+        return this.minVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for maximum value\r\n+     *\r\n+     * @return maximum value\r\n+     */\r\n+    public @Nullable Double getMaxVal() {\r\n+        return this.maxVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the variable's name and prefixes the group, separated by a # if available\r\n+     *\r\n+     * @return the variable's name and prefixes the group, separated by a # if available\r\n+     */\r\n+    public String getGroupAndName() {\r\n+        return this.group != null ? this.group + \"#\" + this.name : this.name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable's data are consistent\r\n+     *\r\n+     * @return true if the variable contains consistent data\r\n+     */\r\n+    public boolean isOk() {\r\n+        boolean check;\r\n+\r\n+        // this.access has one of the allowed values\r\n+        check = (this.access.equals(HeliosVariable.ACCESS_R)) || (this.access.equals(HeliosVariable.ACCESS_W))\r\n+                || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+\r\n+        // this.type has one of the allowed values\r\n+        check = check && ((this.type.equals(HeliosVariable.TYPE_STRING))\r\n+                || (this.type.equals(HeliosVariable.TYPE_INTEGER)) || (this.type.equals(HeliosVariable.TYPE_FLOAT)));\r\n+\r\n+        // this.minValue and this.maxValue are either not set or minValue is less than maxValue\r\n+        check = check && (((this.minVal == null) && (this.maxVal == null)) || (this.minVal <= this.maxVal));\r\n+\r\n+        // length is set\r\n+        check = check && (this.length > 0);\r\n+\r\n+        // count is set\r\n+        check = check && (this.count > 0);\r\n+\r\n+        return check;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable has write access\r\n+     *\r\n+     * @return true if the variable has write access\r\n+     */\r\n+    public boolean hasWriteAccess() {\r\n+        return (this.access.equals(HeliosVariable.ACCESS_W)) || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable has read access\r\n+     *\r\n+     * @return true if the variable has read access\r\n+     */\r\n+    public boolean hasReadAccess() {\r\n+        return (this.access.equals(HeliosVariable.ACCESS_R)) || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the provided value is within the accepted range\r\n+     *\r\n+     * @param value The value as a string\r\n+     * @return true if the value is within the accepted range\r\n+     */\r\n+    public boolean isInAllowedRange(String value) {\r\n+        if ((this.getMinVal() != null) && (this.getMaxVal() != null)) { // min and max value are set\r\n+            try {\r\n+                if (this.type.equals(HeliosVariable.TYPE_INTEGER)) {\r\n+                    // using long becuase some variable are specified with a max of 2^32-1\r\n+                    // parsing double to allow floating point values to be processed as well\r\n+                    Long l = new Double(value).longValue();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNjc2Mg==", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479816762", "createdAt": "2020-08-30T21:18:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosVariable.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * This class represents a variable of the Helios modbus.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ * @version 2.0\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosVariable implements Comparable<HeliosVariable> {\r\n+\r\n+    /**\r\n+     * Read access\r\n+     */\r\n+    public static final String ACCESS_R = \"R\";\r\n+\r\n+    /**\r\n+     * Write access\r\n+     */\r\n+    public static final String ACCESS_W = \"W\";\r\n+\r\n+    /**\r\n+     * Read and write access\r\n+     */\r\n+    public static final String ACCESS_RW = \"RW\";\r\n+\r\n+    /**\r\n+     * Integer type\r\n+     */\r\n+    public static final String TYPE_INTEGER = \"int\";\r\n+\r\n+    /**\r\n+     * Float type\r\n+     */\r\n+    public static final String TYPE_FLOAT = \"float\";\r\n+\r\n+    /**\r\n+     * String type\r\n+     */\r\n+    public static final String TYPE_STRING = \"string\";\r\n+\r\n+    /**\r\n+     * Unit Volt\r\n+     */\r\n+    public static final String UNIT_VOLT = \"V\";\r\n+\r\n+    /**\r\n+     * Unit %\r\n+     */\r\n+    public static final String UNIT_PERCENT = \"%\";\r\n+\r\n+    /**\r\n+     * Unit ppm\r\n+     */\r\n+    public static final String UNIT_PPM = \"ppm\";\r\n+\r\n+    /**\r\n+     * Unit degrees Celsius\r\n+     */\r\n+    public static final String UNIT_TEMP = \"\u00b0C\";\r\n+\r\n+    /**\r\n+     * Unit day\r\n+     */\r\n+    public static final String UNIT_DAY = \"d\";\r\n+\r\n+    /**\r\n+     * Unit hour\r\n+     */\r\n+    public static final String UNIT_HOUR = \"h\";\r\n+\r\n+    /**\r\n+     * Unit minute\r\n+     */\r\n+    public static final String UNIT_MIN = \"min\";\r\n+\r\n+    /**\r\n+     * Unit second\r\n+     */\r\n+    public static final String UNIT_SEC = \"s\";\r\n+\r\n+    /**\r\n+     * The variable number\r\n+     */\r\n+    private int variable;\r\n+\r\n+    /**\r\n+     * The variable name\r\n+     */\r\n+    private String name;\r\n+\r\n+    /**\r\n+     * The variable group\r\n+     */\r\n+    private @Nullable String group;\r\n+\r\n+    /**\r\n+     * The access to the variable\r\n+     */\r\n+    private String access;\r\n+\r\n+    /**\r\n+     * The length of the variable (number of chars)\r\n+     */\r\n+    private int length;\r\n+\r\n+    /**\r\n+     * The register count for this variable\r\n+     */\r\n+    private int count;\r\n+\r\n+    /**\r\n+     * The variable type\r\n+     */\r\n+    private String type;\r\n+\r\n+    /**\r\n+     * The variable's unit\r\n+     */\r\n+    private @Nullable String unit;\r\n+\r\n+    /**\r\n+     * The minimal value (or null if not applicable)\r\n+     */\r\n+    private @Nullable Double minVal;\r\n+\r\n+    /**\r\n+     * The maximum value (or null if not applicable)\r\n+     */\r\n+    private @Nullable Double maxVal;\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     * @param unit Variable's unit\r\n+     * @param minVal Minimum value (only applicable for numeric values)\r\n+     * @param maxVal Maximum value (only applicable for numeric values)\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type, @Nullable String unit, @Nullable Double minVal, @Nullable Double maxVal) {\r\n+        this.variable = variable;\r\n+        this.name = name;\r\n+        this.group = group;\r\n+        this.access = access;\r\n+        this.length = length;\r\n+        this.count = count;\r\n+        this.type = type;\r\n+        this.unit = unit;\r\n+        this.minVal = minVal;\r\n+        this.maxVal = maxVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     * @param unit Variable's unit\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type, String unit) {\r\n+        this(variable, name, group, access, length, count, type, unit, null, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type) {\r\n+        this(variable, name, group, access, length, count, type, null, null, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for variable\r\n+     *\r\n+     * @return variable\r\n+     */\r\n+    public int getVariable() {\r\n+        return this.variable;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a formatted string representation for the variable\r\n+     *\r\n+     * @return String The string representation for the variable (e.g. 'v00020' for variable number 20)\r\n+     */\r\n+    public String getVariableString() {\r\n+        String v = Integer.toString(this.variable);\r\n+        while (v.length() < 5) {\r\n+            v = '0' + v;\r\n+        }\r\n+        v = 'v' + v;\r\n+        return v;\r\n+    }\r\n+\r\n+    /**\r\n+     * Setter for name\r\n+     *\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for name\r\n+     *\r\n+     * @return name\r\n+     */\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for group\r\n+     *\r\n+     * @return group\r\n+     */\r\n+    public @Nullable String getGroup() {\r\n+        return this.group;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for access\r\n+     *\r\n+     * @return access\r\n+     */\r\n+    public String getAccess() {\r\n+        return this.access;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for length\r\n+     *\r\n+     * @return length\r\n+     */\r\n+    public int getLength() {\r\n+        return this.length;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for count\r\n+     *\r\n+     * @return count\r\n+     */\r\n+    public int getCount() {\r\n+        return this.count;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for the type\r\n+     */\r\n+    public String getType() {\r\n+        return this.type;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for the unit\r\n+     */\r\n+    public @Nullable String getUnit() {\r\n+        return this.unit;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for minimum value\r\n+     *\r\n+     * @return minimum value\r\n+     */\r\n+    public @Nullable Double getMinVal() {\r\n+        return this.minVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for maximum value\r\n+     *\r\n+     * @return maximum value\r\n+     */\r\n+    public @Nullable Double getMaxVal() {\r\n+        return this.maxVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the variable's name and prefixes the group, separated by a # if available\r\n+     *\r\n+     * @return the variable's name and prefixes the group, separated by a # if available\r\n+     */\r\n+    public String getGroupAndName() {\r\n+        return this.group != null ? this.group + \"#\" + this.name : this.name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable's data are consistent\r\n+     *\r\n+     * @return true if the variable contains consistent data\r\n+     */\r\n+    public boolean isOk() {\r\n+        boolean check;\r\n+\r\n+        // this.access has one of the allowed values\r\n+        check = (this.access.equals(HeliosVariable.ACCESS_R)) || (this.access.equals(HeliosVariable.ACCESS_W))\r\n+                || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+\r\n+        // this.type has one of the allowed values\r\n+        check = check && ((this.type.equals(HeliosVariable.TYPE_STRING))\r\n+                || (this.type.equals(HeliosVariable.TYPE_INTEGER)) || (this.type.equals(HeliosVariable.TYPE_FLOAT)));\r\n+\r\n+        // this.minValue and this.maxValue are either not set or minValue is less than maxValue\r\n+        check = check && (((this.minVal == null) && (this.maxVal == null)) || (this.minVal <= this.maxVal));\r\n+\r\n+        // length is set\r\n+        check = check && (this.length > 0);\r\n+\r\n+        // count is set\r\n+        check = check && (this.count > 0);\r\n+\r\n+        return check;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable has write access\r\n+     *\r\n+     * @return true if the variable has write access\r\n+     */\r\n+    public boolean hasWriteAccess() {\r\n+        return (this.access.equals(HeliosVariable.ACCESS_W)) || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable has read access\r\n+     *\r\n+     * @return true if the variable has read access\r\n+     */\r\n+    public boolean hasReadAccess() {\r\n+        return (this.access.equals(HeliosVariable.ACCESS_R)) || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the provided value is within the accepted range\r\n+     *\r\n+     * @param value The value as a string\r\n+     * @return true if the value is within the accepted range\r\n+     */\r\n+    public boolean isInAllowedRange(String value) {\r\n+        if ((this.getMinVal() != null) && (this.getMaxVal() != null)) { // min and max value are set\r\n+            try {\r\n+                if (this.type.equals(HeliosVariable.TYPE_INTEGER)) {\r\n+                    // using long becuase some variable are specified with a max of 2^32-1\r\n+                    // parsing double to allow floating point values to be processed as well\r\n+                    Long l = new Double(value).longValue();\r\n+                    return (this.getMinVal().longValue() <= l) && (this.getMaxVal().longValue() >= l);\r\n+                } else if (this.type.equals(HeliosVariable.TYPE_FLOAT)) {\r\n+                    Double d = Double.parseDouble(value);\r\n+                    return (this.getMinVal() <= d) && (this.getMaxVal() >= d);\r\n+                }\r\n+            } catch (Exception e) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 389}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNjk4Ng==", "bodyText": "What about this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.getVariable() < v.getVariable()) {\n          \n          \n            \n                        return -1;\n          \n          \n            \n                    } else if (this.getVariable() == v.getVariable()) {\n          \n          \n            \n                        return 0;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return 1;\n          \n          \n            \n                    }\n          \n          \n            \n                    return getVariable() - v.getVariable();", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479816986", "createdAt": "2020-08-30T21:20:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosVariable.java", "diffHunk": "@@ -0,0 +1,414 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * This class represents a variable of the Helios modbus.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ * @version 2.0\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosVariable implements Comparable<HeliosVariable> {\r\n+\r\n+    /**\r\n+     * Read access\r\n+     */\r\n+    public static final String ACCESS_R = \"R\";\r\n+\r\n+    /**\r\n+     * Write access\r\n+     */\r\n+    public static final String ACCESS_W = \"W\";\r\n+\r\n+    /**\r\n+     * Read and write access\r\n+     */\r\n+    public static final String ACCESS_RW = \"RW\";\r\n+\r\n+    /**\r\n+     * Integer type\r\n+     */\r\n+    public static final String TYPE_INTEGER = \"int\";\r\n+\r\n+    /**\r\n+     * Float type\r\n+     */\r\n+    public static final String TYPE_FLOAT = \"float\";\r\n+\r\n+    /**\r\n+     * String type\r\n+     */\r\n+    public static final String TYPE_STRING = \"string\";\r\n+\r\n+    /**\r\n+     * Unit Volt\r\n+     */\r\n+    public static final String UNIT_VOLT = \"V\";\r\n+\r\n+    /**\r\n+     * Unit %\r\n+     */\r\n+    public static final String UNIT_PERCENT = \"%\";\r\n+\r\n+    /**\r\n+     * Unit ppm\r\n+     */\r\n+    public static final String UNIT_PPM = \"ppm\";\r\n+\r\n+    /**\r\n+     * Unit degrees Celsius\r\n+     */\r\n+    public static final String UNIT_TEMP = \"\u00b0C\";\r\n+\r\n+    /**\r\n+     * Unit day\r\n+     */\r\n+    public static final String UNIT_DAY = \"d\";\r\n+\r\n+    /**\r\n+     * Unit hour\r\n+     */\r\n+    public static final String UNIT_HOUR = \"h\";\r\n+\r\n+    /**\r\n+     * Unit minute\r\n+     */\r\n+    public static final String UNIT_MIN = \"min\";\r\n+\r\n+    /**\r\n+     * Unit second\r\n+     */\r\n+    public static final String UNIT_SEC = \"s\";\r\n+\r\n+    /**\r\n+     * The variable number\r\n+     */\r\n+    private int variable;\r\n+\r\n+    /**\r\n+     * The variable name\r\n+     */\r\n+    private String name;\r\n+\r\n+    /**\r\n+     * The variable group\r\n+     */\r\n+    private @Nullable String group;\r\n+\r\n+    /**\r\n+     * The access to the variable\r\n+     */\r\n+    private String access;\r\n+\r\n+    /**\r\n+     * The length of the variable (number of chars)\r\n+     */\r\n+    private int length;\r\n+\r\n+    /**\r\n+     * The register count for this variable\r\n+     */\r\n+    private int count;\r\n+\r\n+    /**\r\n+     * The variable type\r\n+     */\r\n+    private String type;\r\n+\r\n+    /**\r\n+     * The variable's unit\r\n+     */\r\n+    private @Nullable String unit;\r\n+\r\n+    /**\r\n+     * The minimal value (or null if not applicable)\r\n+     */\r\n+    private @Nullable Double minVal;\r\n+\r\n+    /**\r\n+     * The maximum value (or null if not applicable)\r\n+     */\r\n+    private @Nullable Double maxVal;\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     * @param unit Variable's unit\r\n+     * @param minVal Minimum value (only applicable for numeric values)\r\n+     * @param maxVal Maximum value (only applicable for numeric values)\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type, @Nullable String unit, @Nullable Double minVal, @Nullable Double maxVal) {\r\n+        this.variable = variable;\r\n+        this.name = name;\r\n+        this.group = group;\r\n+        this.access = access;\r\n+        this.length = length;\r\n+        this.count = count;\r\n+        this.type = type;\r\n+        this.unit = unit;\r\n+        this.minVal = minVal;\r\n+        this.maxVal = maxVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     * @param unit Variable's unit\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type, String unit) {\r\n+        this(variable, name, group, access, length, count, type, unit, null, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructor to set the member variables\r\n+     *\r\n+     * @param variable The variable's number\r\n+     * @param name The variable's name\r\n+     * @param group The variable's group\r\n+     * @param access Access possibilities\r\n+     * @param length Number of expected characters when writing to / reading from Modbus\r\n+     * @param count Exact number of characters to write to Modbus\r\n+     * @param type Variable type (string, integer or float)\r\n+     */\r\n+    public HeliosVariable(int variable, String name, @Nullable String group, String access, int length, int count,\r\n+            String type) {\r\n+        this(variable, name, group, access, length, count, type, null, null, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for variable\r\n+     *\r\n+     * @return variable\r\n+     */\r\n+    public int getVariable() {\r\n+        return this.variable;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a formatted string representation for the variable\r\n+     *\r\n+     * @return String The string representation for the variable (e.g. 'v00020' for variable number 20)\r\n+     */\r\n+    public String getVariableString() {\r\n+        String v = Integer.toString(this.variable);\r\n+        while (v.length() < 5) {\r\n+            v = '0' + v;\r\n+        }\r\n+        v = 'v' + v;\r\n+        return v;\r\n+    }\r\n+\r\n+    /**\r\n+     * Setter for name\r\n+     *\r\n+     */\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for name\r\n+     *\r\n+     * @return name\r\n+     */\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for group\r\n+     *\r\n+     * @return group\r\n+     */\r\n+    public @Nullable String getGroup() {\r\n+        return this.group;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for access\r\n+     *\r\n+     * @return access\r\n+     */\r\n+    public String getAccess() {\r\n+        return this.access;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for length\r\n+     *\r\n+     * @return length\r\n+     */\r\n+    public int getLength() {\r\n+        return this.length;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for count\r\n+     *\r\n+     * @return count\r\n+     */\r\n+    public int getCount() {\r\n+        return this.count;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for the type\r\n+     */\r\n+    public String getType() {\r\n+        return this.type;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for the unit\r\n+     */\r\n+    public @Nullable String getUnit() {\r\n+        return this.unit;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for minimum value\r\n+     *\r\n+     * @return minimum value\r\n+     */\r\n+    public @Nullable Double getMinVal() {\r\n+        return this.minVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Getter for maximum value\r\n+     *\r\n+     * @return maximum value\r\n+     */\r\n+    public @Nullable Double getMaxVal() {\r\n+        return this.maxVal;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the variable's name and prefixes the group, separated by a # if available\r\n+     *\r\n+     * @return the variable's name and prefixes the group, separated by a # if available\r\n+     */\r\n+    public String getGroupAndName() {\r\n+        return this.group != null ? this.group + \"#\" + this.name : this.name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable's data are consistent\r\n+     *\r\n+     * @return true if the variable contains consistent data\r\n+     */\r\n+    public boolean isOk() {\r\n+        boolean check;\r\n+\r\n+        // this.access has one of the allowed values\r\n+        check = (this.access.equals(HeliosVariable.ACCESS_R)) || (this.access.equals(HeliosVariable.ACCESS_W))\r\n+                || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+\r\n+        // this.type has one of the allowed values\r\n+        check = check && ((this.type.equals(HeliosVariable.TYPE_STRING))\r\n+                || (this.type.equals(HeliosVariable.TYPE_INTEGER)) || (this.type.equals(HeliosVariable.TYPE_FLOAT)));\r\n+\r\n+        // this.minValue and this.maxValue are either not set or minValue is less than maxValue\r\n+        check = check && (((this.minVal == null) && (this.maxVal == null)) || (this.minVal <= this.maxVal));\r\n+\r\n+        // length is set\r\n+        check = check && (this.length > 0);\r\n+\r\n+        // count is set\r\n+        check = check && (this.count > 0);\r\n+\r\n+        return check;\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable has write access\r\n+     *\r\n+     * @return true if the variable has write access\r\n+     */\r\n+    public boolean hasWriteAccess() {\r\n+        return (this.access.equals(HeliosVariable.ACCESS_W)) || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the variable has read access\r\n+     *\r\n+     * @return true if the variable has read access\r\n+     */\r\n+    public boolean hasReadAccess() {\r\n+        return (this.access.equals(HeliosVariable.ACCESS_R)) || (this.access.equals(HeliosVariable.ACCESS_RW));\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the provided value is within the accepted range\r\n+     *\r\n+     * @param value The value as a string\r\n+     * @return true if the value is within the accepted range\r\n+     */\r\n+    public boolean isInAllowedRange(String value) {\r\n+        if ((this.getMinVal() != null) && (this.getMaxVal() != null)) { // min and max value are set\r\n+            try {\r\n+                if (this.type.equals(HeliosVariable.TYPE_INTEGER)) {\r\n+                    // using long becuase some variable are specified with a max of 2^32-1\r\n+                    // parsing double to allow floating point values to be processed as well\r\n+                    Long l = new Double(value).longValue();\r\n+                    return (this.getMinVal().longValue() <= l) && (this.getMaxVal().longValue() >= l);\r\n+                } else if (this.type.equals(HeliosVariable.TYPE_FLOAT)) {\r\n+                    Double d = Double.parseDouble(value);\r\n+                    return (this.getMinVal() <= d) && (this.getMaxVal() >= d);\r\n+                }\r\n+            } catch (Exception e) {\r\n+                return false;\r\n+            }\r\n+        } else {\r\n+            return true; // no range to check\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(HeliosVariable v) {\r\n+        if (this.getVariable() < v.getVariable()) {\r\n+            return -1;\r\n+        } else if (this.getVariable() == v.getVariable()) {\r\n+            return 0;\r\n+        } else {\r\n+            return 1;\r\n+        }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNzEyMA==", "bodyText": "You could specify a reasonable min value.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\n          \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"ms\">", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479817120", "createdAt": "2020-08-30T21:22:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1188 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-ventilation-easycontrols\">\r\n+\t\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway TCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\" />\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\" />\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\" />\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\" />\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\" />\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\" />\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\" />\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNzE2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<description>Binding's Refresh Interval in ms</description>\n          \n          \n            \n            \t\t\t\t<description>Refresh interval</description>", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479817161", "createdAt": "2020-08-30T21:22:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1188 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-ventilation-easycontrols\">\r\n+\t\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway TCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\" />\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\" />\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\" />\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\" />\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\" />\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\" />\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\" />\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\r\n+\t\t\t\t<label>Refresh Interval</label>\r\n+\t\t\t\t<description>Binding's Refresh Interval in ms</description>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNzM5NQ==", "bodyText": "You could specify the label here, to avoid specifying an individual type for each Channel.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479817395", "createdAt": "2020-08-30T21:25:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1188 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-ventilation-easycontrols\">\r\n+\t\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway TCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\" />\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\" />\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\" />\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\" />\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\" />\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\" />\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\" />\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\r\n+\t\t\t\t<label>Refresh Interval</label>\r\n+\t\t\t\t<description>Binding's Refresh Interval in ms</description>\r\n+\t\t\t\t<default>60000</default>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</thing-type>\r\n+\r\n+<!--  Channel Group Types -->\r\n+\t\r\n+\t<channel-group-type id=\"general\">\r\n+\t\t<label>General</label>\r\n+\t\t<description>General Parameters / Status Information</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  General Status Infos -->\r\n+\t\t\t<channel id=\"preHeaterStatus\" typeId=\"preHeaterStatus\"/>\r\n+\t\t\t<channel id=\"bypassStatus\" typeId=\"bypassStatus\"/>\r\n+\t\t\t<!--  Temperatures -->\t\t\t\r\n+\t\t\t<channel id=\"nhzDuctSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"nhzReturnSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"vhzDuctSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"tbd\" typeId=\"tbd\"/><!-- no description of this parameter available in the specification -->\r\n+\t\t\t<channel id=\"temperatureOutsideAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureSupplyAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureOutgoingAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureExtractAir\" typeId=\"temperature\"/>\r\n+\t\t\t<!--  RPM -->\r\n+\t\t\t<channel id=\"supplyAirRpm\" typeId=\"rpm\"/>\r\n+\t\t\t<channel id=\"extractAirRpm\" typeId=\"rpm\"/>\r\n+\t\t\t<!--  Filter Change -->\r\n+\t\t\t<channel id=\"filterChangeRemainingTime\" typeId=\"filterChangeRemainingTime\"/>\r\n+\t\t\t<channel id=\"filterChangeReset\" typeId=\"filterChangeReset\"/>\r\n+\t\t\t<!--  Operating Hours -->\r\n+\t\t\t<channel id=\"operatingHoursSupplyAirVent\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursExtractAirVent\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursVhz\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursNhz\" typeId=\"operatingHours\"/>\r\n+\t\t\t<!--  Power -->\r\n+\t\t\t<channel id=\"outputPowerVhz\" typeId=\"outputPower\"/>\r\n+\t\t\t<channel id=\"outputPowerNhz\" typeId=\"outputPower\"/>\r\n+\t\t\t<!--  Infos / Warnings / Errors -->\r\n+\t\t\t<channel id=\"errors\" typeId=\"errors\"/>\r\n+\t\t\t<channel id=\"warnings\" typeId=\"warnings\"/>\r\n+\t\t\t<channel id=\"infos\" typeId=\"infos\"/>\r\n+\t\t\t<channel id=\"noOfErrors\" typeId=\"noOfErrors\"/>\r\n+\t\t\t<channel id=\"noOfWarnings\" typeId=\"noOfWarnings\"/>\r\n+\t\t\t<channel id=\"noOfInfos\" typeId=\"noOfInfos\"/>\r\n+\t\t\t<channel id=\"errorsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"warningsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"infosMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"statusFlags\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"clearError\" typeId=\"clearError\"/>\r\n+\t\t\t<!--  Unit -->\r\n+\t\t\t<channel id=\"articleDescription\" typeId=\"articleDescription\"/>\r\n+\t\t\t<channel id=\"refNo\" typeId=\"refNo\"/>\r\n+\t\t\t<channel id=\"macAddress\" typeId=\"macAddress\"/>\r\n+\t\t\t<channel id=\"serNo\" typeId=\"serNo\"/>\r\n+\t\t\t<channel id=\"prodCode\" typeId=\"prodCode\"/>\r\n+\t\t\t<channel id=\"resetFlag\" typeId=\"resetFlag\"/>\r\n+\t\t\t<channel id=\"factorySettingWzu\" typeId=\"factorySettingWzu\"/>\r\n+\t\t\t<channel id=\"factoryReset\" typeId=\"factoryReset\"/>\r\n+\t\t\t<!--  System Settings -->\r\n+\t\t\t<channel id=\"language\" typeId=\"language\"/>\r\n+\t\t\t<channel id=\"dateFormat\" typeId=\"dateFormat\"/>\r\n+\t\t\t<channel id=\"date\" typeId=\"date\"/>\r\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\r\n+\t\t\t<channel id=\"timeZoneDifferenceToGmt\" typeId=\"timeZoneDifferenceToGmt\"/>\r\n+\t\t\t<channel id=\"summerWinter\" typeId=\"summerWinter\"/>\r\n+\t\t\t<!--  Software / Firmware -->\r\n+\t\t\t<channel id=\"softwareVersionBasis\" typeId=\"softwareVersionBasis\"/>\r\n+\t\t\t<channel id=\"autoSwUpdate\" typeId=\"autoSwUpdate\"/>\r\n+\t\t\t<channel id=\"accessHeliosPortal\" typeId=\"accessHeliosPortal\"/>\r\n+\t\t\t<channel id=\"globalManualWebUpdate\" typeId=\"globalManualWebUpdate\"/>\r\n+\t\t\t<channel id=\"portalGlobalsErrorForWeb\" typeId=\"portalGlobalsErrorForWeb\"/>\r\n+\t\t\t<channel id=\"logout\" typeId=\"logout\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"operation\">\r\n+\t\t<label>Operation</label>\r\n+\t\t<description>Control of operating mode</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  Party Mode -->\r\n+\t\t\t<channel id=\"partyModeDuration\" typeId=\"partyModeDuration\"/>\r\n+\t\t\t<channel id=\"partyModeFanStage\" typeId=\"partyModeFanStage\"/>\r\n+\t\t\t<channel id=\"partyModeRemainingTime\" typeId=\"partyModeRemainingTime\"/>\r\n+\t\t\t<channel id=\"partyModeStatus\" typeId=\"partyModeStatus\"/>\r\n+\t\t\t<!--  Standby Mode -->\r\n+\t\t\t<channel id=\"standbyModeDuration\" typeId=\"standbyModeDuration\"/>\r\n+\t\t\t<channel id=\"standbyModeFanStage\" typeId=\"standbyModeFanStage\"/>\r\n+\t\t\t<channel id=\"standbyModeRemainingTime\" typeId=\"standbyModeRemainingTime\"/>\r\n+\t\t\t<channel id=\"standbyModeStatus\" typeId=\"standbyModeStatus\"/>\r\n+\t\t\t<!--  Holiday Programme -->\r\n+\t\t\t<channel id=\"holidayProgramme\" typeId=\"holidayProgramme\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeFanStage\" typeId=\"holidayProgrammeFanStage\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeStart\" typeId=\"holidayProgrammeStart\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeEnd\" typeId=\"holidayProgrammeEnd\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeInterval\" typeId=\"holidayProgrammeInterval\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeActivationTime\" typeId=\"holidayProgrammeActivationTime\"/>\r\n+\t\t\t<!--  Operating Mode / Fan Stage-->\r\n+\t\t\t<channel id=\"operatingMode\" typeId=\"operatingMode\"/>\r\n+\t\t\t<channel id=\"fanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"percentageFanStage\" typeId=\"percentageFanStage\"/>\r\n+\t\t\t<channel id=\"extractAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"supplyAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"unitConfig\">\r\n+\t\t<label>Unit Config</label>\r\n+\t\t<description>Configuration parameters of the ventilation unit</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  Fan Stage Configuration -->\r\n+\t\t\t<channel id=\"minFanStage\" typeId=\"minFanStage\"/>\r\n+\t\t\t<channel id=\"assignmentFanStages\" typeId=\"assignmentFanStages\"/>\r\n+\t\t\t<channel id=\"fanStageStepped0to2v\" typeId=\"fanStageStepped1\"/>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNzczMw==", "bodyText": "Same for below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Time</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479817733", "createdAt": "2020-08-30T21:28:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1188 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-ventilation-easycontrols\">\r\n+\t\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway TCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\" />\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\" />\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\" />\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\" />\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\" />\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\" />\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\" />\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\r\n+\t\t\t\t<label>Refresh Interval</label>\r\n+\t\t\t\t<description>Binding's Refresh Interval in ms</description>\r\n+\t\t\t\t<default>60000</default>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</thing-type>\r\n+\r\n+<!--  Channel Group Types -->\r\n+\t\r\n+\t<channel-group-type id=\"general\">\r\n+\t\t<label>General</label>\r\n+\t\t<description>General Parameters / Status Information</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  General Status Infos -->\r\n+\t\t\t<channel id=\"preHeaterStatus\" typeId=\"preHeaterStatus\"/>\r\n+\t\t\t<channel id=\"bypassStatus\" typeId=\"bypassStatus\"/>\r\n+\t\t\t<!--  Temperatures -->\t\t\t\r\n+\t\t\t<channel id=\"nhzDuctSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"nhzReturnSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"vhzDuctSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"tbd\" typeId=\"tbd\"/><!-- no description of this parameter available in the specification -->\r\n+\t\t\t<channel id=\"temperatureOutsideAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureSupplyAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureOutgoingAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureExtractAir\" typeId=\"temperature\"/>\r\n+\t\t\t<!--  RPM -->\r\n+\t\t\t<channel id=\"supplyAirRpm\" typeId=\"rpm\"/>\r\n+\t\t\t<channel id=\"extractAirRpm\" typeId=\"rpm\"/>\r\n+\t\t\t<!--  Filter Change -->\r\n+\t\t\t<channel id=\"filterChangeRemainingTime\" typeId=\"filterChangeRemainingTime\"/>\r\n+\t\t\t<channel id=\"filterChangeReset\" typeId=\"filterChangeReset\"/>\r\n+\t\t\t<!--  Operating Hours -->\r\n+\t\t\t<channel id=\"operatingHoursSupplyAirVent\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursExtractAirVent\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursVhz\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursNhz\" typeId=\"operatingHours\"/>\r\n+\t\t\t<!--  Power -->\r\n+\t\t\t<channel id=\"outputPowerVhz\" typeId=\"outputPower\"/>\r\n+\t\t\t<channel id=\"outputPowerNhz\" typeId=\"outputPower\"/>\r\n+\t\t\t<!--  Infos / Warnings / Errors -->\r\n+\t\t\t<channel id=\"errors\" typeId=\"errors\"/>\r\n+\t\t\t<channel id=\"warnings\" typeId=\"warnings\"/>\r\n+\t\t\t<channel id=\"infos\" typeId=\"infos\"/>\r\n+\t\t\t<channel id=\"noOfErrors\" typeId=\"noOfErrors\"/>\r\n+\t\t\t<channel id=\"noOfWarnings\" typeId=\"noOfWarnings\"/>\r\n+\t\t\t<channel id=\"noOfInfos\" typeId=\"noOfInfos\"/>\r\n+\t\t\t<channel id=\"errorsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"warningsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"infosMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"statusFlags\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"clearError\" typeId=\"clearError\"/>\r\n+\t\t\t<!--  Unit -->\r\n+\t\t\t<channel id=\"articleDescription\" typeId=\"articleDescription\"/>\r\n+\t\t\t<channel id=\"refNo\" typeId=\"refNo\"/>\r\n+\t\t\t<channel id=\"macAddress\" typeId=\"macAddress\"/>\r\n+\t\t\t<channel id=\"serNo\" typeId=\"serNo\"/>\r\n+\t\t\t<channel id=\"prodCode\" typeId=\"prodCode\"/>\r\n+\t\t\t<channel id=\"resetFlag\" typeId=\"resetFlag\"/>\r\n+\t\t\t<channel id=\"factorySettingWzu\" typeId=\"factorySettingWzu\"/>\r\n+\t\t\t<channel id=\"factoryReset\" typeId=\"factoryReset\"/>\r\n+\t\t\t<!--  System Settings -->\r\n+\t\t\t<channel id=\"language\" typeId=\"language\"/>\r\n+\t\t\t<channel id=\"dateFormat\" typeId=\"dateFormat\"/>\r\n+\t\t\t<channel id=\"date\" typeId=\"date\"/>\r\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\r\n+\t\t\t<channel id=\"timeZoneDifferenceToGmt\" typeId=\"timeZoneDifferenceToGmt\"/>\r\n+\t\t\t<channel id=\"summerWinter\" typeId=\"summerWinter\"/>\r\n+\t\t\t<!--  Software / Firmware -->\r\n+\t\t\t<channel id=\"softwareVersionBasis\" typeId=\"softwareVersionBasis\"/>\r\n+\t\t\t<channel id=\"autoSwUpdate\" typeId=\"autoSwUpdate\"/>\r\n+\t\t\t<channel id=\"accessHeliosPortal\" typeId=\"accessHeliosPortal\"/>\r\n+\t\t\t<channel id=\"globalManualWebUpdate\" typeId=\"globalManualWebUpdate\"/>\r\n+\t\t\t<channel id=\"portalGlobalsErrorForWeb\" typeId=\"portalGlobalsErrorForWeb\"/>\r\n+\t\t\t<channel id=\"logout\" typeId=\"logout\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"operation\">\r\n+\t\t<label>Operation</label>\r\n+\t\t<description>Control of operating mode</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  Party Mode -->\r\n+\t\t\t<channel id=\"partyModeDuration\" typeId=\"partyModeDuration\"/>\r\n+\t\t\t<channel id=\"partyModeFanStage\" typeId=\"partyModeFanStage\"/>\r\n+\t\t\t<channel id=\"partyModeRemainingTime\" typeId=\"partyModeRemainingTime\"/>\r\n+\t\t\t<channel id=\"partyModeStatus\" typeId=\"partyModeStatus\"/>\r\n+\t\t\t<!--  Standby Mode -->\r\n+\t\t\t<channel id=\"standbyModeDuration\" typeId=\"standbyModeDuration\"/>\r\n+\t\t\t<channel id=\"standbyModeFanStage\" typeId=\"standbyModeFanStage\"/>\r\n+\t\t\t<channel id=\"standbyModeRemainingTime\" typeId=\"standbyModeRemainingTime\"/>\r\n+\t\t\t<channel id=\"standbyModeStatus\" typeId=\"standbyModeStatus\"/>\r\n+\t\t\t<!--  Holiday Programme -->\r\n+\t\t\t<channel id=\"holidayProgramme\" typeId=\"holidayProgramme\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeFanStage\" typeId=\"holidayProgrammeFanStage\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeStart\" typeId=\"holidayProgrammeStart\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeEnd\" typeId=\"holidayProgrammeEnd\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeInterval\" typeId=\"holidayProgrammeInterval\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeActivationTime\" typeId=\"holidayProgrammeActivationTime\"/>\r\n+\t\t\t<!--  Operating Mode / Fan Stage-->\r\n+\t\t\t<channel id=\"operatingMode\" typeId=\"operatingMode\"/>\r\n+\t\t\t<channel id=\"fanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"percentageFanStage\" typeId=\"percentageFanStage\"/>\r\n+\t\t\t<channel id=\"extractAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"supplyAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"unitConfig\">\r\n+\t\t<label>Unit Config</label>\r\n+\t\t<description>Configuration parameters of the ventilation unit</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  Fan Stage Configuration -->\r\n+\t\t\t<channel id=\"minFanStage\" typeId=\"minFanStage\"/>\r\n+\t\t\t<channel id=\"assignmentFanStages\" typeId=\"assignmentFanStages\"/>\r\n+\t\t\t<channel id=\"fanStageStepped0to2v\" typeId=\"fanStageStepped1\"/>\r\n+\t\t\t<channel id=\"fanStageStepped2to4v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped4to6v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped6to8v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped8to10v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"voltageFanStage1ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage2ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage3ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage4ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage1SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage2SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage3SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage4SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<!--  Bypass Configuration -->\r\n+\t\t\t<channel id=\"bypassRoomTemperature\" typeId=\"bypassRoomTemperature\"/>\r\n+\t\t\t<channel id=\"bypassMinOutsideTemperature\" typeId=\"bypassMinOutsideTemperature\"/>\r\n+\t\t\t<channel id=\"bypassFromDay\" typeId=\"day\"/>\r\n+\t\t\t<channel id=\"bypassFromMonth\" typeId=\"month\"/>\r\n+\t\t\t<channel id=\"bypassToDay\" typeId=\"day\"/>\r\n+\t\t\t<channel id=\"bypassToMonth\" typeId=\"month\"/>\r\n+\t\t\t<!--  Comfort Temperature -->\r\n+\t\t\t<channel id=\"comfortTemp\" typeId=\"comfortTemp\"/>\r\n+\t\t\t<!--  Error Output Function -->\r\n+\t\t\t<channel id=\"errorOutputFunction\" typeId=\"errorOutputFunction\"/>\r\n+\t\t\t<!--  Filter Change -->\r\n+\t\t\t<channel id=\"filterChange\" typeId=\"filterChange\"/>\r\n+\t\t\t<channel id=\"filterChangeInterval\" typeId=\"filterChangeInterval\"/>\r\n+\t\t\t<!--  System Components and Extensions -->\r\n+\t\t\t<channel id=\"unitConfig\" typeId=\"unitConfig\"/>\r\n+\t\t\t<channel id=\"externalContact\" typeId=\"externalContact\"/>\r\n+\t\t\t<channel id=\"functionTypeKwlEm\" typeId=\"functionTypeKwlEm\"/>\r\n+\t\t\t<channel id=\"heatExchangerType\" typeId=\"heatExchangerType\"/>\r\n+\t\t\t<channel id=\"kwlBe\" typeId=\"kwlBe\"/>\r\n+\t\t\t<channel id=\"kwlBec\" typeId=\"kwlBec\"/>\r\n+\t\t\t<channel id=\"vhzType\" typeId=\"vhzType\"/>\r\n+\t\t\t<channel id=\"runOnTimeVhzNhz\" typeId=\"runOnTimeVhzNhz\"/>\r\n+\t\t\t<channel id=\"offsetExtractAir\" typeId=\"offsetExtractAir\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"profiles\">\r\n+\t\t<label>Profiles</label>\r\n+\t\t<description>Profiles for Device Operation</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"weekProfileNhz\" typeId=\"weekProfileNhz\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"humidityControl\">\r\n+\t\t<label>Humidity Control</label>\r\n+\t\t<description>Config of Sensors for Humidity and/or Temperature Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"humidityControlStatus\" typeId=\"humidityControlStatus\"/>\r\n+\t\t\t<channel id=\"humidityControlSetValue\" typeId=\"humidityControlSetValue\"/>\r\n+\t\t\t<channel id=\"humidityControlSteps\" typeId=\"humidityControlSteps\"/>\r\n+\t\t\t<channel id=\"humidityStopTime\" typeId=\"humidityStopTime\"/>\r\n+\t\t\t<!--  Configuration Temperature+Humidity / Only Humidity / Only Temperature -->\r\n+\t\t\t<channel id=\"kwlFtfConfig0\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig1\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig2\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig3\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig4\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig5\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig6\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig7\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<!--  Sensors Active -->\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf1\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf2\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf3\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf4\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf5\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf6\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf7\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf8\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<!--  Sensor Names -->\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp1\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp2\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp3\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp4\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp5\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp6\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp7\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp8\" typeId=\"sensorName\"/>\r\n+\t\t\t<!--  External Humidity Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity1\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity2\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity3\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity4\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity5\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity6\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity7\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity8\" typeId=\"humidity\"/>\r\n+\t\t\t<!--  External Temperature Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature1\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature2\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature3\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature4\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature5\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature6\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature7\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature8\" typeId=\"temperature\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"co2Control\">\r\n+\t\t<label>CO2 Control</label>\r\n+\t\t<description>Config of Sensors for CO2 Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"co2ControlStatus\" typeId=\"co2ControlStatus\"/>\r\n+\t\t\t<channel id=\"co2ControlSetValue\" typeId=\"co2ControlSetValue\"/>\r\n+\t\t\t<channel id=\"co2ControlSteps\" typeId=\"co2ControlSteps\"/>\r\n+\t\t\t<!--  Sensor Names -->\r\n+\t\t\t<channel id=\"sensorNameCo21\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo22\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo23\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo24\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo25\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo26\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo27\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo28\" typeId=\"sensorName\"/>\r\n+\t\t\t<!--  External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlCo21\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo22\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo23\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo24\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo25\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo26\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo27\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo28\" typeId=\"co2\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"vocControl\">\r\n+\t\t<label>VOC Control</label>\r\n+\t\t<description>Config of Sensors for VOC Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"vocControlStatus\" typeId=\"vocControlStatus\"/>\r\n+\t\t\t<channel id=\"vocControlSetValue\" typeId=\"vocControlSetValue\"/>\r\n+\t\t\t<channel id=\"vocControlSteps\" typeId=\"vocControlSteps\"/>\r\n+\t\t\t<!--  Sensor Names -->\r\n+\t\t\t<channel id=\"sensorNameVoc1\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc2\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc3\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc4\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc5\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc6\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc7\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc8\" typeId=\"sensorName\"/>\r\n+\t\t\t<!--  External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlVoc1\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc2\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc3\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc4\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc5\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc6\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc7\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc8\" typeId=\"voc\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\r\n+<!--  Channel Types -->\r\n+\r\n+\t<channel-type id=\"articleDescription\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Article Description</label>\r\n+\t\t<description>The KWL's article description</description>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"refNo\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Reference Number</label>\r\n+\t\t<description>The KWL's reference number</description>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"macAddress\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>MAC Address</label>\r\n+\t\t<description>The KWL's MAC Address</description>\r\n+\t\t<state readOnly=\"true\" />\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"language\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Language</label>\r\n+\t\t<description>The KWL user interface's language</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"de\">Deutsch</option>\r\n+\t\t\t\t<option value=\"en\">English</option>\r\n+\t\t\t\t<option value=\"fr\">Fran\u00e7ais</option>\r\n+\t\t\t\t<option value=\"hr\">Hrvatski</option>\r\n+\t\t\t\t<option value=\"hu\">Magyar</option>\r\n+\t\t\t\t<option value=\"it\">Italiano</option>\r\n+\t\t\t\t<option value=\"pl\">Polski</option>\r\n+\t\t\t\t<option value=\"sk\">Slovensk\u00fd</option>\r\n+\t\t\t\t<option value=\"sl\">Sloven\u0161\u010dina</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"date\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Date</label>\r\n+\t\t<description>The KWL's system date</description>\r\n+\t\t<category>Time</category>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"time\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Time</label>\r\n+\t\t<description>The KWL's system time</description>\r\n+\t\t<category>Time</category>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"summerWinter\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Summertime / Wintertime</label>\r\n+\t\t<description>Indicates if summertime or wintertime is active</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Wintertime</option>\r\n+\t\t\t\t<option value=\"1\">Summertime</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"autoSwUpdate\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Automatic SW Updates</label>\r\n+\t\t<description>Indicates if automatic software updates are enabled</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">disabled</option>\r\n+\t\t\t\t<option value=\"1\">enabled</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"accessHeliosPortal\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Access Helios Portal</label>\r\n+\t\t<description>Indicates if access to Helios portal is enabled</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">disabled</option>\r\n+\t\t\t\t<option value=\"1\">enabled</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"voltageFanStage\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Voltage for Fan Stages</label>\r\n+\t\t<description>Voltage for supply or extract air fan mapped to fan stage (1-4)</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"1.6\" max=\"10\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"minFanStage\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Minimum Fan Stage</label>\r\n+\t\t<description>Minimum fan stage (0 or 1)</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"1\" step=\"1\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"kwlBe\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>KWL-BE Activated</label>\r\n+\t\t<description>Slide switch controller KWL-BE activated</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"kwlBec\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>KWL-BEC Activated</label>\r\n+\t\t<description>Comfort controller KWL-BEC activated</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"unitConfig\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Ventilation Unit Configuration</label>\r\n+\t\t<description>Ventilation unit configuration (type of house)</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">DiBt</option>\r\n+\t\t\t\t<option value=\"2\">Passive-house</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"preHeaterStatus\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Pre-Heater Status</label>\r\n+\t\t<description>Pre-Heater Status</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"kwlFtfConfig\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity/Temperature Sensor Configuration</label>\r\n+\t\t<description>Humidity/temperature sensor configuration</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Only humidity</option>\r\n+\t\t\t\t<option value=\"2\">Only temperature</option>\r\n+\t\t\t\t<option value=\"3\">Combined</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidityControlStatus\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity Control Status</label>\r\n+\t\t<description>Humidity control status</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Stepped</option>\r\n+\t\t\t\t<option value=\"2\">Stepless</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidityControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity Control Set Value</label>\r\n+\t\t<description>Humidity control set value (in percent)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"20\" max=\"80\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidityControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity Control Steps</label>\r\n+\t\t<description>Humidity control steps (in percent)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"5\" max=\"20\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidityStopTime\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity Stop Time</label>\r\n+\t\t<description>Humidity stop time in hours (0-24)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"0\" max=\"24\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"co2ControlStatus\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>CO2 Control Status</label>\r\n+\t\t<description>CO2 control status</description>\r\n+\t\t<category>CarbonDioxide</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Stepped</option>\r\n+\t\t\t\t<option value=\"2\">Stepless</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"co2ControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>CO2 Control Set Value</label>\r\n+\t\t<description>CO2 control set value (in ppm)</description>\r\n+\t\t<category>CarbonDioxide</category>\r\n+\t\t<state min=\"300\" max=\"2000\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"co2ControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>CO2 Control Steps</label>\r\n+\t\t<description>CO2 control steps (in ppm)</description>\r\n+\t\t<category>CarbonDioxide</category>\r\n+\t\t<state min=\"50\" max=\"400\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"vocControlStatus\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>VOC Control Status</label>\r\n+\t\t<description>VOC control status</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Stepped</option>\r\n+\t\t\t\t<option value=\"2\">Stepless</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"vocControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>VOC Control Set Value</label>\r\n+\t\t<description>VOC control set value (in ppm)</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"300\" max=\"2000\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"vocControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>VOC Control Steps</label>\r\n+\t\t<description>VOC control steps (in ppm)</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"50\" max=\"400\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"comfortTemp\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Comfort Temperature</label>\r\n+\t\t<description>Comfort temperature</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"10\" max=\"25\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"timeZoneDifferenceToGmt\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Time Zone Difference to GMT</label>\r\n+\t\t<description>Time zone difference to GMT</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state min=\"-12\" max=\"14\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"dateFormat\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Date Format</label>\r\n+\t\t<description>Date format</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">dd.mm.yyyy</option>\r\n+\t\t\t\t<option value=\"1\">mm.dd.yyyy</option>\r\n+\t\t\t\t<option value=\"2\">yyyy.mm.dd</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"heatExchangerType\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Heat Exchanger Type</label>\r\n+\t\t<description>Heat exchanger type</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Plastic</option>\r\n+\t\t\t\t<option value=\"1\">Aluminium</option>\r\n+\t\t\t\t<option value=\"2\">Enthalpy</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"partyModeDuration\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Party Mode Duration</label>\r\n+\t\t<description>Party mode duration (in minutes)</description>\r\n+\t\t<category>Party</category>\r\n+\t\t<state min=\"5\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"partyModeFanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Party Mode Fan Stage</label>\r\n+\t\t<description>Party mode fan stage</description>\r\n+\t\t<category>Party</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"partyModeRemainingTime\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Party Mode Remaining Time</label>\r\n+\t\t<description>Party mode remaining time</description>\r\n+\t\t<category>Party</category>\r\n+\t\t<state min=\"0\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"partyModeStatus\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Party Mode Status</label>\r\n+\t\t<description>Party mode status</description>\r\n+\t\t<category>Party</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"standbyModeDuration\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Standby Mode Duration</label>\r\n+\t\t<description>Standby mode duration (in minutes)</description>\r\n+\t\t<category>Presence</category>\r\n+\t\t<state min=\"5\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"standbyModeFanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Standby Mode Fan Stage</label>\r\n+\t\t<description>Standby mode fan stage</description>\r\n+\t\t<category>Presence</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"standbyModeRemainingTime\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Standby Mode Remaining Time</label>\r\n+\t\t<description>Standby mode remaining time</description>\r\n+\t\t<category>Presence</category>\r\n+\t\t<state min=\"0\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"standbyModeStatus\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Standby Mode Status</label>\r\n+\t\t<description>Standby mode status</description>\r\n+\t\t<category>Presence</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"operatingMode\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Operating Mode</label>\r\n+\t\t<description>Operating mode (automatic/manual)</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Automatic</option>\r\n+\t\t\t\t<option value=\"1\">Manual</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"fanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Fan Stage</label>\r\n+\t\t<description>Fan stage</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"percentageFanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Percentage Fan Stage</label>\r\n+\t\t<description>Fan stage in percent</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"temperature\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Temperature</label>\r\n+\t\t<description>Temperature in \u00b0C</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"-27\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidity\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity</label>\r\n+\t\t<description>Humidity</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"0\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"co2\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>CO2</label>\r\n+\t\t<description>CO2</description>\r\n+\t\t<category>CarbonDioxide</category>\r\n+\t\t<state min=\"0\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"voc\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>VOC</label>\r\n+\t\t<description>VOC</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"0\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"weekProfileNhz\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Week Profile Afterheater</label>\r\n+\t\t<description>Week profile afterheater</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Standard 1</option>\r\n+\t\t\t\t<option value=\"1\">Standard 2</option>\r\n+\t\t\t\t<option value=\"2\">Fixed value</option>\r\n+\t\t\t\t<option value=\"3\">Individual 1</option>\r\n+\t\t\t\t<option value=\"4\">Individual 2</option>\r\n+\t\t\t\t<option value=\"5\">NA</option>\r\n+\t\t\t\t<option value=\"6\">Off</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"serNo\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Serial Number</label>\r\n+\t\t<description>Serial number</description>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"prodCode\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Production Code</label>\r\n+\t\t<description>Production code</description>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"rpm\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>RPM</label>\r\n+\t\t<description>RPM</description>\r\n+\t\t<state min=\"0\" max=\"9999\" step=\"1\" pattern=\"%d rpm\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"logout\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Logout</label>\r\n+\t\t<description>Logout</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Logout</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgramme\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme</label>\r\n+\t\t<description>Holiday programme</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Interval</option>\r\n+\t\t\t\t<option value=\"2\">Constant</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeFanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme Fan Stage</label>\r\n+\t\t<description>Holiday programme fan stage</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeStart\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Holiday Programme Start</label>\r\n+\t\t<description>Holiday programme start</description>\r\n+\t\t<category>Vacation</category>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeEnd\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Holiday Programme End</label>\r\n+\t\t<description>Holiday programme end</description>\r\n+\t\t<category>Vacation</category>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeInterval\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme Interval</label>\r\n+\t\t<description>Holiday programme interval in hours</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state min=\"1\" max=\"24\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeActivationTime\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme Activation Time</label>\r\n+\t\t<description>Holiday programme activation time in minutes</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state min=\"5\" max=\"300\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"vhzType\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Preheater Type</label>\r\n+\t\t<description>Preheater type</description>\r\n+\t\t<category>Heating</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">EH-Basis</option>\r\n+\t\t\t\t<option value=\"2\">EH-ERW</option>\r\n+\t\t\t\t<option value=\"3\">SEWT</option>\r\n+\t\t\t\t<option value=\"4\">LEWT</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"functionTypeKwlEm\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Function KWL-EM</label>\r\n+\t\t<description>Function KWL-EM</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Function 1</option>\r\n+\t\t\t\t<option value=\"2\">Function 2</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"runOnTimeVhzNhz\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Stopping Time Preheater/Afterheater</label>\r\n+\t\t<description>Stopping time preheater/afterheater in seconds</description>\r\n+\t\t<category>Heating</category>\r\n+\t\t<state min=\"60\" max=\"120\" step=\"1\" pattern=\"%dsec\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"externalContact\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>External Contact</label>\r\n+\t\t<description>External contact</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Function 1</option>\r\n+\t\t\t\t<option value=\"2\">Function 2</option>\r\n+\t\t\t\t<option value=\"3\">Function 3</option>\r\n+\t\t\t\t<option value=\"4\">Function 4</option>\r\n+\t\t\t\t<option value=\"5\">Function 5</option>\r\n+\t\t\t\t<option value=\"6\">Function 6</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"errorOutputFunction\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Error Output Function</label>\r\n+\t\t<description>Error output function (collective error or just error)</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Collective error</option>\r\n+\t\t\t\t<option value=\"2\">Only error</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"filterChange\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Filter Change</label>\r\n+\t\t<description>Filter change</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">No</option>\r\n+\t\t\t\t<option value=\"1\">Yes</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"filterChangeInterval\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 923}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNzg1MQ==", "bodyText": "The user could also specify \u00b0F. Better remove the unit from the description.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479817851", "createdAt": "2020-08-30T21:29:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1188 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-ventilation-easycontrols\">\r\n+\t\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway TCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\" />\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\" />\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\" />\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\" />\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\" />\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\" />\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\" />\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\r\n+\t\t\t\t<label>Refresh Interval</label>\r\n+\t\t\t\t<description>Binding's Refresh Interval in ms</description>\r\n+\t\t\t\t<default>60000</default>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</thing-type>\r\n+\r\n+<!--  Channel Group Types -->\r\n+\t\r\n+\t<channel-group-type id=\"general\">\r\n+\t\t<label>General</label>\r\n+\t\t<description>General Parameters / Status Information</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  General Status Infos -->\r\n+\t\t\t<channel id=\"preHeaterStatus\" typeId=\"preHeaterStatus\"/>\r\n+\t\t\t<channel id=\"bypassStatus\" typeId=\"bypassStatus\"/>\r\n+\t\t\t<!--  Temperatures -->\t\t\t\r\n+\t\t\t<channel id=\"nhzDuctSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"nhzReturnSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"vhzDuctSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"tbd\" typeId=\"tbd\"/><!-- no description of this parameter available in the specification -->\r\n+\t\t\t<channel id=\"temperatureOutsideAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureSupplyAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureOutgoingAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureExtractAir\" typeId=\"temperature\"/>\r\n+\t\t\t<!--  RPM -->\r\n+\t\t\t<channel id=\"supplyAirRpm\" typeId=\"rpm\"/>\r\n+\t\t\t<channel id=\"extractAirRpm\" typeId=\"rpm\"/>\r\n+\t\t\t<!--  Filter Change -->\r\n+\t\t\t<channel id=\"filterChangeRemainingTime\" typeId=\"filterChangeRemainingTime\"/>\r\n+\t\t\t<channel id=\"filterChangeReset\" typeId=\"filterChangeReset\"/>\r\n+\t\t\t<!--  Operating Hours -->\r\n+\t\t\t<channel id=\"operatingHoursSupplyAirVent\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursExtractAirVent\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursVhz\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursNhz\" typeId=\"operatingHours\"/>\r\n+\t\t\t<!--  Power -->\r\n+\t\t\t<channel id=\"outputPowerVhz\" typeId=\"outputPower\"/>\r\n+\t\t\t<channel id=\"outputPowerNhz\" typeId=\"outputPower\"/>\r\n+\t\t\t<!--  Infos / Warnings / Errors -->\r\n+\t\t\t<channel id=\"errors\" typeId=\"errors\"/>\r\n+\t\t\t<channel id=\"warnings\" typeId=\"warnings\"/>\r\n+\t\t\t<channel id=\"infos\" typeId=\"infos\"/>\r\n+\t\t\t<channel id=\"noOfErrors\" typeId=\"noOfErrors\"/>\r\n+\t\t\t<channel id=\"noOfWarnings\" typeId=\"noOfWarnings\"/>\r\n+\t\t\t<channel id=\"noOfInfos\" typeId=\"noOfInfos\"/>\r\n+\t\t\t<channel id=\"errorsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"warningsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"infosMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"statusFlags\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"clearError\" typeId=\"clearError\"/>\r\n+\t\t\t<!--  Unit -->\r\n+\t\t\t<channel id=\"articleDescription\" typeId=\"articleDescription\"/>\r\n+\t\t\t<channel id=\"refNo\" typeId=\"refNo\"/>\r\n+\t\t\t<channel id=\"macAddress\" typeId=\"macAddress\"/>\r\n+\t\t\t<channel id=\"serNo\" typeId=\"serNo\"/>\r\n+\t\t\t<channel id=\"prodCode\" typeId=\"prodCode\"/>\r\n+\t\t\t<channel id=\"resetFlag\" typeId=\"resetFlag\"/>\r\n+\t\t\t<channel id=\"factorySettingWzu\" typeId=\"factorySettingWzu\"/>\r\n+\t\t\t<channel id=\"factoryReset\" typeId=\"factoryReset\"/>\r\n+\t\t\t<!--  System Settings -->\r\n+\t\t\t<channel id=\"language\" typeId=\"language\"/>\r\n+\t\t\t<channel id=\"dateFormat\" typeId=\"dateFormat\"/>\r\n+\t\t\t<channel id=\"date\" typeId=\"date\"/>\r\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\r\n+\t\t\t<channel id=\"timeZoneDifferenceToGmt\" typeId=\"timeZoneDifferenceToGmt\"/>\r\n+\t\t\t<channel id=\"summerWinter\" typeId=\"summerWinter\"/>\r\n+\t\t\t<!--  Software / Firmware -->\r\n+\t\t\t<channel id=\"softwareVersionBasis\" typeId=\"softwareVersionBasis\"/>\r\n+\t\t\t<channel id=\"autoSwUpdate\" typeId=\"autoSwUpdate\"/>\r\n+\t\t\t<channel id=\"accessHeliosPortal\" typeId=\"accessHeliosPortal\"/>\r\n+\t\t\t<channel id=\"globalManualWebUpdate\" typeId=\"globalManualWebUpdate\"/>\r\n+\t\t\t<channel id=\"portalGlobalsErrorForWeb\" typeId=\"portalGlobalsErrorForWeb\"/>\r\n+\t\t\t<channel id=\"logout\" typeId=\"logout\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"operation\">\r\n+\t\t<label>Operation</label>\r\n+\t\t<description>Control of operating mode</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  Party Mode -->\r\n+\t\t\t<channel id=\"partyModeDuration\" typeId=\"partyModeDuration\"/>\r\n+\t\t\t<channel id=\"partyModeFanStage\" typeId=\"partyModeFanStage\"/>\r\n+\t\t\t<channel id=\"partyModeRemainingTime\" typeId=\"partyModeRemainingTime\"/>\r\n+\t\t\t<channel id=\"partyModeStatus\" typeId=\"partyModeStatus\"/>\r\n+\t\t\t<!--  Standby Mode -->\r\n+\t\t\t<channel id=\"standbyModeDuration\" typeId=\"standbyModeDuration\"/>\r\n+\t\t\t<channel id=\"standbyModeFanStage\" typeId=\"standbyModeFanStage\"/>\r\n+\t\t\t<channel id=\"standbyModeRemainingTime\" typeId=\"standbyModeRemainingTime\"/>\r\n+\t\t\t<channel id=\"standbyModeStatus\" typeId=\"standbyModeStatus\"/>\r\n+\t\t\t<!--  Holiday Programme -->\r\n+\t\t\t<channel id=\"holidayProgramme\" typeId=\"holidayProgramme\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeFanStage\" typeId=\"holidayProgrammeFanStage\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeStart\" typeId=\"holidayProgrammeStart\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeEnd\" typeId=\"holidayProgrammeEnd\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeInterval\" typeId=\"holidayProgrammeInterval\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeActivationTime\" typeId=\"holidayProgrammeActivationTime\"/>\r\n+\t\t\t<!--  Operating Mode / Fan Stage-->\r\n+\t\t\t<channel id=\"operatingMode\" typeId=\"operatingMode\"/>\r\n+\t\t\t<channel id=\"fanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"percentageFanStage\" typeId=\"percentageFanStage\"/>\r\n+\t\t\t<channel id=\"extractAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"supplyAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"unitConfig\">\r\n+\t\t<label>Unit Config</label>\r\n+\t\t<description>Configuration parameters of the ventilation unit</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  Fan Stage Configuration -->\r\n+\t\t\t<channel id=\"minFanStage\" typeId=\"minFanStage\"/>\r\n+\t\t\t<channel id=\"assignmentFanStages\" typeId=\"assignmentFanStages\"/>\r\n+\t\t\t<channel id=\"fanStageStepped0to2v\" typeId=\"fanStageStepped1\"/>\r\n+\t\t\t<channel id=\"fanStageStepped2to4v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped4to6v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped6to8v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped8to10v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"voltageFanStage1ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage2ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage3ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage4ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage1SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage2SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage3SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage4SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<!--  Bypass Configuration -->\r\n+\t\t\t<channel id=\"bypassRoomTemperature\" typeId=\"bypassRoomTemperature\"/>\r\n+\t\t\t<channel id=\"bypassMinOutsideTemperature\" typeId=\"bypassMinOutsideTemperature\"/>\r\n+\t\t\t<channel id=\"bypassFromDay\" typeId=\"day\"/>\r\n+\t\t\t<channel id=\"bypassFromMonth\" typeId=\"month\"/>\r\n+\t\t\t<channel id=\"bypassToDay\" typeId=\"day\"/>\r\n+\t\t\t<channel id=\"bypassToMonth\" typeId=\"month\"/>\r\n+\t\t\t<!--  Comfort Temperature -->\r\n+\t\t\t<channel id=\"comfortTemp\" typeId=\"comfortTemp\"/>\r\n+\t\t\t<!--  Error Output Function -->\r\n+\t\t\t<channel id=\"errorOutputFunction\" typeId=\"errorOutputFunction\"/>\r\n+\t\t\t<!--  Filter Change -->\r\n+\t\t\t<channel id=\"filterChange\" typeId=\"filterChange\"/>\r\n+\t\t\t<channel id=\"filterChangeInterval\" typeId=\"filterChangeInterval\"/>\r\n+\t\t\t<!--  System Components and Extensions -->\r\n+\t\t\t<channel id=\"unitConfig\" typeId=\"unitConfig\"/>\r\n+\t\t\t<channel id=\"externalContact\" typeId=\"externalContact\"/>\r\n+\t\t\t<channel id=\"functionTypeKwlEm\" typeId=\"functionTypeKwlEm\"/>\r\n+\t\t\t<channel id=\"heatExchangerType\" typeId=\"heatExchangerType\"/>\r\n+\t\t\t<channel id=\"kwlBe\" typeId=\"kwlBe\"/>\r\n+\t\t\t<channel id=\"kwlBec\" typeId=\"kwlBec\"/>\r\n+\t\t\t<channel id=\"vhzType\" typeId=\"vhzType\"/>\r\n+\t\t\t<channel id=\"runOnTimeVhzNhz\" typeId=\"runOnTimeVhzNhz\"/>\r\n+\t\t\t<channel id=\"offsetExtractAir\" typeId=\"offsetExtractAir\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"profiles\">\r\n+\t\t<label>Profiles</label>\r\n+\t\t<description>Profiles for Device Operation</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"weekProfileNhz\" typeId=\"weekProfileNhz\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"humidityControl\">\r\n+\t\t<label>Humidity Control</label>\r\n+\t\t<description>Config of Sensors for Humidity and/or Temperature Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"humidityControlStatus\" typeId=\"humidityControlStatus\"/>\r\n+\t\t\t<channel id=\"humidityControlSetValue\" typeId=\"humidityControlSetValue\"/>\r\n+\t\t\t<channel id=\"humidityControlSteps\" typeId=\"humidityControlSteps\"/>\r\n+\t\t\t<channel id=\"humidityStopTime\" typeId=\"humidityStopTime\"/>\r\n+\t\t\t<!--  Configuration Temperature+Humidity / Only Humidity / Only Temperature -->\r\n+\t\t\t<channel id=\"kwlFtfConfig0\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig1\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig2\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig3\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig4\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig5\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig6\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<channel id=\"kwlFtfConfig7\" typeId=\"kwlFtfConfig\"/>\r\n+\t\t\t<!--  Sensors Active -->\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf1\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf2\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf3\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf4\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf5\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf6\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf7\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<channel id=\"sensorConfigKwlFtf8\" typeId=\"sensorConfig\"/>\r\n+\t\t\t<!--  Sensor Names -->\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp1\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp2\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp3\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp4\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp5\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp6\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp7\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameHumidityAndTemp8\" typeId=\"sensorName\"/>\r\n+\t\t\t<!--  External Humidity Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity1\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity2\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity3\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity4\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity5\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity6\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity7\" typeId=\"humidity\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity8\" typeId=\"humidity\"/>\r\n+\t\t\t<!--  External Temperature Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature1\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature2\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature3\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature4\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature5\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature6\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature7\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature8\" typeId=\"temperature\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"co2Control\">\r\n+\t\t<label>CO2 Control</label>\r\n+\t\t<description>Config of Sensors for CO2 Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"co2ControlStatus\" typeId=\"co2ControlStatus\"/>\r\n+\t\t\t<channel id=\"co2ControlSetValue\" typeId=\"co2ControlSetValue\"/>\r\n+\t\t\t<channel id=\"co2ControlSteps\" typeId=\"co2ControlSteps\"/>\r\n+\t\t\t<!--  Sensor Names -->\r\n+\t\t\t<channel id=\"sensorNameCo21\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo22\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo23\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo24\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo25\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo26\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo27\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameCo28\" typeId=\"sensorName\"/>\r\n+\t\t\t<!--  External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlCo21\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo22\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo23\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo24\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo25\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo26\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo27\" typeId=\"co2\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo28\" typeId=\"co2\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"vocControl\">\r\n+\t\t<label>VOC Control</label>\r\n+\t\t<description>Config of Sensors for VOC Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"vocControlStatus\" typeId=\"vocControlStatus\"/>\r\n+\t\t\t<channel id=\"vocControlSetValue\" typeId=\"vocControlSetValue\"/>\r\n+\t\t\t<channel id=\"vocControlSteps\" typeId=\"vocControlSteps\"/>\r\n+\t\t\t<!--  Sensor Names -->\r\n+\t\t\t<channel id=\"sensorNameVoc1\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc2\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc3\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc4\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc5\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc6\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc7\" typeId=\"sensorName\"/>\r\n+\t\t\t<channel id=\"sensorNameVoc8\" typeId=\"sensorName\"/>\r\n+\t\t\t<!--  External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlVoc1\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc2\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc3\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc4\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc5\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc6\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc7\" typeId=\"voc\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc8\" typeId=\"voc\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\r\n+<!--  Channel Types -->\r\n+\r\n+\t<channel-type id=\"articleDescription\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Article Description</label>\r\n+\t\t<description>The KWL's article description</description>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"refNo\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Reference Number</label>\r\n+\t\t<description>The KWL's reference number</description>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"macAddress\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>MAC Address</label>\r\n+\t\t<description>The KWL's MAC Address</description>\r\n+\t\t<state readOnly=\"true\" />\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"language\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Language</label>\r\n+\t\t<description>The KWL user interface's language</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"de\">Deutsch</option>\r\n+\t\t\t\t<option value=\"en\">English</option>\r\n+\t\t\t\t<option value=\"fr\">Fran\u00e7ais</option>\r\n+\t\t\t\t<option value=\"hr\">Hrvatski</option>\r\n+\t\t\t\t<option value=\"hu\">Magyar</option>\r\n+\t\t\t\t<option value=\"it\">Italiano</option>\r\n+\t\t\t\t<option value=\"pl\">Polski</option>\r\n+\t\t\t\t<option value=\"sk\">Slovensk\u00fd</option>\r\n+\t\t\t\t<option value=\"sl\">Sloven\u0161\u010dina</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"date\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Date</label>\r\n+\t\t<description>The KWL's system date</description>\r\n+\t\t<category>Time</category>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"time\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Time</label>\r\n+\t\t<description>The KWL's system time</description>\r\n+\t\t<category>Time</category>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"summerWinter\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Summertime / Wintertime</label>\r\n+\t\t<description>Indicates if summertime or wintertime is active</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Wintertime</option>\r\n+\t\t\t\t<option value=\"1\">Summertime</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"autoSwUpdate\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Automatic SW Updates</label>\r\n+\t\t<description>Indicates if automatic software updates are enabled</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">disabled</option>\r\n+\t\t\t\t<option value=\"1\">enabled</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"accessHeliosPortal\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Access Helios Portal</label>\r\n+\t\t<description>Indicates if access to Helios portal is enabled</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">disabled</option>\r\n+\t\t\t\t<option value=\"1\">enabled</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"voltageFanStage\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Voltage for Fan Stages</label>\r\n+\t\t<description>Voltage for supply or extract air fan mapped to fan stage (1-4)</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"1.6\" max=\"10\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"minFanStage\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Minimum Fan Stage</label>\r\n+\t\t<description>Minimum fan stage (0 or 1)</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"1\" step=\"1\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"kwlBe\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>KWL-BE Activated</label>\r\n+\t\t<description>Slide switch controller KWL-BE activated</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"kwlBec\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>KWL-BEC Activated</label>\r\n+\t\t<description>Comfort controller KWL-BEC activated</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"unitConfig\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Ventilation Unit Configuration</label>\r\n+\t\t<description>Ventilation unit configuration (type of house)</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">DiBt</option>\r\n+\t\t\t\t<option value=\"2\">Passive-house</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"preHeaterStatus\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Pre-Heater Status</label>\r\n+\t\t<description>Pre-Heater Status</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"kwlFtfConfig\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity/Temperature Sensor Configuration</label>\r\n+\t\t<description>Humidity/temperature sensor configuration</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Only humidity</option>\r\n+\t\t\t\t<option value=\"2\">Only temperature</option>\r\n+\t\t\t\t<option value=\"3\">Combined</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidityControlStatus\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity Control Status</label>\r\n+\t\t<description>Humidity control status</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Stepped</option>\r\n+\t\t\t\t<option value=\"2\">Stepless</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidityControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity Control Set Value</label>\r\n+\t\t<description>Humidity control set value (in percent)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"20\" max=\"80\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidityControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity Control Steps</label>\r\n+\t\t<description>Humidity control steps (in percent)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"5\" max=\"20\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidityStopTime\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity Stop Time</label>\r\n+\t\t<description>Humidity stop time in hours (0-24)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"0\" max=\"24\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"co2ControlStatus\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>CO2 Control Status</label>\r\n+\t\t<description>CO2 control status</description>\r\n+\t\t<category>CarbonDioxide</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Stepped</option>\r\n+\t\t\t\t<option value=\"2\">Stepless</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"co2ControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>CO2 Control Set Value</label>\r\n+\t\t<description>CO2 control set value (in ppm)</description>\r\n+\t\t<category>CarbonDioxide</category>\r\n+\t\t<state min=\"300\" max=\"2000\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"co2ControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>CO2 Control Steps</label>\r\n+\t\t<description>CO2 control steps (in ppm)</description>\r\n+\t\t<category>CarbonDioxide</category>\r\n+\t\t<state min=\"50\" max=\"400\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"vocControlStatus\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>VOC Control Status</label>\r\n+\t\t<description>VOC control status</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Stepped</option>\r\n+\t\t\t\t<option value=\"2\">Stepless</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"vocControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>VOC Control Set Value</label>\r\n+\t\t<description>VOC control set value (in ppm)</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"300\" max=\"2000\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"vocControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>VOC Control Steps</label>\r\n+\t\t<description>VOC control steps (in ppm)</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"50\" max=\"400\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"comfortTemp\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Comfort Temperature</label>\r\n+\t\t<description>Comfort temperature</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"10\" max=\"25\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"timeZoneDifferenceToGmt\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Time Zone Difference to GMT</label>\r\n+\t\t<description>Time zone difference to GMT</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state min=\"-12\" max=\"14\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"dateFormat\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Date Format</label>\r\n+\t\t<description>Date format</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">dd.mm.yyyy</option>\r\n+\t\t\t\t<option value=\"1\">mm.dd.yyyy</option>\r\n+\t\t\t\t<option value=\"2\">yyyy.mm.dd</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"heatExchangerType\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Heat Exchanger Type</label>\r\n+\t\t<description>Heat exchanger type</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Plastic</option>\r\n+\t\t\t\t<option value=\"1\">Aluminium</option>\r\n+\t\t\t\t<option value=\"2\">Enthalpy</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"partyModeDuration\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Party Mode Duration</label>\r\n+\t\t<description>Party mode duration (in minutes)</description>\r\n+\t\t<category>Party</category>\r\n+\t\t<state min=\"5\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"partyModeFanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Party Mode Fan Stage</label>\r\n+\t\t<description>Party mode fan stage</description>\r\n+\t\t<category>Party</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"partyModeRemainingTime\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Party Mode Remaining Time</label>\r\n+\t\t<description>Party mode remaining time</description>\r\n+\t\t<category>Party</category>\r\n+\t\t<state min=\"0\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"partyModeStatus\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Party Mode Status</label>\r\n+\t\t<description>Party mode status</description>\r\n+\t\t<category>Party</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"standbyModeDuration\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Standby Mode Duration</label>\r\n+\t\t<description>Standby mode duration (in minutes)</description>\r\n+\t\t<category>Presence</category>\r\n+\t\t<state min=\"5\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"standbyModeFanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Standby Mode Fan Stage</label>\r\n+\t\t<description>Standby mode fan stage</description>\r\n+\t\t<category>Presence</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"standbyModeRemainingTime\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Standby Mode Remaining Time</label>\r\n+\t\t<description>Standby mode remaining time</description>\r\n+\t\t<category>Presence</category>\r\n+\t\t<state min=\"0\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"standbyModeStatus\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Standby Mode Status</label>\r\n+\t\t<description>Standby mode status</description>\r\n+\t\t<category>Presence</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"operatingMode\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Operating Mode</label>\r\n+\t\t<description>Operating mode (automatic/manual)</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Automatic</option>\r\n+\t\t\t\t<option value=\"1\">Manual</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"fanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Fan Stage</label>\r\n+\t\t<description>Fan stage</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"percentageFanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Percentage Fan Stage</label>\r\n+\t\t<description>Fan stage in percent</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"temperature\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Temperature</label>\r\n+\t\t<description>Temperature in \u00b0C</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"-27\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"humidity\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Humidity</label>\r\n+\t\t<description>Humidity</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"0\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"co2\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>CO2</label>\r\n+\t\t<description>CO2</description>\r\n+\t\t<category>CarbonDioxide</category>\r\n+\t\t<state min=\"0\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"voc\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>VOC</label>\r\n+\t\t<description>VOC</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"0\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"weekProfileNhz\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Week Profile Afterheater</label>\r\n+\t\t<description>Week profile afterheater</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Standard 1</option>\r\n+\t\t\t\t<option value=\"1\">Standard 2</option>\r\n+\t\t\t\t<option value=\"2\">Fixed value</option>\r\n+\t\t\t\t<option value=\"3\">Individual 1</option>\r\n+\t\t\t\t<option value=\"4\">Individual 2</option>\r\n+\t\t\t\t<option value=\"5\">NA</option>\r\n+\t\t\t\t<option value=\"6\">Off</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"serNo\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Serial Number</label>\r\n+\t\t<description>Serial number</description>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"prodCode\" advanced=\"true\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Production Code</label>\r\n+\t\t<description>Production code</description>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"rpm\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>RPM</label>\r\n+\t\t<description>RPM</description>\r\n+\t\t<state min=\"0\" max=\"9999\" step=\"1\" pattern=\"%d rpm\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"logout\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Logout</label>\r\n+\t\t<description>Logout</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Logout</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgramme\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme</label>\r\n+\t\t<description>Holiday programme</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Interval</option>\r\n+\t\t\t\t<option value=\"2\">Constant</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeFanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme Fan Stage</label>\r\n+\t\t<description>Holiday programme fan stage</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeStart\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Holiday Programme Start</label>\r\n+\t\t<description>Holiday programme start</description>\r\n+\t\t<category>Vacation</category>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeEnd\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Holiday Programme End</label>\r\n+\t\t<description>Holiday programme end</description>\r\n+\t\t<category>Vacation</category>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeInterval\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme Interval</label>\r\n+\t\t<description>Holiday programme interval in hours</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state min=\"1\" max=\"24\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"holidayProgrammeActivationTime\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme Activation Time</label>\r\n+\t\t<description>Holiday programme activation time in minutes</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state min=\"5\" max=\"300\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"vhzType\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Preheater Type</label>\r\n+\t\t<description>Preheater type</description>\r\n+\t\t<category>Heating</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">EH-Basis</option>\r\n+\t\t\t\t<option value=\"2\">EH-ERW</option>\r\n+\t\t\t\t<option value=\"3\">SEWT</option>\r\n+\t\t\t\t<option value=\"4\">LEWT</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"functionTypeKwlEm\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Function KWL-EM</label>\r\n+\t\t<description>Function KWL-EM</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Function 1</option>\r\n+\t\t\t\t<option value=\"2\">Function 2</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"runOnTimeVhzNhz\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Stopping Time Preheater/Afterheater</label>\r\n+\t\t<description>Stopping time preheater/afterheater in seconds</description>\r\n+\t\t<category>Heating</category>\r\n+\t\t<state min=\"60\" max=\"120\" step=\"1\" pattern=\"%dsec\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"externalContact\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>External Contact</label>\r\n+\t\t<description>External contact</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Function 1</option>\r\n+\t\t\t\t<option value=\"2\">Function 2</option>\r\n+\t\t\t\t<option value=\"3\">Function 3</option>\r\n+\t\t\t\t<option value=\"4\">Function 4</option>\r\n+\t\t\t\t<option value=\"5\">Function 5</option>\r\n+\t\t\t\t<option value=\"6\">Function 6</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"errorOutputFunction\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Error Output Function</label>\r\n+\t\t<description>Error output function (collective error or just error)</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Collective error</option>\r\n+\t\t\t\t<option value=\"2\">Only error</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"filterChange\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Filter Change</label>\r\n+\t\t<description>Filter change</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">No</option>\r\n+\t\t\t\t<option value=\"1\">Yes</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"filterChangeInterval\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Filter Change Interval</label>\r\n+\t\t<description>Filter change interval in months</description>\r\n+\t\t<state min=\"1\" max=\"12\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"filterChangeRemainingTime\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Filter Change Remaining Time</label>\r\n+\t\t<description>Filter change remaining time in minutes</description>\r\n+\t\t<state min=\"1\" max=\"550000\" step=\"1\" pattern=\"%d\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"filterChangeReset\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Filter Change Reset</label>\r\n+\t\t<description>Reset filter change remaining time</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Reset</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\t\r\n+\t<channel-type id=\"bypassRoomTemperature\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Bypass Room Temperature</label>\r\n+\t\t<description>Bypass room temperature in \u00b0C</description>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 950}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxODAzNA==", "bodyText": "Can you combine these? Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r479818034", "createdAt": "2020-08-30T21:31:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,1188 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-ventilation-easycontrols\">\r\n+\t\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\" />\r\n+\t\t</supported-bridge-type-refs>\r\n+\t\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway TCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\" />\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\" />\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\" />\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\" />\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\" />\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\" />\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\" />\r\n+\t\t</channel-groups>\r\n+\t\t\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\">\r\n+\t\t\t\t<label>Refresh Interval</label>\r\n+\t\t\t\t<description>Binding's Refresh Interval in ms</description>\r\n+\t\t\t\t<default>60000</default>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\t\t\r\n+\t</thing-type>\r\n+\r\n+<!--  Channel Group Types -->\r\n+\t\r\n+\t<channel-group-type id=\"general\">\r\n+\t\t<label>General</label>\r\n+\t\t<description>General Parameters / Status Information</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  General Status Infos -->\r\n+\t\t\t<channel id=\"preHeaterStatus\" typeId=\"preHeaterStatus\"/>\r\n+\t\t\t<channel id=\"bypassStatus\" typeId=\"bypassStatus\"/>\r\n+\t\t\t<!--  Temperatures -->\t\t\t\r\n+\t\t\t<channel id=\"nhzDuctSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"nhzReturnSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"vhzDuctSensor\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"tbd\" typeId=\"tbd\"/><!-- no description of this parameter available in the specification -->\r\n+\t\t\t<channel id=\"temperatureOutsideAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureSupplyAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureOutgoingAir\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"temperatureExtractAir\" typeId=\"temperature\"/>\r\n+\t\t\t<!--  RPM -->\r\n+\t\t\t<channel id=\"supplyAirRpm\" typeId=\"rpm\"/>\r\n+\t\t\t<channel id=\"extractAirRpm\" typeId=\"rpm\"/>\r\n+\t\t\t<!--  Filter Change -->\r\n+\t\t\t<channel id=\"filterChangeRemainingTime\" typeId=\"filterChangeRemainingTime\"/>\r\n+\t\t\t<channel id=\"filterChangeReset\" typeId=\"filterChangeReset\"/>\r\n+\t\t\t<!--  Operating Hours -->\r\n+\t\t\t<channel id=\"operatingHoursSupplyAirVent\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursExtractAirVent\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursVhz\" typeId=\"operatingHours\"/>\r\n+\t\t\t<channel id=\"operatingHoursNhz\" typeId=\"operatingHours\"/>\r\n+\t\t\t<!--  Power -->\r\n+\t\t\t<channel id=\"outputPowerVhz\" typeId=\"outputPower\"/>\r\n+\t\t\t<channel id=\"outputPowerNhz\" typeId=\"outputPower\"/>\r\n+\t\t\t<!--  Infos / Warnings / Errors -->\r\n+\t\t\t<channel id=\"errors\" typeId=\"errors\"/>\r\n+\t\t\t<channel id=\"warnings\" typeId=\"warnings\"/>\r\n+\t\t\t<channel id=\"infos\" typeId=\"infos\"/>\r\n+\t\t\t<channel id=\"noOfErrors\" typeId=\"noOfErrors\"/>\r\n+\t\t\t<channel id=\"noOfWarnings\" typeId=\"noOfWarnings\"/>\r\n+\t\t\t<channel id=\"noOfInfos\" typeId=\"noOfInfos\"/>\r\n+\t\t\t<channel id=\"errorsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"warningsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"infosMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"statusFlags\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"clearError\" typeId=\"clearError\"/>\r\n+\t\t\t<!--  Unit -->\r\n+\t\t\t<channel id=\"articleDescription\" typeId=\"articleDescription\"/>\r\n+\t\t\t<channel id=\"refNo\" typeId=\"refNo\"/>\r\n+\t\t\t<channel id=\"macAddress\" typeId=\"macAddress\"/>\r\n+\t\t\t<channel id=\"serNo\" typeId=\"serNo\"/>\r\n+\t\t\t<channel id=\"prodCode\" typeId=\"prodCode\"/>\r\n+\t\t\t<channel id=\"resetFlag\" typeId=\"resetFlag\"/>\r\n+\t\t\t<channel id=\"factorySettingWzu\" typeId=\"factorySettingWzu\"/>\r\n+\t\t\t<channel id=\"factoryReset\" typeId=\"factoryReset\"/>\r\n+\t\t\t<!--  System Settings -->\r\n+\t\t\t<channel id=\"language\" typeId=\"language\"/>\r\n+\t\t\t<channel id=\"dateFormat\" typeId=\"dateFormat\"/>\r\n+\t\t\t<channel id=\"date\" typeId=\"date\"/>\r\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\r\n+\t\t\t<channel id=\"timeZoneDifferenceToGmt\" typeId=\"timeZoneDifferenceToGmt\"/>\r\n+\t\t\t<channel id=\"summerWinter\" typeId=\"summerWinter\"/>\r\n+\t\t\t<!--  Software / Firmware -->\r\n+\t\t\t<channel id=\"softwareVersionBasis\" typeId=\"softwareVersionBasis\"/>\r\n+\t\t\t<channel id=\"autoSwUpdate\" typeId=\"autoSwUpdate\"/>\r\n+\t\t\t<channel id=\"accessHeliosPortal\" typeId=\"accessHeliosPortal\"/>\r\n+\t\t\t<channel id=\"globalManualWebUpdate\" typeId=\"globalManualWebUpdate\"/>\r\n+\t\t\t<channel id=\"portalGlobalsErrorForWeb\" typeId=\"portalGlobalsErrorForWeb\"/>\r\n+\t\t\t<channel id=\"logout\" typeId=\"logout\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"operation\">\r\n+\t\t<label>Operation</label>\r\n+\t\t<description>Control of operating mode</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  Party Mode -->\r\n+\t\t\t<channel id=\"partyModeDuration\" typeId=\"partyModeDuration\"/>\r\n+\t\t\t<channel id=\"partyModeFanStage\" typeId=\"partyModeFanStage\"/>\r\n+\t\t\t<channel id=\"partyModeRemainingTime\" typeId=\"partyModeRemainingTime\"/>\r\n+\t\t\t<channel id=\"partyModeStatus\" typeId=\"partyModeStatus\"/>\r\n+\t\t\t<!--  Standby Mode -->\r\n+\t\t\t<channel id=\"standbyModeDuration\" typeId=\"standbyModeDuration\"/>\r\n+\t\t\t<channel id=\"standbyModeFanStage\" typeId=\"standbyModeFanStage\"/>\r\n+\t\t\t<channel id=\"standbyModeRemainingTime\" typeId=\"standbyModeRemainingTime\"/>\r\n+\t\t\t<channel id=\"standbyModeStatus\" typeId=\"standbyModeStatus\"/>\r\n+\t\t\t<!--  Holiday Programme -->\r\n+\t\t\t<channel id=\"holidayProgramme\" typeId=\"holidayProgramme\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeFanStage\" typeId=\"holidayProgrammeFanStage\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeStart\" typeId=\"holidayProgrammeStart\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeEnd\" typeId=\"holidayProgrammeEnd\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeInterval\" typeId=\"holidayProgrammeInterval\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeActivationTime\" typeId=\"holidayProgrammeActivationTime\"/>\r\n+\t\t\t<!--  Operating Mode / Fan Stage-->\r\n+\t\t\t<channel id=\"operatingMode\" typeId=\"operatingMode\"/>\r\n+\t\t\t<channel id=\"fanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"percentageFanStage\" typeId=\"percentageFanStage\"/>\r\n+\t\t\t<channel id=\"extractAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"supplyAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\t\r\n+\t<channel-group-type id=\"unitConfig\">\r\n+\t\t<label>Unit Config</label>\r\n+\t\t<description>Configuration parameters of the ventilation unit</description>\r\n+\t\t<channels>\r\n+\t\t\t<!--  Fan Stage Configuration -->\r\n+\t\t\t<channel id=\"minFanStage\" typeId=\"minFanStage\"/>\r\n+\t\t\t<channel id=\"assignmentFanStages\" typeId=\"assignmentFanStages\"/>\r\n+\t\t\t<channel id=\"fanStageStepped0to2v\" typeId=\"fanStageStepped1\"/>\r\n+\t\t\t<channel id=\"fanStageStepped2to4v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped4to6v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped6to8v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"fanStageStepped8to10v\" typeId=\"fanStageStepped2\"/>\r\n+\t\t\t<channel id=\"voltageFanStage1ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage2ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage3ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage4ExtractAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage1SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage2SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage3SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<channel id=\"voltageFanStage4SupplyAir\" typeId=\"voltageFanStage\"/>\r\n+\t\t\t<!--  Bypass Configuration -->\r\n+\t\t\t<channel id=\"bypassRoomTemperature\" typeId=\"bypassRoomTemperature\"/>\r\n+\t\t\t<channel id=\"bypassMinOutsideTemperature\" typeId=\"bypassMinOutsideTemperature\"/>\r\n+\t\t\t<channel id=\"bypassFromDay\" typeId=\"day\"/>\r\n+\t\t\t<channel id=\"bypassFromMonth\" typeId=\"month\"/>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 161}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4780387a4eece6a304120a0935fc838be78b4b75", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/4780387a4eece6a304120a0935fc838be78b4b75", "committedDate": "2020-09-11T11:54:41Z", "message": "Delete Channels.xlsx"}, "afterCommit": {"oid": "e9c1c1e632124fd9fc1fc05fd59e1f870c1f5919", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/e9c1c1e632124fd9fc1fc05fd59e1f870c1f5919", "committedDate": "2020-09-11T11:50:13Z", "message": "Changes based on @fwolter's review:\n\n- Introduction of Actions\n- Introduction of Properties\n- Combined item for system date+time\n- Combined items to set bypass period\n- Simplified structure of thing-types.xml\n- General code improvements\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9c1c1e632124fd9fc1fc05fd59e1f870c1f5919", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/e9c1c1e632124fd9fc1fc05fd59e1f870c1f5919", "committedDate": "2020-09-11T11:50:13Z", "message": "Changes based on @fwolter's review:\n\n- Introduction of Actions\n- Introduction of Properties\n- Combined item for system date+time\n- Combined items to set bypass period\n- Simplified structure of thing-types.xml\n- General code improvements\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}, "afterCommit": {"oid": "03a46c3665218ac3ea448a5cb225e50038dc9a6b", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/03a46c3665218ac3ea448a5cb225e50038dc9a6b", "committedDate": "2020-09-11T11:56:23Z", "message": "Changes based on @fwolter's review:\n\n- Introduction of Actions\n- Introduction of Properties\n- Combined item for system date+time\n- Combined items to set bypass period\n- Simplified structure of thing-types.xml\n- General code improvements\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c01ceceef5a61cbc570663fb0d08aeb7784aa503", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/c01ceceef5a61cbc570663fb0d08aeb7784aa503", "committedDate": "2020-09-11T18:23:35Z", "message": "Small bugfix\n\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}, "afterCommit": {"oid": "e60b053c866295e60197069999da93563850c182", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/e60b053c866295e60197069999da93563850c182", "committedDate": "2020-09-11T18:24:34Z", "message": "Small bugfix\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NTY0OTAy", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-487564902", "createdAt": "2020-09-14T09:12:59Z", "commit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOToxMjo1OVrOHRK3tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0Njo1NVrOHRMF_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NTk0Mg==", "bodyText": "Seems that you re-formatted the whole file. It might be sufficient to run mvn spotless:apply.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487765942", "createdAt": "2020-09-14T09:12:59Z", "author": {"login": "fwolter"}, "path": "bom/openhab-addons/pom.xml", "diffHunk": "@@ -1,1329 +1,1334 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NjMyNQ==", "bodyText": "You also need to remove the file from the repo after adding it to gitignore.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487766325", "createdAt": "2020-09-14T09:13:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/.gitignore", "diffHunk": "@@ -0,0 +1 @@\n+/Channels.xlsx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2ODc0Nw==", "bodyText": "You don't need to repeat the binding name. easycontrols would be sufficient.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487768747", "createdAt": "2020-09-14T09:17:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway.\r\n+See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing                           | Description                                                |\r\n+|---------------------------------|------------------------------------------------------------|\r\n+| helios-ventilation-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3MTEwNA==", "bodyText": "The scope should be the binding name.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487771104", "createdAt": "2020-09-14T09:21:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class provides the actions available for the Helios device\n+ *\n+ * @author Bernhard Bauer - Initial contribution\n+ */\n+@ThingActionsScope(name = \"helios-ventilation-easycontrols\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3NDQ4OA==", "bodyText": "Closing the streams must be done in the finally clause to ensure they are closed also if an exception is raised. Or you could use Java's auto-closeable feature:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        InputStreamReader jsonFile = new InputStreamReader(\n          \n          \n            \n                                getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE));\n          \n          \n            \n                        BufferedReader reader = new BufferedReader(jsonFile);\n          \n          \n            \n                        this.variableMap = gson.fromJson(reader, vMapType);\n          \n          \n            \n                        reader.close();\n          \n          \n            \n                        jsonFile.close();\n          \n          \n            \n                    try (InputStreamReader jsonFile = new InputStreamReader(\n          \n          \n            \n                            getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE));\n          \n          \n            \n                            BufferedReader reader = new BufferedReader(jsonFile)) {\n          \n          \n            \n                        this.variableMap = gson.fromJson(reader, vMapType);", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487774488", "createdAt": "2020-09-14T09:27:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,805 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable Map<String, HeliosVariable> variableMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\r\n+\r\n+    private Gson gson = new Gson();\r\n+\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    private int dateFormat = -1;\r\n+    private ZonedDateTime sysDate = ZonedDateTime.now(); // initialize with local system time as a best guess\r\n+                                                         // before reading from device\r\n+\r\n+    private class BypassDate {\r\n+        // initialization to avoid issues when updating before all variables were read\r\n+        private int month = 1;\r\n+        private int day = 1;\r\n+\r\n+        public void setMonth(int month) {\r\n+            this.month = month;\r\n+        }\r\n+\r\n+        public void setDay(int day) {\r\n+            this.day = day;\r\n+        }\r\n+\r\n+        public DateTimeType toDateTimeType() {\r\n+            return new DateTimeType(ZonedDateTime.of(1900, this.month, this.day, 0, 0, 0, 0, ZoneId.of(\"UTC+00:00\")));\r\n+        }\r\n+    }\r\n+\r\n+    private @Nullable BypassDate bypassFrom, bypassTo;\r\n+\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in variableMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        try {\r\n+            InputStreamReader jsonFile = new InputStreamReader(\r\n+                    getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE));\r\n+            BufferedReader reader = new BufferedReader(jsonFile);\r\n+            this.variableMap = gson.fromJson(reader, vMapType);\r\n+            reader.close();\r\n+            jsonFile.close();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3OTE2Nw==", "bodyText": "If I see correctly, this is done now?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487779167", "createdAt": "2020-09-14T09:35:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,684 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private @Nullable Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * The UTC offset of the device\r\n+     */\r\n+    private int utcOffset = 0;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Gson gson = new Gson();\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        this.vMap = gson.fromJson(\r\n+                new BufferedReader(new InputStreamReader(\r\n+                        getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                vMapType);\r\n+        if (vMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data.\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format.\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.vMap != null) && (this.config != null)) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    if (vMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                            if (isLinked(entry.getKey())\r\n+                                    || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))\r\n+                                    || (entry.getKey()\r\n+                                            .equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT))) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, this.config.getRefreshInterval(),\r\n+                    this.config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.submit(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    readValue(channelId);\r\n+                }\r\n+            });\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                String unit = this.vMap.get(channelId).getUnit();\r\n+                QuantityType<?> val = (QuantityType<?>) command;\r\n+                if (unit != null) {\r\n+                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                        val = val.toUnit(SmartHomeUnits.DAY);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                        val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                        val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                        val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                        val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                    } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                        val = val.toUnit(SIUnits.CELSIUS);\r\n+                    }\r\n+                    value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            writeValue(channelId, v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.warn(\"Writing value {} to channel {} failed: {}\", v, channelId, e.getMessage());\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Writing to device failed.\");\r\n+                        }\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.vMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (!v.hasWriteAccess()) {\r\n+                throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+            } else if (!v.isInAllowedRange(value)) {\r\n+                throw new HeliosException(\r\n+                        \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+            } else if (this.comms != null) {\r\n+                // write to device\r\n+                String payload = v.getVariableString() + \"=\" + value;\r\n+                final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+                try {\r\n+                    lock.acquire();\r\n+                    this.comms.submitOneTimeWrite(\r\n+                            new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                    HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                    HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                            result -> {\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.ONLINE);\r\n+                            }, failureInfo -> {\r\n+                                String errorMsg = failureInfo.getCause().getMessage();\r\n+                                logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                        HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                lock.release();\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+                            });\r\n+                    // ensure the openHAB item is updated with the device's actual value\r\n+                    scheduler.schedule(new Runnable() {\r\n+                        @Override\r\n+                        public void run() {\r\n+                            readValue(variableName);\r\n+                        }\r\n+                    }, 1, TimeUnit.SECONDS);\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\r\n+                            \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                }\r\n+            } else { // comms is null\r\n+                this.handleError(\"Modbus communication interface is null.\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        if ((this.comms != null) && (this.vMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(this.comms.getEndpoint());\r\n+            HeliosVariable v = this.vMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            this.comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        String errorMsg = failureInfo.getCause().getMessage();\r\n+                                        logger.warn(\"{} encountered error reading from device: {}\",\r\n+                                                HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                errorMsg);\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            String errorMsg = failureInfo.getCause().getMessage();\r\n+                            logger.warn(\"{} encountered error writing to device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), errorMsg);\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, errorMsg);\r\n+\r\n+                        });\r\n+            }\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable.\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.vMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: set time incl. timezone, update time channels based on timezone read from device\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            }\r\n+        } catch (Exception e) {\r\n+            // falling back to default date format (apparently using the configured format has failed)\r\n+            if (dateTimeParts != null) {\r\n+                dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                return DateTimeType.valueOf(dateTime);\r\n+            } else {\r\n+                logger.warn(\"{} couldn't parse the provided date string: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), date);\r\n+                return new DateTimeType(); // return at least a valid DateTimeType object\r\n+            }\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    private @Nullable QuantityType<?> toQuantityType(String value, @Nullable String unit) {\r\n+        if (unit == null) {\r\n+            return null;\r\n+        } else if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.DAY);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.HOUR);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.MINUTE);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.SECOND);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.VOLT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PERCENT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PARTS_PER_MILLION);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SIUnits.CELSIUS);\r\n+        } else {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: Set date, time and UTC delta together => also additional channel required\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTgxNTg5NQ=="}, "originalCommit": {"oid": "a29484f182958feae2d73f3ac06490316afc5798"}, "originalPosition": 558}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc3OTU2MQ==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487779561", "createdAt": "2020-09-14T09:35:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,805 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable Map<String, HeliosVariable> variableMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\r\n+\r\n+    private Gson gson = new Gson();\r\n+\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    private int dateFormat = -1;\r\n+    private ZonedDateTime sysDate = ZonedDateTime.now(); // initialize with local system time as a best guess\r\n+                                                         // before reading from device\r\n+\r\n+    private class BypassDate {\r\n+        // initialization to avoid issues when updating before all variables were read\r\n+        private int month = 1;\r\n+        private int day = 1;\r\n+\r\n+        public void setMonth(int month) {\r\n+            this.month = month;\r\n+        }\r\n+\r\n+        public void setDay(int day) {\r\n+            this.day = day;\r\n+        }\r\n+\r\n+        public DateTimeType toDateTimeType() {\r\n+            return new DateTimeType(ZonedDateTime.of(1900, this.month, this.day, 0, 0, 0, 0, ZoneId.of(\"UTC+00:00\")));\r\n+        }\r\n+    }\r\n+\r\n+    private @Nullable BypassDate bypassFrom, bypassTo;\r\n+\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in variableMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        try {\r\n+            InputStreamReader jsonFile = new InputStreamReader(\r\n+                    getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE));\r\n+            BufferedReader reader = new BufferedReader(jsonFile);\r\n+            this.variableMap = gson.fromJson(reader, vMapType);\r\n+            reader.close();\r\n+            jsonFile.close();\r\n+        } catch (IOException e) {\r\n+            this.handleError(\"Error reading variable definition file\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+        if (variableMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.variableMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.variableMap != null) && (this.config != null)) {\r\n+            this.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            HeliosEasyControlsConfiguration config = this.config;\r\n+            if (config != null) {\r\n+                this.pollingJob = scheduler.scheduleWithFixedDelay(() -> {\r\n+                    if (variableMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : variableMap.entrySet()) {\r\n+                            if (this.isProperty(entry.getKey()) || isLinked(entry.getValue().getGroupAndName())\r\n+                                    || HeliosEasyControlsBindingConstants.ALWAYS_UPDATE_VARIABLES\r\n+                                            .contains(entry.getKey())) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }, config.getRefreshInterval(), config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+            }\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.variableMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.DATE));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.TIME));\r\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH));\r\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_DAY));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH));\r\n+            } else {\r\n+                scheduler.submit(() -> readValue(channelId));\r\n+            }\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                ZonedDateTime d = ((DateTimeType) command).getZonedDateTime();\r\n+                if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\r\n+                    setSysDateTime(d);\r\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\r\n+                    this.setBypass(true, d.getDayOfMonth(), d.getMonthValue());\r\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\r\n+                    this.setBypass(false, d.getDayOfMonth(), d.getMonthValue());\r\n+                } else {\r\n+                    value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+                }\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                Map<String, HeliosVariable> variableMap = this.variableMap;\r\n+                if (variableMap != null) {\r\n+                    String unit = variableMap.get(channelId).getUnit();\r\n+                    QuantityType<?> val = (QuantityType<?>) command;\r\n+                    if (unit != null) {\r\n+                        if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+                            val = val.toUnit(SmartHomeUnits.DAY);\r\n+                        } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+                            val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                        } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+                            val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                        } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+                            val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                        } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+                            val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                        } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+                            val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                        } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+                            val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                        } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+                            val = val.toUnit(SIUnits.CELSIUS);\r\n+                        }\r\n+                        value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                    }\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(() -> {\r\n+                    try {\r\n+                        writeValue(channelId, v);\r\n+                        if (variableMap != null) {\r\n+                            updateState(variableMap.get(channelId), v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        }\r\n+                    } catch (HeliosException e) {\r\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                \"Writing value \" + v + \"to channel \" + channelId + \" failed: \" + e.getMessage());\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\r\n+        return Collections.singleton(HeliosEasyControlsActions.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the provided variable name is a property\r\n+     *\r\n+     * @param variableName The variable's name\r\n+     * @return true if the variable is a property\r\n+     */\r\n+    private boolean isProperty(String variableName) {\r\n+        return HeliosEasyControlsBindingConstants.PROPERTY_NAMES.contains(variableName);\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.variableMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            Map<String, HeliosVariable> variableMap = this.variableMap;\r\n+            if (variableMap != null) {\r\n+                HeliosVariable v = variableMap.get(variableName);\r\n+\r\n+                if (!v.hasWriteAccess()) {\r\n+                    throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+                } else if (!v.isInAllowedRange(value)) {\r\n+                    throw new HeliosException(\r\n+                            \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+                } else if (this.comms != null) {\r\n+                    // write to device\r\n+                    String payload = v.getVariableString() + \"=\" + value;\r\n+                    ModbusCommunicationInterface comms = this.comms;\r\n+                    if (comms != null) {\r\n+                        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+                        try {\r\n+                            lock.acquire();\r\n+                            comms.submitOneTimeWrite(\r\n+                                    new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                            new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    result -> {\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.ONLINE);\r\n+                                    }, failureInfo -> {\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                \"Error writing to device: \" + failureInfo.getCause().getMessage());\r\n+                                    });\r\n+                        } catch (InterruptedException e) {\r\n+                            logger.warn(\r\n+                                    \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                } else { // comms is null\r\n+                    this.handleError(\"Modbus communication interface is null\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        Map<String, HeliosVariable> variableMap = this.variableMap;\r\n+        ModbusCommunicationInterface comms = this.comms;\r\n+        if ((comms != null) && (variableMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            HeliosVariable v = variableMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                \"Error reading from device: \" + failureInfo.getCause().getMessage());\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Error writing to device: \" + failureInfo.getCause().getMessage());\r\n+\r\n+                        });\r\n+            }\r\n+\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (variableMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private void updateSysDate(DateTimeType dateTime) {\r\n+        this.updateSysDateTime(dateTime.getZonedDateTime(), true, sysDate.getOffset().getTotalSeconds() / 60 / 60);\r\n+    }\r\n+\r\n+    private void updateSysTime(DateTimeType dateTime) {\r\n+        this.updateSysDateTime(dateTime.getZonedDateTime(), false, sysDate.getOffset().getTotalSeconds() / 60 / 60);\r\n+    }\r\n+\r\n+    private void updateUtcOffset(int utcOffset) {\r\n+        this.updateSysDateTime(this.sysDate, true, sysDate.getOffset().getTotalSeconds() / 60 / 60);\r\n+    }\r\n+\r\n+    private void updateSysDateTime(ZonedDateTime dateTime, boolean updateDate, int utcOffset) {\r\n+        ZonedDateTime sysDate = this.sysDate;\r\n+        sysDate = ZonedDateTime.of(updateDate ? dateTime.getYear() : sysDate.getYear(),\r\n+                updateDate ? dateTime.getMonthValue() : sysDate.getMonthValue(),\r\n+                updateDate ? dateTime.getDayOfMonth() : sysDate.getDayOfMonth(),\r\n+                updateDate ? sysDate.getHour() : dateTime.getHour(),\r\n+                updateDate ? sysDate.getMinute() : dateTime.getMinute(),\r\n+                updateDate ? sysDate.getSecond() : dateTime.getSecond(), 0,\r\n+                ZoneId.of(\"UTC\" + (utcOffset >= 0 ? \"+\" : \"\") + String.format(\"%02d\", utcOffset) + \":00\"));\r\n+        updateState(\"general#\" + HeliosEasyControlsBindingConstants.SYS_DATE, new DateTimeType(sysDate));\r\n+        this.sysDate = sysDate;\r\n+    }\r\n+\r\n+    private void setSysDateTime(ZonedDateTime date) {\r\n+        try {\r\n+            this.writeValue(HeliosEasyControlsBindingConstants.DATE,\r\n+                    this.formatDate(HeliosEasyControlsBindingConstants.DATE, date));\r\n+            this.writeValue(HeliosEasyControlsBindingConstants.TIME,\r\n+                    date.getHour() + \":\" + date.getMinute() + \":\" + date.getSecond());\r\n+            this.writeValue(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT,\r\n+                    Integer.toString(date.getOffset().getTotalSeconds() / 60 / 60));\r\n+        } catch (HeliosException e) {\r\n+            logger.warn(\"{} encountered Exception when trying to set system date: {}\",\r\n+                    HeliosEasyControlsHandler.class.getSimpleName(), e.getMessage());\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    protected void setSysDateTime() {\r\n+        this.setSysDateTime(ZonedDateTime.now());\r\n+    }\r\n+\r\n+    private void updateBypass(boolean from, boolean month, int val) {\r\n+        BypassDate bypassDate = from ? this.bypassFrom : this.bypassTo;\r\n+        if (bypassDate == null) {\r\n+            bypassDate = new BypassDate();\r\n+        }\r\n+        if (month) {\r\n+            bypassDate.setMonth(val);\r\n+\r\n+        } else {\r\n+            bypassDate.setDay(val);\r\n+        }\r\n+        updateState(\"unitConfig#\" + (from ? HeliosEasyControlsBindingConstants.BYPASS_FROM\r\n+                : HeliosEasyControlsBindingConstants.BYPASS_TO), bypassDate.toDateTimeType());\r\n+        if (from) {\r\n+            this.bypassFrom = bypassDate;\r\n+\r\n+        } else {\r\n+            this.bypassTo = bypassDate;\r\n+        }\r\n+    }\r\n+\r\n+    protected void setBypass(boolean from, int day, int month) {\r\n+        try {\r\n+            this.writeValue(from ? HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY\r\n+                    : HeliosEasyControlsBindingConstants.BYPASS_TO_DAY, Integer.toString(day));\r\n+            this.writeValue(from ? HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH\r\n+                    : HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH, Integer.toString(month));\r\n+        } catch (HeliosException e) {\r\n+            logger.warn(\"{} encountered Exception when trying to set bypass period: {}\",\r\n+                    HeliosEasyControlsHandler.class.getSimpleName(), e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    public String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+        if (dateTimeParts.length == 1) { // time\r\n+            return DateTimeType.valueOf(date);\r\n+        } else if (dateTimeParts.length == 3) { // date - we'll try the device's date format\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                    break;\r\n+                case 1: // mm.dd.yyyy\r\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                    break;\r\n+                case 2: // yyyy.mm.dd\r\n+                    dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                    break;\r\n+                default:\r\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                    break;\r\n+            }\r\n+            return DateTimeType.valueOf(dateTime);\r\n+        }\r\n+        // falling back to default date format (apparently using the configured format has failed)\r\n+        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+        return DateTimeType.valueOf(dateTime);\r\n+    }\r\n+\r\n+    private @Nullable QuantityType<?> toQuantityType(String value, @Nullable String unit) {\r\n+        if (unit == null) {\r\n+            return null;\r\n+        } else if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.DAY);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.HOUR);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.MINUTE);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.SECOND);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.VOLT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PERCENT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PARTS_PER_MILLION);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SIUnits.CELSIUS);\r\n+        } else {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    // TODO: Set date, time and UTC delta together => also additional channel required\r\n+\r\n+    /**\r\n+     * Prepares the payload for the request\r\n+     *\r\n+     * @param payload The String representation of the payload\r\n+     * @return The Register representation of the payload\r\n+     */\r\n+    private ModbusRegister[] preparePayload(String payload) {\r\n+\r\n+        // determine number of registers\r\n+        int l = (payload.length() + 1) / 2; // +1 because we need to include at least one termination symbol 0x00\r\n+        if ((payload.length() + 1) % 2 != 0) {\r\n+            l++;\r\n+        }\r\n+\r\n+        ModbusRegister reg[] = new ModbusRegister[l];\r\n+        byte[] b = payload.getBytes();\r\n+        int ch = 0;\r\n+        for (int i = 0; i < reg.length; i++) {\r\n+            byte b1 = ch < b.length ? b[ch] : (byte) 0x00; // terminate with 0x00 if at the end of the payload\r\n+            ch++;\r\n+            byte b2 = ch < b.length ? b[ch] : (byte) 0x00;\r\n+            ch++;\r\n+            reg[i] = new ModbusRegister(b1, b2);\r\n+        }\r\n+        return reg;\r\n+    }\r\n+\r\n+    /**\r\n+     * Decodes the Helios device' response and updates the channel with the actual value of the variable\r\n+     *\r\n+     * @param response The registers received from the Helios device\r\n+     * @return The value or <tt>null</tt> if an error occurred\r\n+     */\r\n+    private void processResponse(HeliosVariable v, ModbusRegisterArray registers) {\r\n+        // decode response\r\n+        byte[] b = new byte[registers.size() * 2];\r\n+        int actSize = 0; // track the actual size of the usable array (excluding any 0x00\r\n+                         // characters)\r\n+        for (int i = 0; i < registers.size(); i++) {\r\n+            byte[] reg = registers.getRegister(i).getBytes();\r\n+            if (reg.length == 2) { // only add to the array if it's a usable character\r\n+                if (reg[0] != 0x00) {\r\n+                    b[actSize++] = reg[0];\r\n+                }\r\n+                if (reg[1] != 0x00) {\r\n+                    b[actSize++] = reg[1];\r\n+                }\r\n+            }\r\n+        }\r\n+        b = Arrays.copyOf(b, actSize); // before creating a string of it the array needs to be\r\n+                                       // truncated\r\n+        String r = new String(b, StandardCharsets.US_ASCII);\r\n+        String[] parts = r.split(\"=\", 2); // remove the part \"vXXXX=\" from the string\r\n+        // making sure we have a proper response and the response matches the requested variable\r\n+        if ((parts.length == 2) && (v.getVariableString().equals(parts[0]))) {\r\n+            if (this.isProperty(v.getName())) {\r\n+                try {\r\n+                    updateProperty(v.getName(), v.formatPropertyValue(parts[1]));\r\n+                } catch (HeliosException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to update property: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), e.getMessage());\r\n+                }\r\n+            } else {\r\n+                this.updateState(v, parts[1]);\r\n+            }\r\n+        } else { // another variable was read\r\n+            logger.warn(\"{} tried to read value from variable {} and the result provided by the device was {}\",\r\n+                    HeliosEasyControlsHandler.class.getSimpleName(), v.getName(), r);\r\n+        }\r\n+    }\r\n+\r\n+    private void updateState(HeliosVariable v, String value) {\r\n+        String variableType = v.getType();\r\n+        // System date and time\r\n+        if (v.getName().equals(HeliosEasyControlsBindingConstants.DATE)) {\r\n+            this.updateSysDate(this.toDateTime(value));\r\n+        } else if (v.getName().equals(HeliosEasyControlsBindingConstants.TIME)) {\r\n+            this.updateSysTime(this.toDateTime(value));\r\n+        } else if (v.getName().equals(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT)) {\r\n+            this.updateUtcOffset(Integer.parseInt(value));\r\n+            // Bypass\r\n+        } else if (v.getName().equals(HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY)) {\r\n+            this.updateBypass(true, false, Integer.parseInt(value));\r\n+        } else if (v.getName().equals(HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH)) {\r\n+            this.updateBypass(true, true, Integer.parseInt(value));\r\n+        } else if (v.getName().equals(HeliosEasyControlsBindingConstants.BYPASS_TO_DAY)) {\r\n+            this.updateBypass(false, false, Integer.parseInt(value));\r\n+        } else if (v.getName().equals(HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH)) {\r\n+            this.updateBypass(false, true, Integer.parseInt(value));\r\n+        } else {\r\n+            Channel channel = getThing().getChannel(v.getGroupAndName());\r\n+            String itemType;\r\n+            if (channel != null) {\r\n+                itemType = channel.getAcceptedItemType();\r\n+                if (itemType != null) {\r\n+                    if (itemType.startsWith(\"Number:\")) {\r\n+                        itemType = \"Number\";\r\n+                    }\r\n+                    switch (itemType) {\r\n+                        case \"Number\":\r\n+                            if (((variableType.equals(HeliosVariable.TYPE_INTEGER))\r\n+                                    || (variableType == HeliosVariable.TYPE_FLOAT)) && (!value.equals(\"-\"))) {\r\n+                                State state = null;\r\n+                                if (v.getUnit() == null) {\r\n+                                    state = DecimalType.valueOf(value);\r\n+                                } else { // QuantityType\r\n+                                    state = this.toQuantityType(value, v.getUnit());\r\n+                                }\r\n+                                if (state != null) {\r\n+                                    updateState(v.getGroupAndName(), state);\r\n+                                    updateStatus(ThingStatus.ONLINE);\r\n+                                    // update date format and UTC offset upon read\r\n+                                    if (v.getName().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT)) {\r\n+                                        this.dateFormat = Integer.parseInt(value);\r\n+                                    }\r\n+                                }\r\n+                            }\r\n+                            break;\r\n+                        case \"Switch\":\r\n+                            if (variableType.equals(HeliosVariable.TYPE_INTEGER)) {\r\n+                                updateState(v.getGroupAndName(), value.equals(\"1\") ? OnOffType.ON : OnOffType.OFF);\r\n+                            }\r\n+                            break;\r\n+                        case \"String\":\r\n+                            if (variableType.equals(HeliosVariable.TYPE_STRING)) {\r\n+                                updateState(v.getGroupAndName(), StringType.valueOf(value));\r\n+                            }\r\n+                            break;\r\n+                        case \"DateTime\":\r\n+                            if (variableType.equals(HeliosVariable.TYPE_STRING)) {\r\n+                                updateState(v.getGroupAndName(), toDateTime(value));\r\n+                            }\r\n+                            break;\r\n+                    }\r\n+                } else { // itemType was null\r\n+                    logger.warn(\"{} couldn't determine item type of variable {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), v.getName());\r\n+                }\r\n+            } else { // channel was null\r\n+                logger.warn(\"{} couldn't find channel for variable {}\", HeliosEasyControlsHandler.class.getSimpleName(),\r\n+                        v.getName());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Logs an error (as a warning entry) and updates the thing status\r\n+     *\r\n+     * @param errorMsg The error message to be logged and provided with the Thing's status update\r\n+     * @param status The Thing's new status\r\n+     */\r\n+    private void handleError(String errorMsg, ThingStatusDetail status) {\r\n+        // logger.warn(\"{}\", errorMsg);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 802}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MTA0OA==", "bodyText": "Is 30 sec. a reasonable min value? Do faster updates harm?  You could leave it up to the user, but only prevent zero or negative numbers.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487781048", "createdAt": "2020-09-14T09:38:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,690 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-ventilation-easycontrols\">\r\n+\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\"/>\r\n+\t\t</supported-bridge-type-refs>\r\n+\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway\r\n+\t\t\tTCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\"/>\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\"/>\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\"/>\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\"/>\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\"/>\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\"/>\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"ms\" min=\"30000\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4MjUxMg==", "bodyText": "Is this still used?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487782512", "createdAt": "2020-09-14T09:40:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,690 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-ventilation-easycontrols\">\r\n+\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\"/>\r\n+\t\t</supported-bridge-type-refs>\r\n+\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway\r\n+\t\t\tTCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\"/>\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\"/>\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\"/>\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\"/>\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\"/>\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\"/>\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"ms\" min=\"30000\">\r\n+\t\t\t\t<label>Refresh Interval</label>\r\n+\t\t\t\t<description>Refresh interval</description>\r\n+\t\t\t\t<default>60000</default>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\r\n+\t</thing-type>\r\n+\r\n+\t<!-- Channel Group Types -->\r\n+\r\n+\t<channel-group-type id=\"general\">\r\n+\t\t<label>General</label>\r\n+\t\t<description>General Parameters / Status Information</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- General Status Infos -->\r\n+\t\t\t<channel id=\"preHeaterStatus\" typeId=\"onOff\">\r\n+\t\t        <label>Pre-Heater Status</label>\r\n+\t\t        <description>Pre-Heater Status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"bypassStatus\" typeId=\"bypassStatus\"/>\r\n+\t\t\t<!-- Temperatures -->\r\n+\t\t\t<channel id=\"nhzDuctSensor\" typeId=\"temperature\">\r\n+\t\t\t    <label>After Heater Duct Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"nhzReturnSensor\" typeId=\"temperature\">\r\n+\t\t\t    <label>After Heater Return Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"vhzDuctSensor\" typeId=\"temperature\">\r\n+\t\t\t    <label>Pre-Heater Duct Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureOutsideAir\" typeId=\"temperature\">\r\n+\t\t\t    <label>Outside Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureSupplyAir\" typeId=\"temperature\">\r\n+                <label>Supply Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureOutgoingAir\" typeId=\"temperature\">\r\n+                <label>Outgoing Air Temperature</label>\r\n+            </channel>\r\n+\t\t\t<channel id=\"temperatureExtractAir\" typeId=\"temperature\">\r\n+                <label>Extract Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- RPM -->\r\n+\t\t\t<channel id=\"supplyAirRpm\" typeId=\"rpm\">\r\n+                <label>Supply Air Fan RPM</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"extractAirRpm\" typeId=\"rpm\">\r\n+                <label>Extract Air Fan RPM</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Filter Change -->\r\n+\t\t\t<channel id=\"filterChangeRemainingTime\" typeId=\"filterChangeRemainingTime\"/>\r\n+\t\t\t<!-- Operating Hours -->\r\n+\t\t\t<channel id=\"operatingHoursSupplyAirVent\" typeId=\"operatingHours\">\r\n+                <label>Operating Hours Supply Air Fan</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursExtractAirVent\" typeId=\"operatingHours\">\r\n+                <label>Operating Hours Extract Air Fan</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursVhz\" typeId=\"operatingHours\">\r\n+                <label>Operating Hours Pre-Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursNhz\" typeId=\"operatingHours\">\r\n+                <label>Operating Hours After Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Power -->\r\n+\t\t\t<channel id=\"outputPowerVhz\" typeId=\"outputPower\">\r\n+                <label>Output Power Pre-Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"outputPowerNhz\" typeId=\"outputPower\">\r\n+                <label>Output Power After Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Infos / Warnings / Errors -->\r\n+\t\t\t<channel id=\"errors\" typeId=\"errors\"/>\r\n+\t\t\t<channel id=\"warnings\" typeId=\"warnings\"/>\r\n+\t\t\t<channel id=\"infos\" typeId=\"infos\"/>\r\n+\t\t\t<channel id=\"noOfErrors\" typeId=\"noOfErrors\"/>\r\n+\t\t\t<channel id=\"noOfWarnings\" typeId=\"noOfWarnings\"/>\r\n+\t\t\t<channel id=\"noOfInfos\" typeId=\"noOfInfos\"/>\r\n+\t\t\t<channel id=\"errorsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"warningsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"infosMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"statusFlags\" typeId=\"message\"/>\r\n+\t\t\t<!-- System Settings -->\r\n+\t\t\t<channel id=\"sysdate\" typeId=\"sysdate\"/>\r\n+\t\t\t<channel id=\"summerWinter\" typeId=\"summerWinter\"/>\r\n+\t\t\t<!-- Software / Firmware -->\r\n+\t\t\t<channel id=\"autoSwUpdate\" typeId=\"enableDisable\">\r\n+\t\t\t    <label>Automatic SW Updates</label>\r\n+                <description>Indicates if automatic software updates are enabled</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"accessHeliosPortal\" typeId=\"enableDisable\">\r\n+\t\t\t    <label>Access Helios Portal</label>\r\n+                <description>Indicates if access to Helios portal is enabled</description>\r\n+\t\t\t</channel>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"operation\">\r\n+\t\t<label>Operation</label>\r\n+\t\t<description>Control of operating mode</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- Party Mode -->\r\n+\t\t\t<channel id=\"partyModeDuration\" typeId=\"duration\">\r\n+\t\t        <label>Party Mode Duration</label>\r\n+\t\t        <description>Party mode duration (in minutes)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeFanStage\" typeId=\"fanStage\">\r\n+\t\t\t    <label>Party Mode Fan Stage</label>\r\n+                <description>Party mode fan stage</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeRemainingTime\" typeId=\"remainingTime\">\r\n+\t\t        <label>Party Mode Remaining Time</label>\r\n+\t\t        <description>Party mode remaining time</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeStatus\" typeId=\"onOff\">\r\n+\t\t        <label>Party Mode Status</label>\r\n+\t\t        <description>Party mode status</description>\r\n+    \t\t</channel>\r\n+\t\t\t<!-- Standby Mode -->\r\n+\t\t\t<channel id=\"standbyModeDuration\" typeId=\"duration\">\r\n+\t\t        <label>Standby Mode Duration</label>\r\n+\t\t        <description>Standby mode duration (in minutes)</description>\r\n+    \t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeFanStage\" typeId=\"fanStage\">\r\n+\t\t        <label>Standby Mode Fan Stage</label>\r\n+\t\t        <description>Standby mode fan stage</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeRemainingTime\" typeId=\"remainingTime\">\r\n+\t\t        <label>Standby Mode Remaining Time</label>\r\n+\t\t        <description>Standby mode remaining time</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeStatus\" typeId=\"onOff\">\r\n+\t\t        <label>Standby Mode Status</label>\r\n+\t\t        <description>Standby mode status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Holiday Programme -->\r\n+\t\t\t<channel id=\"holidayProgramme\" typeId=\"holidayProgramme\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeStart\" typeId=\"date\">\r\n+\t\t        <label>Holiday Programme Start</label>\r\n+\t\t        <description>Holiday programme start</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"holidayProgrammeEnd\" typeId=\"date\">\r\n+\t\t        <label>Holiday Programme End</label>\r\n+\t\t        <description>Holiday programme end</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"holidayProgrammeInterval\" typeId=\"holidayProgrammeInterval\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeActivationTime\" typeId=\"holidayProgrammeActivationTime\"/>\r\n+\t\t\t<!-- Operating Mode / Fan Stage -->\r\n+\t\t\t<channel id=\"operatingMode\" typeId=\"operatingMode\"/>\r\n+\t\t\t<channel id=\"fanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"percentageFanStage\" typeId=\"percentage\">\r\n+\t\t        <label>Percentage Fan Stage</label>\r\n+\t\t        <description>Fan stage in percent</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"extractAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"supplyAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"unitConfig\">\r\n+\t\t<label>Unit Config</label>\r\n+\t\t<description>Configuration parameters of the ventilation unit</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- Fan Stage Configuration -->\r\n+\t\t\t<channel id=\"minFanStage\" typeId=\"minFanStage\"/>\r\n+\t\t\t<!-- Bypass Configuration -->\r\n+\t\t\t<channel id=\"bypassRoomTemperature\" typeId=\"bypassRoomTemperature\"/>\r\n+\t\t\t<channel id=\"bypassMinOutsideTemperature\" typeId=\"bypassMinOutsideTemperature\"/>\r\n+\t\t\t<channel id=\"bypassFrom\" typeId=\"bypass\"/>\r\n+            <channel id=\"bypassTo\" typeId=\"bypass\"/>\r\n+\t\t\t<!-- Comfort Temperature -->\r\n+\t\t\t<channel id=\"comfortTemp\" typeId=\"comfortTemp\"/>\r\n+\t\t\t<!-- Error Output Function -->\r\n+\t\t\t<channel id=\"errorOutputFunction\" typeId=\"errorOutputFunction\"/>\r\n+\t\t\t<!-- Filter Change -->\r\n+\t\t\t<channel id=\"filterChange\" typeId=\"filterChange\"/>\r\n+\t\t\t<channel id=\"filterChangeInterval\" typeId=\"filterChangeInterval\"/>\r\n+\t\t\t<!-- System Components and Extensions -->\r\n+\t\t\t<channel id=\"runOnTimeVhzNhz\" typeId=\"runOnTimeVhzNhz\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"profiles\">\r\n+\t\t<label>Profiles</label>\r\n+\t\t<description>Profiles for Device Operation</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"weekProfileNhz\" typeId=\"weekProfileNhz\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"humidityControl\">\r\n+\t\t<label>Humidity Control</label>\r\n+\t\t<description>Config of Sensors for Humidity and/or Temperature Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"humidityControlSetValue\" typeId=\"humidityControlSetValue\"/>\r\n+\t\t\t<channel id=\"humidityControlSteps\" typeId=\"humidityControlSteps\"/>\r\n+\t\t\t<channel id=\"humidityStopTime\" typeId=\"humidityStopTime\"/>\r\n+\t\t\t<!-- External Humidity Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity1\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity2\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity3\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity4\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity5\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity6\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity7\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity8\" typeId=\"sensorValue\"/>\r\n+\t\t\t<!-- External Temperature Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature1\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature2\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature3\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature4\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature5\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature6\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature7\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature8\" typeId=\"temperature\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"co2Control\">\r\n+\t\t<label>CO2 Control</label>\r\n+\t\t<description>Config of Sensors for CO2 Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"co2ControlSetValue\" typeId=\"ppmControlSetValue\">\r\n+\t\t\t\t<label>CO2 Control Status</label>\r\n+\t\t\t\t<description>CO2 control status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"co2ControlSteps\" typeId=\"ppmControlSteps\">\r\n+\t\t        <label>CO2 Control Steps</label>\r\n+\t\t        <description>CO2 control steps (in ppm)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlCo21\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo22\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo23\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo24\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo25\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo26\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo27\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo28\" typeId=\"sensorValue\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"vocControl\">\r\n+\t\t<label>VOC Control</label>\r\n+\t\t<description>Config of Sensors for VOC Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"vocControlSetValue\" typeId=\"ppmControlSetValue\">\r\n+\t\t\t    <label>VOC Control Status</label>\r\n+                <description>VOC control status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"vocControlSteps\" typeId=\"ppmControlSteps\">\r\n+\t\t\t    <label>CO2 Control Steps</label>\r\n+                <description>CO2 control steps (in ppm)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlVoc1\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc2\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc3\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc4\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc5\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc6\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc7\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc8\" typeId=\"sensorValue\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\r\n+\t<!-- Channel Types -->\r\n+\r\n+\t<channel-type id=\"sysdate\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>System Date and Time</label>\r\n+\t\t<description>The KWL's system date and time</description>\r\n+\t\t<category>Time</category>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"summerWinter\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Summertime / Wintertime</label>\r\n+\t\t<description>Indicates if summertime or wintertime is active</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Wintertime</option>\r\n+\t\t\t\t<option value=\"1\">Summertime</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"enableDisable\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Enable/Disable</label>\r\n+\t\t<description>Used for functionality that can be enabled or disabled</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">disabled</option>\r\n+\t\t\t\t<option value=\"1\">enabled</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"minFanStage\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Minimum Fan Stage</label>\r\n+\t\t<description>Minimum fan stage (0 or 1)</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"1\" step=\"1\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"onOff\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>On/Off</label>\r\n+\t\t<description>Used for configurations that can be on or off</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"humidityControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Humidity Control Set Value</label>\r\n+\t\t<description>Humidity control set value (in percent)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"20\" max=\"80\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"humidityControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Humidity Control Steps</label>\r\n+\t\t<description>Humidity control steps (in percent)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"5\" max=\"20\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"humidityStopTime\" advanced=\"true\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Humidity Stop Time</label>\r\n+\t\t<description>Humidity stop time in hours (0-24)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"0\" max=\"24\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"ppmControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Control Set Value</label>\r\n+\t\t<description>Control set value (in ppm)</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"300\" max=\"2000\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"ppmControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Control Steps</label>\r\n+\t\t<description>Control steps (in ppm)</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"50\" max=\"400\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"comfortTemp\" advanced=\"true\">\r\n+\t\t<item-type>Number:Temperature</item-type>\r\n+\t\t<label>Comfort Temperature</label>\r\n+\t\t<description>Comfort temperature</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"10\" max=\"25\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"timeZoneDifferenceToGmt\" advanced=\"true\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 400}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4Mzg0Mw==", "bodyText": "See above. Formatting changed.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487783843", "createdAt": "2020-09-14T09:43:18Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -1,524 +1,525 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NTk4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\n          \n          \n            \n                private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsActions.class);", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r487785983", "createdAt": "2020-09-14T09:46:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsActions.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class provides the actions available for the Helios device\n+ *\n+ * @author Bernhard Bauer - Initial contribution\n+ */\n+@ThingActionsScope(name = \"helios-ventilation-easycontrols\")\n+@NonNullByDefault\n+public class HeliosEasyControlsActions implements ThingActions {\n+\n+    private @Nullable HeliosEasyControlsHandler handler;\n+\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83b50556f952807ec4af361f62831a5fab3f0c04", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/83b50556f952807ec4af361f62831a5fab3f0c04", "committedDate": "2020-09-14T10:10:50Z", "message": "Delete Channels.xlsx"}, "afterCommit": {"oid": "d1576016145b13639a01c7a850f1e772fd2c155a", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/d1576016145b13639a01c7a850f1e772fd2c155a", "committedDate": "2020-09-14T10:30:52Z", "message": "Implementation of the inputs from todays's review.\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDg1MzY5", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-488085369", "createdAt": "2020-09-14T19:41:25Z", "commit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTo0MToyNVrOHRj7Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDozNDoxMlrOHSTigw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NjQyMw==", "bodyText": "This file is still corrupted.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488176423", "createdAt": "2020-09-14T19:41:25Z", "author": {"login": "Hilbrand"}, "path": "bom/openhab-addons/pom.xml", "diffHunk": "@@ -1,1329 +1,1334 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc2NTk0Mg=="}, "originalCommit": {"oid": "265816de988695fb46c5a470145b22452d6038eb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyNjM0MQ==", "bodyText": "I would expect this file in the src/main/resources?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488726341", "createdAt": "2020-09-15T14:45:02Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/variables.json", "diffHunk": "@@ -0,0 +1,189 @@\n+{\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c6611b2a613ab45df34eb7ee960390f11e08cb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDgzNg==", "bodyText": "Switch item-type doesn't support state options. Please remove or change to Number (although Switch seems more logical here).", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488730836", "createdAt": "2020-09-15T14:50:42Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,682 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-easycontrols\">\r\n+\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\"/>\r\n+\t\t</supported-bridge-type-refs>\r\n+\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway\r\n+\t\t\tTCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\"/>\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\"/>\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\"/>\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\"/>\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\"/>\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\"/>\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"ms\" min=\"30000\">\r\n+\t\t\t\t<label>Refresh Interval</label>\r\n+\t\t\t\t<description>Refresh interval</description>\r\n+\t\t\t\t<default>60000</default>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\r\n+\t</thing-type>\r\n+\r\n+\t<!-- Channel Group Types -->\r\n+\r\n+\t<channel-group-type id=\"general\">\r\n+\t\t<label>General</label>\r\n+\t\t<description>General Parameters / Status Information</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- General Status Infos -->\r\n+\t\t\t<channel id=\"preHeaterStatus\" typeId=\"onOff\">\r\n+\t\t\t\t<label>Pre-Heater Status</label>\r\n+\t\t\t\t<description>Pre-Heater Status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"bypassStatus\" typeId=\"bypassStatus\"/>\r\n+\t\t\t<!-- Temperatures -->\r\n+\t\t\t<channel id=\"nhzDuctSensor\" typeId=\"temperature\">\r\n+\t\t\t\t<label>After Heater Duct Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"nhzReturnSensor\" typeId=\"temperature\">\r\n+\t\t\t\t<label>After Heater Return Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"vhzDuctSensor\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Pre-Heater Duct Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureOutsideAir\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Outside Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureSupplyAir\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Supply Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureOutgoingAir\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Outgoing Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureExtractAir\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Extract Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- RPM -->\r\n+\t\t\t<channel id=\"supplyAirRpm\" typeId=\"rpm\">\r\n+\t\t\t\t<label>Supply Air Fan RPM</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"extractAirRpm\" typeId=\"rpm\">\r\n+\t\t\t\t<label>Extract Air Fan RPM</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Filter Change -->\r\n+\t\t\t<channel id=\"filterChangeRemainingTime\" typeId=\"filterChangeRemainingTime\"/>\r\n+\t\t\t<!-- Operating Hours -->\r\n+\t\t\t<channel id=\"operatingHoursSupplyAirVent\" typeId=\"operatingHours\">\r\n+\t\t\t\t<label>Operating Hours Supply Air Fan</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursExtractAirVent\" typeId=\"operatingHours\">\r\n+\t\t\t\t<label>Operating Hours Extract Air Fan</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursVhz\" typeId=\"operatingHours\">\r\n+\t\t\t\t<label>Operating Hours Pre-Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursNhz\" typeId=\"operatingHours\">\r\n+\t\t\t\t<label>Operating Hours After Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Power -->\r\n+\t\t\t<channel id=\"outputPowerVhz\" typeId=\"outputPower\">\r\n+\t\t\t\t<label>Output Power Pre-Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"outputPowerNhz\" typeId=\"outputPower\">\r\n+\t\t\t\t<label>Output Power After Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Infos / Warnings / Errors -->\r\n+\t\t\t<channel id=\"errors\" typeId=\"errors\"/>\r\n+\t\t\t<channel id=\"warnings\" typeId=\"warnings\"/>\r\n+\t\t\t<channel id=\"infos\" typeId=\"infos\"/>\r\n+\t\t\t<channel id=\"noOfErrors\" typeId=\"noOfErrors\"/>\r\n+\t\t\t<channel id=\"noOfWarnings\" typeId=\"noOfWarnings\"/>\r\n+\t\t\t<channel id=\"noOfInfos\" typeId=\"noOfInfos\"/>\r\n+\t\t\t<channel id=\"errorsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"warningsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"infosMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"statusFlags\" typeId=\"message\"/>\r\n+\t\t\t<!-- System Settings -->\r\n+\t\t\t<channel id=\"sysdate\" typeId=\"sysdate\"/>\r\n+\t\t\t<channel id=\"summerWinter\" typeId=\"summerWinter\"/>\r\n+\t\t\t<!-- Software / Firmware -->\r\n+\t\t\t<channel id=\"autoSwUpdate\" typeId=\"enableDisable\">\r\n+\t\t\t\t<label>Automatic SW Updates</label>\r\n+\t\t\t\t<description>Indicates if automatic software updates are enabled</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"accessHeliosPortal\" typeId=\"enableDisable\">\r\n+\t\t\t\t<label>Access Helios Portal</label>\r\n+\t\t\t\t<description>Indicates if access to Helios portal is enabled</description>\r\n+\t\t\t</channel>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"operation\">\r\n+\t\t<label>Operation</label>\r\n+\t\t<description>Control of operating mode</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- Party Mode -->\r\n+\t\t\t<channel id=\"partyModeDuration\" typeId=\"duration\">\r\n+\t\t\t\t<label>Party Mode Duration</label>\r\n+\t\t\t\t<description>Party mode duration (in minutes)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeFanStage\" typeId=\"fanStage\">\r\n+\t\t\t\t<label>Party Mode Fan Stage</label>\r\n+\t\t\t\t<description>Party mode fan stage</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeRemainingTime\" typeId=\"remainingTime\">\r\n+\t\t\t\t<label>Party Mode Remaining Time</label>\r\n+\t\t\t\t<description>Party mode remaining time</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeStatus\" typeId=\"onOff\">\r\n+\t\t\t\t<label>Party Mode Status</label>\r\n+\t\t\t\t<description>Party mode status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Standby Mode -->\r\n+\t\t\t<channel id=\"standbyModeDuration\" typeId=\"duration\">\r\n+\t\t\t\t<label>Standby Mode Duration</label>\r\n+\t\t\t\t<description>Standby mode duration (in minutes)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeFanStage\" typeId=\"fanStage\">\r\n+\t\t\t\t<label>Standby Mode Fan Stage</label>\r\n+\t\t\t\t<description>Standby mode fan stage</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeRemainingTime\" typeId=\"remainingTime\">\r\n+\t\t\t\t<label>Standby Mode Remaining Time</label>\r\n+\t\t\t\t<description>Standby mode remaining time</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeStatus\" typeId=\"onOff\">\r\n+\t\t\t\t<label>Standby Mode Status</label>\r\n+\t\t\t\t<description>Standby mode status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Holiday Programme -->\r\n+\t\t\t<channel id=\"holidayProgramme\" typeId=\"holidayProgramme\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeStart\" typeId=\"date\">\r\n+\t\t\t\t<label>Holiday Programme Start</label>\r\n+\t\t\t\t<description>Holiday programme start</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"holidayProgrammeEnd\" typeId=\"date\">\r\n+\t\t\t\t<label>Holiday Programme End</label>\r\n+\t\t\t\t<description>Holiday programme end</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"holidayProgrammeInterval\" typeId=\"holidayProgrammeInterval\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeActivationTime\" typeId=\"holidayProgrammeActivationTime\"/>\r\n+\t\t\t<!-- Operating Mode / Fan Stage -->\r\n+\t\t\t<channel id=\"operatingMode\" typeId=\"operatingMode\"/>\r\n+\t\t\t<channel id=\"fanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"percentageFanStage\" typeId=\"percentage\">\r\n+\t\t\t\t<label>Percentage Fan Stage</label>\r\n+\t\t\t\t<description>Fan stage in percent</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"extractAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"supplyAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"unitConfig\">\r\n+\t\t<label>Unit Config</label>\r\n+\t\t<description>Configuration parameters of the ventilation unit</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- Fan Stage Configuration -->\r\n+\t\t\t<channel id=\"minFanStage\" typeId=\"minFanStage\"/>\r\n+\t\t\t<!-- Bypass Configuration -->\r\n+\t\t\t<channel id=\"bypassRoomTemperature\" typeId=\"bypassRoomTemperature\"/>\r\n+\t\t\t<channel id=\"bypassMinOutsideTemperature\" typeId=\"bypassMinOutsideTemperature\"/>\r\n+\t\t\t<channel id=\"bypassFrom\" typeId=\"bypass\"/>\r\n+\t\t\t<channel id=\"bypassTo\" typeId=\"bypass\"/>\r\n+\t\t\t<!-- Comfort Temperature -->\r\n+\t\t\t<channel id=\"comfortTemp\" typeId=\"comfortTemp\"/>\r\n+\t\t\t<!-- Error Output Function -->\r\n+\t\t\t<channel id=\"errorOutputFunction\" typeId=\"errorOutputFunction\"/>\r\n+\t\t\t<!-- Filter Change -->\r\n+\t\t\t<channel id=\"filterChange\" typeId=\"filterChange\"/>\r\n+\t\t\t<channel id=\"filterChangeInterval\" typeId=\"filterChangeInterval\"/>\r\n+\t\t\t<!-- System Components and Extensions -->\r\n+\t\t\t<channel id=\"runOnTimeVhzNhz\" typeId=\"runOnTimeVhzNhz\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"profiles\">\r\n+\t\t<label>Profiles</label>\r\n+\t\t<description>Profiles for Device Operation</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"weekProfileNhz\" typeId=\"weekProfileNhz\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"humidityControl\">\r\n+\t\t<label>Humidity Control</label>\r\n+\t\t<description>Config of Sensors for Humidity and/or Temperature Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"humidityControlSetValue\" typeId=\"humidityControlSetValue\"/>\r\n+\t\t\t<channel id=\"humidityControlSteps\" typeId=\"humidityControlSteps\"/>\r\n+\t\t\t<channel id=\"humidityStopTime\" typeId=\"humidityStopTime\"/>\r\n+\t\t\t<!-- External Humidity Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity1\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity2\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity3\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity4\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity5\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity6\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity7\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity8\" typeId=\"sensorValue\"/>\r\n+\t\t\t<!-- External Temperature Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature1\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature2\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature3\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature4\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature5\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature6\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature7\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature8\" typeId=\"temperature\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"co2Control\">\r\n+\t\t<label>CO2 Control</label>\r\n+\t\t<description>Config of Sensors for CO2 Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"co2ControlSetValue\" typeId=\"ppmControlSetValue\">\r\n+\t\t\t\t<label>CO2 Control Status</label>\r\n+\t\t\t\t<description>CO2 control status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"co2ControlSteps\" typeId=\"ppmControlSteps\">\r\n+\t\t\t\t<label>CO2 Control Steps</label>\r\n+\t\t\t\t<description>CO2 control steps (in ppm)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlCo21\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo22\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo23\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo24\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo25\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo26\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo27\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo28\" typeId=\"sensorValue\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"vocControl\">\r\n+\t\t<label>VOC Control</label>\r\n+\t\t<description>Config of Sensors for VOC Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"vocControlSetValue\" typeId=\"ppmControlSetValue\">\r\n+\t\t\t\t<label>VOC Control Status</label>\r\n+\t\t\t\t<description>VOC control status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"vocControlSteps\" typeId=\"ppmControlSteps\">\r\n+\t\t\t\t<label>CO2 Control Steps</label>\r\n+\t\t\t\t<description>CO2 control steps (in ppm)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlVoc1\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc2\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc3\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc4\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc5\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc6\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc7\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc8\" typeId=\"sensorValue\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\r\n+\t<!-- Channel Types -->\r\n+\r\n+\t<channel-type id=\"sysdate\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>System Date and Time</label>\r\n+\t\t<description>The KWL's system date and time</description>\r\n+\t\t<category>Time</category>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"summerWinter\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Summertime / Wintertime</label>\r\n+\t\t<description>Indicates if summertime or wintertime is active</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Wintertime</option>\r\n+\t\t\t\t<option value=\"1\">Summertime</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"enableDisable\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Enable/Disable</label>\r\n+\t\t<description>Used for functionality that can be enabled or disabled</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">disabled</option>\r\n+\t\t\t\t<option value=\"1\">enabled</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"minFanStage\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Minimum Fan Stage</label>\r\n+\t\t<description>Minimum fan stage (0 or 1)</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"1\" step=\"1\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"onOff\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>On/Off</label>\r\n+\t\t<description>Used for configurations that can be on or off</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c6611b2a613ab45df34eb7ee960390f11e08cb"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMjEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Bypass active from/to (day and month)</label>\n          \n          \n            \n            \t\t<label>Bypass Active from/to (Day and Month)</label>", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488732138", "createdAt": "2020-09-15T14:52:26Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,682 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions bindingId=\"modbus\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\r\n+\t<thing-type id=\"helios-easycontrols\">\r\n+\r\n+\t\t<supported-bridge-type-refs>\r\n+\t\t\t<bridge-type-ref id=\"tcp\"/>\r\n+\t\t</supported-bridge-type-refs>\r\n+\r\n+\t\t<label>Helios Ventilation</label>\r\n+\t\t<description>Supports controlling a Helios Heat-Recovery Ventilation Device with easyControls using the Modbus Gateway\r\n+\t\t\tTCP</description>\r\n+\t\t<category>HVAC</category>\r\n+\r\n+\t\t<channel-groups>\r\n+\t\t\t<channel-group id=\"general\" typeId=\"general\"/>\r\n+\t\t\t<channel-group id=\"operation\" typeId=\"operation\"/>\r\n+\t\t\t<channel-group id=\"unitConfig\" typeId=\"unitConfig\"/>\r\n+\t\t\t<channel-group id=\"profiles\" typeId=\"profiles\"/>\r\n+\t\t\t<channel-group id=\"humidityControl\" typeId=\"humidityControl\"/>\r\n+\t\t\t<channel-group id=\"co2Control\" typeId=\"co2Control\"/>\r\n+\t\t\t<channel-group id=\"vocControl\" typeId=\"vocControl\"/>\r\n+\t\t</channel-groups>\r\n+\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" unit=\"ms\" min=\"30000\">\r\n+\t\t\t\t<label>Refresh Interval</label>\r\n+\t\t\t\t<description>Refresh interval</description>\r\n+\t\t\t\t<default>60000</default>\r\n+\t\t\t</parameter>\r\n+\t\t</config-description>\r\n+\r\n+\t</thing-type>\r\n+\r\n+\t<!-- Channel Group Types -->\r\n+\r\n+\t<channel-group-type id=\"general\">\r\n+\t\t<label>General</label>\r\n+\t\t<description>General Parameters / Status Information</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- General Status Infos -->\r\n+\t\t\t<channel id=\"preHeaterStatus\" typeId=\"onOff\">\r\n+\t\t\t\t<label>Pre-Heater Status</label>\r\n+\t\t\t\t<description>Pre-Heater Status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"bypassStatus\" typeId=\"bypassStatus\"/>\r\n+\t\t\t<!-- Temperatures -->\r\n+\t\t\t<channel id=\"nhzDuctSensor\" typeId=\"temperature\">\r\n+\t\t\t\t<label>After Heater Duct Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"nhzReturnSensor\" typeId=\"temperature\">\r\n+\t\t\t\t<label>After Heater Return Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"vhzDuctSensor\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Pre-Heater Duct Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureOutsideAir\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Outside Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureSupplyAir\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Supply Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureOutgoingAir\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Outgoing Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"temperatureExtractAir\" typeId=\"temperature\">\r\n+\t\t\t\t<label>Extract Air Temperature</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- RPM -->\r\n+\t\t\t<channel id=\"supplyAirRpm\" typeId=\"rpm\">\r\n+\t\t\t\t<label>Supply Air Fan RPM</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"extractAirRpm\" typeId=\"rpm\">\r\n+\t\t\t\t<label>Extract Air Fan RPM</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Filter Change -->\r\n+\t\t\t<channel id=\"filterChangeRemainingTime\" typeId=\"filterChangeRemainingTime\"/>\r\n+\t\t\t<!-- Operating Hours -->\r\n+\t\t\t<channel id=\"operatingHoursSupplyAirVent\" typeId=\"operatingHours\">\r\n+\t\t\t\t<label>Operating Hours Supply Air Fan</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursExtractAirVent\" typeId=\"operatingHours\">\r\n+\t\t\t\t<label>Operating Hours Extract Air Fan</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursVhz\" typeId=\"operatingHours\">\r\n+\t\t\t\t<label>Operating Hours Pre-Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"operatingHoursNhz\" typeId=\"operatingHours\">\r\n+\t\t\t\t<label>Operating Hours After Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Power -->\r\n+\t\t\t<channel id=\"outputPowerVhz\" typeId=\"outputPower\">\r\n+\t\t\t\t<label>Output Power Pre-Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"outputPowerNhz\" typeId=\"outputPower\">\r\n+\t\t\t\t<label>Output Power After Heater</label>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Infos / Warnings / Errors -->\r\n+\t\t\t<channel id=\"errors\" typeId=\"errors\"/>\r\n+\t\t\t<channel id=\"warnings\" typeId=\"warnings\"/>\r\n+\t\t\t<channel id=\"infos\" typeId=\"infos\"/>\r\n+\t\t\t<channel id=\"noOfErrors\" typeId=\"noOfErrors\"/>\r\n+\t\t\t<channel id=\"noOfWarnings\" typeId=\"noOfWarnings\"/>\r\n+\t\t\t<channel id=\"noOfInfos\" typeId=\"noOfInfos\"/>\r\n+\t\t\t<channel id=\"errorsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"warningsMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"infosMsg\" typeId=\"message\"/>\r\n+\t\t\t<channel id=\"statusFlags\" typeId=\"message\"/>\r\n+\t\t\t<!-- System Settings -->\r\n+\t\t\t<channel id=\"sysdate\" typeId=\"sysdate\"/>\r\n+\t\t\t<channel id=\"summerWinter\" typeId=\"summerWinter\"/>\r\n+\t\t\t<!-- Software / Firmware -->\r\n+\t\t\t<channel id=\"autoSwUpdate\" typeId=\"enableDisable\">\r\n+\t\t\t\t<label>Automatic SW Updates</label>\r\n+\t\t\t\t<description>Indicates if automatic software updates are enabled</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"accessHeliosPortal\" typeId=\"enableDisable\">\r\n+\t\t\t\t<label>Access Helios Portal</label>\r\n+\t\t\t\t<description>Indicates if access to Helios portal is enabled</description>\r\n+\t\t\t</channel>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"operation\">\r\n+\t\t<label>Operation</label>\r\n+\t\t<description>Control of operating mode</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- Party Mode -->\r\n+\t\t\t<channel id=\"partyModeDuration\" typeId=\"duration\">\r\n+\t\t\t\t<label>Party Mode Duration</label>\r\n+\t\t\t\t<description>Party mode duration (in minutes)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeFanStage\" typeId=\"fanStage\">\r\n+\t\t\t\t<label>Party Mode Fan Stage</label>\r\n+\t\t\t\t<description>Party mode fan stage</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeRemainingTime\" typeId=\"remainingTime\">\r\n+\t\t\t\t<label>Party Mode Remaining Time</label>\r\n+\t\t\t\t<description>Party mode remaining time</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"partyModeStatus\" typeId=\"onOff\">\r\n+\t\t\t\t<label>Party Mode Status</label>\r\n+\t\t\t\t<description>Party mode status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Standby Mode -->\r\n+\t\t\t<channel id=\"standbyModeDuration\" typeId=\"duration\">\r\n+\t\t\t\t<label>Standby Mode Duration</label>\r\n+\t\t\t\t<description>Standby mode duration (in minutes)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeFanStage\" typeId=\"fanStage\">\r\n+\t\t\t\t<label>Standby Mode Fan Stage</label>\r\n+\t\t\t\t<description>Standby mode fan stage</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeRemainingTime\" typeId=\"remainingTime\">\r\n+\t\t\t\t<label>Standby Mode Remaining Time</label>\r\n+\t\t\t\t<description>Standby mode remaining time</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"standbyModeStatus\" typeId=\"onOff\">\r\n+\t\t\t\t<label>Standby Mode Status</label>\r\n+\t\t\t\t<description>Standby mode status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- Holiday Programme -->\r\n+\t\t\t<channel id=\"holidayProgramme\" typeId=\"holidayProgramme\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeStart\" typeId=\"date\">\r\n+\t\t\t\t<label>Holiday Programme Start</label>\r\n+\t\t\t\t<description>Holiday programme start</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"holidayProgrammeEnd\" typeId=\"date\">\r\n+\t\t\t\t<label>Holiday Programme End</label>\r\n+\t\t\t\t<description>Holiday programme end</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"holidayProgrammeInterval\" typeId=\"holidayProgrammeInterval\"/>\r\n+\t\t\t<channel id=\"holidayProgrammeActivationTime\" typeId=\"holidayProgrammeActivationTime\"/>\r\n+\t\t\t<!-- Operating Mode / Fan Stage -->\r\n+\t\t\t<channel id=\"operatingMode\" typeId=\"operatingMode\"/>\r\n+\t\t\t<channel id=\"fanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"percentageFanStage\" typeId=\"percentage\">\r\n+\t\t\t\t<label>Percentage Fan Stage</label>\r\n+\t\t\t\t<description>Fan stage in percent</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"extractAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t\t<channel id=\"supplyAirFanStage\" typeId=\"fanStage\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"unitConfig\">\r\n+\t\t<label>Unit Config</label>\r\n+\t\t<description>Configuration parameters of the ventilation unit</description>\r\n+\t\t<channels>\r\n+\t\t\t<!-- Fan Stage Configuration -->\r\n+\t\t\t<channel id=\"minFanStage\" typeId=\"minFanStage\"/>\r\n+\t\t\t<!-- Bypass Configuration -->\r\n+\t\t\t<channel id=\"bypassRoomTemperature\" typeId=\"bypassRoomTemperature\"/>\r\n+\t\t\t<channel id=\"bypassMinOutsideTemperature\" typeId=\"bypassMinOutsideTemperature\"/>\r\n+\t\t\t<channel id=\"bypassFrom\" typeId=\"bypass\"/>\r\n+\t\t\t<channel id=\"bypassTo\" typeId=\"bypass\"/>\r\n+\t\t\t<!-- Comfort Temperature -->\r\n+\t\t\t<channel id=\"comfortTemp\" typeId=\"comfortTemp\"/>\r\n+\t\t\t<!-- Error Output Function -->\r\n+\t\t\t<channel id=\"errorOutputFunction\" typeId=\"errorOutputFunction\"/>\r\n+\t\t\t<!-- Filter Change -->\r\n+\t\t\t<channel id=\"filterChange\" typeId=\"filterChange\"/>\r\n+\t\t\t<channel id=\"filterChangeInterval\" typeId=\"filterChangeInterval\"/>\r\n+\t\t\t<!-- System Components and Extensions -->\r\n+\t\t\t<channel id=\"runOnTimeVhzNhz\" typeId=\"runOnTimeVhzNhz\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"profiles\">\r\n+\t\t<label>Profiles</label>\r\n+\t\t<description>Profiles for Device Operation</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"weekProfileNhz\" typeId=\"weekProfileNhz\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"humidityControl\">\r\n+\t\t<label>Humidity Control</label>\r\n+\t\t<description>Config of Sensors for Humidity and/or Temperature Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"humidityControlSetValue\" typeId=\"humidityControlSetValue\"/>\r\n+\t\t\t<channel id=\"humidityControlSteps\" typeId=\"humidityControlSteps\"/>\r\n+\t\t\t<channel id=\"humidityStopTime\" typeId=\"humidityStopTime\"/>\r\n+\t\t\t<!-- External Humidity Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity1\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity2\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity3\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity4\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity5\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity6\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity7\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfHumidity8\" typeId=\"sensorValue\"/>\r\n+\t\t\t<!-- External Temperature Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature1\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature2\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature3\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature4\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature5\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature6\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature7\" typeId=\"temperature\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlFtfTemperature8\" typeId=\"temperature\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"co2Control\">\r\n+\t\t<label>CO2 Control</label>\r\n+\t\t<description>Config of Sensors for CO2 Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"co2ControlSetValue\" typeId=\"ppmControlSetValue\">\r\n+\t\t\t\t<label>CO2 Control Status</label>\r\n+\t\t\t\t<description>CO2 control status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"co2ControlSteps\" typeId=\"ppmControlSteps\">\r\n+\t\t\t\t<label>CO2 Control Steps</label>\r\n+\t\t\t\t<description>CO2 control steps (in ppm)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlCo21\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo22\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo23\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo24\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo25\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo26\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo27\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlCo28\" typeId=\"sensorValue\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\t<channel-group-type id=\"vocControl\">\r\n+\t\t<label>VOC Control</label>\r\n+\t\t<description>Config of Sensors for VOC Control</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"vocControlSetValue\" typeId=\"ppmControlSetValue\">\r\n+\t\t\t\t<label>VOC Control Status</label>\r\n+\t\t\t\t<description>VOC control status</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<channel id=\"vocControlSteps\" typeId=\"ppmControlSteps\">\r\n+\t\t\t\t<label>CO2 Control Steps</label>\r\n+\t\t\t\t<description>CO2 control steps (in ppm)</description>\r\n+\t\t\t</channel>\r\n+\t\t\t<!-- External CO2 Sensors -->\r\n+\t\t\t<channel id=\"externalSensorKwlVoc1\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc2\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc3\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc4\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc5\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc6\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc7\" typeId=\"sensorValue\"/>\r\n+\t\t\t<channel id=\"externalSensorKwlVoc8\" typeId=\"sensorValue\"/>\r\n+\t\t</channels>\r\n+\t</channel-group-type>\r\n+\r\n+\r\n+\t<!-- Channel Types -->\r\n+\r\n+\t<channel-type id=\"sysdate\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>System Date and Time</label>\r\n+\t\t<description>The KWL's system date and time</description>\r\n+\t\t<category>Time</category>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"summerWinter\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Summertime / Wintertime</label>\r\n+\t\t<description>Indicates if summertime or wintertime is active</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Wintertime</option>\r\n+\t\t\t\t<option value=\"1\">Summertime</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"enableDisable\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Enable/Disable</label>\r\n+\t\t<description>Used for functionality that can be enabled or disabled</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">disabled</option>\r\n+\t\t\t\t<option value=\"1\">enabled</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"minFanStage\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Minimum Fan Stage</label>\r\n+\t\t<description>Minimum fan stage (0 or 1)</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"1\" step=\"1\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"onOff\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>On/Off</label>\r\n+\t\t<description>Used for configurations that can be on or off</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">On</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"humidityControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Humidity Control Set Value</label>\r\n+\t\t<description>Humidity control set value (in percent)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"20\" max=\"80\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"humidityControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Humidity Control Steps</label>\r\n+\t\t<description>Humidity control steps (in percent)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"5\" max=\"20\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"humidityStopTime\" advanced=\"true\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Humidity Stop Time</label>\r\n+\t\t<description>Humidity stop time in hours (0-24)</description>\r\n+\t\t<category>Humidity</category>\r\n+\t\t<state min=\"0\" max=\"24\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"ppmControlSetValue\" advanced=\"true\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Control Set Value</label>\r\n+\t\t<description>Control set value (in ppm)</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"300\" max=\"2000\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"ppmControlSteps\" advanced=\"true\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Control Steps</label>\r\n+\t\t<description>Control steps (in ppm)</description>\r\n+\t\t<category>Gas</category>\r\n+\t\t<state min=\"50\" max=\"400\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"comfortTemp\" advanced=\"true\">\r\n+\t\t<item-type>Number:Temperature</item-type>\r\n+\t\t<label>Comfort Temperature</label>\r\n+\t\t<description>Comfort temperature</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"10\" max=\"25\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"duration\" advanced=\"false\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Duration</label>\r\n+\t\t<description>Duration for operating mode (in minutes)</description>\r\n+\t\t<state min=\"5\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"fanStage\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Fan Stage</label>\r\n+\t\t<description>Fan stage</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state min=\"0\" max=\"4\" step=\"1\" pattern=\"%d\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"remainingTime\" advanced=\"false\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Remaining Time</label>\r\n+\t\t<description>Remaining time for operating mode (in minutes)</description>\r\n+\t\t<state min=\"0\" max=\"180\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"operatingMode\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Operating Mode</label>\r\n+\t\t<description>Operating mode (automatic/manual)</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Automatic</option>\r\n+\t\t\t\t<option value=\"1\">Manual</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"percentage\" advanced=\"false\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Percentage</label>\r\n+\t\t<description>Percentage</description>\r\n+\t\t<state min=\"0\" max=\"100\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"temperature\" advanced=\"false\">\r\n+\t\t<item-type>Number:Temperature</item-type>\r\n+\t\t<label>Temperature</label>\r\n+\t\t<description>Temperature in \u00b0C</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"-27\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"sensorValue\" advanced=\"false\">\r\n+\t\t<item-type>Number:Dimensionless</item-type>\r\n+\t\t<label>Sensor Value</label>\r\n+\t\t<description>Measurement of a sensor</description>\r\n+\t\t<state min=\"0\" max=\"9998.9\" step=\"0.1\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"weekProfileNhz\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Week Profile Afterheater</label>\r\n+\t\t<description>Week profile afterheater</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Standard 1</option>\r\n+\t\t\t\t<option value=\"1\">Standard 2</option>\r\n+\t\t\t\t<option value=\"2\">Fixed value</option>\r\n+\t\t\t\t<option value=\"3\">Individual 1</option>\r\n+\t\t\t\t<option value=\"4\">Individual 2</option>\r\n+\t\t\t\t<option value=\"5\">NA</option>\r\n+\t\t\t\t<option value=\"6\">Off</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"rpm\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>RPM</label>\r\n+\t\t<description>RPM</description>\r\n+\t\t<state min=\"0\" max=\"9999\" step=\"1\" pattern=\"%d rpm\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"holidayProgramme\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Holiday Programme</label>\r\n+\t\t<description>Holiday programme</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Off</option>\r\n+\t\t\t\t<option value=\"1\">Interval</option>\r\n+\t\t\t\t<option value=\"2\">Constant</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"date\" advanced=\"false\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Date</label>\r\n+\t\t<description>Date</description>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"holidayProgrammeInterval\" advanced=\"true\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Holiday Programme Interval</label>\r\n+\t\t<description>Holiday programme interval in hours</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state min=\"1\" max=\"24\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"holidayProgrammeActivationTime\" advanced=\"true\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Holiday Programme Activation Time</label>\r\n+\t\t<description>Holiday programme activation time in minutes</description>\r\n+\t\t<category>Vacation</category>\r\n+\t\t<state min=\"5\" max=\"300\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"runOnTimeVhzNhz\" advanced=\"true\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Stopping Time Preheater/Afterheater</label>\r\n+\t\t<description>Stopping time preheater/afterheater in seconds</description>\r\n+\t\t<category>Heating</category>\r\n+\t\t<state min=\"60\" max=\"120\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"errorOutputFunction\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Error Output Function</label>\r\n+\t\t<description>Error output function (collective error or just error)</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"1\">Collective error</option>\r\n+\t\t\t\t<option value=\"2\">Only error</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"filterChange\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Filter Change</label>\r\n+\t\t<description>Filter change</description>\r\n+\t\t<state>\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">No</option>\r\n+\t\t\t\t<option value=\"1\">Yes</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"filterChangeInterval\" advanced=\"true\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Filter Change Interval</label>\r\n+\t\t<description>Filter change interval in months</description>\r\n+\t\t<state min=\"1\" max=\"12\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"filterChangeRemainingTime\" advanced=\"true\">\r\n+\t\t<item-type>Number:Time</item-type>\r\n+\t\t<label>Filter Change Remaining Time</label>\r\n+\t\t<description>Filter change remaining time in minutes</description>\r\n+\t\t<state min=\"1\" max=\"550000\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"bypassRoomTemperature\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Bypass Room Temperature</label>\r\n+\t\t<description>Bypass room temperature</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"10\" max=\"40\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"bypassMinOutsideTemperature\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Bypass Minimum Outside Temperature</label>\r\n+\t\t<description>Bypass minimum outside temperature</description>\r\n+\t\t<category>Temperature</category>\r\n+\t\t<state min=\"5\" max=\"20\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"offsetExtractAir\" advanced=\"true\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Offset Extract Air</label>\r\n+\t\t<description>Offset extract air</description>\r\n+\t\t<category>HVAC</category>\r\n+\t\t<state pattern=\"%.1f\" readOnly=\"false\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"operatingHours\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Operating Hours</label>\r\n+\t\t<description>Operating hours (in minutes)</description>\r\n+\t\t<category>Time</category>\r\n+\t\t<state min=\"0\" max=\"100000000\" step=\"1\" pattern=\"%d\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"outputPower\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Output Power</label>\r\n+\t\t<description>Output power of preheater/afterheater (in percent)</description>\r\n+\t\t<category>Energy</category>\r\n+\t\t<state min=\"0\" max=\"100000000\" step=\"1\" pattern=\"%d %unit%\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"errors\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Errors</label>\r\n+\t\t<description>Errors as integer value</description>\r\n+\t\t<state min=\"0\" max=\"4294967295\" step=\"1\" pattern=\"%d\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"warnings\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Warnings</label>\r\n+\t\t<description>Warnings as integer value</description>\r\n+\t\t<state min=\"0\" max=\"255\" step=\"1\" pattern=\"%d\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"infos\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Infos</label>\r\n+\t\t<description>Infos as integer value</description>\r\n+\t\t<state min=\"0\" max=\"255\" step=\"1\" pattern=\"%d\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"noOfErrors\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Number of Errors</label>\r\n+\t\t<description>Number of bit-coded errors</description>\r\n+\t\t<state min=\"0\" max=\"32\" step=\"1\" pattern=\"%d\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"noOfWarnings\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Number of Warnings</label>\r\n+\t\t<description>Number of bit-coded warnings</description>\r\n+\t\t<state min=\"0\" max=\"8\" step=\"1\" pattern=\"%d\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"noOfInfos\" advanced=\"false\">\r\n+\t\t<item-type>Number</item-type>\r\n+\t\t<label>Number of Infos</label>\r\n+\t\t<description>Number of bit-coded infos</description>\r\n+\t\t<state min=\"0\" max=\"8\" step=\"1\" pattern=\"%d\" readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"message\" advanced=\"false\">\r\n+\t\t<item-type>String</item-type>\r\n+\t\t<label>Errors / Warnings / Infos</label>\r\n+\t\t<description>Errors / warnings / infos as string</description>\r\n+\t\t<state readOnly=\"true\"/>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"sensorConfig\" advanced=\"false\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Sensor Configuration</label>\r\n+\t\t<description>Sensor configuration (installed or not)</description>\r\n+\t\t<state readOnly=\"true\">\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">No sensor</option>\r\n+\t\t\t\t<option value=\"1\">Sensor installed</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"bypassStatus\" advanced=\"true\">\r\n+\t\t<item-type>Switch</item-type>\r\n+\t\t<label>Bypass Status</label>\r\n+\t\t<description>Status of the bypass</description>\r\n+\t\t<state readOnly=\"true\">\r\n+\t\t\t<options>\r\n+\t\t\t\t<option value=\"0\">Bypass closed</option>\r\n+\t\t\t\t<option value=\"1\">Bypass open</option>\r\n+\t\t\t</options>\r\n+\t\t</state>\r\n+\t</channel-type>\r\n+\r\n+\t<channel-type id=\"bypass\" advanced=\"true\">\r\n+\t\t<item-type>DateTime</item-type>\r\n+\t\t<label>Bypass active from/to (day and month)</label>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c6611b2a613ab45df34eb7ee960390f11e08cb"}, "originalPosition": 677}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNjIwNg==", "bodyText": "This is missing the modbus dependency:\n\t\t<feature>openhab-transport-modbus</feature>\n\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.modbus/${project.version}</bundle>\n</bundle>", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488936206", "createdAt": "2020-09-15T19:55:32Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<features name=\"org.openhab.binding.modbus.helioseasycontrols-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\r\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\r\n+\r\n+\t<feature name=\"openhab-binding-modbus.helioseasycontrols\" description=\"Modbus.HeliosEasyControls Binding\" version=\"${project.version}\">\r\n+\t\t<feature>openhab-runtime-base</feature>\r\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.modbus.helioseasycontrols/${project.version}</bundle>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c6611b2a613ab45df34eb7ee960390f11e08cb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzNzk2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Gson gson = new Gson();\n          \n          \n            \n                private final Gson gson = new Gson();", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488937967", "createdAt": "2020-09-15T19:58:37Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,798 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable Map<String, HeliosVariable> variableMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\r\n+\r\n+    private Gson gson = new Gson();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c6611b2a613ab45df34eb7ee960390f11e08cb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzODMxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\n          \n          \n            \n                private final Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488938311", "createdAt": "2020-09-15T19:59:12Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,798 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable Map<String, HeliosVariable> variableMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c6611b2a613ab45df34eb7ee960390f11e08cb"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0ODUzMw==", "bodyText": "Can't this be a java switch statement? Same comment for the other large if-else blocks?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (unit.equals(HeliosVariable.UNIT_DAY)) {\n          \n          \n            \n                                    switch (unit) {\n          \n          \n            \n                                    case HeliosVariable.UNIT_DAY:\n          \n          \n            \n                                     ...", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488948533", "createdAt": "2020-09-15T20:19:11Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,798 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable Map<String, HeliosVariable> variableMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\r\n+\r\n+    private Gson gson = new Gson();\r\n+\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    private int dateFormat = -1;\r\n+    private ZonedDateTime sysDate = ZonedDateTime.now(); // initialize with local system time as a best guess\r\n+                                                         // before reading from device\r\n+\r\n+    private class BypassDate {\r\n+        // initialization to avoid issues when updating before all variables were read\r\n+        private int month = 1;\r\n+        private int day = 1;\r\n+\r\n+        public void setMonth(int month) {\r\n+            this.month = month;\r\n+        }\r\n+\r\n+        public void setDay(int day) {\r\n+            this.day = day;\r\n+        }\r\n+\r\n+        public DateTimeType toDateTimeType() {\r\n+            return new DateTimeType(ZonedDateTime.of(1900, this.month, this.day, 0, 0, 0, 0, ZoneId.of(\"UTC+00:00\")));\r\n+        }\r\n+    }\r\n+\r\n+    private @Nullable BypassDate bypassFrom, bypassTo;\r\n+\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in variableMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        try (InputStreamReader jsonFile = new InputStreamReader(\r\n+                getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE));\r\n+                BufferedReader reader = new BufferedReader(jsonFile)) {\r\n+            this.variableMap = gson.fromJson(reader, vMapType);\r\n+        } catch (IOException e) {\r\n+            this.handleError(\"Error reading variable definition file\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+        if (variableMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.variableMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.variableMap != null) && (this.config != null)) {\r\n+            this.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            HeliosEasyControlsConfiguration config = this.config;\r\n+            if (config != null) {\r\n+                this.pollingJob = scheduler.scheduleWithFixedDelay(() -> {\r\n+                    if (variableMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : variableMap.entrySet()) {\r\n+                            if (this.isProperty(entry.getKey()) || isLinked(entry.getValue().getGroupAndName())\r\n+                                    || HeliosEasyControlsBindingConstants.ALWAYS_UPDATE_VARIABLES\r\n+                                            .contains(entry.getKey())) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }, config.getRefreshInterval(), config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+            }\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.variableMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.DATE));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.TIME));\r\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH));\r\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_DAY));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH));\r\n+            } else {\r\n+                scheduler.submit(() -> readValue(channelId));\r\n+            }\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                ZonedDateTime d = ((DateTimeType) command).getZonedDateTime();\r\n+                if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\r\n+                    setSysDateTime(d);\r\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\r\n+                    this.setBypass(true, d.getDayOfMonth(), d.getMonthValue());\r\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\r\n+                    this.setBypass(false, d.getDayOfMonth(), d.getMonthValue());\r\n+                } else {\r\n+                    value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+                }\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                Map<String, HeliosVariable> variableMap = this.variableMap;\r\n+                if (variableMap != null) {\r\n+                    String unit = variableMap.get(channelId).getUnit();\r\n+                    QuantityType<?> val = (QuantityType<?>) command;\r\n+                    if (unit != null) {\r\n+                        if (unit.equals(HeliosVariable.UNIT_DAY)) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c6611b2a613ab45df34eb7ee960390f11e08cb"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NjU0Nw==", "bodyText": "The url won't age well as I don't know if we keep the 2.5.x branch when we move to 3.0. Actually the link is already possble incorrect as the json file is in the wrong place and needs to be moved. But I have no other idea on how to do it better. So what value does this add to have a link to this page? Maybe just remove?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r488956547", "createdAt": "2020-09-15T20:34:12Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/README.md", "diffHunk": "@@ -0,0 +1,382 @@\n+# Helios easyControls Binding\r\n+\r\n+Helios Heat-Recovery Ventilation devices use a Modbus protocol to communicate with different sensors, switches, etc. Some devices come with an integrated web interface (easyControls) as well as a Modbus TCP/IP Gateway.\r\n+See https://www.easycontrols.net/de/service/downloads/send/4-software/16-modbus-dokumentation-f%C3%BCr-kwl-easycontrols-ger%C3%A4te for the corresponding specification.\r\n+\r\n+## Supported Things\r\n+\r\n+| Thing               | Description                                                |\r\n+|---------------------|------------------------------------------------------------|\r\n+| helios-easycontrols | Helios Heat-Recovery Ventilation devices with easyControls |\r\n+\r\n+## Configuration\r\n+\r\n+You first need to set up a Modbus bridge according to the [Modbus documentation](https://www.openhab.org/addons/bindings/modbus/).\r\n+Things in this extension will use the selected bridge to connect to the device.\r\n+The configuration of a Helios Ventilation device via a `.things` file would look like the following code sample.\r\n+It's required to provide the device's IP address, port and unit ID (port and unit ID cannot be changed and always have to be 502 and 180; in fact the values provided here are ignored by the binding and the fixed values 502 and 180 are used):\r\n+\r\n+```\r\n+Bridge modbus:tcp:modbus-gateway \"Modbus TCP/IP Gateway\" [ host=\"x.x.x.x\", port=502, id=180, enableDiscovery=true ] {\r\n+    Thing helios-easycontrols kwl \"KWL\"\r\n+}\r\n+```\r\n+\r\n+## Channels\r\n+\r\n+The following channels are supported:\r\n+\r\n+| Channel                          | Channel Group   | Description                                                                                                                      | Item Type                | RW | \r\n+| -------------------------------- | --------------- | -------------------------------------------------------------------------------------------------------------------------------- | ------------------------ | -- | \r\n+| sysdate                          | general         | The KWL's system date and time                                                                                                   | DateTime                 | RW | \r\n+| summerWinter                     | general         | Indicates if summertime or wintertime is active (OFF = wintertime, ON = summertime)                                              | Switch                   | RW | \r\n+| autoSwUpdate                     | general         | Indicates if automatic software updates are enable                                                                               | Switch                   | RW | \r\n+| accessHeliosPortal               | general         | Indicates if access to Helios portal is enabled                                                                                  | Switch                   | RW | \r\n+| minFanStage                      | unitConfig      | Minimum fan stage (0 or 1) (0, 1)                                                                                                | Number                   | RW | \r\n+| preHeaterStatus                  | general         | Pre-Heater Status                                                                                                                | Switch                   | RW | \r\n+| humidityControlSetValue          | humidityControl | Humidity control set value (in percent) (20 - 80 %)                                                                              | Number:Dimensionless     | RW | \r\n+| humidityControlSteps             | humidityControl | Humidity control steps (in percent) (5 - 20 %)                                                                                   | Number:Dimensionless     | RW | \r\n+| humidityStopTime                 | humidityControl | Humidity stop time in hours (0-24) (0 - 24 h)                                                                                    | Number:Time              | RW | \r\n+| co2ControlSetValue               | co2Control      | CO2 control set value (in ppm) (300 - 2000 ppm)                                                                                  | Number:Dimensionless     | RW | \r\n+| co2ControlSteps                  | co2Control      | CO2 control steps (in ppm) (50 - 400 ppm)                                                                                        | Number:Dimensionless     | RW | \r\n+| vocControlStatus                 | vocControl      | VOC control status (0 = off, 1 = stepped, 2 = stepless)                                                                          | Number                   | RW | \r\n+| vocControlSetValue               | vocControl      | VOC control set value (in ppm) (300 - 2000 ppm)                                                                                  | Number:Dimensionless     | RW | \r\n+| vocControlSteps                  | vocControl      | VOC control steps (in ppm) (50 - 400 ppm)                                                                                        | Number:Dimensionless     | RW | \r\n+| comfortTemp                      | unitConfig      | Comfort Temperature (10.0 - 25.0 \u00b0C)                                                                                             | Number:Temperature       | RW | \r\n+| partyModeDuration                | operation       | Party mode duration (in minutes) (5 - 180 min)                                                                                   | Number:Time              | RW | \r\n+| partyModeFanStage                | operation       | Party mode fan stage (0 - 4)                                                                                                     | Number                   | RW | \r\n+| partyModeRemainingTime           | operation       | Party mode remaining time (0 - 180 min)                                                                                          | Number:Time              | R  | \r\n+| partyModeStatus                  | operation       | Party mode status                                                                                                                | Switch                   | RW | \r\n+| standbyModeDuration              | operation       | Standby mode duration (in minutes) (5 - 180 min)                                                                                 | Number:Time              | RW | \r\n+| standbyModeFanStage              | operation       | Standby mode fan stage (0 - 4)                                                                                                   | Number                   | RW | \r\n+| standbyModeRemainingTime         | operation       | Standby mode remaining time (0 - 180 min)                                                                                        | Number:Time              | R  | \r\n+| standbyModeStatus                | operation       | Standby mode status                                                                                                              | Switch                   | RW | \r\n+| operatingMode                    | operation       | Operating mode (automatic/manual) (OFF = automatic, ON = manual)                                                                 | Switch                   | RW | \r\n+| fanStage                         | operation       | Fan stage (0 - 4)                                                                                                                | Number                   | RW | \r\n+| percentageFanStage               | operation       | Fan stage in percent (0 - 100 %)                                                                                                 | Number:Dimensionless     | R  | \r\n+| temperatureOutsideAir            | general         | Ouside air temperature in \u00b0C (-27.0 - 9998.9 \u00b0C)                                                                                 | Number:Temperature       | R  | \r\n+| temperatureSupplyAir             | general         | Supply air temperature in \u00b0C (-27.0 - 9998.9 \u00b0C)                                                                                 | Number:Temperature       | R  | \r\n+| temperatureOutgoingAir           | general         | Outgoing air temperature in \u00b0C (-27.0 - 9998.9 \u00b0C)                                                                               | Number:Temperature       | R  | \r\n+| temperatureExtractAir            | general         | Extract air temperature in \u00b0C (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| vhzDuctSensor                    | general         | Pre-heater intake temperature in \u00b0C (-27.0 - 9998.9 \u00b0C)                                                                          | Number:Temperature       | R  | \r\n+| nhzReturnSensor                  | general         | After-heater return temperature in \u00b0C (-27.0 - 9998.9 \u00b0C)                                                                        | Number:Temperature       | R  | \r\n+| externalSensorKwlFtfHumidity1    | humidityControl | External humidity sensor 1 (-0.0 - 9998.9 %)                                                                                     | Number:Dimensionless     | R  | \r\n+| externalSensorKwlFtfHumidity2    | humidityControl | External humidity sensor 2 (-0.0 - 9998.9 %)                                                                                     | Number:Dimensionless     | R  | \r\n+| externalSensorKwlFtfHumidity3    | humidityControl | External humidity sensor 3 (-0.0 - 9998.9 %)                                                                                     | Number:Dimensionless     | R  | \r\n+| externalSensorKwlFtfHumidity4    | humidityControl | External humidity sensor 4 (-0.0 - 9998.9 %)                                                                                     | Number:Dimensionless     | R  | \r\n+| externalSensorKwlFtfHumidity5    | humidityControl | External humidity sensor 5 (-0.0 - 9998.9 %)                                                                                     | Number:Dimensionless     | R  | \r\n+| externalSensorKwlFtfHumidity6    | humidityControl | External humidity sensor 6 (-0.0 - 9998.9 %)                                                                                     | Number:Dimensionless     | R  | \r\n+| externalSensorKwlFtfHumidity7    | humidityControl | External humidity sensor 7 (-0.0 - 9998.9 %)                                                                                     | Number:Dimensionless     | R  | \r\n+| externalSensorKwlFtfHumidity8    | humidityControl | External humidity sensor 8 (-0.0 - 9998.9 %)                                                                                     | Number:Dimensionless     | R  | \r\n+| externalSensorKwlFtfTemperature1 | humidityControl | External temperature sensor 1 (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| externalSensorKwlFtfTemperature2 | humidityControl | External temperature sensor 2 (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| externalSensorKwlFtfTemperature3 | humidityControl | External temperature sensor 3 (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| externalSensorKwlFtfTemperature4 | humidityControl | External temperature sensor 4 (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| externalSensorKwlFtfTemperature5 | humidityControl | External temperature sensor 5 (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| externalSensorKwlFtfTemperature6 | humidityControl | External temperature sensor 6 (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| externalSensorKwlFtfTemperature7 | humidityControl | External temperature sensor 7 (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| externalSensorKwlFtfTemperature8 | humidityControl | External temperature sensor 8 (-27.0 - 9998.9 \u00b0C)                                                                                | Number:Temperature       | R  | \r\n+| externalSensorKwlCo21            | co2Control      | External CO2 sensor 1 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlCo22            | co2Control      | External CO2 sensor 2 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlCo23            | co2Control      | External CO2 sensor 3 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlCo24            | co2Control      | External CO2 sensor 4 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlCo25            | co2Control      | External CO2 sensor 5 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlCo26            | co2Control      | External CO2 sensor 6 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlCo27            | co2Control      | External CO2 sensor 7 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlCo28            | co2Control      | External CO2 sensor 8 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlVoc1            | vocControl      | External VOC sensor 1 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlVoc2            | vocControl      | External VOC sensor 2 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlVoc3            | vocControl      | External VOC sensor 3 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlVoc4            | vocControl      | External VOC sensor 4 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlVoc5            | vocControl      | External VOC sensor 5 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlVoc6            | vocControl      | External VOC sensor 6 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlVoc7            | vocControl      | External VOC sensor 7 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| externalSensorKwlVoc8            | vocControl      | External VOC sensor 8 (-0.0 - 9998.9 ppm)                                                                                        | Number:Dimensionless     | R  | \r\n+| nhzDuctSensor                    | general         | After-heater intake temperature in \u00b0C (-27.0 - 9998.9 \u00b0C)                                                                        | Number:Temperature       | R  | \r\n+| weekProfileNhz                   | profiles        | Week profile after-heater (0 = standard 1, 1 = standard 2, 2 = fixed value, 3 = individual 1, 4 = individual 2, 5 = NA, 6 = off) | Number                   | RW | \r\n+| supplyAirRpm                     | general         | Supply air fan RPM (0 - 9999)                                                                                                    | Number                   | R  | \r\n+| extractAirRpm                    | general         | Extract air fan RPM (0 - 9999)                                                                                                   | Number                   | R  | \r\n+| holidayProgramme                 | operation       | Holiday programme (0 = off, 1 = interval, 2 = constant)                                                                          | Number                   | RW | \r\n+| holidayProgrammeFanStage         | operation       | Holiday programme fan stage (0 - 4)                                                                                              | Number                   | RW | \r\n+| holidayProgrammeStart            | operation       | Holiday programme start                                                                                                          | DateTime                 | RW | \r\n+| holidayProgrammeEnd              | operation       | Holiday programme end                                                                                                            | DateTime                 | RW | \r\n+| holidayProgrammeInterval         | operation       | Holiday programme interval in hours (1 - 24 h)                                                                                   | Number:Time              | RW | \r\n+| holidayProgrammeActivationTime   | operation       | Holiday programme activation time in minutes (5 - 300 min)                                                                       | Number:Time              | RW | \r\n+| runOnTimeVhzNhz                  | unitConfig      | Stopping time preheater/afterheater in seconds (60 - 120 s)                                                                      | Number:Time              | RW | \r\n+| errorOutputFunction              | unitConfig      | Error output function (collective error or just error) (1 = collective error, 2 = only error)                                    | Number                   | RW | \r\n+| filterChange                     | unitConfig      | Filter change                                                                                                                    | Switch                   | RW | \r\n+| filterChangeInterval             | unitConfig      | Filter change interval in months (1 - 12)                                                                                        | Number                   | RW | \r\n+| filterChangeRemainingTime        | general         | Filter change remaining time in minutes (1 - 55000 min)                                                                          | Number:Time              | R  | \r\n+| bypassRoomTemperature            | unitConfig      | Bypass room temperature in \u00b0C (10 - 40 \u00b0C)                                                                                       | Number:Temperature       | RW | \r\n+| bypassMinOutsideTemperature      | unitConfig      | Bypass outside temperature in \u00b0C (5 - 20 \u00b0C)                                                                                     | Number:Temperature       | RW | \r\n+| supplyAirFanStage                | operation       | Supply air fan stage (0 - 4)                                                                                                     | Number                   | RW | \r\n+| extractAirFanStage               | operation       | Extract air fan stage (0 - 4)                                                                                                    | Number                   | RW | \r\n+| operatingHoursSupplyAirVent      | general         | Operating hours supply air fan (in minutes) (0 - 2^32-1 min)                                                                     | Number:Time              | R  | \r\n+| operatingHoursExtractAirVent     | general         | Operating hours extract air fan (in minutes) (0 - 2^32-1 min)                                                                    | Number:Time              | R  | \r\n+| operatingHoursVhz                | general         | Operating hours preheater (in minutes) (0 - 2^32-1 min)                                                                          | Number:Time              | R  | \r\n+| operatingHoursNhz                | general         | Operating hours afterheater (in minutes) (0 - 2^32-1 min)                                                                        | Number:Time              | R  | \r\n+| outputPowerVhz                   | general         | Output power of preheater (in percent) (0 - 2^32-1 %)                                                                            | Number:Dimensionless     | R  | \r\n+| outputPowerNhz                   | general         | Output power of afterheater (in percent) (0 - 2^32-1 %)                                                                          | Number:Dimensionless     | R  | \r\n+| errors                           | general         | Errors as integer value (0 - 2^32-1)                                                                                             | Number                   | R  | \r\n+| warnings                         | general         | Warnings as integer value (0 - 2^32-1)                                                                                           | Number                   | R  | \r\n+| infos                            | general         | Infos as integer value (0 - 2^32-1)                                                                                              | Number                   | R  | \r\n+| noOfErrors                       | general         | Number of bit-coded errors (0 - 32)                                                                                              | Number                   | R  | \r\n+| noOfWarnings                     | general         | Number of bit-coded warnings (0 - 8)                                                                                             | Number                   | R  | \r\n+| noOfInfos                        | general         | Number of bit-coded infos (0 - 8)                                                                                                | Number                   | R  | \r\n+| errorsMsg                        | general         | Errors as string                                                                                                                 | String                   | R  | \r\n+| warningsMsg                      | general         | Warnings as string                                                                                                               | String                   | R  | \r\n+| infosMsg                         | general         | Infos as string                                                                                                                  | String                   | R  | \r\n+| statusFlags                      | general         | Status flags                                                                                                                     | String                   | R  | \r\n+| bypassStatus                     | general         | Status of the bypass (OFF = closed, ON = open)                                                                                   | Switch                   | R  | \r\n+| bypassFrom                       | unitConfig      | Bypass active from                                                                                                               | DateTime                 | RW | \r\n+| bypassTo                         | unitConfig      | Bypass active to                                                                                                                 | DateTime                 | RW | \r\n+\r\n+\r\n+Please also see `variables.json` for further details: https://github.com/openhab/openhab-addons/blob/2.5.x/bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/variables.json\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5c6611b2a613ab45df34eb7ee960390f11e08cb"}, "originalPosition": 135}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c66f5a1d4d6a77f794ebc8acf5e4fa36b0f8742e", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/c66f5a1d4d6a77f794ebc8acf5e4fa36b0f8742e", "committedDate": "2020-09-16T19:02:49Z", "message": "Delete Channels.xlsx"}, "afterCommit": {"oid": "90a7bd47f21cb33ee852608a39d853104b21ab55", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/90a7bd47f21cb33ee852608a39d853104b21ab55", "committedDate": "2020-09-16T19:04:01Z", "message": "Moved variables.json to resources\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b102a5a1dfb0b61436148c12c6c3c0431d92e621", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/b102a5a1dfb0b61436148c12c6c3c0431d92e621", "committedDate": "2020-09-16T19:33:00Z", "message": "Merge branch '2.5.x' of https://github.com/bern77/openhab-addons into 2.5.x"}, "afterCommit": {"oid": "f3cb2cd99a0d37e3b685c505d4fc100fe790d407", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/f3cb2cd99a0d37e3b685c505d4fc100fe790d407", "committedDate": "2020-09-16T19:39:26Z", "message": "Merge branch '2.5.x' of https://github.com/bern77/openhab-addons into 2.5.x\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "721d4e700f0d877a4377f12446c86ebc469f170e", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/721d4e700f0d877a4377f12446c86ebc469f170e", "committedDate": "2020-09-16T19:51:57Z", "message": "Another stab at fixing the pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}, "afterCommit": {"oid": "1510a300b1378cb013614da5ac644db926583a69", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/1510a300b1378cb013614da5ac644db926583a69", "committedDate": "2020-09-16T19:53:41Z", "message": "Another stab at fixing the pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1510a300b1378cb013614da5ac644db926583a69", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/1510a300b1378cb013614da5ac644db926583a69", "committedDate": "2020-09-16T19:53:41Z", "message": "Another stab at fixing the pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}, "afterCommit": {"oid": "4d3ecd1fce9b3b8997195c3ff8b0543ad26a6ebf", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/4d3ecd1fce9b3b8997195c3ff8b0543ad26a6ebf", "committedDate": "2020-09-16T19:59:29Z", "message": "Another stab at fixing the pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d3ecd1fce9b3b8997195c3ff8b0543ad26a6ebf", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/4d3ecd1fce9b3b8997195c3ff8b0543ad26a6ebf", "committedDate": "2020-09-16T19:59:29Z", "message": "Another stab at fixing the pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}, "afterCommit": {"oid": "90a7bd47f21cb33ee852608a39d853104b21ab55", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/90a7bd47f21cb33ee852608a39d853104b21ab55", "committedDate": "2020-09-16T19:04:01Z", "message": "Moved variables.json to resources\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e70ed3877200d54827b0770f44377a1baa2ee4f", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/8e70ed3877200d54827b0770f44377a1baa2ee4f", "committedDate": "2020-09-16T20:24:57Z", "message": "removed Channels.xlsx"}, "afterCommit": {"oid": "25a80a60aac5f72bf7a5cea7cba54cc01a0926d5", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/25a80a60aac5f72bf7a5cea7cba54cc01a0926d5", "committedDate": "2020-09-16T20:26:42Z", "message": "removed Channels.xlsx\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "847ac0977237818933918fd6c3ad6adef82877ab", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/847ac0977237818933918fd6c3ad6adef82877ab", "committedDate": "2020-09-16T21:16:54Z", "message": "Added binding to pom.xml files again\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}, "afterCommit": {"oid": "6218819cf142172cebe1b9a98b29c4c376dc211e", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/6218819cf142172cebe1b9a98b29c4c376dc211e", "committedDate": "2020-09-16T21:24:22Z", "message": "Reverting back to originals of pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6fe3e5312db8804b63e004bcfda53309ece24aa", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/b6fe3e5312db8804b63e004bcfda53309ece24aa", "committedDate": "2020-09-16T21:31:21Z", "message": "Update pom.xml"}, "afterCommit": {"oid": "06658f4b9851cf2bb96449a1878fb295b72dc68f", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/06658f4b9851cf2bb96449a1878fb295b72dc68f", "committedDate": "2020-09-16T21:34:25Z", "message": "Reverting back to originals of pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "524175bbccdc4363daac09d5d1e575d9342581ee", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/524175bbccdc4363daac09d5d1e575d9342581ee", "committedDate": "2020-09-16T21:35:52Z", "message": "Another revert"}, "afterCommit": {"oid": "d7c5c667c49b5b5fb89dca43caff8663323c1a97", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/d7c5c667c49b5b5fb89dca43caff8663323c1a97", "committedDate": "2020-09-16T21:39:12Z", "message": "Another revert\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b70c06abe700d90de9938261f5f5d15211bbd8", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/46b70c06abe700d90de9938261f5f5d15211bbd8", "committedDate": "2020-09-18T16:26:36Z", "message": "Discarded unwanted changes to other bindings\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72f88018ac6fc43a6181f166f70fe66ae506bc67", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/72f88018ac6fc43a6181f166f70fe66ae506bc67", "committedDate": "2020-09-18T16:26:36Z", "message": "Version changed to 2.5.9-SNAPSHOT\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b155807c072185bcf5ded21a3d7a147329bf9a7", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/3b155807c072185bcf5ded21a3d7a147329bf9a7", "committedDate": "2020-09-18T16:31:51Z", "message": "Fixed errors identified by Code Analysis Tool.\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a456fb3d57af0e111f2698bcde91b23244ec06d9", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/a456fb3d57af0e111f2698bcde91b23244ec06d9", "committedDate": "2020-09-18T16:31:51Z", "message": "Removed some whitespace...\n\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c7e1cbe4eea79b937ad72ef95d3d51b5fab022", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/24c7e1cbe4eea79b937ad72ef95d3d51b5fab022", "committedDate": "2020-09-18T16:31:51Z", "message": "First changes to documentation based on @fwolter's review.\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bd6ec2913ff6701c0355e8bde68d23716b97ca3", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/8bd6ec2913ff6701c0355e8bde68d23716b97ca3", "committedDate": "2020-09-18T16:31:51Z", "message": "Changes based on @fwolter's review:\n\n- Introduction of Actions\n- Introduction of Properties\n- Combined item for system date+time\n- Combined items to set bypass period\n- Simplified structure of thing-types.xml\n- General code improvements\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a6f9e237bc559e8805d5f27a17b573f2d9df185", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/4a6f9e237bc559e8805d5f27a17b573f2d9df185", "committedDate": "2020-09-18T16:31:51Z", "message": "Small bugfix\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>\nSigned-off-by: Bernhard <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "413da91c432d5dd78b540d4fb5539ac3ff5a668a", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/413da91c432d5dd78b540d4fb5539ac3ff5a668a", "committedDate": "2020-09-18T16:31:52Z", "message": "Improved state update mechanism\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7680255e2783846ef5ea657990a7d1b88371456e", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/7680255e2783846ef5ea657990a7d1b88371456e", "committedDate": "2020-09-18T16:31:52Z", "message": "Implementation of the inputs from todays's review.\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a4db57d665624264b6be9925396e215139f837d", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/3a4db57d665624264b6be9925396e215139f837d", "committedDate": "2020-09-18T16:31:52Z", "message": "Changed thing name\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8170e6f1b5f00197030b5c558cc52609445538ed", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/8170e6f1b5f00197030b5c558cc52609445538ed", "committedDate": "2020-09-18T16:33:26Z", "message": "Changes based on @Hilbrand's review\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5415338be90283c1fe7e55ca2aa9cb1205a0208d", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/5415338be90283c1fe7e55ca2aa9cb1205a0208d", "committedDate": "2020-09-18T16:33:41Z", "message": "Example updated\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a2c7c86b281ca1786f826b48142eb6656ed87e3", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/3a2c7c86b281ca1786f826b48142eb6656ed87e3", "committedDate": "2020-09-18T16:33:42Z", "message": "Moved variables.json to resources\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "166f578a38a204454792558794fc318333fae9c6", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/166f578a38a204454792558794fc318333fae9c6", "committedDate": "2020-09-18T16:35:07Z", "message": "removed Channels.xlsx\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "498e865924f4321c7786577579e4c0a933d7ddf3", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/498e865924f4321c7786577579e4c0a933d7ddf3", "committedDate": "2020-09-18T16:36:28Z", "message": "Another stab at fixing the 2 pom.xml files...\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a05eeaf8e12a1be1ea82c9577fef3265b37724d3", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/a05eeaf8e12a1be1ea82c9577fef3265b37724d3", "committedDate": "2020-09-18T16:37:59Z", "message": "and another...\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ff4a6d19dd58396293fbe22fc9fce112db851c6", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/2ff4a6d19dd58396293fbe22fc9fce112db851c6", "committedDate": "2020-09-18T16:39:00Z", "message": "ran mvn spotless:apply, another stab at the pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4232b42762a9dbb5e4e69e26faacd962cb3f16", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/3d4232b42762a9dbb5e4e69e26faacd962cb3f16", "committedDate": "2020-09-18T16:39:56Z", "message": "Reverting back to originals of pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "649f2890233301a962349aebc0a15b349b0c25e2", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/649f2890233301a962349aebc0a15b349b0c25e2", "committedDate": "2020-09-18T16:45:19Z", "message": "feature.xml cleaned up\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b7b3330ef8917d9a21db26975eccd4285c799f5", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/3b7b3330ef8917d9a21db26975eccd4285c799f5", "committedDate": "2020-09-17T19:32:19Z", "message": "Another attempt to amend the pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}, "afterCommit": {"oid": "649f2890233301a962349aebc0a15b349b0c25e2", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/649f2890233301a962349aebc0a15b349b0c25e2", "committedDate": "2020-09-18T16:45:19Z", "message": "feature.xml cleaned up\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66afff0e275e5ae8135c42c0492226c6db76fb4c", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/66afff0e275e5ae8135c42c0492226c6db76fb4c", "committedDate": "2020-09-18T16:51:55Z", "message": "Hopefully now fixed the pom.xml files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cedb37d06103ebb07d3b7089f524766f506365cb", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/cedb37d06103ebb07d3b7089f524766f506365cb", "committedDate": "2020-09-18T17:01:32Z", "message": "Formatted feature.xml\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f31f328b1966cf44af783896c9019914531c4e3", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/2f31f328b1966cf44af783896c9019914531c4e3", "committedDate": "2020-09-18T17:41:55Z", "message": "feature.xml\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b68a7d33431802eeb9c54d77cc7eafd73647801e", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/b68a7d33431802eeb9c54d77cc7eafd73647801e", "committedDate": "2020-09-18T18:12:00Z", "message": "feature.xml again...\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b3121ee88787c30e8f80eb097463ba3125bce94", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/8b3121ee88787c30e8f80eb097463ba3125bce94", "committedDate": "2020-09-18T18:28:57Z", "message": "deactivated autocrlf\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9afb15742ea598c890000cfb0eab68aaf11e1e3e", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/9afb15742ea598c890000cfb0eab68aaf11e1e3e", "committedDate": "2020-09-18T18:28:01Z", "message": "deactivated autocrlf"}, "afterCommit": {"oid": "8b3121ee88787c30e8f80eb097463ba3125bce94", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/8b3121ee88787c30e8f80eb097463ba3125bce94", "committedDate": "2020-09-18T18:28:57Z", "message": "deactivated autocrlf\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333aee98ab6653da100393a068d14f4d05c9b05f", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/333aee98ab6653da100393a068d14f4d05c9b05f", "committedDate": "2020-09-18T18:44:30Z", "message": "feature.xml once again :(\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "419318630a3306700cb752a331c10ccba5604bb2", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/419318630a3306700cb752a331c10ccba5604bb2", "committedDate": "2020-09-18T18:43:29Z", "message": "feature.xml once again :("}, "afterCommit": {"oid": "333aee98ab6653da100393a068d14f4d05c9b05f", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/333aee98ab6653da100393a068d14f4d05c9b05f", "committedDate": "2020-09-18T18:44:30Z", "message": "feature.xml once again :(\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "141d41a2f0f8082eefea8762d9e10925383fc051", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/141d41a2f0f8082eefea8762d9e10925383fc051", "committedDate": "2020-09-19T05:10:47Z", "message": "replaced CRLF by LF in thing-types.xml\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b8d9e815e35e8bcf6470b2f8213474cc77bdcd", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/55b8d9e815e35e8bcf6470b2f8213474cc77bdcd", "committedDate": "2020-09-19T05:18:02Z", "message": "replaced CRLF by LF in binding.xml\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b383a6bb81f554bf25038bb46369d95a2b30271", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/2b383a6bb81f554bf25038bb46369d95a2b30271", "committedDate": "2020-09-19T05:24:05Z", "message": "replaced CRLF by LF in binding's pom.xml\n\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ec084e35b8d09f22a120fbff97519d1f29ef0c3", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/8ec084e35b8d09f22a120fbff97519d1f29ef0c3", "committedDate": "2020-09-19T05:36:19Z", "message": "replaced CRLF by LF in all files\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225bd3dcd64b07b92cd0fb43ff9dbd968dbf72bf", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/225bd3dcd64b07b92cd0fb43ff9dbd968dbf72bf", "committedDate": "2020-09-19T05:47:25Z", "message": "Changed feature.xml to properly reference modbus binding\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNDUzNzYx", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-461453761", "createdAt": "2020-08-05T08:34:07Z", "commit": {"oid": "9926e601672da89909cb47d225417d1e613f6728"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozNDowN1rOG7_zMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNTo1ODo1M1rOHUhciA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NDQ2NA==", "bodyText": "Update also the CODEOWNERS file with your github handle.", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465564464", "createdAt": "2020-08-05T08:34:07Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/.project", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9926e601672da89909cb47d225417d1e613f6728"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU5NTY1OQ==", "bodyText": "In addition, add the binding to bundles/pom.xml", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r465595659", "createdAt": "2020-08-05T09:28:20Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/.project", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NDQ2NA=="}, "originalCommit": {"oid": "9926e601672da89909cb47d225417d1e613f6728"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyOTc1Nw==", "bodyText": "Yeah I would keep it simple if it performs \"well enough\".", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r466229757", "createdAt": "2020-08-06T08:19:39Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzMzE2MA=="}, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMjg4Ng==", "bodyText": "I don't think it is a good idea to introduce any delays in Helios binding, after all delays are ensured by the transport bundle. Specifically, timeBetweenTransactionsMillis parameter of tcp thing is already ensuring delays between transactions.\nWhat I meant with throttling (as implemented in FMI weather) is slightly different. Instead of processing all refresh commands, we would wait for a while, e.g. 3 seconds, and combine all incoming refresh commands in this interval together and just make one operation to refresh the data.\nThe main use case with FMI is to make it more efficient to update the data when many/all channels receive the refresh command. Generic modbus binding has similar technique although implementation is quite different\nThe end result is quite different from a simple delay since we limit the amount of transactions.\nHowever, with Helios each channel corresponds to one write/read transaction, and similar optimization is not possible. I guess the best thing you can do is handle only the linked channels \ud83d\ude42", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r466602886", "createdAt": "2020-08-06T18:22:56Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzMzE2MA=="}, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzM2Mg==", "bodyText": "Good to know about the fut \ud83d\ude05", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r466603362", "createdAt": "2020-08-06T18:23:44Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzMzE2MA=="}, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI3MTk3Mw==", "bodyText": "You could consider ModbusBitUtilities utility function to parse string, perhaps it does the same thing you do here?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r491271973", "createdAt": "2020-09-19T05:26:33Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,807 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable Map<String, HeliosVariable> variableMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private final Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    private int dateFormat = -1;\r\n+    private ZonedDateTime sysDate = ZonedDateTime.now(); // initialize with local system time as a best guess\r\n+                                                         // before reading from device\r\n+\r\n+    private class BypassDate {\r\n+        // initialization to avoid issues when updating before all variables were read\r\n+        private int month = 1;\r\n+        private int day = 1;\r\n+\r\n+        public void setMonth(int month) {\r\n+            this.month = month;\r\n+        }\r\n+\r\n+        public void setDay(int day) {\r\n+            this.day = day;\r\n+        }\r\n+\r\n+        public DateTimeType toDateTimeType() {\r\n+            return new DateTimeType(ZonedDateTime.of(1900, this.month, this.day, 0, 0, 0, 0, ZoneId.of(\"UTC+00:00\")));\r\n+        }\r\n+    }\r\n+\r\n+    private @Nullable BypassDate bypassFrom, bypassTo;\r\n+\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in variableMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        try (InputStreamReader jsonFile = new InputStreamReader(\r\n+                getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE));\r\n+                BufferedReader reader = new BufferedReader(jsonFile)) {\r\n+            this.variableMap = gson.fromJson(reader, vMapType);\r\n+        } catch (IOException e) {\r\n+            this.handleError(\"Error reading variable definition file\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+        if (variableMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.variableMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.variableMap != null) && (this.config != null)) {\r\n+            this.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            HeliosEasyControlsConfiguration config = this.config;\r\n+            if (config != null) {\r\n+                this.pollingJob = scheduler.scheduleWithFixedDelay(() -> {\r\n+                    if (variableMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : variableMap.entrySet()) {\r\n+                            if (this.isProperty(entry.getKey()) || isLinked(entry.getValue().getGroupAndName())\r\n+                                    || HeliosEasyControlsBindingConstants.ALWAYS_UPDATE_VARIABLES\r\n+                                            .contains(entry.getKey())) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }, config.getRefreshInterval(), config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+            }\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.variableMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.DATE));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.TIME));\r\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH));\r\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_DAY));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH));\r\n+            } else {\r\n+                scheduler.submit(() -> readValue(channelId));\r\n+            }\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                ZonedDateTime d = ((DateTimeType) command).getZonedDateTime();\r\n+                if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\r\n+                    setSysDateTime(d);\r\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\r\n+                    this.setBypass(true, d.getDayOfMonth(), d.getMonthValue());\r\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\r\n+                    this.setBypass(false, d.getDayOfMonth(), d.getMonthValue());\r\n+                } else {\r\n+                    value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+                }\r\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\r\n+                value = command.toString();\r\n+            } else if (command instanceof QuantityType<?>) {\r\n+                // convert item's unit to the Helios device's unit\r\n+                Map<String, HeliosVariable> variableMap = this.variableMap;\r\n+                if (variableMap != null) {\r\n+                    String unit = variableMap.get(channelId).getUnit();\r\n+                    QuantityType<?> val = (QuantityType<?>) command;\r\n+                    if (unit != null) {\r\n+                        switch (unit) {\r\n+                            case HeliosVariable.UNIT_DAY:\r\n+                                val = val.toUnit(SmartHomeUnits.DAY);\r\n+                                break;\r\n+                            case HeliosVariable.UNIT_HOUR:\r\n+                                val = val.toUnit(SmartHomeUnits.HOUR);\r\n+                                break;\r\n+                            case HeliosVariable.UNIT_MIN:\r\n+                                val = val.toUnit(SmartHomeUnits.MINUTE);\r\n+                                break;\r\n+                            case HeliosVariable.UNIT_SEC:\r\n+                                val = val.toUnit(SmartHomeUnits.SECOND);\r\n+                                break;\r\n+                            case HeliosVariable.UNIT_VOLT:\r\n+                                val = val.toUnit(SmartHomeUnits.VOLT);\r\n+                                break;\r\n+                            case HeliosVariable.UNIT_PERCENT:\r\n+                                val = val.toUnit(SmartHomeUnits.PERCENT);\r\n+                                break;\r\n+                            case HeliosVariable.UNIT_PPM:\r\n+                                val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\r\n+                                break;\r\n+                            case HeliosVariable.UNIT_TEMP:\r\n+                                val = val.toUnit(SIUnits.CELSIUS);\r\n+                                break;\r\n+                        }\r\n+                        value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\r\n+                    }\r\n+                }\r\n+            }\r\n+            if (value != null) {\r\n+                final String v = value;\r\n+                scheduler.submit(() -> {\r\n+                    try {\r\n+                        writeValue(channelId, v);\r\n+                        if (variableMap != null) {\r\n+                            updateState(variableMap.get(channelId), v);\r\n+                            updateStatus(ThingStatus.ONLINE);\r\n+                        }\r\n+                    } catch (HeliosException e) {\r\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                \"Writing value \" + v + \"to channel \" + channelId + \" failed: \" + e.getMessage());\r\n+                    }\r\n+                });\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\r\n+        return Collections.singleton(HeliosEasyControlsActions.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * Checks if the provided variable name is a property\r\n+     *\r\n+     * @param variableName The variable's name\r\n+     * @return true if the variable is a property\r\n+     */\r\n+    private boolean isProperty(String variableName) {\r\n+        return HeliosEasyControlsBindingConstants.PROPERTY_NAMES.contains(variableName);\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        if (this.variableMap == null) {\r\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            return;\r\n+        } else {\r\n+            Map<String, HeliosVariable> variableMap = this.variableMap;\r\n+            if (variableMap != null) {\r\n+                HeliosVariable v = variableMap.get(variableName);\r\n+\r\n+                if (!v.hasWriteAccess()) {\r\n+                    throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+                } else if (!v.isInAllowedRange(value)) {\r\n+                    throw new HeliosException(\r\n+                            \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+                } else if (this.comms != null) {\r\n+                    // write to device\r\n+                    String payload = v.getVariableString() + \"=\" + value;\r\n+                    ModbusCommunicationInterface comms = this.comms;\r\n+                    if (comms != null) {\r\n+                        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+                        try {\r\n+                            lock.acquire();\r\n+                            comms.submitOneTimeWrite(\r\n+                                    new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                                            new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    result -> {\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.ONLINE);\r\n+                                    }, failureInfo -> {\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                \"Error writing to device: \" + failureInfo.getCause().getMessage());\r\n+                                    });\r\n+                        } catch (InterruptedException e) {\r\n+                            logger.warn(\r\n+                                    \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                } else { // comms is null\r\n+                    this.handleError(\"Modbus communication interface is null\", ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     */\r\n+    public void readValue(String variableName) {\r\n+        Map<String, HeliosVariable> variableMap = this.variableMap;\r\n+        ModbusCommunicationInterface comms = this.comms;\r\n+        if ((comms != null) && (variableMap != null)) {\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            HeliosVariable v = variableMap.get(variableName);\r\n+            if (v.hasReadAccess()) {\r\n+                try {\r\n+                    lock.acquire(); // will block until lock is available\r\n+                } catch (InterruptedException e) {\r\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                    return;\r\n+                }\r\n+                // write variable name to register\r\n+                String payload = v.getVariableString();\r\n+                comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            comms.submitOneTimePoll(\r\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                    pollResult -> {\r\n+                                        lock.release();\r\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\r\n+                                        if (registers.isPresent()) {\r\n+                                            processResponse(v, registers.get());\r\n+                                        }\r\n+                                    }, failureInfo -> {\r\n+                                        lock.release();\r\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                                \"Error reading from device: \" + failureInfo.getCause().getMessage());\r\n+                                    });\r\n+                        }, failureInfo -> {\r\n+                            lock.release();\r\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                    \"Error writing to device: \" + failureInfo.getCause().getMessage());\r\n+\r\n+                        });\r\n+            }\r\n+\r\n+        } else {\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (variableMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private void updateSysDate(DateTimeType dateTime) {\r\n+        this.updateSysDateTime(dateTime.getZonedDateTime(), true, sysDate.getOffset().getTotalSeconds() / 60 / 60);\r\n+    }\r\n+\r\n+    private void updateSysTime(DateTimeType dateTime) {\r\n+        this.updateSysDateTime(dateTime.getZonedDateTime(), false, sysDate.getOffset().getTotalSeconds() / 60 / 60);\r\n+    }\r\n+\r\n+    private void updateUtcOffset(int utcOffset) {\r\n+        this.updateSysDateTime(this.sysDate, true, sysDate.getOffset().getTotalSeconds() / 60 / 60);\r\n+    }\r\n+\r\n+    private void updateSysDateTime(ZonedDateTime dateTime, boolean updateDate, int utcOffset) {\r\n+        ZonedDateTime sysDate = this.sysDate;\r\n+        sysDate = ZonedDateTime.of(updateDate ? dateTime.getYear() : sysDate.getYear(),\r\n+                updateDate ? dateTime.getMonthValue() : sysDate.getMonthValue(),\r\n+                updateDate ? dateTime.getDayOfMonth() : sysDate.getDayOfMonth(),\r\n+                updateDate ? sysDate.getHour() : dateTime.getHour(),\r\n+                updateDate ? sysDate.getMinute() : dateTime.getMinute(),\r\n+                updateDate ? sysDate.getSecond() : dateTime.getSecond(), 0,\r\n+                ZoneId.of(\"UTC\" + (utcOffset >= 0 ? \"+\" : \"\") + String.format(\"%02d\", utcOffset) + \":00\"));\r\n+        updateState(\"general#\" + HeliosEasyControlsBindingConstants.SYS_DATE, new DateTimeType(sysDate));\r\n+        this.sysDate = sysDate;\r\n+    }\r\n+\r\n+    private void setSysDateTime(ZonedDateTime date) {\r\n+        try {\r\n+            this.writeValue(HeliosEasyControlsBindingConstants.DATE,\r\n+                    this.formatDate(HeliosEasyControlsBindingConstants.DATE, date));\r\n+            this.writeValue(HeliosEasyControlsBindingConstants.TIME,\r\n+                    date.getHour() + \":\" + date.getMinute() + \":\" + date.getSecond());\r\n+            this.writeValue(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT,\r\n+                    Integer.toString(date.getOffset().getTotalSeconds() / 60 / 60));\r\n+        } catch (HeliosException e) {\r\n+            logger.warn(\"{} encountered Exception when trying to set system date: {}\",\r\n+                    HeliosEasyControlsHandler.class.getSimpleName(), e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    protected void setSysDateTime() {\r\n+        this.setSysDateTime(ZonedDateTime.now());\r\n+    }\r\n+\r\n+    private void updateBypass(boolean from, boolean month, int val) {\r\n+        BypassDate bypassDate = from ? this.bypassFrom : this.bypassTo;\r\n+        if (bypassDate == null) {\r\n+            bypassDate = new BypassDate();\r\n+        }\r\n+        if (month) {\r\n+            bypassDate.setMonth(val);\r\n+\r\n+        } else {\r\n+            bypassDate.setDay(val);\r\n+        }\r\n+        updateState(\"unitConfig#\" + (from ? HeliosEasyControlsBindingConstants.BYPASS_FROM\r\n+                : HeliosEasyControlsBindingConstants.BYPASS_TO), bypassDate.toDateTimeType());\r\n+        if (from) {\r\n+            this.bypassFrom = bypassDate;\r\n+\r\n+        } else {\r\n+            this.bypassTo = bypassDate;\r\n+        }\r\n+    }\r\n+\r\n+    protected void setBypass(boolean from, int day, int month) {\r\n+        try {\r\n+            this.writeValue(from ? HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY\r\n+                    : HeliosEasyControlsBindingConstants.BYPASS_TO_DAY, Integer.toString(day));\r\n+            this.writeValue(from ? HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH\r\n+                    : HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH, Integer.toString(month));\r\n+        } catch (HeliosException e) {\r\n+            logger.warn(\"{} encountered Exception when trying to set bypass period: {}\",\r\n+                    HeliosEasyControlsHandler.class.getSimpleName(), e.getMessage());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param variableName the variable name\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    public String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+        if (dateTimeParts.length == 1) { // time\r\n+            return DateTimeType.valueOf(date);\r\n+        } else if (dateTimeParts.length == 3) { // date - we'll try the device's date format\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                    break;\r\n+                case 1: // mm.dd.yyyy\r\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                    break;\r\n+                case 2: // yyyy.mm.dd\r\n+                    dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                    break;\r\n+                default:\r\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                    break;\r\n+            }\r\n+            return DateTimeType.valueOf(dateTime);\r\n+        }\r\n+        // falling back to default date format (apparently using the configured format has failed)\r\n+        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+        return DateTimeType.valueOf(dateTime);\r\n+    }\r\n+\r\n+    private @Nullable QuantityType<?> toQuantityType(String value, @Nullable String unit) {\r\n+        if (unit == null) {\r\n+            return null;\r\n+        } else if (unit.equals(HeliosVariable.UNIT_DAY)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.DAY);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.HOUR);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.MINUTE);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\r\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.SECOND);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.VOLT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PERCENT);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PARTS_PER_MILLION);\r\n+        } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\r\n+            return new QuantityType<>(Float.parseFloat(value), SIUnits.CELSIUS);\r\n+        } else {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Prepares the payload for the request\r\n+     *\r\n+     * @param payload The String representation of the payload\r\n+     * @return The Register representation of the payload\r\n+     */\r\n+    private ModbusRegister[] preparePayload(String payload) {\r\n+\r\n+        // determine number of registers\r\n+        int l = (payload.length() + 1) / 2; // +1 because we need to include at least one termination symbol 0x00\r\n+        if ((payload.length() + 1) % 2 != 0) {\r\n+            l++;\r\n+        }\r\n+\r\n+        ModbusRegister reg[] = new ModbusRegister[l];\r\n+        byte[] b = payload.getBytes();\r\n+        int ch = 0;\r\n+        for (int i = 0; i < reg.length; i++) {\r\n+            byte b1 = ch < b.length ? b[ch] : (byte) 0x00; // terminate with 0x00 if at the end of the payload\r\n+            ch++;\r\n+            byte b2 = ch < b.length ? b[ch] : (byte) 0x00;\r\n+            ch++;\r\n+            reg[i] = new ModbusRegister(b1, b2);\r\n+        }\r\n+        return reg;\r\n+    }\r\n+\r\n+    /**\r\n+     * Decodes the Helios device' response and updates the channel with the actual value of the variable\r\n+     *\r\n+     * @param response The registers received from the Helios device\r\n+     * @return The value or <tt>null</tt> if an error occurred\r\n+     */\r\n+    private void processResponse(HeliosVariable v, ModbusRegisterArray registers) {\r\n+        // decode response\r\n+        byte[] b = new byte[registers.size() * 2];\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b383a6bb81f554bf25038bb46369d95a2b30271"}, "originalPosition": 688}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MTIyOQ==", "bodyText": "@bern77 did you find some goo way to resolve this?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r491281229", "createdAt": "2020-09-19T05:58:04Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r\n+                logger.error(\r\n+                        \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void readValue(String variableName) throws HeliosException {\r\n+        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (v.hasReadAccess()) {\r\n+            try {\r\n+                lock.acquire(); // will block until lock is available\r\n+            } catch (InterruptedException e) {\r\n+                logger.error(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                return;\r\n+            }\r\n+            // write variable name to register\r\n+            String payload = v.getVariableString();\r\n+            this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                    HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                    HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                        this.comms.submitOneTimePoll(\r\n+                                new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                        HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                        HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                pollResult -> {\r\n+                                    lock.release();\r\n+                                    Optional<ModbusRegisterArray> registers = (Optional<ModbusRegisterArray>) pollResult\r\n+                                            .getRegisters();\r\n+                                    if (registers.isPresent()) {\r\n+                                        processResponse(v, registers.get());\r\n+                                    }\r\n+                                }, failureCallback -> {\r\n+                                    handleError(\"{} encountered error reading from device: {}\",\r\n+                                            failureCallback.getCause().getMessage(), lock);\r\n+                                });\r\n+                    }, failureCallback -> {\r\n+                        handleError(\"{} encountered error writing to device: {}\",\r\n+                                failureCallback.getCause().getMessage(), lock);\r\n+                    });\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxODQ0OA=="}, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MTU0NA==", "bodyText": "Did you find some good resolution here @bern77 ?\nEven the date part depends on timezone as we know..", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r491281544", "createdAt": "2020-09-19T05:58:53Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    /**\r\n+     * Logger instance\r\n+     */\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    /**\r\n+     * Configuration instance\r\n+     */\r\n+    private HeliosEasyControlsConfiguration config;\r\n+\r\n+    /**\r\n+     * Used to poll the variables' status based on the configured refresh interval\r\n+     */\r\n+    private ScheduledFuture<?> pollingJob;\r\n+\r\n+    /**\r\n+     * The map holding the variable meta info by variable name\r\n+     */\r\n+    private Map<String, HeliosVariable> vMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private static ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<ModbusSlaveEndpoint, Semaphore>();\r\n+\r\n+    /**\r\n+     * Communication interface to the endpoint\r\n+     */\r\n+    private ModbusCommunicationInterface comms;\r\n+\r\n+    /**\r\n+     * The date format used by the device\r\n+     */\r\n+    private int dateFormat = -1;\r\n+\r\n+    /**\r\n+     * Constructor\r\n+     *\r\n+     * @param thing\r\n+     * @param managerRef\r\n+     */\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in vMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        try {\r\n+            Gson gson = new Gson();\r\n+            Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+            }.getType();\r\n+            this.vMap = gson.fromJson(\r\n+                    new BufferedReader(new InputStreamReader(getClass()\r\n+                            .getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE))),\r\n+                    vMapType);\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.vMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                            \"Variables definition file contains inconsistent data.\");\r\n+\r\n+                }\r\n+            }\r\n+        } catch (Exception e) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Variables definition file not found or of illegal format.\");\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if (this.comms != null) {\r\n+            HeliosEasyControlsHandler.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                try {\r\n+                    readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                    // status will be updated to ONLINE by the read callback function\r\n+                } catch (HeliosException e) {\r\n+                    logger.error(e.getMessage());\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            Runnable runnable = new Runnable() {\r\n+\r\n+                @Override\r\n+                public void run() {\r\n+                    for (Map.Entry<String, HeliosVariable> entry : vMap.entrySet()) {\r\n+                        if (isLinked(entry.getKey())\r\n+                                || (entry.getKey().equals(HeliosEasyControlsBindingConstants.DATE_FORMAT))) {\r\n+                            try {\r\n+                                readValue(entry.getKey());\r\n+                            } catch (HeliosException e) {\r\n+                                logger.error(e.getMessage());\r\n+                                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                                        e.getMessage());\r\n+                            }\r\n+                        }\r\n+                    }\r\n+                }\r\n+            };\r\n+            this.pollingJob = scheduler.scheduleAtFixedRate(runnable, config.getRefreshInterval(),\r\n+                    config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+\r\n+        } else {\r\n+            logger.error(\"Modbus endpoint is null.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getId();\r\n+        if (command instanceof RefreshType) {\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        readValue(channelId);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        } else { // write command\r\n+            String value;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\r\n+            } else { // Number or String\r\n+                value = command.toString();\r\n+            }\r\n+            scheduler.schedule(new Runnable() {\r\n+                @Override\r\n+                public void run() {\r\n+                    try {\r\n+                        writeValue(channelId, value);\r\n+                    } catch (HeliosException e) {\r\n+                        logger.error(e.getMessage());\r\n+                    }\r\n+                }\r\n+            }, 0, TimeUnit.SECONDS);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Writes a variable value to the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @param value The new value\r\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void writeValue(String variableName, String value) throws HeliosException {\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (!v.hasWriteAccess()) {\r\n+            throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\r\n+        } else if (!v.isInAllowedRange(value)) {\r\n+            throw new HeliosException(\"Value \" + value + \" is outside of allowed range of variable \" + variableName);\r\n+        } else {\r\n+            // write to device\r\n+            String payload = v.getVariableString() + \"=\" + value;\r\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+            try {\r\n+                lock.acquire();\r\n+                this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                            lock.release();\r\n+                        }, failureCallback -> {\r\n+                            handleError(\"{} encountered error writing to device: {}\",\r\n+                                    failureCallback.getCause().getMessage(), lock);\r\n+                        });\r\n+                // ensure the openHAB item is updated with the device's actual value\r\n+                scheduler.schedule(new Runnable() {\r\n+                    @Override\r\n+                    public void run() {\r\n+                        try {\r\n+                            readValue(variableName);\r\n+                        } catch (HeliosException e) {\r\n+                            logger.error(\r\n+                                    \"{} encountered HeliosException when trying to read variable {} from the device after updating it: {}\",\r\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                        }\r\n+                    }\r\n+                }, 1, TimeUnit.SECONDS);\r\n+            } catch (Exception e) {\r\n+                logger.error(\r\n+                        \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Read a variable from the Helios device\r\n+     *\r\n+     * @param variableName The variable name\r\n+     * @return The value\r\n+     * @throws HeliosException\r\n+     */\r\n+    public void readValue(String variableName) throws HeliosException {\r\n+        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\r\n+        HeliosVariable v = this.vMap.get(variableName);\r\n+        if (v.hasReadAccess()) {\r\n+            try {\r\n+                lock.acquire(); // will block until lock is available\r\n+            } catch (InterruptedException e) {\r\n+                logger.error(\"{} encountered Exception when trying to read variable {} from the device: {}\",\r\n+                        HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\r\n+                return;\r\n+            }\r\n+            // write variable name to register\r\n+            String payload = v.getVariableString();\r\n+            this.comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\r\n+                    HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\r\n+                    new ModbusRegisterArray(preparePayload(payload)), true,\r\n+                    HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\r\n+                        this.comms.submitOneTimePoll(\r\n+                                new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\r\n+                                        ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\r\n+                                        HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\r\n+                                        HeliosEasyControlsBindingConstants.MAX_TRIES),\r\n+                                pollResult -> {\r\n+                                    lock.release();\r\n+                                    Optional<ModbusRegisterArray> registers = (Optional<ModbusRegisterArray>) pollResult\r\n+                                            .getRegisters();\r\n+                                    if (registers.isPresent()) {\r\n+                                        processResponse(v, registers.get());\r\n+                                    }\r\n+                                }, failureCallback -> {\r\n+                                    handleError(\"{} encountered error reading from device: {}\",\r\n+                                            failureCallback.getCause().getMessage(), lock);\r\n+                                });\r\n+                    }, failureCallback -> {\r\n+                        handleError(\"{} encountered error writing to device: {}\",\r\n+                                failureCallback.getCause().getMessage(), lock);\r\n+                    });\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Formats the provided date to a string in the device's configured date format\r\n+     *\r\n+     * @param date the date to be formatted\r\n+     * @return a string in the device's configured date format\r\n+     */\r\n+    private String formatDate(String variableName, ZonedDateTime date) {\r\n+        String y = Integer.toString(date.getYear());\r\n+        String m = Integer.toString(date.getMonthValue());\r\n+        if (m.length() == 1) {\r\n+            m = \"0\" + m;\r\n+        }\r\n+        String d = Integer.toString(date.getDayOfMonth());\r\n+        if (d.length() == 1) {\r\n+            d = \"0\" + d;\r\n+        }\r\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\r\n+            return d + \".\" + m + \".\" + y;\r\n+        } else {\r\n+            switch (this.dateFormat) {\r\n+                case 0: // dd.mm.yyyy\r\n+                    return d + \".\" + m + \".\" + y;\r\n+                case 1: // mm.dd.yyyy\r\n+                    return m + \".\" + d + \".\" + y;\r\n+                case 2: // yyyy.mm.dd\r\n+                    return y + \".\" + m + \".\" + d;\r\n+                default:\r\n+                    return d + \".\" + m + \".\" + y;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\r\n+     *\r\n+     * @param date The date string read from the device\r\n+     * @return A DateTimeType object representing the date or time specified\r\n+     */\r\n+    private DateTimeType toDateTime(String date) {\r\n+        String[] dateTimeParts = null;\r\n+        String dateTime = date;\r\n+        try { // date\r\n+            dateTimeParts = date.split(\"\\\\.\"); // try to split date components\r\n+            if (dateTimeParts.length == 1) { // time\r\n+                return DateTimeType.valueOf(date);\r\n+            } else { // date - we'll try the device's date format\r\n+                switch (this.dateFormat) {\r\n+                    case 0: // dd.mm.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                    case 1: // mm.dd.yyyy\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\r\n+                        break;\r\n+                    case 2: // yyyy.mm.dd\r\n+                        dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\r\n+                        break;\r\n+                    default:\r\n+                        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\r\n+                        break;\r\n+                }\r\n+                return DateTimeType.valueOf(dateTime);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyMjU1NA=="}, "originalCommit": {"oid": "73d8f576a176edc1b7c8f90549169819e7d5e410"}, "originalPosition": 446}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTgwMTAx", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-491980101", "createdAt": "2020-09-19T07:45:39Z", "commit": {"oid": "2b383a6bb81f554bf25038bb46369d95a2b30271"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNzo0NTozOVrOHUjmTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNzo0NTozOVrOHUjmTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMxNjgxNA==", "bodyText": "Should you convert ZonedDateTime to helios system time zone before extracting dayOfMonth etc?", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r491316814", "createdAt": "2020-09-19T07:45:39Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,807 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.IOException;\r\n+import java.io.InputStreamReader;\r\n+import java.lang.reflect.Type;\r\n+import java.nio.charset.StandardCharsets;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Arrays;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Map;\r\n+import java.util.Optional;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.Semaphore;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.library.types.DecimalType;\r\n+import org.eclipse.smarthome.core.library.types.OnOffType;\r\n+import org.eclipse.smarthome.core.library.types.QuantityType;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\r\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Channel;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\r\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\r\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\r\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.ModbusRegister;\r\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\r\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\r\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.reflect.TypeToken;\r\n+\r\n+/**\r\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\r\n+ * sent to one of the channels.\r\n+ *\r\n+ * @author Bernhard Bauer - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\r\n+\r\n+    private @Nullable HeliosEasyControlsConfiguration config;\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable Map<String, HeliosVariable> variableMap;\r\n+\r\n+    /**\r\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\r\n+     * another transaction\r\n+     */\r\n+    private final Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    private @Nullable ModbusCommunicationInterface comms;\r\n+\r\n+    private int dateFormat = -1;\r\n+    private ZonedDateTime sysDate = ZonedDateTime.now(); // initialize with local system time as a best guess\r\n+                                                         // before reading from device\r\n+\r\n+    private class BypassDate {\r\n+        // initialization to avoid issues when updating before all variables were read\r\n+        private int month = 1;\r\n+        private int day = 1;\r\n+\r\n+        public void setMonth(int month) {\r\n+            this.month = month;\r\n+        }\r\n+\r\n+        public void setDay(int day) {\r\n+            this.day = day;\r\n+        }\r\n+\r\n+        public DateTimeType toDateTimeType() {\r\n+            return new DateTimeType(ZonedDateTime.of(1900, this.month, this.day, 0, 0, 0, 0, ZoneId.of(\"UTC+00:00\")));\r\n+        }\r\n+    }\r\n+\r\n+    private @Nullable BypassDate bypassFrom, bypassTo;\r\n+\r\n+    public HeliosEasyControlsHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    /**\r\n+     * Reads variable definitions from JSON file and store them in variableMap\r\n+     */\r\n+    private void readVariableDefinition() {\r\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\r\n+        }.getType();\r\n+        try (InputStreamReader jsonFile = new InputStreamReader(\r\n+                getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE));\r\n+                BufferedReader reader = new BufferedReader(jsonFile)) {\r\n+            this.variableMap = gson.fromJson(reader, vMapType);\r\n+        } catch (IOException e) {\r\n+            this.handleError(\"Error reading variable definition file\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+        if (variableMap != null) {\r\n+            // add the name to the variable itself\r\n+            for (Map.Entry<String, HeliosVariable> entry : this.variableMap.entrySet()) {\r\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\r\n+                                                          // HeliosVariable object\r\n+                if (!entry.getValue().isOk()) {\r\n+                    this.handleError(\"Variables definition file contains inconsistent data\",\r\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                }\r\n+            }\r\n+        } else {\r\n+            this.handleError(\"Variables definition file not found or of illegal format\",\r\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the endpoint handler from the bridge this handler is connected to\r\n+     * Checks that we're connected to the right type of bridge\r\n+     *\r\n+     * @return the endpoint handler or null if the bridge does not exist\r\n+     */\r\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge == null) {\r\n+            logger.debug(\"Bridge is null\");\r\n+            return null;\r\n+        }\r\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\r\n+            logger.debug(\"Bridge is not online\");\r\n+            return null;\r\n+        }\r\n+\r\n+        ThingHandler handler = bridge.getHandler();\r\n+        if (handler == null) {\r\n+            logger.debug(\"Bridge handler is null\");\r\n+            return null;\r\n+        }\r\n+\r\n+        if (handler instanceof ModbusEndpointThingHandler) {\r\n+            return (ModbusEndpointThingHandler) handler;\r\n+        } else {\r\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get a reference to the modbus endpoint\r\n+     */\r\n+    private void connectEndpoint() {\r\n+        if (this.comms != null) {\r\n+            return;\r\n+        }\r\n+\r\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\r\n+        if (slaveEndpointThingHandler == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' is offline\", label));\r\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\r\n+            return;\r\n+        }\r\n+\r\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\r\n+\r\n+        if (comms == null) {\r\n+            @SuppressWarnings(\"null\")\r\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\r\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\r\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\r\n+            return;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\r\n+        this.readVariableDefinition();\r\n+        this.connectEndpoint();\r\n+        if ((this.comms != null) && (this.variableMap != null) && (this.config != null)) {\r\n+            this.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\r\n+            updateStatus(ThingStatus.UNKNOWN);\r\n+\r\n+            // background initialization\r\n+            scheduler.execute(() -> {\r\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\r\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\r\n+            });\r\n+\r\n+            // poll for status updates regularly\r\n+            HeliosEasyControlsConfiguration config = this.config;\r\n+            if (config != null) {\r\n+                this.pollingJob = scheduler.scheduleWithFixedDelay(() -> {\r\n+                    if (variableMap != null) {\r\n+                        for (Map.Entry<String, HeliosVariable> entry : variableMap.entrySet()) {\r\n+                            if (this.isProperty(entry.getKey()) || isLinked(entry.getValue().getGroupAndName())\r\n+                                    || HeliosEasyControlsBindingConstants.ALWAYS_UPDATE_VARIABLES\r\n+                                            .contains(entry.getKey())) {\r\n+                                readValue(entry.getKey());\r\n+                            }\r\n+                        }\r\n+                    } else {\r\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+                    }\r\n+                }, config.getRefreshInterval(), config.getRefreshInterval(), TimeUnit.MILLISECONDS);\r\n+            }\r\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\r\n+            if (this.comms == null) {\r\n+                this.handleError(\"Modbus communication interface is unavailable\",\r\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\r\n+            }\r\n+            if (this.variableMap == null) {\r\n+                this.handleError(\"Variable definition is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+            if (this.config == null) {\r\n+                this.handleError(\"Binding configuration is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        if (this.pollingJob != null) {\r\n+            this.pollingJob.cancel(true);\r\n+        }\r\n+        this.comms = null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        String channelId = channelUID.getIdWithoutGroup();\r\n+        if (command instanceof RefreshType) {\r\n+            if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.DATE));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.TIME));\r\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH));\r\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_DAY));\r\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH));\r\n+            } else {\r\n+                scheduler.submit(() -> readValue(channelId));\r\n+            }\r\n+        } else { // write command\r\n+            String value = null;\r\n+            if (command instanceof OnOffType) {\r\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\r\n+            } else if (command instanceof DateTimeType) {\r\n+                ZonedDateTime d = ((DateTimeType) command).getZonedDateTime();\r\n+                if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\r\n+                    setSysDateTime(d);\r\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\r\n+                    this.setBypass(true, d.getDayOfMonth(), d.getMonthValue());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b383a6bb81f554bf25038bb46369d95a2b30271"}, "originalPosition": 291}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTgwNzA0", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-491980704", "createdAt": "2020-09-19T07:57:31Z", "commit": {"oid": "225bd3dcd64b07b92cd0fb43ff9dbd968dbf72bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNzo1NzozMlrOHUj0UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNzo1NzozMlrOHUj0UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyMDQwMA==", "bodyText": "Would this work?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // decode response\n          \n          \n            \n                    byte[] b = new byte[registers.size() * 2];\n          \n          \n            \n                    int actSize = 0; // track the actual size of the usable array (excluding any 0x00\n          \n          \n            \n                                     // characters)\n          \n          \n            \n                    for (int i = 0; i < registers.size(); i++) {\n          \n          \n            \n                        byte[] reg = registers.getRegister(i).getBytes();\n          \n          \n            \n                        if (reg.length == 2) { // only add to the array if it's a usable character\n          \n          \n            \n                            if (reg[0] != 0x00) {\n          \n          \n            \n                                b[actSize++] = reg[0];\n          \n          \n            \n                            }\n          \n          \n            \n                            if (reg[1] != 0x00) {\n          \n          \n            \n                                b[actSize++] = reg[1];\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    b = Arrays.copyOf(b, actSize); // before creating a string of it the array needs to be\n          \n          \n            \n                                                   // truncated\n          \n          \n            \n                    String r = new String(b, StandardCharsets.US_ASCII);\n          \n          \n            \n                    String r = ModbusBitUtilities\n          \n          \n            \n                            .extractStringFromRegisters(registers, 0, registers.size() * 2, StandardCharsets.US_ASCII).toString();", "url": "https://github.com/openhab/openhab-addons/pull/8250#discussion_r491320400", "createdAt": "2020-09-19T07:57:32Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus.helioseasycontrols/src/main/java/org/openhab/binding/modbus/helioseasycontrols/internal/HeliosEasyControlsHandler.java", "diffHunk": "@@ -0,0 +1,807 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.helioseasycontrols.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.modbus.handler.ModbusEndpointThingHandler;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusReadFunctionCode;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusRegister;\n+import org.openhab.io.transport.modbus.ModbusRegisterArray;\n+import org.openhab.io.transport.modbus.ModbusWriteRegisterRequestBlueprint;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * The {@link HeliosEasyControlsHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernhard Bauer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HeliosEasyControlsHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(HeliosEasyControlsHandler.class);\n+\n+    private @Nullable HeliosEasyControlsConfiguration config;\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+\n+    private @Nullable Map<String, HeliosVariable> variableMap;\n+\n+    /**\n+     * This flag is used to ensure read requests (consisting of a write and subsequent read) are not influenced by\n+     * another transaction\n+     */\n+    private final Map<ModbusSlaveEndpoint, Semaphore> transactionLocks = new ConcurrentHashMap<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ModbusCommunicationInterface comms;\n+\n+    private int dateFormat = -1;\n+    private ZonedDateTime sysDate = ZonedDateTime.now(); // initialize with local system time as a best guess\n+                                                         // before reading from device\n+\n+    private class BypassDate {\n+        // initialization to avoid issues when updating before all variables were read\n+        private int month = 1;\n+        private int day = 1;\n+\n+        public void setMonth(int month) {\n+            this.month = month;\n+        }\n+\n+        public void setDay(int day) {\n+            this.day = day;\n+        }\n+\n+        public DateTimeType toDateTimeType() {\n+            return new DateTimeType(ZonedDateTime.of(1900, this.month, this.day, 0, 0, 0, 0, ZoneId.of(\"UTC+00:00\")));\n+        }\n+    }\n+\n+    private @Nullable BypassDate bypassFrom, bypassTo;\n+\n+    public HeliosEasyControlsHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Reads variable definitions from JSON file and store them in variableMap\n+     */\n+    private void readVariableDefinition() {\n+        Type vMapType = new TypeToken<Map<String, HeliosVariable>>() {\n+        }.getType();\n+        try (InputStreamReader jsonFile = new InputStreamReader(\n+                getClass().getResourceAsStream(HeliosEasyControlsBindingConstants.VARIABLES_DEFINITION_FILE));\n+                BufferedReader reader = new BufferedReader(jsonFile)) {\n+            this.variableMap = gson.fromJson(reader, vMapType);\n+        } catch (IOException e) {\n+            this.handleError(\"Error reading variable definition file\", ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+        if (variableMap != null) {\n+            // add the name to the variable itself\n+            for (Map.Entry<String, HeliosVariable> entry : this.variableMap.entrySet()) {\n+                entry.getValue().setName(entry.getKey()); // workaround to set the variable name inside the\n+                                                          // HeliosVariable object\n+                if (!entry.getValue().isOk()) {\n+                    this.handleError(\"Variables definition file contains inconsistent data\",\n+                            ThingStatusDetail.CONFIGURATION_ERROR);\n+                }\n+            }\n+        } else {\n+            this.handleError(\"Variables definition file not found or of illegal format\",\n+                    ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Get the endpoint handler from the bridge this handler is connected to\n+     * Checks that we're connected to the right type of bridge\n+     *\n+     * @return the endpoint handler or null if the bridge does not exist\n+     */\n+    private @Nullable ModbusEndpointThingHandler getEndpointThingHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge == null) {\n+            logger.debug(\"Bridge is null\");\n+            return null;\n+        }\n+        if (bridge.getStatus() != ThingStatus.ONLINE) {\n+            logger.debug(\"Bridge is not online\");\n+            return null;\n+        }\n+\n+        ThingHandler handler = bridge.getHandler();\n+        if (handler == null) {\n+            logger.debug(\"Bridge handler is null\");\n+            return null;\n+        }\n+\n+        if (handler instanceof ModbusEndpointThingHandler) {\n+            return (ModbusEndpointThingHandler) handler;\n+        } else {\n+            logger.debug(\"Unexpected bridge handler: {}\", handler);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get a reference to the modbus endpoint\n+     */\n+    private void connectEndpoint() {\n+        if (this.comms != null) {\n+            return;\n+        }\n+\n+        ModbusEndpointThingHandler slaveEndpointThingHandler = getEndpointThingHandler();\n+        if (slaveEndpointThingHandler == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' is offline\", label));\n+            logger.debug(\"No bridge handler available -- aborting init for {}\", label);\n+            return;\n+        }\n+\n+        comms = slaveEndpointThingHandler.getCommunicationInterface();\n+\n+        if (comms == null) {\n+            @SuppressWarnings(\"null\")\n+            String label = Optional.ofNullable(getBridge()).map(b -> b.getLabel()).orElse(\"<null>\");\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE,\n+                    String.format(\"Bridge '%s' not completely initialized\", label));\n+            logger.debug(\"Bridge not initialized fully (no endpoint) -- aborting init for {}\", this);\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.config = getConfigAs(HeliosEasyControlsConfiguration.class);\n+        this.readVariableDefinition();\n+        this.connectEndpoint();\n+        if ((this.comms != null) && (this.variableMap != null) && (this.config != null)) {\n+            this.transactionLocks.putIfAbsent(this.comms.getEndpoint(), new Semaphore(1, true));\n+            updateStatus(ThingStatus.UNKNOWN);\n+\n+            // background initialization\n+            scheduler.execute(() -> {\n+                readValue(HeliosEasyControlsBindingConstants.DATE_FORMAT);\n+                // status will be updated to ONLINE by the read callback function (via processResponse)\n+            });\n+\n+            // poll for status updates regularly\n+            HeliosEasyControlsConfiguration config = this.config;\n+            if (config != null) {\n+                this.pollingJob = scheduler.scheduleWithFixedDelay(() -> {\n+                    if (variableMap != null) {\n+                        for (Map.Entry<String, HeliosVariable> entry : variableMap.entrySet()) {\n+                            if (this.isProperty(entry.getKey()) || isLinked(entry.getValue().getGroupAndName())\n+                                    || HeliosEasyControlsBindingConstants.ALWAYS_UPDATE_VARIABLES\n+                                            .contains(entry.getKey())) {\n+                                readValue(entry.getKey());\n+                            }\n+                        }\n+                    } else {\n+                        handleError(\"Variable definition is null\", ThingStatusDetail.CONFIGURATION_ERROR);\n+                    }\n+                }, config.getRefreshInterval(), config.getRefreshInterval(), TimeUnit.MILLISECONDS);\n+            }\n+        } else { // at least one null assertion has failed, let's log the problem and update the thing status\n+            if (this.comms == null) {\n+                this.handleError(\"Modbus communication interface is unavailable\",\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            if (this.variableMap == null) {\n+                this.handleError(\"Variable definition is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\n+            }\n+            if (this.config == null) {\n+                this.handleError(\"Binding configuration is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (this.pollingJob != null) {\n+            this.pollingJob.cancel(true);\n+        }\n+        this.comms = null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getIdWithoutGroup();\n+        if (command instanceof RefreshType) {\n+            if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.DATE));\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.TIME));\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY));\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH));\n+            } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_DAY));\n+                scheduler.submit(() -> readValue(HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH));\n+            } else {\n+                scheduler.submit(() -> readValue(channelId));\n+            }\n+        } else { // write command\n+            String value = null;\n+            if (command instanceof OnOffType) {\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+            } else if (command instanceof DateTimeType) {\n+                ZonedDateTime d = ((DateTimeType) command).getZonedDateTime();\n+                if (channelId.equals(HeliosEasyControlsBindingConstants.SYS_DATE)) {\n+                    setSysDateTime(d);\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_FROM)) {\n+                    this.setBypass(true, d.getDayOfMonth(), d.getMonthValue());\n+                } else if (channelId.equals(HeliosEasyControlsBindingConstants.BYPASS_TO)) {\n+                    this.setBypass(false, d.getDayOfMonth(), d.getMonthValue());\n+                } else {\n+                    value = formatDate(channelId, ((DateTimeType) command).getZonedDateTime());\n+                }\n+            } else if ((command instanceof DecimalType) || (command instanceof StringType)) {\n+                value = command.toString();\n+            } else if (command instanceof QuantityType<?>) {\n+                // convert item's unit to the Helios device's unit\n+                Map<String, HeliosVariable> variableMap = this.variableMap;\n+                if (variableMap != null) {\n+                    String unit = variableMap.get(channelId).getUnit();\n+                    QuantityType<?> val = (QuantityType<?>) command;\n+                    if (unit != null) {\n+                        switch (unit) {\n+                            case HeliosVariable.UNIT_DAY:\n+                                val = val.toUnit(SmartHomeUnits.DAY);\n+                                break;\n+                            case HeliosVariable.UNIT_HOUR:\n+                                val = val.toUnit(SmartHomeUnits.HOUR);\n+                                break;\n+                            case HeliosVariable.UNIT_MIN:\n+                                val = val.toUnit(SmartHomeUnits.MINUTE);\n+                                break;\n+                            case HeliosVariable.UNIT_SEC:\n+                                val = val.toUnit(SmartHomeUnits.SECOND);\n+                                break;\n+                            case HeliosVariable.UNIT_VOLT:\n+                                val = val.toUnit(SmartHomeUnits.VOLT);\n+                                break;\n+                            case HeliosVariable.UNIT_PERCENT:\n+                                val = val.toUnit(SmartHomeUnits.PERCENT);\n+                                break;\n+                            case HeliosVariable.UNIT_PPM:\n+                                val = val.toUnit(SmartHomeUnits.PARTS_PER_MILLION);\n+                                break;\n+                            case HeliosVariable.UNIT_TEMP:\n+                                val = val.toUnit(SIUnits.CELSIUS);\n+                                break;\n+                        }\n+                        value = val != null ? String.valueOf(val.doubleValue()) : null; // ignore the UoM\n+                    }\n+                }\n+            }\n+            if (value != null) {\n+                final String v = value;\n+                scheduler.submit(() -> {\n+                    try {\n+                        writeValue(channelId, v);\n+                        if (variableMap != null) {\n+                            updateState(variableMap.get(channelId), v);\n+                            updateStatus(ThingStatus.ONLINE);\n+                        }\n+                    } catch (HeliosException e) {\n+                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                \"Writing value \" + v + \"to channel \" + channelId + \" failed: \" + e.getMessage());\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(HeliosEasyControlsActions.class);\n+    }\n+\n+    /**\n+     * Checks if the provided variable name is a property\n+     *\n+     * @param variableName The variable's name\n+     * @return true if the variable is a property\n+     */\n+    private boolean isProperty(String variableName) {\n+        return HeliosEasyControlsBindingConstants.PROPERTY_NAMES.contains(variableName);\n+    }\n+\n+    /**\n+     * Writes a variable value to the Helios device\n+     *\n+     * @param variableName The variable name\n+     * @param value The new value\n+     * @return The value if the transaction succeeded, <tt>null</tt> otherwise\n+     * @throws HeliosException Thrown if the variable is read-only or the provided value is out of range\n+     */\n+    public void writeValue(String variableName, String value) throws HeliosException {\n+        if (this.variableMap == null) {\n+            this.handleError(\"Variable definition is unavailable.\", ThingStatusDetail.CONFIGURATION_ERROR);\n+            return;\n+        } else {\n+            Map<String, HeliosVariable> variableMap = this.variableMap;\n+            if (variableMap != null) {\n+                HeliosVariable v = variableMap.get(variableName);\n+\n+                if (!v.hasWriteAccess()) {\n+                    throw new HeliosException(\"Variable \" + variableName + \" is read-only\");\n+                } else if (!v.isInAllowedRange(value)) {\n+                    throw new HeliosException(\n+                            \"Value \" + value + \" is outside of allowed range of variable \" + variableName);\n+                } else if (this.comms != null) {\n+                    // write to device\n+                    String payload = v.getVariableString() + \"=\" + value;\n+                    ModbusCommunicationInterface comms = this.comms;\n+                    if (comms != null) {\n+                        final Semaphore lock = transactionLocks.get(comms.getEndpoint());\n+                        try {\n+                            lock.acquire();\n+                            comms.submitOneTimeWrite(\n+                                    new ModbusWriteRegisterRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS,\n+                                            new ModbusRegisterArray(preparePayload(payload)), true,\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\n+                                    result -> {\n+                                        lock.release();\n+                                        updateStatus(ThingStatus.ONLINE);\n+                                    }, failureInfo -> {\n+                                        lock.release();\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                                \"Error writing to device: \" + failureInfo.getCause().getMessage());\n+                                    });\n+                        } catch (InterruptedException e) {\n+                            logger.warn(\n+                                    \"{} encountered Exception when trying to lock Semaphore for writing variable {} to the device: {}\",\n+                                    HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\n+                        }\n+                    }\n+                } else { // comms is null\n+                    this.handleError(\"Modbus communication interface is null\", ThingStatusDetail.COMMUNICATION_ERROR);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Read a variable from the Helios device\n+     *\n+     * @param variableName The variable name\n+     * @return The value\n+     */\n+    public void readValue(String variableName) {\n+        Map<String, HeliosVariable> variableMap = this.variableMap;\n+        ModbusCommunicationInterface comms = this.comms;\n+        if ((comms != null) && (variableMap != null)) {\n+            final Semaphore lock = transactionLocks.get(comms.getEndpoint());\n+            HeliosVariable v = variableMap.get(variableName);\n+            if (v.hasReadAccess()) {\n+                try {\n+                    lock.acquire(); // will block until lock is available\n+                } catch (InterruptedException e) {\n+                    logger.warn(\"{} encountered Exception when trying to read variable {} from the device: {}\",\n+                            HeliosEasyControlsHandler.class.getSimpleName(), variableName, e.getMessage());\n+                    return;\n+                }\n+                // write variable name to register\n+                String payload = v.getVariableString();\n+                comms.submitOneTimeWrite(new ModbusWriteRegisterRequestBlueprint(\n+                        HeliosEasyControlsBindingConstants.UNIT_ID, HeliosEasyControlsBindingConstants.START_ADDRESS,\n+                        new ModbusRegisterArray(preparePayload(payload)), true,\n+                        HeliosEasyControlsBindingConstants.MAX_TRIES), result -> {\n+                            comms.submitOneTimePoll(\n+                                    new ModbusReadRequestBlueprint(HeliosEasyControlsBindingConstants.UNIT_ID,\n+                                            ModbusReadFunctionCode.READ_MULTIPLE_REGISTERS,\n+                                            HeliosEasyControlsBindingConstants.START_ADDRESS, v.getCount(),\n+                                            HeliosEasyControlsBindingConstants.MAX_TRIES),\n+                                    pollResult -> {\n+                                        lock.release();\n+                                        Optional<ModbusRegisterArray> registers = pollResult.getRegisters();\n+                                        if (registers.isPresent()) {\n+                                            processResponse(v, registers.get());\n+                                        }\n+                                    }, failureInfo -> {\n+                                        lock.release();\n+                                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                                \"Error reading from device: \" + failureInfo.getCause().getMessage());\n+                                    });\n+                        }, failureInfo -> {\n+                            lock.release();\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Error writing to device: \" + failureInfo.getCause().getMessage());\n+\n+                        });\n+            }\n+\n+        } else {\n+            if (this.comms == null) {\n+                this.handleError(\"Modbus communication interface is unavailable\",\n+                        ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+            if (variableMap == null) {\n+                this.handleError(\"Variable definition is unavailable\", ThingStatusDetail.CONFIGURATION_ERROR);\n+            }\n+        }\n+    }\n+\n+    private void updateSysDate(DateTimeType dateTime) {\n+        this.updateSysDateTime(dateTime.getZonedDateTime(), true, sysDate.getOffset().getTotalSeconds() / 60 / 60);\n+    }\n+\n+    private void updateSysTime(DateTimeType dateTime) {\n+        this.updateSysDateTime(dateTime.getZonedDateTime(), false, sysDate.getOffset().getTotalSeconds() / 60 / 60);\n+    }\n+\n+    private void updateUtcOffset(int utcOffset) {\n+        this.updateSysDateTime(this.sysDate, true, sysDate.getOffset().getTotalSeconds() / 60 / 60);\n+    }\n+\n+    private void updateSysDateTime(ZonedDateTime dateTime, boolean updateDate, int utcOffset) {\n+        ZonedDateTime sysDate = this.sysDate;\n+        sysDate = ZonedDateTime.of(updateDate ? dateTime.getYear() : sysDate.getYear(),\n+                updateDate ? dateTime.getMonthValue() : sysDate.getMonthValue(),\n+                updateDate ? dateTime.getDayOfMonth() : sysDate.getDayOfMonth(),\n+                updateDate ? sysDate.getHour() : dateTime.getHour(),\n+                updateDate ? sysDate.getMinute() : dateTime.getMinute(),\n+                updateDate ? sysDate.getSecond() : dateTime.getSecond(), 0,\n+                ZoneId.of(\"UTC\" + (utcOffset >= 0 ? \"+\" : \"\") + String.format(\"%02d\", utcOffset) + \":00\"));\n+        updateState(\"general#\" + HeliosEasyControlsBindingConstants.SYS_DATE, new DateTimeType(sysDate));\n+        this.sysDate = sysDate;\n+    }\n+\n+    private void setSysDateTime(ZonedDateTime date) {\n+        try {\n+            this.writeValue(HeliosEasyControlsBindingConstants.DATE,\n+                    this.formatDate(HeliosEasyControlsBindingConstants.DATE, date));\n+            this.writeValue(HeliosEasyControlsBindingConstants.TIME,\n+                    date.getHour() + \":\" + date.getMinute() + \":\" + date.getSecond());\n+            this.writeValue(HeliosEasyControlsBindingConstants.TIME_ZONE_DIFFERENCE_TO_GMT,\n+                    Integer.toString(date.getOffset().getTotalSeconds() / 60 / 60));\n+        } catch (HeliosException e) {\n+            logger.warn(\"{} encountered Exception when trying to set system date: {}\",\n+                    HeliosEasyControlsHandler.class.getSimpleName(), e.getMessage());\n+        }\n+    }\n+\n+    protected void setSysDateTime() {\n+        this.setSysDateTime(ZonedDateTime.now());\n+    }\n+\n+    private void updateBypass(boolean from, boolean month, int val) {\n+        BypassDate bypassDate = from ? this.bypassFrom : this.bypassTo;\n+        if (bypassDate == null) {\n+            bypassDate = new BypassDate();\n+        }\n+        if (month) {\n+            bypassDate.setMonth(val);\n+\n+        } else {\n+            bypassDate.setDay(val);\n+        }\n+        updateState(\"unitConfig#\" + (from ? HeliosEasyControlsBindingConstants.BYPASS_FROM\n+                : HeliosEasyControlsBindingConstants.BYPASS_TO), bypassDate.toDateTimeType());\n+        if (from) {\n+            this.bypassFrom = bypassDate;\n+\n+        } else {\n+            this.bypassTo = bypassDate;\n+        }\n+    }\n+\n+    protected void setBypass(boolean from, int day, int month) {\n+        try {\n+            this.writeValue(from ? HeliosEasyControlsBindingConstants.BYPASS_FROM_DAY\n+                    : HeliosEasyControlsBindingConstants.BYPASS_TO_DAY, Integer.toString(day));\n+            this.writeValue(from ? HeliosEasyControlsBindingConstants.BYPASS_FROM_MONTH\n+                    : HeliosEasyControlsBindingConstants.BYPASS_TO_MONTH, Integer.toString(month));\n+        } catch (HeliosException e) {\n+            logger.warn(\"{} encountered Exception when trying to set bypass period: {}\",\n+                    HeliosEasyControlsHandler.class.getSimpleName(), e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Formats the provided date to a string in the device's configured date format\n+     *\n+     * @param variableName the variable name\n+     * @param date the date to be formatted\n+     * @return a string in the device's configured date format\n+     */\n+    public String formatDate(String variableName, ZonedDateTime date) {\n+        String y = Integer.toString(date.getYear());\n+        String m = Integer.toString(date.getMonthValue());\n+        if (m.length() == 1) {\n+            m = \"0\" + m;\n+        }\n+        String d = Integer.toString(date.getDayOfMonth());\n+        if (d.length() == 1) {\n+            d = \"0\" + d;\n+        }\n+        if (variableName.equals(HeliosEasyControlsBindingConstants.DATE)) { // fixed format for writing the system date\n+            return d + \".\" + m + \".\" + y;\n+        } else {\n+            switch (this.dateFormat) {\n+                case 0: // dd.mm.yyyy\n+                    return d + \".\" + m + \".\" + y;\n+                case 1: // mm.dd.yyyy\n+                    return m + \".\" + d + \".\" + y;\n+                case 2: // yyyy.mm.dd\n+                    return y + \".\" + m + \".\" + d;\n+                default:\n+                    return d + \".\" + m + \".\" + y;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns a DateTimeType object based on the provided String and the device's configured date format\n+     *\n+     * @param date The date string read from the device\n+     * @return A DateTimeType object representing the date or time specified\n+     */\n+    private DateTimeType toDateTime(String date) {\n+        String[] dateTimeParts = null;\n+        String dateTime = date;\n+        dateTimeParts = date.split(\"\\\\.\"); // try to split date components\n+        if (dateTimeParts.length == 1) { // time\n+            return DateTimeType.valueOf(date);\n+        } else if (dateTimeParts.length == 3) { // date - we'll try the device's date format\n+            switch (this.dateFormat) {\n+                case 0: // dd.mm.yyyy\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\n+                    break;\n+                case 1: // mm.dd.yyyy\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[0] + \"-\" + dateTimeParts[1];\n+                    break;\n+                case 2: // yyyy.mm.dd\n+                    dateTime = dateTimeParts[0] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[2];\n+                    break;\n+                default:\n+                    dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\n+                    break;\n+            }\n+            return DateTimeType.valueOf(dateTime);\n+        }\n+        // falling back to default date format (apparently using the configured format has failed)\n+        dateTime = dateTimeParts[2] + \"-\" + dateTimeParts[1] + \"-\" + dateTimeParts[0];\n+        return DateTimeType.valueOf(dateTime);\n+    }\n+\n+    private @Nullable QuantityType<?> toQuantityType(String value, @Nullable String unit) {\n+        if (unit == null) {\n+            return null;\n+        } else if (unit.equals(HeliosVariable.UNIT_DAY)) {\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.DAY);\n+        } else if (unit.equals(HeliosVariable.UNIT_HOUR)) {\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.HOUR);\n+        } else if (unit.equals(HeliosVariable.UNIT_MIN)) {\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.MINUTE);\n+        } else if (unit.equals(HeliosVariable.UNIT_SEC)) {\n+            return new QuantityType<>(Integer.parseInt(value), SmartHomeUnits.SECOND);\n+        } else if (unit.equals(HeliosVariable.UNIT_VOLT)) {\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.VOLT);\n+        } else if (unit.equals(HeliosVariable.UNIT_PERCENT)) {\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PERCENT);\n+        } else if (unit.equals(HeliosVariable.UNIT_PPM)) {\n+            return new QuantityType<>(Float.parseFloat(value), SmartHomeUnits.PARTS_PER_MILLION);\n+        } else if (unit.equals(HeliosVariable.UNIT_TEMP)) {\n+            return new QuantityType<>(Float.parseFloat(value), SIUnits.CELSIUS);\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Prepares the payload for the request\n+     *\n+     * @param payload The String representation of the payload\n+     * @return The Register representation of the payload\n+     */\n+    private ModbusRegister[] preparePayload(String payload) {\n+\n+        // determine number of registers\n+        int l = (payload.length() + 1) / 2; // +1 because we need to include at least one termination symbol 0x00\n+        if ((payload.length() + 1) % 2 != 0) {\n+            l++;\n+        }\n+\n+        ModbusRegister reg[] = new ModbusRegister[l];\n+        byte[] b = payload.getBytes();\n+        int ch = 0;\n+        for (int i = 0; i < reg.length; i++) {\n+            byte b1 = ch < b.length ? b[ch] : (byte) 0x00; // terminate with 0x00 if at the end of the payload\n+            ch++;\n+            byte b2 = ch < b.length ? b[ch] : (byte) 0x00;\n+            ch++;\n+            reg[i] = new ModbusRegister(b1, b2);\n+        }\n+        return reg;\n+    }\n+\n+    /**\n+     * Decodes the Helios device' response and updates the channel with the actual value of the variable\n+     *\n+     * @param response The registers received from the Helios device\n+     * @return The value or <tt>null</tt> if an error occurred\n+     */\n+    private void processResponse(HeliosVariable v, ModbusRegisterArray registers) {\n+        // decode response\n+        byte[] b = new byte[registers.size() * 2];\n+        int actSize = 0; // track the actual size of the usable array (excluding any 0x00\n+                         // characters)\n+        for (int i = 0; i < registers.size(); i++) {\n+            byte[] reg = registers.getRegister(i).getBytes();\n+            if (reg.length == 2) { // only add to the array if it's a usable character\n+                if (reg[0] != 0x00) {\n+                    b[actSize++] = reg[0];\n+                }\n+                if (reg[1] != 0x00) {\n+                    b[actSize++] = reg[1];\n+                }\n+            }\n+        }\n+        b = Arrays.copyOf(b, actSize); // before creating a string of it the array needs to be\n+                                       // truncated\n+        String r = new String(b, StandardCharsets.US_ASCII);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225bd3dcd64b07b92cd0fb43ff9dbd968dbf72bf"}, "originalPosition": 704}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f862277724e24cd5409bcbe7a861d94e989351f0", "author": {"user": {"login": "bern77", "name": "Bernhard Bauer"}}, "url": "https://github.com/openhab/openhab-addons/commit/f862277724e24cd5409bcbe7a861d94e989351f0", "committedDate": "2020-09-19T08:29:24Z", "message": "Implemented inputs from @ssalonen\n\nSigned-off-by: Bernhard Bauer <bern77@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTk0NDAx", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-491994401", "createdAt": "2020-09-19T12:01:14Z", "commit": {"oid": "f862277724e24cd5409bcbe7a861d94e989351f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMDA4Nzcy", "url": "https://github.com/openhab/openhab-addons/pull/8250#pullrequestreview-492008772", "createdAt": "2020-09-19T16:16:05Z", "commit": {"oid": "f862277724e24cd5409bcbe7a861d94e989351f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4957, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}