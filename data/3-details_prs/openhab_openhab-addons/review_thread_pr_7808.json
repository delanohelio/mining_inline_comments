{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDQxMTE1", "number": 7808, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjoyMjo1MFrOEBFsTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDozNzoxMVrOEBIw0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTc3Mjk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/handler/FreeboxHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjoyMjo1MFrOGcw9tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODo1MjozN1rOGc0zPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNTU0Mw==", "bodyText": "Can you use the cached config instead?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return getConfigAs(FreeboxServerConfiguration.class).appToken;\n          \n          \n            \n                    return configuration.appToken;", "url": "https://github.com/openhab/openhab-addons/pull/7808#discussion_r432815543", "createdAt": "2020-05-30T06:22:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/handler/FreeboxHandler.java", "diffHunk": "@@ -293,6 +306,10 @@ public FreeboxApiManager getApiManager() {\n         return apiManager;\n     }\n \n+    public String getAppToken() {\n+        return getConfigAs(FreeboxServerConfiguration.class).appToken;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0557af05dec5da10034b562d6b3e4b37a9477d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3ODM5OQ==", "bodyText": "There was no global variable configuration but I added it.", "url": "https://github.com/openhab/openhab-addons/pull/7808#discussion_r432878399", "createdAt": "2020-05-30T18:52:37Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/handler/FreeboxHandler.java", "diffHunk": "@@ -293,6 +306,10 @@ public FreeboxApiManager getApiManager() {\n         return apiManager;\n     }\n \n+    public String getAppToken() {\n+        return getConfigAs(FreeboxServerConfiguration.class).appToken;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNTU0Mw=="}, "originalCommit": {"oid": "9c0557af05dec5da10034b562d6b3e4b37a9477d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTc3MzIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/console/FreeboxCommandExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwNjoyMzozNlrOGcw94A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODo0MDoyNFrOGc0vnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNTU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .asList(new String[] { buildCommandUsage(\"<bridgeUID> \" + APP_TOKEN, \"show the application token\") });\n          \n          \n            \n                            .asList(buildCommandUsage(\"<bridgeUID> \" + APP_TOKEN, \"show the application token\"));", "url": "https://github.com/openhab/openhab-addons/pull/7808#discussion_r432815584", "createdAt": "2020-05-30T06:23:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/console/FreeboxCommandExtension.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.freebox.internal.console;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingRegistry;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.io.console.Console;\n+import org.eclipse.smarthome.io.console.extensions.AbstractConsoleCommandExtension;\n+import org.eclipse.smarthome.io.console.extensions.ConsoleCommandExtension;\n+import org.openhab.binding.freebox.internal.handler.FreeboxHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link FreeboxCommandExtension} is responsible for handling console commands\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+@Component(service = ConsoleCommandExtension.class)\n+public class FreeboxCommandExtension extends AbstractConsoleCommandExtension {\n+\n+    private static final String APP_TOKEN = \"apptoken\";\n+\n+    private final ThingRegistry thingRegistry;\n+\n+    @Activate\n+    public FreeboxCommandExtension(final @Reference ThingRegistry thingRegistry) {\n+        super(\"freebox\", \"Interact with the freebox binding.\");\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    public void execute(String[] args, Console console) {\n+        if (args.length == 2) {\n+            FreeboxHandler handler = null;\n+            try {\n+                ThingUID thingUID = new ThingUID(args[0]);\n+                Thing thing = thingRegistry.get(thingUID);\n+                if ((thing != null) && (thing.getHandler() != null) && (thing.getHandler() instanceof FreeboxHandler)) {\n+                    handler = (FreeboxHandler) thing.getHandler();\n+                }\n+            } catch (IllegalArgumentException e) {\n+                handler = null;\n+            }\n+            if (handler == null) {\n+                console.println(\"Bad thing id '\" + args[0] + \"'\");\n+                printUsage(console);\n+            } else {\n+                switch (args[1]) {\n+                    case APP_TOKEN:\n+                        String token = handler.getAppToken();\n+                        console.println(\"Your application token is \" + (token != null ? token : \"undefined\"));\n+                        break;\n+                    default:\n+                        printUsage(console);\n+                        break;\n+                }\n+            }\n+        } else {\n+            printUsage(console);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getUsages() {\n+        return Arrays\n+                .asList(new String[] { buildCommandUsage(\"<bridgeUID> \" + APP_TOKEN, \"show the application token\") });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c0557af05dec5da10034b562d6b3e4b37a9477d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3NzQ2OA==", "bodyText": "Fixed.", "url": "https://github.com/openhab/openhab-addons/pull/7808#discussion_r432877468", "createdAt": "2020-05-30T18:40:24Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/console/FreeboxCommandExtension.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.freebox.internal.console;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingRegistry;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.io.console.Console;\n+import org.eclipse.smarthome.io.console.extensions.AbstractConsoleCommandExtension;\n+import org.eclipse.smarthome.io.console.extensions.ConsoleCommandExtension;\n+import org.openhab.binding.freebox.internal.handler.FreeboxHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link FreeboxCommandExtension} is responsible for handling console commands\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+@Component(service = ConsoleCommandExtension.class)\n+public class FreeboxCommandExtension extends AbstractConsoleCommandExtension {\n+\n+    private static final String APP_TOKEN = \"apptoken\";\n+\n+    private final ThingRegistry thingRegistry;\n+\n+    @Activate\n+    public FreeboxCommandExtension(final @Reference ThingRegistry thingRegistry) {\n+        super(\"freebox\", \"Interact with the freebox binding.\");\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    public void execute(String[] args, Console console) {\n+        if (args.length == 2) {\n+            FreeboxHandler handler = null;\n+            try {\n+                ThingUID thingUID = new ThingUID(args[0]);\n+                Thing thing = thingRegistry.get(thingUID);\n+                if ((thing != null) && (thing.getHandler() != null) && (thing.getHandler() instanceof FreeboxHandler)) {\n+                    handler = (FreeboxHandler) thing.getHandler();\n+                }\n+            } catch (IllegalArgumentException e) {\n+                handler = null;\n+            }\n+            if (handler == null) {\n+                console.println(\"Bad thing id '\" + args[0] + \"'\");\n+                printUsage(console);\n+            } else {\n+                switch (args[1]) {\n+                    case APP_TOKEN:\n+                        String token = handler.getAppToken();\n+                        console.println(\"Your application token is \" + (token != null ? token : \"undefined\"));\n+                        break;\n+                    default:\n+                        printUsage(console);\n+                        break;\n+                }\n+            }\n+        } else {\n+            printUsage(console);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> getUsages() {\n+        return Arrays\n+                .asList(new String[] { buildCommandUsage(\"<bridgeUID> \" + APP_TOKEN, \"show the application token\") });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgxNTU4NA=="}, "originalCommit": {"oid": "9c0557af05dec5da10034b562d6b3e4b37a9477d"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjI3NjAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/console/FreeboxCommandExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQyMDozNzoxMVrOGc1O4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowNjo1OVrOGc3tbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTQ3Mw==", "bodyText": "This better deals with null checks.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if ((thing != null) && (thing.getHandler() != null) && (thing.getHandler() instanceof FreeboxHandler)) {\n          \n          \n            \n                                handler = (FreeboxHandler) thing.getHandler();\n          \n          \n            \n                            }\n          \n          \n            \n                            if(thing != null){\n          \n          \n            \n                                ThingHandler thingHandler = thing.getHandler();\n          \n          \n            \n                                if(thingHandler instanceof FreeboxHandler){\n          \n          \n            \n                                    handler = (FreeboxHandler) thingHandler;\n          \n          \n            \n                                }\n          \n          \n            \n                            }", "url": "https://github.com/openhab/openhab-addons/pull/7808#discussion_r432885473", "createdAt": "2020-05-30T20:37:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/console/FreeboxCommandExtension.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.freebox.internal.console;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingRegistry;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.io.console.Console;\n+import org.eclipse.smarthome.io.console.extensions.AbstractConsoleCommandExtension;\n+import org.eclipse.smarthome.io.console.extensions.ConsoleCommandExtension;\n+import org.openhab.binding.freebox.internal.handler.FreeboxHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link FreeboxCommandExtension} is responsible for handling console commands\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+@Component(service = ConsoleCommandExtension.class)\n+public class FreeboxCommandExtension extends AbstractConsoleCommandExtension {\n+\n+    private static final String APP_TOKEN = \"apptoken\";\n+\n+    private final ThingRegistry thingRegistry;\n+\n+    @Activate\n+    public FreeboxCommandExtension(final @Reference ThingRegistry thingRegistry) {\n+        super(\"freebox\", \"Interact with the freebox binding.\");\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    public void execute(String[] args, Console console) {\n+        if (args.length == 2) {\n+            FreeboxHandler handler = null;\n+            try {\n+                ThingUID thingUID = new ThingUID(args[0]);\n+                Thing thing = thingRegistry.get(thingUID);\n+                if ((thing != null) && (thing.getHandler() != null) && (thing.getHandler() instanceof FreeboxHandler)) {\n+                    handler = (FreeboxHandler) thing.getHandler();\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd2127c80e8d9f9fbf1490875bf1a63388c2f37"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjA2Mg==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7808#discussion_r432926062", "createdAt": "2020-05-31T09:06:59Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.freebox/src/main/java/org/openhab/binding/freebox/internal/console/FreeboxCommandExtension.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.freebox.internal.console;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingRegistry;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.io.console.Console;\n+import org.eclipse.smarthome.io.console.extensions.AbstractConsoleCommandExtension;\n+import org.eclipse.smarthome.io.console.extensions.ConsoleCommandExtension;\n+import org.openhab.binding.freebox.internal.handler.FreeboxHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link FreeboxCommandExtension} is responsible for handling console commands\n+ *\n+ * @author Laurent Garnier - Initial contribution\n+ */\n+\n+@NonNullByDefault\n+@Component(service = ConsoleCommandExtension.class)\n+public class FreeboxCommandExtension extends AbstractConsoleCommandExtension {\n+\n+    private static final String APP_TOKEN = \"apptoken\";\n+\n+    private final ThingRegistry thingRegistry;\n+\n+    @Activate\n+    public FreeboxCommandExtension(final @Reference ThingRegistry thingRegistry) {\n+        super(\"freebox\", \"Interact with the freebox binding.\");\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    public void execute(String[] args, Console console) {\n+        if (args.length == 2) {\n+            FreeboxHandler handler = null;\n+            try {\n+                ThingUID thingUID = new ThingUID(args[0]);\n+                Thing thing = thingRegistry.get(thingUID);\n+                if ((thing != null) && (thing.getHandler() != null) && (thing.getHandler() instanceof FreeboxHandler)) {\n+                    handler = (FreeboxHandler) thing.getHandler();\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4NTQ3Mw=="}, "originalCommit": {"oid": "5bd2127c80e8d9f9fbf1490875bf1a63388c2f37"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4936, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}