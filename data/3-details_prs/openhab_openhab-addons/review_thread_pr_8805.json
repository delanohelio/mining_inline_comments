{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MjA3MzU4", "number": 8805, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyOToxMVrOEwADtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjozMTo1NVrOEwAGcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzY4MDU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyOToxMVrOHlTciw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjoyOToxMVrOHlTciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3Nzk2Mw==", "bodyText": "Components shouldn't be declared immediate anymore.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(immediate = true)\n          \n          \n            \n            @Component", "url": "https://github.com/openhab/openhab-addons/pull/8805#discussion_r508877963", "createdAt": "2020-10-20T22:29:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.net.Inet4Address;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Discovers NeoHubs by means of mDNS-SD\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091ecadd036695f3f7c80e798ab1d757d24fbc6a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzY4MzIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjozMDowNFrOHlTeBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjozMDowNFrOHlTeBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3ODM0Mg==", "bodyText": "You can omit @Nullable for local variables.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "url": "https://github.com/openhab/openhab-addons/pull/8805#discussion_r508878342", "createdAt": "2020-10-20T22:30:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.net.Inet4Address;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Discovers NeoHubs by means of mDNS-SD\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true)\n+public class NeoHubDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private static final String HEATMISER_NEO_HUB = \"Heatmiser neoHub\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NeoHubDiscoveryParticipant.class);\n+\n+    /**\n+     * Check if the {@link ServiceInfo} refers to a valid NeoHub, and if so return its IPv4 address\n+     *\n+     * @param serviceInfo\n+     * @return the ip address if it is a valid neohub, or null if not\n+     */\n+    private @Nullable String getIpAddressIfValidNeoHub(ServiceInfo serviceInfo) {\n+        if (HEATMISER_NEO_HUB.equals(serviceInfo.getName())) {\n+            for (Inet4Address ipAddr : serviceInfo.getInet4Addresses()) {\n+                String ipStr = ipAddr.getHostAddress();\n+                return ipStr;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(NeoHubBindingConstants.THING_TYPE_NEOHUB);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_hap._tcp.local.\";\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo serviceInfo) {\n+        @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091ecadd036695f3f7c80e798ab1d757d24fbc6a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzY4MzcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjozMDoyMFrOHlTeWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjozMDoyMFrOHlTeWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3ODQyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "url": "https://github.com/openhab/openhab-addons/pull/8805#discussion_r508878425", "createdAt": "2020-10-20T22:30:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.net.Inet4Address;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Discovers NeoHubs by means of mDNS-SD\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true)\n+public class NeoHubDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private static final String HEATMISER_NEO_HUB = \"Heatmiser neoHub\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NeoHubDiscoveryParticipant.class);\n+\n+    /**\n+     * Check if the {@link ServiceInfo} refers to a valid NeoHub, and if so return its IPv4 address\n+     *\n+     * @param serviceInfo\n+     * @return the ip address if it is a valid neohub, or null if not\n+     */\n+    private @Nullable String getIpAddressIfValidNeoHub(ServiceInfo serviceInfo) {\n+        if (HEATMISER_NEO_HUB.equals(serviceInfo.getName())) {\n+            for (Inet4Address ipAddr : serviceInfo.getInet4Addresses()) {\n+                String ipStr = ipAddr.getHostAddress();\n+                return ipStr;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(NeoHubBindingConstants.THING_TYPE_NEOHUB);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_hap._tcp.local.\";\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo serviceInfo) {\n+        @Nullable\n+        String ipStr = getIpAddressIfValidNeoHub(serviceInfo);\n+        if (ipStr != null) {\n+            ThingUID thingUID = new ThingUID(NeoHubBindingConstants.THING_TYPE_NEOHUB, ipStr.replace('.', '_'));\n+            DiscoveryResult hub = DiscoveryResultBuilder.create(thingUID)\n+                    .withProperty(NeoHubConfiguration.HOST_NAME, ipStr)\n+                    .withRepresentationProperty(NeoHubConfiguration.HOST_NAME).withLabel(\"NeoHub (\" + ipStr + \")\")\n+                    .build();\n+            logger.debug(\"Discovered a NeoHub on host '{}'\", ipStr);\n+            return hub;\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public @Nullable ThingUID getThingUID(ServiceInfo serviceInfo) {\n+        @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091ecadd036695f3f7c80e798ab1d757d24fbc6a"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzY4NzUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjozMTo1NVrOHlTgog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQyMjozMTo1NVrOHlTgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3OTAxMA==", "bodyText": "The discovery service is going to log this anyway, so I don't think this log is necessary.", "url": "https://github.com/openhab/openhab-addons/pull/8805#discussion_r508879010", "createdAt": "2020-10-20T22:31:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.net.Inet4Address;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Discovers NeoHubs by means of mDNS-SD\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true)\n+public class NeoHubDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private static final String HEATMISER_NEO_HUB = \"Heatmiser neoHub\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NeoHubDiscoveryParticipant.class);\n+\n+    /**\n+     * Check if the {@link ServiceInfo} refers to a valid NeoHub, and if so return its IPv4 address\n+     *\n+     * @param serviceInfo\n+     * @return the ip address if it is a valid neohub, or null if not\n+     */\n+    private @Nullable String getIpAddressIfValidNeoHub(ServiceInfo serviceInfo) {\n+        if (HEATMISER_NEO_HUB.equals(serviceInfo.getName())) {\n+            for (Inet4Address ipAddr : serviceInfo.getInet4Addresses()) {\n+                String ipStr = ipAddr.getHostAddress();\n+                return ipStr;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(NeoHubBindingConstants.THING_TYPE_NEOHUB);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_hap._tcp.local.\";\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo serviceInfo) {\n+        @Nullable\n+        String ipStr = getIpAddressIfValidNeoHub(serviceInfo);\n+        if (ipStr != null) {\n+            ThingUID thingUID = new ThingUID(NeoHubBindingConstants.THING_TYPE_NEOHUB, ipStr.replace('.', '_'));\n+            DiscoveryResult hub = DiscoveryResultBuilder.create(thingUID)\n+                    .withProperty(NeoHubConfiguration.HOST_NAME, ipStr)\n+                    .withRepresentationProperty(NeoHubConfiguration.HOST_NAME).withLabel(\"NeoHub (\" + ipStr + \")\")\n+                    .build();\n+            logger.debug(\"Discovered a NeoHub on host '{}'\", ipStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091ecadd036695f3f7c80e798ab1d757d24fbc6a"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4107, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}