{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTk3NDM0", "number": 6746, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoxNToxMVrODcAv-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDozODoxNVrODcDYpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjk5MDAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoxNToxMVrOFj05Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0Nzo1NlrOFy5QCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTA3MQ==", "bodyText": "String sensorType = h.getSensorType();\n                if (\"ALL\".equals(sensorType)) {\n                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n                } else {\n                    JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(sensorType);\n                    if (c != null) {\n                        converters.add(c);\n                        sensorTypeConvertersMap.put(sensorType, c);\n                    }\n                }   \n\nIsn't this more readable?", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373111071", "createdAt": "2020-01-30T18:15:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -155,7 +149,17 @@ public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n             List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n                 handlers = new ArrayList<>();\n+                \n+                // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n+                \n+                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                if (c != null) {\n+                    converters.add(c);\n+                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                } else if (\"ALL\".equals(h.getSensorType())) {\n+                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTExMg==", "bodyText": "Yes", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911112", "createdAt": "2020-03-06T13:47:56Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -155,7 +149,17 @@ public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n             List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n                 handlers = new ArrayList<>();\n+                \n+                // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n+                \n+                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                if (c != null) {\n+                    converters.add(c);\n+                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                } else if (\"ALL\".equals(h.getSensorType())) {\n+                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTA3MQ=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjk5NTI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoxNjo1MlrOFj08Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0ODozOVrOFy5Rbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTg5MA==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373111890", "createdAt": "2020-01-30T18:16:52Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -174,7 +178,15 @@ public void removeReadingHandler(ReadingHandler<? extends Reading> h) {\n                 handlers.remove(h);\n \n                 if (handlers.isEmpty()) {\n+                    // this was the last handler for this reading class => also remove converter\n                     readingClassHandlerMap.remove(h.getReadingClass());\n+                    \n+                    JeeLinkReadingConverter<?> c = sensorTypeConvertersMap.get(h.getSensorType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTQ3MA==", "bodyText": "Okay", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911470", "createdAt": "2020-03-06T13:48:39Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -174,7 +178,15 @@ public void removeReadingHandler(ReadingHandler<? extends Reading> h) {\n                 handlers.remove(h);\n \n                 if (handlers.isEmpty()) {\n+                    // this was the last handler for this reading class => also remove converter\n                     readingClassHandlerMap.remove(h.getReadingClass());\n+                    \n+                    JeeLinkReadingConverter<?> c = sensorTypeConvertersMap.get(h.getSensorType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExMTg5MA=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzAxOTQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODoyNDo1N1rOFj1L-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0ODowNFrOFy5QUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNTg5OA==", "bodyText": "This is not necessarily a part of this PR: But it seems that handlers is designed to contain unique elements. Wouldn't it be a better match to use a Set instead of a list?", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373115898", "createdAt": "2020-01-30T18:24:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -155,7 +149,17 @@ public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n             List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n                 handlers = new ArrayList<>();\n+                \n+                // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n+                \n+                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                if (c != null) {\n+                    converters.add(c);\n+                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                } else if (\"ALL\".equals(h.getSensorType())) {\n+                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                }\n             }\n \n             if (!handlers.contains(h)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTE4NQ==", "bodyText": "Okay", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911185", "createdAt": "2020-03-06T13:48:04Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -155,7 +149,17 @@ public void addReadingHandler(ReadingHandler<? extends Reading> h) {\n             List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(h.getReadingClass());\n             if (handlers == null) {\n                 handlers = new ArrayList<>();\n+                \n+                // this is the first handler for this reading class => also setup converter\n                 readingClassHandlerMap.put(h.getReadingClass(), handlers);\n+                \n+                JeeLinkReadingConverter<?> c = SensorDefinition.getConverter(h.getSensorType());\n+                if (c != null) {\n+                    converters.add(c);\n+                    sensorTypeConvertersMap.put(h.getSensorType(), c);\n+                } else if (\"ALL\".equals(h.getSensorType())) {\n+                    converters.addAll(SensorDefinition.getDiscoveryConverters());\n+                }\n             }\n \n             if (!handlers.contains(h)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExNTg5OA=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzA0Mjc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODozMjo1MlrOFj1bQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0NjoyNlrOFy5NFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExOTgwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                List<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());\n          \n          \n            \n                                getAllHandlers(r.getClass()).stream().forEach(h -> h.handleReading(r));", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373119809", "createdAt": "2020-01-30T18:32:52Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -187,50 +199,44 @@ public void handleCommand(ChannelUID channelUid, Command command) {\n     @Override\n     public void handleInput(String input) {\n         lastReadingTime = System.currentTimeMillis();\n-\n-        Matcher matcher = READING_P.matcher(input);\n-        if (matcher.matches()) {\n-            intializeConnection();\n-\n-            String sensorType = matcher.group(1);\n-            JeeLinkReadingConverter<?> converter;\n-\n-            synchronized (sensorTypeConvertersMap) {\n-                converter = sensorTypeConvertersMap.get(sensorType);\n-                if (converter == null) {\n-                    converter = SensorDefinition.getConverter(sensorType);\n-\n-                    if (converter == null) {\n-                        logger.debug(\"Missing converter for sensor type {}. Ignoring readings.\", sensorType);\n-                        converter = new IgnoringConverter();\n-                    } else {\n-                        logger.debug(\"Registering converter for sensor type {}: {}\", sensorType, converter);\n-                    }\n-\n-                    sensorTypeConvertersMap.put(sensorType, converter);\n-                }\n-            }\n-\n-            Reading r = converter.createReading(input);\n+        \n+        // try all associated converters to find the correct one\n+        for (JeeLinkReadingConverter<?> c : converters) {\n+            Reading r = c.createReading(input);\n+            \n             if (r != null) {\n-                ReadingHandler<Reading> d = discoveryHandler.get();\n-                if (d != null) {\n-                    d.handleReading(r);\n-                }\n+                // this converter is responsible\n+                intializeConnection();\n \n                 // propagate to the appropriate sensor handler\n                 synchronized (readingClassHandlerMap) {\n-                    List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(r.getClass());\n-                    if (handlers != null) {\n-                        for (ReadingHandler h : handlers) {\n-                            h.handleReading(r);\n-                        }\n+                    List<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDM1OQ==", "bodyText": "This might be nicer for you, but I find it hard to read. As I am the one maintaining the code, I do not want to change it.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910359", "createdAt": "2020-03-06T13:46:26Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/JeeLinkHandler.java", "diffHunk": "@@ -187,50 +199,44 @@ public void handleCommand(ChannelUID channelUid, Command command) {\n     @Override\n     public void handleInput(String input) {\n         lastReadingTime = System.currentTimeMillis();\n-\n-        Matcher matcher = READING_P.matcher(input);\n-        if (matcher.matches()) {\n-            intializeConnection();\n-\n-            String sensorType = matcher.group(1);\n-            JeeLinkReadingConverter<?> converter;\n-\n-            synchronized (sensorTypeConvertersMap) {\n-                converter = sensorTypeConvertersMap.get(sensorType);\n-                if (converter == null) {\n-                    converter = SensorDefinition.getConverter(sensorType);\n-\n-                    if (converter == null) {\n-                        logger.debug(\"Missing converter for sensor type {}. Ignoring readings.\", sensorType);\n-                        converter = new IgnoringConverter();\n-                    } else {\n-                        logger.debug(\"Registering converter for sensor type {}: {}\", sensorType, converter);\n-                    }\n-\n-                    sensorTypeConvertersMap.put(sensorType, converter);\n-                }\n-            }\n-\n-            Reading r = converter.createReading(input);\n+        \n+        // try all associated converters to find the correct one\n+        for (JeeLinkReadingConverter<?> c : converters) {\n+            Reading r = c.createReading(input);\n+            \n             if (r != null) {\n-                ReadingHandler<Reading> d = discoveryHandler.get();\n-                if (d != null) {\n-                    d.handleReading(r);\n-                }\n+                // this converter is responsible\n+                intializeConnection();\n \n                 // propagate to the appropriate sensor handler\n                 synchronized (readingClassHandlerMap) {\n-                    List<ReadingHandler<? extends Reading>> handlers = readingClassHandlerMap.get(r.getClass());\n-                    if (handlers != null) {\n-                        for (ReadingHandler h : handlers) {\n-                            h.handleReading(r);\n-                        }\n+                    List<ReadingHandler<? extends Reading>> handlers = getAllHandlers(r.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzExOTgwOQ=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzA1NDgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxODozNjo1NVrOFj1jDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0ODoxMlrOFy5QjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMTgwNA==", "bodyText": "Can we add duplicate converters? If not, use a Set", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373121804", "createdAt": "2020-01-30T18:36:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -31,16 +34,19 @@\n  */\n public abstract class SensorDefinition<R extends Reading> {\n     private static final HashSet<SensorDefinition<?>> SENSOR_DEFS = new HashSet<>();\n+    private static final List<JeeLinkReadingConverter<?>> CONVERTERS = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDU0MQ==", "bodyText": "Okay", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910541", "createdAt": "2020-03-06T13:46:47Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -31,16 +34,19 @@\n  */\n public abstract class SensorDefinition<R extends Reading> {\n     private static final HashSet<SensorDefinition<?>> SENSOR_DEFS = new HashSet<>();\n+    private static final List<JeeLinkReadingConverter<?>> CONVERTERS = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMTgwNA=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTI0NA==", "bodyText": "Okay", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911244", "createdAt": "2020-03-06T13:48:12Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -31,16 +34,19 @@\n  */\n public abstract class SensorDefinition<R extends Reading> {\n     private static final HashSet<SensorDefinition<?>> SENSOR_DEFS = new HashSet<>();\n+    private static final List<JeeLinkReadingConverter<?>> CONVERTERS = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzEyMTgwNA=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzM4NTUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoyNTozMlrOFj40QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxMjoxMlrOFzAnBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ==", "bodyText": "If you make it a Set and initialize it as ConcurrentHashMap.newKeySet() you can omit the synchronized.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373175361", "createdAt": "2020-01-30T20:25:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -96,6 +102,18 @@ public static ThingHandler createHandler(ThingTypeUID thingTypeUid, Thing thing)\n         return null;\n     }\n \n+    public static List<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n+        synchronized (CONVERTERS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNDI0Mw==", "bodyText": "How is that supposed to work? There has to be some magic going on if the map can correctly synchronize this by itself. There are several calls to the map in the synchronized block.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388904243", "createdAt": "2020-03-06T13:33:53Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -96,6 +102,18 @@ public static ThingHandler createHandler(ThingTypeUID thingTypeUid, Thing thing)\n         return null;\n     }\n \n+    public static List<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n+        synchronized (CONVERTERS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxMDUwMg==", "bodyText": "You can directly initialize it in the declaration, remove the check here and the static block above.\n    private static final Set<SensorDefinition<?>> SENSOR_DEFS = Stream\n            .of(new LaCrosseSensorDefinition(), new Ec3kSensorDefinition(), new Pca301SensorDefinition(),\n                    new Tx22SensorDefinition(), new RevoltSensorDefinition()).collect(Collectors.toSet());\n    private static final Set<JeeLinkReadingConverter<?>> CONVERTERS = SENSOR_DEFS.stream()\n            .map(SensorDefinition::createConverter).collect(Collectors.toSet());", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r389010502", "createdAt": "2020-03-06T16:37:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -96,6 +102,18 @@ public static ThingHandler createHandler(ThingTypeUID thingTypeUid, Thing thing)\n         return null;\n     }\n \n+    public static List<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n+        synchronized (CONVERTERS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxNzY4NA==", "bodyText": "Yes, I can. But i'd prefer not to, for readability reasons.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r389017684", "createdAt": "2020-03-06T16:49:40Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -96,6 +102,18 @@ public static ThingHandler createHandler(ThingTypeUID thingTypeUid, Thing thing)\n         return null;\n     }\n \n+    public static List<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n+        synchronized (CONVERTERS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMTY4Nw==", "bodyText": "Your code is much more complex and difficult (because it splits the initialization in three parts: initialize the sets in the declaration, add the sensor defs in the static block and add the converters when they are first requested).", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r389031687", "createdAt": "2020-03-06T17:12:12Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/SensorDefinition.java", "diffHunk": "@@ -96,6 +102,18 @@ public static ThingHandler createHandler(ThingTypeUID thingTypeUid, Thing thing)\n         return null;\n     }\n \n+    public static List<JeeLinkReadingConverter<?>> getDiscoveryConverters() {\n+        synchronized (CONVERTERS) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3NTM2MQ=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQwNjU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDozMjo1MVrOFj5BJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0ODoyMVrOFy5Q2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODY2Mg==", "bodyText": "You can remove that check. It was there because Arrays.toString() is expensive. port and cmd are not, because toString() is called only if the log-level is debug or higher.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373178662", "createdAt": "2020-01-30T20:32:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java", "diffHunk": "@@ -94,7 +89,11 @@ public void sendCommands(String commands) {\n                 // in case of tcp connections, the underlying socket\n                 OutputStreamWriter w = new OutputStreamWriter(initStream);\n                 for (String cmd : initCommands) {\n-                    w.write(cmd);\n+                    if (logger.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDY1NA==", "bodyText": "Okay", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910654", "createdAt": "2020-03-06T13:47:03Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java", "diffHunk": "@@ -94,7 +89,11 @@ public void sendCommands(String commands) {\n                 // in case of tcp connections, the underlying socket\n                 OutputStreamWriter w = new OutputStreamWriter(initStream);\n                 for (String cmd : initCommands) {\n-                    w.write(cmd);\n+                    if (logger.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODY2Mg=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMTMyMg==", "bodyText": "Okay", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388911322", "createdAt": "2020-03-06T13:48:21Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/connection/AbstractJeeLinkConnection.java", "diffHunk": "@@ -94,7 +89,11 @@ public void sendCommands(String commands) {\n                 // in case of tcp connections, the underlying socket\n                 OutputStreamWriter w = new OutputStreamWriter(initStream);\n                 for (String cmd : initCommands) {\n-                    w.write(cmd);\n+                    if (logger.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODY2Mg=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQwNzcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDozMzoxOFrOFj5B2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0NzoxMlrOFy5Ogg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODg0Mg==", "bodyText": "please remove this empty lines", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373178842", "createdAt": "2020-01-30T20:33:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -133,9 +133,16 @@ public void handleReading(Reading reading) {\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDcyMg==", "bodyText": "Okay", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910722", "createdAt": "2020-03-06T13:47:12Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -133,9 +133,16 @@ public void handleReading(Reading reading) {\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3ODg0Mg=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQxMTc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDozNDo0N1rOFj5EUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzo0NzoyMVrOFy5O1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3OTQ3Mw==", "bodyText": "Wouldn't it make sense to make this a constant?  ALL_SENSORS or something like that? This would reduce the risk of typos and should also be used in the comparisons above.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373179473", "createdAt": "2020-01-30T20:34:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -133,9 +133,16 @@ public void handleReading(Reading reading) {\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n+    \n+    \n \n     @Override\n     public Class<Reading> getReadingClass() {\n         return Reading.class;\n     }\n+\n+    @Override\n+    public String getSensorType() {\n+        return \"ALL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkxMDgwNw==", "bodyText": "Okay", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388910807", "createdAt": "2020-03-06T13:47:21Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -133,9 +133,16 @@ public void handleReading(Reading reading) {\n             logger.debug(\"discovery for bridge {} found already known sensor id {}\", bridge.getThing().getUID(), id);\n         }\n     }\n+    \n+    \n \n     @Override\n     public Class<Reading> getReadingClass() {\n         return Reading.class;\n     }\n+\n+    @Override\n+    public String getSensorType() {\n+        return \"ALL\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE3OTQ3Mw=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQyMTgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/revolt/RevoltSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDozODoxNVrOFj5KWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzozODowMFrOFy480Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MTAxNw==", "bodyText": "No need to override empty methods", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r373181017", "createdAt": "2020-01-30T20:38:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/revolt/RevoltSensorHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.jeelink.internal.revolt;\n+\n+import static org.openhab.binding.jeelink.internal.JeeLinkBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.openhab.binding.jeelink.internal.JeeLinkSensorHandler;\n+import org.openhab.binding.jeelink.internal.ReadingPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for a Revolt Energy Meter sensor thing.\n+ *\n+ * @author Volker Bier - Initial contribution\n+ */\n+public class RevoltSensorHandler extends JeeLinkSensorHandler<RevoltReading> {\n+    private final Logger logger = LoggerFactory.getLogger(RevoltSensorHandler.class);\n+\n+    public RevoltSensorHandler(Thing thing, String sensorType) {\n+        super(thing, sensorType);\n+    }\n+\n+    @Override\n+    public Class<RevoltReading> getReadingClass() {\n+        return RevoltReading.class;\n+    }\n+\n+    @Override\n+    public ReadingPublisher<RevoltReading> createPublisher() {\n+        ReadingPublisher<RevoltReading> publisher = new ReadingPublisher<RevoltReading>() {\n+            @Override\n+            public void publish(RevoltReading reading) {\n+                if (reading != null && getThing().getStatus() == ThingStatus.ONLINE) {\n+                    BigDecimal power = new BigDecimal(reading.getPower()).setScale(1, RoundingMode.HALF_UP);\n+                    BigDecimal powerFactor = new BigDecimal(reading.getPowerFactor()).setScale(2, RoundingMode.HALF_UP);\n+                    BigDecimal consumption = new BigDecimal(reading.getConsumption()).setScale(2, RoundingMode.HALF_UP);\n+                    BigDecimal current = new BigDecimal(reading.getCurrent()).setScale(2, RoundingMode.HALF_UP);\n+\n+                    logger.debug(\n+                            \"updating states for thing {}: power={}, powerFactor={}, consumption={}, current={}, voltage={}, frequency={} \",\n+                            getThing().getUID().getId(), power, powerFactor, consumption, current, reading.getVoltage(), reading.getFrequency());\n+\n+                    updateState(CURRENT_POWER_CHANNEL, new QuantityType<>(power, SmartHomeUnits.WATT));\n+                    updateState(POWER_FACTOR_CHANNEL, new DecimalType(powerFactor));\n+                    updateState(CONSUMPTION_CHANNEL, new QuantityType<>(consumption, SmartHomeUnits.WATT_HOUR));\n+                    updateState(ELECTRIC_CURRENT_CHANNEL, new QuantityType<>(current, SmartHomeUnits.AMPERE));\n+                    updateState(ELECTRIC_POTENTIAL_CHANNEL, new QuantityType<>(reading.getVoltage(), SmartHomeUnits.VOLT));\n+                    updateState(FREQUENCY_CHANNEL, new QuantityType<>(reading.getFrequency(), SmartHomeUnits.HERTZ));\n+                }\n+            }\n+\n+            @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkwNjE5Mw==", "bodyText": "ReadingPublisher is an interface. It is not going to work without the method.", "url": "https://github.com/openhab/openhab-addons/pull/6746#discussion_r388906193", "createdAt": "2020-03-06T13:38:00Z", "author": {"login": "vbier"}, "path": "bundles/org.openhab.binding.jeelink/src/main/java/org/openhab/binding/jeelink/internal/revolt/RevoltSensorHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.jeelink.internal.revolt;\n+\n+import static org.openhab.binding.jeelink.internal.JeeLinkBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.openhab.binding.jeelink.internal.JeeLinkSensorHandler;\n+import org.openhab.binding.jeelink.internal.ReadingPublisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Handler for a Revolt Energy Meter sensor thing.\n+ *\n+ * @author Volker Bier - Initial contribution\n+ */\n+public class RevoltSensorHandler extends JeeLinkSensorHandler<RevoltReading> {\n+    private final Logger logger = LoggerFactory.getLogger(RevoltSensorHandler.class);\n+\n+    public RevoltSensorHandler(Thing thing, String sensorType) {\n+        super(thing, sensorType);\n+    }\n+\n+    @Override\n+    public Class<RevoltReading> getReadingClass() {\n+        return RevoltReading.class;\n+    }\n+\n+    @Override\n+    public ReadingPublisher<RevoltReading> createPublisher() {\n+        ReadingPublisher<RevoltReading> publisher = new ReadingPublisher<RevoltReading>() {\n+            @Override\n+            public void publish(RevoltReading reading) {\n+                if (reading != null && getThing().getStatus() == ThingStatus.ONLINE) {\n+                    BigDecimal power = new BigDecimal(reading.getPower()).setScale(1, RoundingMode.HALF_UP);\n+                    BigDecimal powerFactor = new BigDecimal(reading.getPowerFactor()).setScale(2, RoundingMode.HALF_UP);\n+                    BigDecimal consumption = new BigDecimal(reading.getConsumption()).setScale(2, RoundingMode.HALF_UP);\n+                    BigDecimal current = new BigDecimal(reading.getCurrent()).setScale(2, RoundingMode.HALF_UP);\n+\n+                    logger.debug(\n+                            \"updating states for thing {}: power={}, powerFactor={}, consumption={}, current={}, voltage={}, frequency={} \",\n+                            getThing().getUID().getId(), power, powerFactor, consumption, current, reading.getVoltage(), reading.getFrequency());\n+\n+                    updateState(CURRENT_POWER_CHANNEL, new QuantityType<>(power, SmartHomeUnits.WATT));\n+                    updateState(POWER_FACTOR_CHANNEL, new DecimalType(powerFactor));\n+                    updateState(CONSUMPTION_CHANNEL, new QuantityType<>(consumption, SmartHomeUnits.WATT_HOUR));\n+                    updateState(ELECTRIC_CURRENT_CHANNEL, new QuantityType<>(current, SmartHomeUnits.AMPERE));\n+                    updateState(ELECTRIC_POTENTIAL_CHANNEL, new QuantityType<>(reading.getVoltage(), SmartHomeUnits.VOLT));\n+                    updateState(FREQUENCY_CHANNEL, new QuantityType<>(reading.getFrequency(), SmartHomeUnits.HERTZ));\n+                }\n+            }\n+\n+            @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MTAxNw=="}, "originalCommit": {"oid": "77e2273fa82cb597208d16b3e75d47e06377b330"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1149, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}