{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTc4MTY0", "number": 8715, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODowNTowN1rOEtKWPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOTo1ODozOFrOEzdY1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzkwOTExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODowNTowN1rOHgzKYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNToxODoxNFrOHpBweA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA==", "bodyText": "Isn't this rather a configuration error, when the user forgets to specify a bridge in textual configuration?", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r504154720", "createdAt": "2020-10-13T18:05:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "diffHunk": "@@ -86,39 +97,38 @@ public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            unregisterListener();\n-            return;\n-        }\n-\n-        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n-            return;\n-        }\n-\n-        Bridge bridge = getBridge();\n-        if (bridge == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n-        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-        if (bridgeHandler == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n+            // register the listener\n+            Bridge bridge = getBridge();\n+            if (bridge == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcfb1231e1be9efd80282cff513e629a631182a3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NDE2MA==", "bodyText": "A configuration error should prevent the thing from being initialized. But this can also happen if no callback for the bridge is present.", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r504794160", "createdAt": "2020-10-14T15:59:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "diffHunk": "@@ -86,39 +97,38 @@ public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            unregisterListener();\n-            return;\n-        }\n-\n-        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n-            return;\n-        }\n-\n-        Bridge bridge = getBridge();\n-        if (bridge == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n-        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-        if (bridgeHandler == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n+            // register the listener\n+            Bridge bridge = getBridge();\n+            if (bridge == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA=="}, "originalCommit": {"oid": "dcfb1231e1be9efd80282cff513e629a631182a3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0MTU4Ng==", "bodyText": "Just tested it with OH3. The framework isn't preventing the Thing from being initialized when the bridge is missing (text config), although specified in XML.\nEDIT: Which callback are you refering to?", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r505741586", "createdAt": "2020-10-15T18:10:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "diffHunk": "@@ -86,39 +97,38 @@ public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            unregisterListener();\n-            return;\n-        }\n-\n-        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n-            return;\n-        }\n-\n-        Bridge bridge = getBridge();\n-        if (bridge == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n-        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-        if (bridgeHandler == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n+            // register the listener\n+            Bridge bridge = getBridge();\n+            if (bridge == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA=="}, "originalCommit": {"oid": "dcfb1231e1be9efd80282cff513e629a631182a3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc1MTc4NA==", "bodyText": "This is a core-bug. @openhab/core-maintainers, WDYT?\nThe thing callback.", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r505751784", "createdAt": "2020-10-15T18:23:03Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "diffHunk": "@@ -86,39 +97,38 @@ public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            unregisterListener();\n-            return;\n-        }\n-\n-        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n-            return;\n-        }\n-\n-        Bridge bridge = getBridge();\n-        if (bridge == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n-        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-        if (bridgeHandler == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n+            // register the listener\n+            Bridge bridge = getBridge();\n+            if (bridge == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA=="}, "originalCommit": {"oid": "dcfb1231e1be9efd80282cff513e629a631182a3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjc4MjQ1Ng==", "bodyText": "Hm, Yes. I think it is. It is at least worse to open an issue in OHC for discussion.", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r512782456", "createdAt": "2020-10-27T15:18:14Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "diffHunk": "@@ -86,39 +97,38 @@ public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            unregisterListener();\n-            return;\n-        }\n-\n-        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n-            return;\n-        }\n-\n-        Bridge bridge = getBridge();\n-        if (bridge == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n-        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-        if (bridgeHandler == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n+            // register the listener\n+            Bridge bridge = getBridge();\n+            if (bridge == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NDcyMA=="}, "originalCommit": {"oid": "dcfb1231e1be9efd80282cff513e629a631182a3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzkxMjc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODowNjoxMVrOHgzMjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODowNjoxMVrOHgzMjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1NTI3OA==", "bodyText": "If I see correctly this happens when the user configures a Bridge of wrong type.", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r504155278", "createdAt": "2020-10-13T18:06:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/DeconzBaseThingHandler.java", "diffHunk": "@@ -86,39 +97,38 @@ public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n             return;\n         }\n \n-        if (bridgeStatusInfo.getStatus() == ThingStatus.OFFLINE) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            unregisterListener();\n-            return;\n-        }\n-\n-        if (bridgeStatusInfo.getStatus() != ThingStatus.ONLINE) {\n-            return;\n-        }\n-\n-        Bridge bridge = getBridge();\n-        if (bridge == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n-        DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n-        if (bridgeHandler == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n-            return;\n-        }\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            // the bridge is ONLINE, we can communicate with the gateway, so we update the connection parameters and\n+            // register the listener\n+            Bridge bridge = getBridge();\n+            if (bridge == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+                return;\n+            }\n+            DeconzBridgeHandler bridgeHandler = (DeconzBridgeHandler) bridge.getHandler();\n+            if (bridgeHandler == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcfb1231e1be9efd80282cff513e629a631182a3"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzkzMzk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/GroupThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoxMTozNlrOHgzZ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxODoxMTozNlrOHgzZ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE1ODY5NQ==", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails.", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r504158695", "createdAt": "2020-10-13T18:11:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/handler/GroupThingHandler.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.deconz.internal.handler;\n+\n+import static org.openhab.binding.deconz.internal.BindingConstants.*;\n+import static org.openhab.binding.deconz.internal.Util.buildUrl;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.deconz.internal.Util;\n+import org.openhab.binding.deconz.internal.dto.DeconzBaseMessage;\n+import org.openhab.binding.deconz.internal.dto.GroupAction;\n+import org.openhab.binding.deconz.internal.dto.GroupMessage;\n+import org.openhab.binding.deconz.internal.dto.GroupState;\n+import org.openhab.binding.deconz.internal.netutils.AsyncHttpClient;\n+import org.openhab.binding.deconz.internal.types.ResourceType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * This light thing doesn't establish any connections, that is done by the bridge Thing.\n+ *\n+ * It waits for the bridge to come online, grab the websocket connection and bridge configuration\n+ * and registers to the websocket connection as a listener.\n+ *\n+ * A REST API call is made to get the initial light/rollershutter state.\n+ *\n+ * Every light and rollershutter is supported by this Thing, because a unified state is kept\n+ * in {@link #groupStateCache}. Every field that got received by the REST API for this specific\n+ * sensor is published to the framework.\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GroupThingHandler extends DeconzBaseThingHandler<GroupMessage> {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPE_UIDS = Set.of(THING_TYPE_LIGHTGROUP);\n+\n+    private static final double HUE_FACTOR = 65535 / 360.0;\n+    private static final double BRIGHTNESS_FACTOR = 2.54;\n+\n+    private final Logger logger = LoggerFactory.getLogger(GroupThingHandler.class);\n+\n+    private long lastCommandExpireTimestamp = 0;\n+    private boolean needsPropertyUpdate = false;\n+\n+    /**\n+     * The group state.\n+     */\n+    private GroupState groupStateCache = new GroupState();\n+\n+    public GroupThingHandler(Thing thing, Gson gson) {\n+        super(thing, gson, ResourceType.GROUPS);\n+    }\n+\n+    @Override\n+    protected void requestState() {\n+        requestState(\"groups\");\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+\n+        GroupAction newGroupAction = new GroupAction();\n+        switch (channelId) {\n+            case CHANNEL_ALL_ON:\n+            case CHANNEL_ANY_ON:\n+                if (command instanceof RefreshType) {\n+                    valueUpdated(channelUID.getId(), groupStateCache);\n+                    return;\n+                }\n+                break;\n+            case CHANNEL_ALERT:\n+                if (command instanceof OnOffType) {\n+                    newGroupAction.alert = command == OnOffType.ON ? \"alert\" : \"none\";\n+                } else {\n+                    return;\n+                }\n+                break;\n+            case CHANNEL_COLOR:\n+                if (command instanceof HSBType) {\n+                    HSBType hsbCommand = (HSBType) command;\n+                    newGroupAction.bri = Util.fromPercentType(hsbCommand.getBrightness());\n+                    if (newGroupAction.bri > 0) {\n+                        newGroupAction.hue = (int) (hsbCommand.getHue().doubleValue() * HUE_FACTOR);\n+                        newGroupAction.sat = Util.fromPercentType(hsbCommand.getSaturation());\n+                    }\n+                } else if (command instanceof PercentType) {\n+                    newGroupAction.bri = Util.fromPercentType((PercentType) command);\n+                } else if (command instanceof DecimalType) {\n+                    newGroupAction.bri = ((DecimalType) command).intValue();\n+                } else if (command instanceof OnOffType) {\n+                    newGroupAction.on = OnOffType.ON.equals(command);\n+                } else {\n+                    return;\n+                }\n+                break;\n+            case CHANNEL_COLOR_TEMPERATURE:\n+                if (command instanceof DecimalType) {\n+                    int miredValue = Util.kelvinToMired(((DecimalType) command).intValue());\n+                    newGroupAction.ct = Util.constrainToRange(miredValue, ZCL_CT_MIN, ZCL_CT_MAX);\n+                } else {\n+                    return;\n+                }\n+                break;\n+            default:\n+                return;\n+        }\n+\n+        if (newGroupAction.bri != null && newGroupAction.bri > 0) {\n+            newGroupAction.on = true;\n+        }\n+\n+        AsyncHttpClient asyncHttpClient = http;\n+        if (asyncHttpClient == null) {\n+            return;\n+        }\n+        String url = buildUrl(bridgeConfig.host, bridgeConfig.httpPort, bridgeConfig.apikey, \"groups\", config.id,\n+                \"action\");\n+\n+        String json = gson.toJson(newGroupAction);\n+        logger.trace(\"Sending {} to group {} via {}\", json, config.id, url);\n+\n+        asyncHttpClient.put(url, json, bridgeConfig.timeout).thenAccept(v -> {\n+            logger.trace(\"Result code={}, body={}\", v.getResponseCode(), v.getBody());\n+        }).exceptionally(e -> {\n+            logger.debug(\"Sending command {} to channel {} failed:\", command, channelUID, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcfb1231e1be9efd80282cff513e629a631182a3"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNTI2NjEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNjo0MzoxMlrOHn61Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNjo0MzoxMlrOHn61Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYyMDQxOQ==", "bodyText": "\"id\" should be a constant since you use it in multiple places", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r511620419", "createdAt": "2020-10-25T16:43:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java", "diffHunk": "@@ -93,12 +95,53 @@ protected void stopBackgroundDiscovery() {\n     }\n \n     /**\n-     * Add a sensor device to the discovery inbox.\n+     * Add a group to the discovery inbox.\n+     *\n+     * @param groupId The id of the light\n+     * @param group The group description\n+     */\n+    private void addGroup(String groupId, GroupMessage group) {\n+        final ThingUID bridgeUID = this.bridgeUID;\n+        if (bridgeUID == null) {\n+            logger.warn(\"Received a message from non-existent bridge. This most likely is a bug.\");\n+            return;\n+        }\n+\n+        ThingTypeUID thingTypeUID;\n+        GroupType groupType = group.type;\n+\n+        if (groupType == null) {\n+            logger.warn(\"No group type reported for group {} ({})\", group.modelid, group.name);\n+            return;\n+        }\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(\"id\", groupId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdef5d8c5faf1f5026573f7a44e793fe169c07d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTczNjg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/GroupTypeDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTowNzoyM1rOHqC7_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTowNzoyM1rOHqC7_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MDM2NQ==", "bodyText": "Maybe add @NonNullByDefault?", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r513850365", "createdAt": "2020-10-29T01:07:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/GroupTypeDeserializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.deconz.internal.types;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * Custom deserializer for {@link GroupType}\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+public class GroupTypeDeserializer implements JsonDeserializer<GroupType> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d3e92c72f13a0877f4bd9316f6d16dba141b2e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTczNzE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTowNzozNVrOHqC8KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTowNzozNVrOHqC8KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MDQwOQ==", "bodyText": "Maybe add @NonNullByDefault?", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r513850409", "createdAt": "2020-10-29T01:07:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceType.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.deconz.internal.types;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ResourceType} defines an enum for websocket messages\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+public enum ResourceType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d3e92c72f13a0877f4bd9316f6d16dba141b2e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTczODA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceTypeDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTowODoxOFrOHqC8tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMTowODoxOFrOHqC8tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MDU0OQ==", "bodyText": "Maybe add @NonNullByDefault?", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r513850549", "createdAt": "2020-10-29T01:08:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/types/ResourceTypeDeserializer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.deconz.internal.types;\n+\n+import java.lang.reflect.Type;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * Custom deserializer for {@link ResourceType}\n+ *\n+ * @author Jan N. Klug - Initial contribution\n+ */\n+public class ResourceTypeDeserializer implements JsonDeserializer<ResourceType> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d3e92c72f13a0877f4bd9316f6d16dba141b2e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTc0NzkzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/resources/OH-INF/thing/group-thing-types.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMToxMzo0MlrOHqDCOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNjowNjowNFrOHqMSaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MTk2Mg==", "bodyText": "Color temperature is actually represented in kelvins. Would it be a good idea to use Number:Temperature instead then? Or at the very least the pattern should be changed to %dK", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r513851962", "createdAt": "2020-10-29T01:13:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.deconz/src/main/resources/OH-INF/thing/group-thing-types.xml", "diffHunk": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"deconz\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"lightgroup\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"deconz\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Light Group</label>\n+\t\t<channels>\n+\t\t\t<channel typeId=\"all_on\" id=\"all_on\"/>\n+\t\t\t<channel typeId=\"any_on\" id=\"any_on\"/>\n+\t\t\t<channel typeId=\"alert\" id=\"alert\"/>\n+\t\t\t<channel typeId=\"color\" id=\"color\"/>\n+\t\t\t<channel typeId=\"ct\" id=\"color_temperature\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>uid</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:deconz:sensor\"/>\n+\t</thing-type>\n+\n+\t<channel-type id=\"alert\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Alert</label>\n+\t</channel-type>\n+\n+\t<channel-type id=\"all_on\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>All On</label>\n+\t\t<description>\"On\" if all lights in this group are \"On\", otherwise \"Off\".</description>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"any_on\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Any On</label>\n+\t\t<description>\"On\" if any light in this group is \"On\", otherwise \"Off\".</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"color\">\n+\t\t<item-type>Color</item-type>\n+\t\t<label>Color</label>\n+\t</channel-type>\n+\n+\t<channel-type id=\"ct\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Color Temperature</label>\n+\t\t<state pattern=\"%d\" min=\"15\" max=\"100000\" step=\"100\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d3e92c72f13a0877f4bd9316f6d16dba141b2e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDAwMzU2MA==", "bodyText": "Agreed on all other comments but the same Channel is already used for other things, do changing the required item-type would be either confusing (if different for this thing) or breaking (of changed for all). I\u2018ll only change the State description (for all things).", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r514003560", "createdAt": "2020-10-29T06:06:04Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.deconz/src/main/resources/OH-INF/thing/group-thing-types.xml", "diffHunk": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"deconz\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"lightgroup\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"deconz\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Light Group</label>\n+\t\t<channels>\n+\t\t\t<channel typeId=\"all_on\" id=\"all_on\"/>\n+\t\t\t<channel typeId=\"any_on\" id=\"any_on\"/>\n+\t\t\t<channel typeId=\"alert\" id=\"alert\"/>\n+\t\t\t<channel typeId=\"color\" id=\"color\"/>\n+\t\t\t<channel typeId=\"ct\" id=\"color_temperature\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>uid</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:deconz:sensor\"/>\n+\t</thing-type>\n+\n+\t<channel-type id=\"alert\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Alert</label>\n+\t</channel-type>\n+\n+\t<channel-type id=\"all_on\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>All On</label>\n+\t\t<description>\"On\" if all lights in this group are \"On\", otherwise \"Off\".</description>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"any_on\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Any On</label>\n+\t\t<description>\"On\" if any light in this group is \"On\", otherwise \"Off\".</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"color\">\n+\t\t<item-type>Color</item-type>\n+\t\t<label>Color</label>\n+\t</channel-type>\n+\n+\t<channel-type id=\"ct\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Color Temperature</label>\n+\t\t<state pattern=\"%d\" min=\"15\" max=\"100000\" step=\"100\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzg1MTk2Mg=="}, "originalCommit": {"oid": "68d3e92c72f13a0877f4bd9316f6d16dba141b2e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzk0MzI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOTo1ODozOFrOHqsTxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxOTo1ODozOFrOHqsTxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUyODE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .withProperties(properties).withRepresentationProperty(\"id\").build();\n          \n          \n            \n                            .withProperties(properties).withRepresentationProperty(CONFIG_ID).build();", "url": "https://github.com/openhab/openhab-addons/pull/8715#discussion_r514528197", "createdAt": "2020-10-29T19:58:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.deconz/src/main/java/org/openhab/binding/deconz/internal/discovery/ThingDiscoveryService.java", "diffHunk": "@@ -93,12 +95,53 @@ protected void stopBackgroundDiscovery() {\n     }\n \n     /**\n-     * Add a sensor device to the discovery inbox.\n+     * Add a group to the discovery inbox.\n+     *\n+     * @param groupId The id of the light\n+     * @param group The group description\n+     */\n+    private void addGroup(String groupId, GroupMessage group) {\n+        final ThingUID bridgeUID = this.bridgeUID;\n+        if (bridgeUID == null) {\n+            logger.warn(\"Received a message from non-existent bridge. This most likely is a bug.\");\n+            return;\n+        }\n+\n+        ThingTypeUID thingTypeUID;\n+        GroupType groupType = group.type;\n+\n+        if (groupType == null) {\n+            logger.warn(\"No group type reported for group {} ({})\", group.modelid, group.name);\n+            return;\n+        }\n+\n+        Map<String, Object> properties = new HashMap<>();\n+        properties.put(CONFIG_ID, groupId);\n+\n+        switch (groupType) {\n+            case LIGHT_GROUP:\n+                thingTypeUID = THING_TYPE_LIGHTGROUP;\n+                break;\n+            default:\n+                logger.debug(\n+                        \"Found group: {} ({}), type {} but no thing type defined for that type. This should be reported.\",\n+                        group.id, group.name, group.type);\n+                return;\n+        }\n+\n+        ThingUID uid = new ThingUID(thingTypeUID, bridgeUID, group.id);\n+        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(uid).withBridge(bridgeUID).withLabel(group.name)\n+                .withProperties(properties).withRepresentationProperty(\"id\").build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca31f31b8aba118773eab11ce54f654485b7855"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4245, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}