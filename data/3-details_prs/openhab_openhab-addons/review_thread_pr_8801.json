{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1ODEwNTU5", "number": 8801, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NjozMFrOEvPJ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NjozMFrOEvPJ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTY2ODE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1NjozMFrOHkGt7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDowMjo1M1rOHkG9bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDg0Nw==", "bodyText": "Rather UNDEF?", "url": "https://github.com/openhab/openhab-addons/pull/8801#discussion_r507620847", "createdAt": "2020-10-19T09:56:30Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -133,74 +136,55 @@ private void updateAndPublish() {\n     private void updateChannels(ApiResponse apiResponse) {\n         Arrays.stream(apiResponse.getRecords()).findFirst()\n                 .ifPresent((record) -> record.getResponseFieldDTO().ifPresent(fields -> {\n-                    updateAlertString(WIND, fields.getVent());\n-                    updateAlertString(RAIN, fields.getPluieInondation());\n-                    updateAlertString(STORM, fields.getOrage());\n-                    updateAlertString(FLOOD, fields.getInondation());\n-                    updateAlertString(SNOW, fields.getNeige());\n-                    updateAlertString(HEAT, fields.getCanicule());\n-                    updateAlertString(FREEZE, fields.getGrandFroid());\n-                    updateAlertString(AVALANCHE, fields.getAvalanches());\n-\n-                    fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    updateAlert(WIND, fields.getVent());\n+                    updateAlert(RAIN, fields.getPluieInondation());\n+                    updateAlert(STORM, fields.getOrage());\n+                    updateAlert(FLOOD, fields.getInondation());\n+                    updateAlert(SNOW, fields.getNeige());\n+                    updateAlert(HEAT, fields.getCanicule());\n+                    updateAlert(FREEZE, fields.getGrandFroid());\n+                    updateAlert(AVALANCHE, fields.getAvalanches());\n+                    updateAlert(WAVE, fields.getVagueSubmersion());\n                     updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n-                    updateIcon(WIND, fields.getVent());\n-                    updateIcon(RAIN, fields.getPluieInondation());\n-                    updateIcon(STORM, fields.getOrage());\n-                    updateIcon(FLOOD, fields.getInondation());\n-                    updateIcon(SNOW, fields.getNeige());\n-                    updateIcon(HEAT, fields.getCanicule());\n-                    updateIcon(FREEZE, fields.getGrandFroid());\n-                    updateIcon(AVALANCHE, fields.getAvalanches());\n+                    fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    fields.getDatePrevue().ifPresent(date -> updateDate(END_TIME, date));\n                 }));\n     }\n \n-    public void updateIcon(String channelId, String value) {\n-        String iconChannelId = channelId + \"-icon\";\n-        if (isLinked(iconChannelId)) {\n-            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n-            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n-            if (image != null) {\n-                RawType picto = new RawType(image, \"image/gif\");\n-                updateState(iconChannelId, picto);\n-            }\n-        }\n-    }\n-\n-    private byte @Nullable [] getImage(String iconPath) {\n-        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n-        logger.debug(\"Path to icon image resource is: {}\", url);\n-        try (InputStream in = new BufferedInputStream(url.openStream())) {\n-            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-            int next = in.read();\n-            while (next > -1) {\n-                bos.write(next);\n-                next = in.read();\n-            }\n-            bos.flush();\n-            return bos.toByteArray();\n+    public @Nullable String getResource(String iconPath) {\n+        Bundle bundle = FrameworkUtil.getBundle(getClass());\n+        try (InputStream stream = bundle.getResource(iconPath).openStream()) {\n+            return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n         } catch (IOException e) {\n-            logger.debug(\"I/O exception occurred getting image data: {}\", e.getMessage(), e);\n+            logger.warn(\"Unable to load ressource '{}' : {}\", iconPath, e.getMessage());\n         }\n         return null;\n     }\n \n-    public void updateAlertString(String channelId, String value) {\n-        if (!value.isEmpty() && isLinked(channelId)) {\n-            int level = ALERT_LEVELS.indexOf(value);\n-            if (level != -1) {\n-                updateState(channelId, new StringType(Integer.toString(level)));\n-            } else {\n-                updateState(channelId, UnDefType.UNDEF);\n-                logger.warn(\"Value {} is not a valid alert level for channel {}\", value, channelId);\n+    public void updateAlert(String channelId, AlertLevel value) {\n+        String channelIcon = channelId + \"-icon\";\n+        if (value != AlertLevel.UNKNOWN) {\n+            if (isLinked(channelId)) {\n+                updateState(channelId, new StringType(value.name()));\n+            }\n+            if (isLinked(channelIcon)) {\n+                String resource = getResource(String.format(\"picto/%s.svg\", channelId));\n+                if (resource != null) {\n+                    resource = resource.replaceAll(ALERT_COLORS.get(AlertLevel.UNKNOWN), ALERT_COLORS.get(value));\n+                }\n+                updateState(channelIcon,\n+                        resource != null ? new RawType(resource.getBytes(), \"image/svg+xml\") : UnDefType.NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eb9b8d83819d4185ff9706e0240e82e4c5a8af0"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMzQ2Ng==", "bodyText": "UNDEF / NULL... I always have this debate :-) I understood that UNDEF was reserved to the core prior any binding update.", "url": "https://github.com/openhab/openhab-addons/pull/8801#discussion_r507623466", "createdAt": "2020-10-19T10:00:42Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -133,74 +136,55 @@ private void updateAndPublish() {\n     private void updateChannels(ApiResponse apiResponse) {\n         Arrays.stream(apiResponse.getRecords()).findFirst()\n                 .ifPresent((record) -> record.getResponseFieldDTO().ifPresent(fields -> {\n-                    updateAlertString(WIND, fields.getVent());\n-                    updateAlertString(RAIN, fields.getPluieInondation());\n-                    updateAlertString(STORM, fields.getOrage());\n-                    updateAlertString(FLOOD, fields.getInondation());\n-                    updateAlertString(SNOW, fields.getNeige());\n-                    updateAlertString(HEAT, fields.getCanicule());\n-                    updateAlertString(FREEZE, fields.getGrandFroid());\n-                    updateAlertString(AVALANCHE, fields.getAvalanches());\n-\n-                    fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    updateAlert(WIND, fields.getVent());\n+                    updateAlert(RAIN, fields.getPluieInondation());\n+                    updateAlert(STORM, fields.getOrage());\n+                    updateAlert(FLOOD, fields.getInondation());\n+                    updateAlert(SNOW, fields.getNeige());\n+                    updateAlert(HEAT, fields.getCanicule());\n+                    updateAlert(FREEZE, fields.getGrandFroid());\n+                    updateAlert(AVALANCHE, fields.getAvalanches());\n+                    updateAlert(WAVE, fields.getVagueSubmersion());\n                     updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n-                    updateIcon(WIND, fields.getVent());\n-                    updateIcon(RAIN, fields.getPluieInondation());\n-                    updateIcon(STORM, fields.getOrage());\n-                    updateIcon(FLOOD, fields.getInondation());\n-                    updateIcon(SNOW, fields.getNeige());\n-                    updateIcon(HEAT, fields.getCanicule());\n-                    updateIcon(FREEZE, fields.getGrandFroid());\n-                    updateIcon(AVALANCHE, fields.getAvalanches());\n+                    fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    fields.getDatePrevue().ifPresent(date -> updateDate(END_TIME, date));\n                 }));\n     }\n \n-    public void updateIcon(String channelId, String value) {\n-        String iconChannelId = channelId + \"-icon\";\n-        if (isLinked(iconChannelId)) {\n-            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n-            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n-            if (image != null) {\n-                RawType picto = new RawType(image, \"image/gif\");\n-                updateState(iconChannelId, picto);\n-            }\n-        }\n-    }\n-\n-    private byte @Nullable [] getImage(String iconPath) {\n-        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n-        logger.debug(\"Path to icon image resource is: {}\", url);\n-        try (InputStream in = new BufferedInputStream(url.openStream())) {\n-            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-            int next = in.read();\n-            while (next > -1) {\n-                bos.write(next);\n-                next = in.read();\n-            }\n-            bos.flush();\n-            return bos.toByteArray();\n+    public @Nullable String getResource(String iconPath) {\n+        Bundle bundle = FrameworkUtil.getBundle(getClass());\n+        try (InputStream stream = bundle.getResource(iconPath).openStream()) {\n+            return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n         } catch (IOException e) {\n-            logger.debug(\"I/O exception occurred getting image data: {}\", e.getMessage(), e);\n+            logger.warn(\"Unable to load ressource '{}' : {}\", iconPath, e.getMessage());\n         }\n         return null;\n     }\n \n-    public void updateAlertString(String channelId, String value) {\n-        if (!value.isEmpty() && isLinked(channelId)) {\n-            int level = ALERT_LEVELS.indexOf(value);\n-            if (level != -1) {\n-                updateState(channelId, new StringType(Integer.toString(level)));\n-            } else {\n-                updateState(channelId, UnDefType.UNDEF);\n-                logger.warn(\"Value {} is not a valid alert level for channel {}\", value, channelId);\n+    public void updateAlert(String channelId, AlertLevel value) {\n+        String channelIcon = channelId + \"-icon\";\n+        if (value != AlertLevel.UNKNOWN) {\n+            if (isLinked(channelId)) {\n+                updateState(channelId, new StringType(value.name()));\n+            }\n+            if (isLinked(channelIcon)) {\n+                String resource = getResource(String.format(\"picto/%s.svg\", channelId));\n+                if (resource != null) {\n+                    resource = resource.replaceAll(ALERT_COLORS.get(AlertLevel.UNKNOWN), ALERT_COLORS.get(value));\n+                }\n+                updateState(channelIcon,\n+                        resource != null ? new RawType(resource.getBytes(), \"image/svg+xml\") : UnDefType.NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDg0Nw=="}, "originalCommit": {"oid": "8eb9b8d83819d4185ff9706e0240e82e4c5a8af0"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyNDgxMg==", "bodyText": "That is the reverse.\nNULL is the initial value and should be set only by the framework.", "url": "https://github.com/openhab/openhab-addons/pull/8801#discussion_r507624812", "createdAt": "2020-10-19T10:02:53Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -133,74 +136,55 @@ private void updateAndPublish() {\n     private void updateChannels(ApiResponse apiResponse) {\n         Arrays.stream(apiResponse.getRecords()).findFirst()\n                 .ifPresent((record) -> record.getResponseFieldDTO().ifPresent(fields -> {\n-                    updateAlertString(WIND, fields.getVent());\n-                    updateAlertString(RAIN, fields.getPluieInondation());\n-                    updateAlertString(STORM, fields.getOrage());\n-                    updateAlertString(FLOOD, fields.getInondation());\n-                    updateAlertString(SNOW, fields.getNeige());\n-                    updateAlertString(HEAT, fields.getCanicule());\n-                    updateAlertString(FREEZE, fields.getGrandFroid());\n-                    updateAlertString(AVALANCHE, fields.getAvalanches());\n-\n-                    fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    updateAlert(WIND, fields.getVent());\n+                    updateAlert(RAIN, fields.getPluieInondation());\n+                    updateAlert(STORM, fields.getOrage());\n+                    updateAlert(FLOOD, fields.getInondation());\n+                    updateAlert(SNOW, fields.getNeige());\n+                    updateAlert(HEAT, fields.getCanicule());\n+                    updateAlert(FREEZE, fields.getGrandFroid());\n+                    updateAlert(AVALANCHE, fields.getAvalanches());\n+                    updateAlert(WAVE, fields.getVagueSubmersion());\n                     updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n-                    updateIcon(WIND, fields.getVent());\n-                    updateIcon(RAIN, fields.getPluieInondation());\n-                    updateIcon(STORM, fields.getOrage());\n-                    updateIcon(FLOOD, fields.getInondation());\n-                    updateIcon(SNOW, fields.getNeige());\n-                    updateIcon(HEAT, fields.getCanicule());\n-                    updateIcon(FREEZE, fields.getGrandFroid());\n-                    updateIcon(AVALANCHE, fields.getAvalanches());\n+                    fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                    fields.getDatePrevue().ifPresent(date -> updateDate(END_TIME, date));\n                 }));\n     }\n \n-    public void updateIcon(String channelId, String value) {\n-        String iconChannelId = channelId + \"-icon\";\n-        if (isLinked(iconChannelId)) {\n-            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n-            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n-            if (image != null) {\n-                RawType picto = new RawType(image, \"image/gif\");\n-                updateState(iconChannelId, picto);\n-            }\n-        }\n-    }\n-\n-    private byte @Nullable [] getImage(String iconPath) {\n-        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n-        logger.debug(\"Path to icon image resource is: {}\", url);\n-        try (InputStream in = new BufferedInputStream(url.openStream())) {\n-            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-            int next = in.read();\n-            while (next > -1) {\n-                bos.write(next);\n-                next = in.read();\n-            }\n-            bos.flush();\n-            return bos.toByteArray();\n+    public @Nullable String getResource(String iconPath) {\n+        Bundle bundle = FrameworkUtil.getBundle(getClass());\n+        try (InputStream stream = bundle.getResource(iconPath).openStream()) {\n+            return new BufferedReader(new InputStreamReader(stream)).lines().collect(Collectors.joining(\"\\n\"));\n         } catch (IOException e) {\n-            logger.debug(\"I/O exception occurred getting image data: {}\", e.getMessage(), e);\n+            logger.warn(\"Unable to load ressource '{}' : {}\", iconPath, e.getMessage());\n         }\n         return null;\n     }\n \n-    public void updateAlertString(String channelId, String value) {\n-        if (!value.isEmpty() && isLinked(channelId)) {\n-            int level = ALERT_LEVELS.indexOf(value);\n-            if (level != -1) {\n-                updateState(channelId, new StringType(Integer.toString(level)));\n-            } else {\n-                updateState(channelId, UnDefType.UNDEF);\n-                logger.warn(\"Value {} is not a valid alert level for channel {}\", value, channelId);\n+    public void updateAlert(String channelId, AlertLevel value) {\n+        String channelIcon = channelId + \"-icon\";\n+        if (value != AlertLevel.UNKNOWN) {\n+            if (isLinked(channelId)) {\n+                updateState(channelId, new StringType(value.name()));\n+            }\n+            if (isLinked(channelIcon)) {\n+                String resource = getResource(String.format(\"picto/%s.svg\", channelId));\n+                if (resource != null) {\n+                    resource = resource.replaceAll(ALERT_COLORS.get(AlertLevel.UNKNOWN), ALERT_COLORS.get(value));\n+                }\n+                updateState(channelIcon,\n+                        resource != null ? new RawType(resource.getBytes(), \"image/svg+xml\") : UnDefType.NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyMDg0Nw=="}, "originalCommit": {"oid": "8eb9b8d83819d4185ff9706e0240e82e4c5a8af0"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4099, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}