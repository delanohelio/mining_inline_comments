{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTE3MzQ0", "number": 8098, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMDo1MDoxOVrOENod4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMDo1OTo1M1rOENogjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzI5OTU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/Scene.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMDo1MDoxOVrOGwXBWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoxNjoyNFrOGwd3YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MjAxMA==", "bodyText": "To deal with the @NonNullByDefault warnings you can do one of three things:\n\nAdd the @NonNullByDefault to the class.\nMake sure that your class name ends in DTO\nMake sure that your class is in a package or subpackage called dto.\n\nPlease do one of the three.", "url": "https://github.com/openhab/openhab-addons/pull/8098#discussion_r453362010", "createdAt": "2020-07-12T20:50:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/Scene.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.hue.internal;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.smarthome.core.types.StateOption;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Basic scene information.\n+ *\n+ * @author Hengrui Jiang - Initial contribution\n+ */\n+public class Scene {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8b65d21d36438a9d27a1c399b4a6c975f6a1de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ0NjQzMA==", "bodyText": "This class is used to map the result of a hue API JSON result. That's why it does not have @NonNullByDefault like all other classes of this kind in this binding (and most of other bindings).", "url": "https://github.com/openhab/openhab-addons/pull/8098#discussion_r453446430", "createdAt": "2020-07-13T05:44:55Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/Scene.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.hue.internal;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.smarthome.core.types.StateOption;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Basic scene information.\n+ *\n+ * @author Hengrui Jiang - Initial contribution\n+ */\n+public class Scene {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MjAxMA=="}, "originalCommit": {"oid": "0b8b65d21d36438a9d27a1c399b4a6c975f6a1de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3NDE0NA==", "bodyText": "I finally added @NonNullByDefault.", "url": "https://github.com/openhab/openhab-addons/pull/8098#discussion_r453474144", "createdAt": "2020-07-13T08:16:24Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/Scene.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.hue.internal;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.smarthome.core.types.StateOption;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Basic scene information.\n+ *\n+ * @author Hengrui Jiang - Initial contribution\n+ */\n+public class Scene {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MjAxMA=="}, "originalCommit": {"oid": "0b8b65d21d36438a9d27a1c399b4a6c975f6a1de"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzMwMjc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMDo1NDo0N1rOGwXC4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODoxNjozOVrOGwd3sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MjQwMQ==", "bodyText": "Why are you using parallelStream here? How large is the scene list expected to be? If it is less than 100 then just use a regular stream instead.", "url": "https://github.com/openhab/openhab-addons/pull/8098#discussion_r453362401", "createdAt": "2020-07-12T20:54:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java", "diffHunk": "@@ -397,6 +418,33 @@ public void onGroupGone() {\n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.group-removed\");\n     }\n \n+    /**\n+     * Sets the state options for applicable scenes.\n+     */\n+    @Override\n+    public void onScenesUpdated(List<Scene> updatedScenes) {\n+        List<StateOption> stateOptions = Collections.emptyList();\n+        consoleScenesList = new ArrayList<>();\n+        HueClient handler = getHueClient();\n+        if (handler != null) {\n+            FullGroup group = handler.getGroupById(groupId);\n+            if (group != null) {\n+                stateOptions = updatedScenes.parallelStream()//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8b65d21d36438a9d27a1c399b4a6c975f6a1de"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ0NTM3NQ==", "bodyText": "It was @leluna initial choice.\nYes, I think it will be generally less than 100, except if you have defined a very big number of rooms in your home or you created a lot of hue scenes.", "url": "https://github.com/openhab/openhab-addons/pull/8098#discussion_r453445375", "createdAt": "2020-07-13T05:40:27Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java", "diffHunk": "@@ -397,6 +418,33 @@ public void onGroupGone() {\n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.group-removed\");\n     }\n \n+    /**\n+     * Sets the state options for applicable scenes.\n+     */\n+    @Override\n+    public void onScenesUpdated(List<Scene> updatedScenes) {\n+        List<StateOption> stateOptions = Collections.emptyList();\n+        consoleScenesList = new ArrayList<>();\n+        HueClient handler = getHueClient();\n+        if (handler != null) {\n+            FullGroup group = handler.getGroupById(groupId);\n+            if (group != null) {\n+                stateOptions = updatedScenes.parallelStream()//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MjQwMQ=="}, "originalCommit": {"oid": "0b8b65d21d36438a9d27a1c399b4a6c975f6a1de"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ3NDIyNg==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/8098#discussion_r453474226", "createdAt": "2020-07-13T08:16:39Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueGroupHandler.java", "diffHunk": "@@ -397,6 +418,33 @@ public void onGroupGone() {\n         updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.GONE, \"@text/offline.group-removed\");\n     }\n \n+    /**\n+     * Sets the state options for applicable scenes.\n+     */\n+    @Override\n+    public void onScenesUpdated(List<Scene> updatedScenes) {\n+        List<StateOption> stateOptions = Collections.emptyList();\n+        consoleScenesList = new ArrayList<>();\n+        HueClient handler = getHueClient();\n+        if (handler != null) {\n+            FullGroup group = handler.getGroupById(groupId);\n+            if (group != null) {\n+                stateOptions = updatedScenes.parallelStream()//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2MjQwMQ=="}, "originalCommit": {"oid": "0b8b65d21d36438a9d27a1c399b4a6c975f6a1de"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzMwNjM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQyMDo1OTo1M1rOGwXEnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjo0NjowMVrOGwdS_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2Mjg0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            initJob = scheduler.schedule(new PollingRunnable() {\n          \n          \n            \n                                @Override\n          \n          \n            \n                                protected void doConnectedRun() throws IOException, ApiException {\n          \n          \n            \n                                }\n          \n          \n            \n                            }, 0, TimeUnit.SECONDS);\n          \n          \n            \n                            initJob = scheduler.submit(new PollingRunnable() {\n          \n          \n            \n                                @Override\n          \n          \n            \n                                protected void doConnectedRun() throws IOException, ApiException {\n          \n          \n            \n                                }\n          \n          \n            \n                            });", "url": "https://github.com/openhab/openhab-addons/pull/8098#discussion_r453362847", "createdAt": "2020-07-12T20:59:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -634,6 +683,15 @@ public void initialize() {\n             if (hueBridge == null) {\n                 hueBridge = new HueBridge(ip, hueBridgeConfig.getPort(), hueBridgeConfig.getProtocol(), scheduler);\n                 hueBridge.setTimeout(5000);\n+\n+                // Try a first connection that will fail, then try to authenticate,\n+                // and finally change the bridge status to ONLINE\n+                initJob = scheduler.schedule(new PollingRunnable() {\n+                    @Override\n+                    protected void doConnectedRun() throws IOException, ApiException {\n+                    }\n+                }, 0, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b8b65d21d36438a9d27a1c399b4a6c975f6a1de"}, "originalPosition": 433}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2NDgyOA==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/8098#discussion_r453464828", "createdAt": "2020-07-13T06:46:01Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.hue/src/main/java/org/openhab/binding/hue/internal/handler/HueBridgeHandler.java", "diffHunk": "@@ -634,6 +683,15 @@ public void initialize() {\n             if (hueBridge == null) {\n                 hueBridge = new HueBridge(ip, hueBridgeConfig.getPort(), hueBridgeConfig.getProtocol(), scheduler);\n                 hueBridge.setTimeout(5000);\n+\n+                // Try a first connection that will fail, then try to authenticate,\n+                // and finally change the bridge status to ONLINE\n+                initJob = scheduler.schedule(new PollingRunnable() {\n+                    @Override\n+                    protected void doConnectedRun() throws IOException, ApiException {\n+                    }\n+                }, 0, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM2Mjg0Nw=="}, "originalCommit": {"oid": "0b8b65d21d36438a9d27a1c399b4a6c975f6a1de"}, "originalPosition": 433}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4713, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}