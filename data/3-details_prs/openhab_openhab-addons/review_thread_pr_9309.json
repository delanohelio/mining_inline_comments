{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MzgyODcw", "number": 9309, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNToxN1rOFDF8SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToyMDoyMVrOFDGFUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Nzg3NDAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.bluetooth/src/test/java/org/openhab/binding/bluetooth/util/RetryFutureTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNToxN1rOIClI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNToxN1rOIClI4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NjU0Nw==", "bodyText": "The purpose of this test was to make sure that a composed future got cancelled when the retryFuture got cancelled. Since it possible that the retry future would get cancelled before the composed future was even created it was necessary to wait, or simply sleep, until we know that the composed future was created in another thread so we can attempt to cancel it.\nThe waitForAssert can still return false if the above race condition is not dealt with.\nretryFuture.cancel should also cancel composedFuture before returning so adding any sort of waitForAssert is meaningless since it should have already occurred during the retryFuture.cancel call.", "url": "https://github.com/openhab/openhab-addons/pull/9309#discussion_r539576547", "createdAt": "2020-12-09T19:15:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/test/java/org/openhab/binding/bluetooth/util/RetryFutureTest.java", "diffHunk": "@@ -151,10 +152,9 @@ void composeWithRetry1Cancel() throws InterruptedException {\n             if (!latch.await(100, TimeUnit.MILLISECONDS)) {\n                 fail(\"Timeout while waiting for latch\");\n             }\n-            Thread.sleep(1);\n             retryFuture.cancel(false);\n \n-            assertTrue(composedFuture.isCancelled());\n+            waitForAssert(() -> assertTrue(composedFuture.isCancelled()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9245d422fa5f6a42ac6d9db79259c05f7f5249"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Nzg5NzE0OnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.binding.bluetooth/src/test/java/org/openhab/binding/bluetooth/util/RetryFutureTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToyMDoyMVrOIClV1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToyMDoyMVrOIClV1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3OTg2MQ==", "bodyText": "The reason for this sleep is to hopefully prevent the very small chance that the retryFuture gets cancelled before the composed future is returned from the function (which in this case would be the very next line of code). Since we know where each thread is in its processing I think that giving a 1 millisecond delay would be more than sufficient to allow the composed future to return before we attempt to cancel the retryFuture.", "url": "https://github.com/openhab/openhab-addons/pull/9309#discussion_r539579861", "createdAt": "2020-12-09T19:20:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.bluetooth/src/test/java/org/openhab/binding/bluetooth/util/RetryFutureTest.java", "diffHunk": "@@ -151,10 +152,9 @@ void composeWithRetry1Cancel() throws InterruptedException {\n             if (!latch.await(100, TimeUnit.MILLISECONDS)) {\n                 fail(\"Timeout while waiting for latch\");\n             }\n-            Thread.sleep(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b9245d422fa5f6a42ac6d9db79259c05f7f5249"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3607, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}