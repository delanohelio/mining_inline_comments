{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MjU1OTYy", "number": 7251, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMzo1OToxOVrODsbC4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDoxNFrODuGMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTA3MDQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMzo1OToxOVrOF9R9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjoyNjo1M1rOF_-tDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMTc3NA==", "bodyText": "If there is a better way to do this, let me know. I asked for help on the community forum (https://community.openhab.org/t/ensuring-a-single-bridge-per-binding/94928), but didn't get any responses.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r399801774", "createdAt": "2020-03-29T13:59:19Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -73,6 +84,18 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         scheduler.execute(() -> {\n+            synchronized (LOCK) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgzOTEzMQ==", "bodyText": "Why are you trying to enforce a single bridge?\nI think the problem in this particular case is that what you really expect is a single instance of InsteonBinding. The proper way to enforce that would be through a OSGI service like managing the InsteonBinding lifecycle from within the ThingHandlerFactory.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r399839131", "createdAt": "2020-03-29T19:04:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -73,6 +84,18 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         scheduler.execute(() -> {\n+            synchronized (LOCK) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMTc3NA=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg0MDE0NQ==", "bodyText": "Another option you have is instead of the console extension trying to get an instance of InsteonNetworkHandler you have instances of InsteonNetworkHandler register themselves with the console extension. That should be easy enough by registering InsteonNetworkHandler instances as they are created in ThingHandlerFactory. ThingHandlerFactory can easily get the console extension as a reference.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r399840145", "createdAt": "2020-03-29T19:13:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -73,6 +84,18 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         scheduler.execute(() -> {\n+            synchronized (LOCK) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMTc3NA=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg1MjkwOQ==", "bodyText": "There is only a single network that can exist anyway the way the Insteon protocol works (via electrical wires and wirelessly), and the ported code base assumes only a single network.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r399852909", "createdAt": "2020-03-29T20:57:51Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -73,6 +84,18 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         scheduler.execute(() -> {\n+            synchronized (LOCK) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMTc3NA=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3Njg5Mg==", "bodyText": "@cpmeister, If possible I'd like to get this change included in the 2.4 release. It will be helpful as people migrate from the OH1 binding. I also noticed the other reviewers were removed and you are the only one left.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402276892", "createdAt": "2020-04-02T12:33:21Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -73,6 +84,18 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         scheduler.execute(() -> {\n+            synchronized (LOCK) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMTc3NA=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzMTk0OQ==", "bodyText": "This has been removed", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402631949", "createdAt": "2020-04-02T22:26:53Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -73,6 +84,18 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         scheduler.execute(() -> {\n+            synchronized (LOCK) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwMTc3NA=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjYxOTc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/command/InsteonCommandExtension.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyMjoyOVrOF_6EYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjo0MDowMFrOF__AlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NjAwMQ==", "bodyText": "Don't retrieve a InsteonNetworkHandler instance statically. Instead you want to get it from OSGI.\nYou can add the following methods to this class.\n@Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC, policyOption = ReferencePolicyOption.GREEDY)\npublic void setInsteonNetworkHandler(InsteonNetworkHandler handler){\n//logic\n}\npublic void unsetInsteonNetworkHandler(InsteonNetworkHandler handler){\n//logic\n}\n\nAnd then in the handler factory add:\n    private final Map<ThingUID, @Nullable ServiceRegistration<?>> serviceRegs = new HashMap<>();\n\n\n    private synchronized void registerInsteonNetworkHandler(InsteonNetworkHandler handler) {\n        this.serviceRegs.put(handler.getThing().getUID(), bundleContext.registerService(InsteonNetworkHandler.class.getName(),\n                adapter, new Hashtable<String, Object>()));\n    }\n\n    @Override\n    protected synchronized void removeHandler(ThingHandler thingHandler) {\n        if (thingHandler instanceof InsteonNetworkHandler) {\n            UID uid = thingHandler.getThing().getUID();\n            ServiceRegistration<?> serviceReg = this.serviceRegs.remove(uid);\n            if (serviceReg != null) {\n                serviceReg.unregister();\n            }\n        }\n    }\n\nJust make sure to call registerInsteonNetworkHandler when you create the InsteonNetworkHandler instance.\nThe code may not work verbatim so you might have to adjust it to get it to work, but you should get the idea.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402556001", "createdAt": "2020-04-02T19:22:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/command/InsteonCommandExtension.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.insteon.internal.command;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.console.Console;\n+import org.eclipse.smarthome.io.console.extensions.AbstractConsoleCommandExtension;\n+import org.eclipse.smarthome.io.console.extensions.ConsoleCommandExtension;\n+import org.openhab.binding.insteon.internal.handler.InsteonNetworkHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * Console commands for the Insteon binding\n+ *\n+ * @author Rob Nielsen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ConsoleCommandExtension.class)\n+public class InsteonCommandExtension extends AbstractConsoleCommandExtension {\n+\n+    private static final String DISPLAY_DEVICES = \"display_devices\";\n+    private static final String DISPLAY_CHANNELS = \"display_channels\";\n+    private static final String DISPLAY_LOCAL_DATABASE = \"display_local_database\";\n+\n+    public InsteonCommandExtension() {\n+        super(\"insteon\", \"Interact with the Insteon integration.\");\n+    }\n+\n+    @Override\n+    public void execute(String[] args, Console console) {\n+        if (args.length > 0) {\n+            InsteonNetworkHandler handler = InsteonNetworkHandler.getInsteonNetworkHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzMjEzMw==", "bodyText": "Implemented as suggested", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402632133", "createdAt": "2020-04-02T22:27:17Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/command/InsteonCommandExtension.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.insteon.internal.command;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.console.Console;\n+import org.eclipse.smarthome.io.console.extensions.AbstractConsoleCommandExtension;\n+import org.eclipse.smarthome.io.console.extensions.ConsoleCommandExtension;\n+import org.openhab.binding.insteon.internal.handler.InsteonNetworkHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * Console commands for the Insteon binding\n+ *\n+ * @author Rob Nielsen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ConsoleCommandExtension.class)\n+public class InsteonCommandExtension extends AbstractConsoleCommandExtension {\n+\n+    private static final String DISPLAY_DEVICES = \"display_devices\";\n+    private static final String DISPLAY_CHANNELS = \"display_channels\";\n+    private static final String DISPLAY_LOCAL_DATABASE = \"display_local_database\";\n+\n+    public InsteonCommandExtension() {\n+        super(\"insteon\", \"Interact with the Insteon integration.\");\n+    }\n+\n+    @Override\n+    public void execute(String[] args, Console console) {\n+        if (args.length > 0) {\n+            InsteonNetworkHandler handler = InsteonNetworkHandler.getInsteonNetworkHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NjAwMQ=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzNjk0OQ==", "bodyText": "implemented", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402636949", "createdAt": "2020-04-02T22:40:00Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/command/InsteonCommandExtension.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.insteon.internal.command;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.io.console.Console;\n+import org.eclipse.smarthome.io.console.extensions.AbstractConsoleCommandExtension;\n+import org.eclipse.smarthome.io.console.extensions.ConsoleCommandExtension;\n+import org.openhab.binding.insteon.internal.handler.InsteonNetworkHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ *\n+ * Console commands for the Insteon binding\n+ *\n+ * @author Rob Nielsen - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ConsoleCommandExtension.class)\n+public class InsteonCommandExtension extends AbstractConsoleCommandExtension {\n+\n+    private static final String DISPLAY_DEVICES = \"display_devices\";\n+    private static final String DISPLAY_CHANNELS = \"display_channels\";\n+    private static final String DISPLAY_LOCAL_DATABASE = \"display_local_database\";\n+\n+    public InsteonCommandExtension() {\n+        super(\"insteon\", \"Interact with the Insteon integration.\");\n+    }\n+\n+    @Override\n+    public void execute(String[] args, Console console) {\n+        if (args.length > 0) {\n+            InsteonNetworkHandler handler = InsteonNetworkHandler.getInsteonNetworkHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NjAwMQ=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjYyMzU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyMzozMlrOF_6Guw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDowNjowNFrOGAAtsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NjYwMw==", "bodyText": "Getting the InsteonNetworkHandler from the bridge is preferred to getting it statically.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402556603", "createdAt": "2020-04-02T19:23:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonDeviceHandler.java", "diffHunk": "@@ -322,18 +333,30 @@ public void channelLinked(ChannelUID channelUID) {\n                 new InsteonAddress(config.getAddress()), productKey, params);\n         getInsteonBinding().addFeatureListener(bindingConfig);\n \n-        logger.debug(\"channel {} linked with the feature: {} parameters: {}\", channelUID.getAsString(), feature,\n-                params);\n+        StringBuilder builder = new StringBuilder(channelUID.getAsString());\n+        builder.append(\" feature = \");\n+        builder.append(feature);\n+        builder.append(\" parameters = \");\n+        builder.append(params);\n+        String msg = builder.toString();\n+        logger.debug(\"{}\", msg);\n+\n+        getInsteonNetworkHandler().linked(channelUID, msg);\n     }\n \n     @Override\n     public void channelUnlinked(ChannelUID channelUID) {\n         getInsteonBinding().removeFeatureListener(channelUID);\n+        getInsteonNetworkHandler().unlinked(channelUID);\n \n         logger.debug(\"channel {} unlinked \", channelUID.getAsString());\n     }\n \n+    private @Nullable InsteonNetworkHandler getInsteonNetworkHandler() {\n+        return (InsteonNetworkHandler) getBridge().getHandler();\n+    }\n+\n     private @Nullable InsteonBinding getInsteonBinding() {\n-        return ((InsteonNetworkHandler) getBridge().getHandler()).getInsteonBinding();\n+        return getInsteonNetworkHandler().getInsteonBinding();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMDE4OQ==", "bodyText": "It does, just eliminating some redundant code:\nprivate @Nullable InsteonNetworkHandler getInsteonNetworkHandler() {\n    return (InsteonNetworkHandler) getBridge().getHandler();\n}", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402600189", "createdAt": "2020-04-02T21:15:02Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonDeviceHandler.java", "diffHunk": "@@ -322,18 +333,30 @@ public void channelLinked(ChannelUID channelUID) {\n                 new InsteonAddress(config.getAddress()), productKey, params);\n         getInsteonBinding().addFeatureListener(bindingConfig);\n \n-        logger.debug(\"channel {} linked with the feature: {} parameters: {}\", channelUID.getAsString(), feature,\n-                params);\n+        StringBuilder builder = new StringBuilder(channelUID.getAsString());\n+        builder.append(\" feature = \");\n+        builder.append(feature);\n+        builder.append(\" parameters = \");\n+        builder.append(params);\n+        String msg = builder.toString();\n+        logger.debug(\"{}\", msg);\n+\n+        getInsteonNetworkHandler().linked(channelUID, msg);\n     }\n \n     @Override\n     public void channelUnlinked(ChannelUID channelUID) {\n         getInsteonBinding().removeFeatureListener(channelUID);\n+        getInsteonNetworkHandler().unlinked(channelUID);\n \n         logger.debug(\"channel {} unlinked \", channelUID.getAsString());\n     }\n \n+    private @Nullable InsteonNetworkHandler getInsteonNetworkHandler() {\n+        return (InsteonNetworkHandler) getBridge().getHandler();\n+    }\n+\n     private @Nullable InsteonBinding getInsteonBinding() {\n-        return ((InsteonNetworkHandler) getBridge().getHandler()).getInsteonBinding();\n+        return getInsteonNetworkHandler().getInsteonBinding();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NjYwMw=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzNzQ2NQ==", "bodyText": "getInsteonNetworkHandler() does get it from the bridge. It right above this method.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402637465", "createdAt": "2020-04-02T22:41:31Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonDeviceHandler.java", "diffHunk": "@@ -322,18 +333,30 @@ public void channelLinked(ChannelUID channelUID) {\n                 new InsteonAddress(config.getAddress()), productKey, params);\n         getInsteonBinding().addFeatureListener(bindingConfig);\n \n-        logger.debug(\"channel {} linked with the feature: {} parameters: {}\", channelUID.getAsString(), feature,\n-                params);\n+        StringBuilder builder = new StringBuilder(channelUID.getAsString());\n+        builder.append(\" feature = \");\n+        builder.append(feature);\n+        builder.append(\" parameters = \");\n+        builder.append(params);\n+        String msg = builder.toString();\n+        logger.debug(\"{}\", msg);\n+\n+        getInsteonNetworkHandler().linked(channelUID, msg);\n     }\n \n     @Override\n     public void channelUnlinked(ChannelUID channelUID) {\n         getInsteonBinding().removeFeatureListener(channelUID);\n+        getInsteonNetworkHandler().unlinked(channelUID);\n \n         logger.debug(\"channel {} unlinked \", channelUID.getAsString());\n     }\n \n+    private @Nullable InsteonNetworkHandler getInsteonNetworkHandler() {\n+        return (InsteonNetworkHandler) getBridge().getHandler();\n+    }\n+\n     private @Nullable InsteonBinding getInsteonBinding() {\n-        return ((InsteonNetworkHandler) getBridge().getHandler()).getInsteonBinding();\n+        return getInsteonNetworkHandler().getInsteonBinding();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NjYwMw=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NDg4MQ==", "bodyText": "oops, I glanced right over it and didn't see it.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402664881", "createdAt": "2020-04-03T00:06:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonDeviceHandler.java", "diffHunk": "@@ -322,18 +333,30 @@ public void channelLinked(ChannelUID channelUID) {\n                 new InsteonAddress(config.getAddress()), productKey, params);\n         getInsteonBinding().addFeatureListener(bindingConfig);\n \n-        logger.debug(\"channel {} linked with the feature: {} parameters: {}\", channelUID.getAsString(), feature,\n-                params);\n+        StringBuilder builder = new StringBuilder(channelUID.getAsString());\n+        builder.append(\" feature = \");\n+        builder.append(feature);\n+        builder.append(\" parameters = \");\n+        builder.append(params);\n+        String msg = builder.toString();\n+        logger.debug(\"{}\", msg);\n+\n+        getInsteonNetworkHandler().linked(channelUID, msg);\n     }\n \n     @Override\n     public void channelUnlinked(ChannelUID channelUID) {\n         getInsteonBinding().removeFeatureListener(channelUID);\n+        getInsteonNetworkHandler().unlinked(channelUID);\n \n         logger.debug(\"channel {} unlinked \", channelUID.getAsString());\n     }\n \n+    private @Nullable InsteonNetworkHandler getInsteonNetworkHandler() {\n+        return (InsteonNetworkHandler) getBridge().getHandler();\n+    }\n+\n     private @Nullable InsteonBinding getInsteonBinding() {\n-        return ((InsteonNetworkHandler) getBridge().getHandler()).getInsteonBinding();\n+        return getInsteonNetworkHandler().getInsteonBinding();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1NjYwMw=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjYyNjAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOToyNDoxNFrOF_6IOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMjoyNzozOFrOF_-uQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1Njk4Nw==", "bodyText": "Don't use non-final static fields.", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402556987", "createdAt": "2020-04-02T19:24:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -41,10 +47,13 @@\n @NonNullByDefault\n @SuppressWarnings(\"null\")\n public class InsteonNetworkHandler extends BaseBridgeHandler {\n-\n+    private static final Object LOCK = new Object();\n     private static final int LOG_DEVICE_STATISTICS_DELAY_IN_SECONDS = 600;\n     private static final int SETTLE_TIME_IN_SECONDS = 5;\n \n+    @Nullable\n+    private static InsteonNetworkHandler insteonNetworkHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYzMjI1OA==", "bodyText": "removed", "url": "https://github.com/openhab/openhab-addons/pull/7251#discussion_r402632258", "createdAt": "2020-04-02T22:27:38Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/handler/InsteonNetworkHandler.java", "diffHunk": "@@ -41,10 +47,13 @@\n @NonNullByDefault\n @SuppressWarnings(\"null\")\n public class InsteonNetworkHandler extends BaseBridgeHandler {\n-\n+    private static final Object LOCK = new Object();\n     private static final int LOG_DEVICE_STATISTICS_DELAY_IN_SECONDS = 600;\n     private static final int SETTLE_TIME_IN_SECONDS = 5;\n \n+    @Nullable\n+    private static InsteonNetworkHandler insteonNetworkHandler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU1Njk4Nw=="}, "originalCommit": {"oid": "cc0a49f0148054f6b69f4d3d68531dc1e7e0708e"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 482, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}