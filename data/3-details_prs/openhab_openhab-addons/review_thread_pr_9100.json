{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjY4NjY4", "number": 9100, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo1NToyNlrOE9VoEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo1NToyNlrOE9VoEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzUyOTEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openwebnet/src/main/java/org/openhab/binding/openwebnet/handler/OpenWebNetLightingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo1NToyNlrOH5-dRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDoxMjoyNFrOH6dCew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU1NDE4Mg==", "bodyText": "This empty line introduces a new checkstyle warning. Can you also check the other two checkstyle warnings?", "url": "https://github.com/openhab/openhab-addons/pull/9100#discussion_r530554182", "createdAt": "2020-11-25T17:55:26Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.openwebnet/src/main/java/org/openhab/binding/openwebnet/handler/OpenWebNetLightingHandler.java", "diffHunk": "@@ -194,163 +215,150 @@ protected String ownIdPrefix() {\n     @Override\n     protected void handleMessage(BaseOpenMessage msg) {\n         super.handleMessage(msg);\n-        updateLightState((Lighting) msg);\n-    }\n-\n-    /**\n-     * Updates light state based on a OWN Lighting event message received\n-     *\n-     * @param msg the Lighting message received\n-     */\n-    private void updateLightState(Lighting msg) {\n-        logger.debug(\"updateLightState() for thing: {}\", thing.getUID());\n+        logger.debug(\"handleMessage() for thing: {}\", thing.getUID());\n         ThingTypeUID thingType = thing.getThingTypeUID();\n         if (THING_TYPE_ZB_DIMMER.equals(thingType) || THING_TYPE_BUS_DIMMER.equals(thingType)) {\n-            updateLightBrightnessState(msg);\n+            updateBrightness((Lighting) msg);\n         } else {\n-            updateLightOnOffState(msg);\n+            updateOnOffState((Lighting) msg);\n         }\n     }\n \n     /**\n-     * Updates on/off state based on a OWN Lighting event message received\n+     * Updates brightness based on OWN Lighting message received\n      *\n      * @param msg the Lighting message received\n      */\n-    private void updateLightOnOffState(Lighting msg) {\n-        String channelID;\n-        OpenWebNetBridgeHandler brH = bridgeHandler;\n-        if (brH != null) {\n-            if (brH.isBusGateway()) {\n-                channelID = CHANNEL_SWITCH;\n-            } else {\n-                WhereZigBee w = (WhereZigBee) (msg.getWhere());\n-                if (WhereZigBee.UNIT_02.equals(w.getUnit())) {\n-                    channelID = CHANNEL_SWITCH_02;\n-                } else {\n-                    channelID = CHANNEL_SWITCH_01;\n-                }\n-            }\n+    private synchronized void updateBrightness(Lighting msg) {\n+        long now = System.currentTimeMillis();\n+        logger.debug(\"  $BRI updateBrightness({})       || bri={} briBeforeOff={}\", msg, brightness,\n+                brightnessBeforeOff);\n+        long delta = now - lastBrightnessChangeSentTS;\n+        boolean belowThresh = delta < BRIGHTNESS_CHANGE_DELAY_MSEC;\n+        logger.debug(\"  $BRI delta={}ms {}\", delta, (belowThresh ? \"< DELAY\" : \"\"));\n+        if (belowThresh) {\n+            // we just sent a command from OH, so we can ignore this message from network\n+            logger.debug(\"  $BRI a request was sent {} < {} ms --> no action needed\", delta,\n+                    BRIGHTNESS_CHANGE_DELAY_MSEC);\n+        } else {\n             if (msg.isOn()) {\n-                updateState(channelID, OnOffType.ON);\n-            } else if (msg.isOff()) {\n-                updateState(channelID, OnOffType.OFF);\n+                logger.debug(\"  $BRI \\\"ON\\\" notification from network, scheduling requestStatus...\");\n+                // we must wait BRIGHTNESS_STATUS_REQUEST_DELAY_MSEC to be sure dimmer has reached final level\n+                scheduler.schedule(() -> {\n+                    requestStatus(CHANNEL_BRIGHTNESS);\n+                }, BRIGHTNESS_STATUS_REQUEST_DELAY_MSEC, TimeUnit.MILLISECONDS);\n             } else {\n-                logger.debug(\"updateLightOnOffState() Ignoring unsupported WHAT for thing {}. Frame={}\",\n-                        getThing().getUID(), msg.getFrameValue());\n+                logger.debug(\"  $BRI update from network\");\n+                if (msg.getWhat() != null) {\n+                    updateBrightnessState(msg);\n+                } else { // dimension notification\n+                    if (msg.getDim() == Lighting.DIM.DIMMER_LEVEL_100) {\n+                        int newBrightness;\n+                        try {\n+                            newBrightness = msg.parseDimmerLevel100();\n+                        } catch (FrameException fe) {\n+                            logger.warn(\"updateBrightness() Wrong value for dimmerLevel100 in message: {}\", msg);\n+                            return;\n+                        }\n+                        logger.debug(\"  $BRI DIMMER_LEVEL_100 newBrightness={}\", newBrightness);\n+                        updateState(CHANNEL_BRIGHTNESS, new PercentType(newBrightness));\n+                        if (newBrightness == 0) {\n+                            brightnessBeforeOff = brightness;\n+                        }\n+                        brightness = newBrightness;\n+                    } else {\n+                        logger.warn(\"updateBrightness() Cannot handle message {} for thing {}\", msg,\n+                                getThing().getUID());\n+                        return;\n+                    }\n+                }\n             }\n         }\n+        logger.debug(\"  $BRI---END updateBrightness({}) || bri={} briBeforeOff={}\", msg, brightness,\n+                brightnessBeforeOff);\n     }\n \n     /**\n-     * Updates brightness level based on a OWN Lighting event message received\n+     * Updates light brightness state based on a OWN Lighting message\n      *\n      * @param msg the Lighting message received\n      */\n-    private synchronized void updateLightBrightnessState(Lighting msg) {\n-        final String channel = CHANNEL_BRIGHTNESS;\n-        logger.debug(\"  $BRI updateLightBrightnessState() msg={}\", msg);\n-        logger.debug(\"  $BRI updateLightBr() latestBriWhat={} latestBriBeforeOff={} brightnessLevelRequested={}\",\n-                latestBrightnessWhat, latestBrightnessWhatBeforeOff, brightnessLevelRequested);\n-        long now = System.currentTimeMillis();\n-        long delta = now - lastBrightnessChangeSentTS;\n-        logger.debug(\"  $BRI now={} -> delta={}\", now, delta);\n-        if (msg.isOn() && !brightnessLevelRequested) {\n-            if (delta >= BRIGHTNESS_CHANGE_DELAY_MSEC) {\n-                // we send a light brightness status request ONLY if last brightness change\n-                // was not just sent (>=BRIGHTNESS_CHANGE_DELAY_MSEC ago)\n-                logger.debug(\"  $BRI change sent >={}ms ago, sending requestStatus...\", BRIGHTNESS_CHANGE_DELAY_MSEC);\n-                Where w = deviceWhere;\n-                if (w != null) {\n-                    try {\n-                        send(Lighting.requestStatus(w.value()));\n-                        brightnessLevelRequested = true;\n-                    } catch (OWNException e) {\n-                        logger.warn(\"  $BRI exception while requesting light state: {}\", e.getMessage());\n-                    }\n-                }\n-            } else {\n-                logger.debug(\"  $BRI change sent {}<{}ms, NO requestStatus needed\", delta,\n-                        BRIGHTNESS_CHANGE_DELAY_MSEC);\n+    private void updateBrightnessState(Lighting msg) {\n+        if (msg.getWhat() != null) {\n+            int newBrightnessWhat = msg.getWhat().value();\n+            int brightnessWhat = UNKNOWN_STATE;\n+            if (brightness != UNKNOWN_STATE) {\n+                brightnessWhat = Lighting.percentToWhat(brightness).value();\n             }\n-        } else {\n-            logger.debug(\"  $BRI update from network -> level should be present in WHAT part of the message\");\n-            if (msg.getWhat() != null) {\n-                int newLevel = msg.getWhat().value();\n-                logger.debug(\"  $BRI current level={} ----> new level={}\", latestBrightnessWhat, newLevel);\n-                if (latestBrightnessWhat != newLevel) {\n-                    updateState(channel, new PercentType(Lighting.levelToPercent(newLevel)));\n-                    if (msg.isOff()) {\n-                        latestBrightnessWhatBeforeOff = latestBrightnessWhat;\n-                    }\n-                    latestBrightnessWhat = newLevel;\n-                } else {\n-                    logger.debug(\"  $BRI no change\");\n-                }\n-                brightnessLevelRequested = false;\n-            } else { // dimension notification\n-                if (msg.getDim() == Lighting.DIM.DIMMER_LEVEL_100) {\n-                    int newPercent;\n-                    try {\n-                        newPercent = msg.parseDimmerLevel100();\n-                    } catch (FrameException fe) {\n-                        logger.warn(\"updateLightBrightnessState() Wrong value for dimmerLevel100 in message: {}\", msg);\n-                        return;\n-                    }\n-                    int newLevel = Lighting.percentToWhat(newPercent).value();\n-                    logger.debug(\"  $BRI latest level={} ----> new percent={} ----> new level={}\", latestBrightnessWhat,\n-                            newPercent, newLevel);\n-                    updateState(channel, new PercentType(newPercent));\n-                    if (newPercent == 0) {\n-                        latestBrightnessWhatBeforeOff = latestBrightnessWhat;\n-                    }\n-                    latestBrightnessWhat = newLevel;\n-                    brightnessLevelRequested = false;\n-                } else {\n-                    logger.warn(\"updateLightBrightnessState() Cannot handle message {} for thing {}\", msg,\n-                            getThing().getUID());\n-                    return;\n+            logger.debug(\"  $BRI brightnessWhat {} --> {}\", brightnessWhat, newBrightnessWhat);\n+            if (brightnessWhat != newBrightnessWhat) {\n+                int newBrightness = Lighting.levelToPercent(newBrightnessWhat);\n+                updateState(CHANNEL_BRIGHTNESS, new PercentType(newBrightness));\n+                if (msg.isOff()) {\n+                    brightnessBeforeOff = brightness;\n                 }\n+                brightness = newBrightness;\n+                logger.debug(\"  $BRI brightness CHANGED to {}\", brightness);\n+            } else {\n+                logger.debug(\"  $BRI no change\");\n             }\n         }\n-        logger.debug(\"  $BRI latestBriWhat={} latestBriBeforeOff={} brightnessLevelRequested={}\", latestBrightnessWhat,\n-                latestBrightnessWhatBeforeOff, brightnessLevelRequested);\n     }\n \n     /**\n-     * Returns a WHERE address string based on bridge type and unit (optional)\n+     * Updates light on/off state based on a OWN Lighting event message received\n      *\n-     * @param unit the device unit\n-     **/\n-    @Nullable\n-    protected String toWhere(String unit) {\n-        Where w = deviceWhere;\n-        if (w != null) {\n-            OpenWebNetBridgeHandler brH = bridgeHandler;\n-            if (brH != null && brH.isBusGateway()) {\n-                return w.value();\n+     * @param msg the Lighting message received\n+     */\n+    private void updateOnOffState(Lighting msg) {\n+        OpenWebNetBridgeHandler brH = bridgeHandler;\n+        if (brH != null) {\n+            if (msg.isOn() || msg.isOff()) {\n+                String channelId;\n+                int switchId = 0;\n+                if (brH.isBusGateway()) {\n+                    channelId = CHANNEL_SWITCH;\n+                } else {\n+                    WhereZigBee w = (WhereZigBee) (msg.getWhere());\n+                    if (WhereZigBee.UNIT_02.equals(w.getUnit())) {\n+                        channelId = CHANNEL_SWITCH_02;\n+                        switchId = 1;\n+                    } else {\n+                        channelId = CHANNEL_SWITCH_01;\n+                    }\n+                }\n+                int currentSt = sw[switchId];\n+                int newSt = (msg.isOn() ? 1 : 0);\n+                if (newSt != currentSt) {\n+                    updateState(channelId, (newSt == 1 ? OnOffType.ON : OnOffType.OFF));\n+                    sw[switchId] = newSt;\n+                    logger.debug(\"  {} ONOFF CHANGED to {}\", ownId, newSt);\n+                } else {\n+                    logger.debug(\"  {} ONOFF no change\", ownId);\n+                }\n             } else {\n-                return w + unit;\n+                logger.debug(\"updateOnOffState() Ignoring unsupported WHAT for thing {}. Frame={}\", getThing().getUID(),\n+                        msg.getFrameValue());\n+                return;\n             }\n-        } else {\n-            return null;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b7951739d83c1ada328c26400728162bbc2eb3"}, "originalPosition": 453}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1NTIyNw==", "bodyText": "Added new commit with checkstyle warnings solved (Jenkins build failed but not because of this binding", "url": "https://github.com/openhab/openhab-addons/pull/9100#discussion_r531055227", "createdAt": "2020-11-26T14:12:24Z", "author": {"login": "mvalla"}, "path": "bundles/org.openhab.binding.openwebnet/src/main/java/org/openhab/binding/openwebnet/handler/OpenWebNetLightingHandler.java", "diffHunk": "@@ -194,163 +215,150 @@ protected String ownIdPrefix() {\n     @Override\n     protected void handleMessage(BaseOpenMessage msg) {\n         super.handleMessage(msg);\n-        updateLightState((Lighting) msg);\n-    }\n-\n-    /**\n-     * Updates light state based on a OWN Lighting event message received\n-     *\n-     * @param msg the Lighting message received\n-     */\n-    private void updateLightState(Lighting msg) {\n-        logger.debug(\"updateLightState() for thing: {}\", thing.getUID());\n+        logger.debug(\"handleMessage() for thing: {}\", thing.getUID());\n         ThingTypeUID thingType = thing.getThingTypeUID();\n         if (THING_TYPE_ZB_DIMMER.equals(thingType) || THING_TYPE_BUS_DIMMER.equals(thingType)) {\n-            updateLightBrightnessState(msg);\n+            updateBrightness((Lighting) msg);\n         } else {\n-            updateLightOnOffState(msg);\n+            updateOnOffState((Lighting) msg);\n         }\n     }\n \n     /**\n-     * Updates on/off state based on a OWN Lighting event message received\n+     * Updates brightness based on OWN Lighting message received\n      *\n      * @param msg the Lighting message received\n      */\n-    private void updateLightOnOffState(Lighting msg) {\n-        String channelID;\n-        OpenWebNetBridgeHandler brH = bridgeHandler;\n-        if (brH != null) {\n-            if (brH.isBusGateway()) {\n-                channelID = CHANNEL_SWITCH;\n-            } else {\n-                WhereZigBee w = (WhereZigBee) (msg.getWhere());\n-                if (WhereZigBee.UNIT_02.equals(w.getUnit())) {\n-                    channelID = CHANNEL_SWITCH_02;\n-                } else {\n-                    channelID = CHANNEL_SWITCH_01;\n-                }\n-            }\n+    private synchronized void updateBrightness(Lighting msg) {\n+        long now = System.currentTimeMillis();\n+        logger.debug(\"  $BRI updateBrightness({})       || bri={} briBeforeOff={}\", msg, brightness,\n+                brightnessBeforeOff);\n+        long delta = now - lastBrightnessChangeSentTS;\n+        boolean belowThresh = delta < BRIGHTNESS_CHANGE_DELAY_MSEC;\n+        logger.debug(\"  $BRI delta={}ms {}\", delta, (belowThresh ? \"< DELAY\" : \"\"));\n+        if (belowThresh) {\n+            // we just sent a command from OH, so we can ignore this message from network\n+            logger.debug(\"  $BRI a request was sent {} < {} ms --> no action needed\", delta,\n+                    BRIGHTNESS_CHANGE_DELAY_MSEC);\n+        } else {\n             if (msg.isOn()) {\n-                updateState(channelID, OnOffType.ON);\n-            } else if (msg.isOff()) {\n-                updateState(channelID, OnOffType.OFF);\n+                logger.debug(\"  $BRI \\\"ON\\\" notification from network, scheduling requestStatus...\");\n+                // we must wait BRIGHTNESS_STATUS_REQUEST_DELAY_MSEC to be sure dimmer has reached final level\n+                scheduler.schedule(() -> {\n+                    requestStatus(CHANNEL_BRIGHTNESS);\n+                }, BRIGHTNESS_STATUS_REQUEST_DELAY_MSEC, TimeUnit.MILLISECONDS);\n             } else {\n-                logger.debug(\"updateLightOnOffState() Ignoring unsupported WHAT for thing {}. Frame={}\",\n-                        getThing().getUID(), msg.getFrameValue());\n+                logger.debug(\"  $BRI update from network\");\n+                if (msg.getWhat() != null) {\n+                    updateBrightnessState(msg);\n+                } else { // dimension notification\n+                    if (msg.getDim() == Lighting.DIM.DIMMER_LEVEL_100) {\n+                        int newBrightness;\n+                        try {\n+                            newBrightness = msg.parseDimmerLevel100();\n+                        } catch (FrameException fe) {\n+                            logger.warn(\"updateBrightness() Wrong value for dimmerLevel100 in message: {}\", msg);\n+                            return;\n+                        }\n+                        logger.debug(\"  $BRI DIMMER_LEVEL_100 newBrightness={}\", newBrightness);\n+                        updateState(CHANNEL_BRIGHTNESS, new PercentType(newBrightness));\n+                        if (newBrightness == 0) {\n+                            brightnessBeforeOff = brightness;\n+                        }\n+                        brightness = newBrightness;\n+                    } else {\n+                        logger.warn(\"updateBrightness() Cannot handle message {} for thing {}\", msg,\n+                                getThing().getUID());\n+                        return;\n+                    }\n+                }\n             }\n         }\n+        logger.debug(\"  $BRI---END updateBrightness({}) || bri={} briBeforeOff={}\", msg, brightness,\n+                brightnessBeforeOff);\n     }\n \n     /**\n-     * Updates brightness level based on a OWN Lighting event message received\n+     * Updates light brightness state based on a OWN Lighting message\n      *\n      * @param msg the Lighting message received\n      */\n-    private synchronized void updateLightBrightnessState(Lighting msg) {\n-        final String channel = CHANNEL_BRIGHTNESS;\n-        logger.debug(\"  $BRI updateLightBrightnessState() msg={}\", msg);\n-        logger.debug(\"  $BRI updateLightBr() latestBriWhat={} latestBriBeforeOff={} brightnessLevelRequested={}\",\n-                latestBrightnessWhat, latestBrightnessWhatBeforeOff, brightnessLevelRequested);\n-        long now = System.currentTimeMillis();\n-        long delta = now - lastBrightnessChangeSentTS;\n-        logger.debug(\"  $BRI now={} -> delta={}\", now, delta);\n-        if (msg.isOn() && !brightnessLevelRequested) {\n-            if (delta >= BRIGHTNESS_CHANGE_DELAY_MSEC) {\n-                // we send a light brightness status request ONLY if last brightness change\n-                // was not just sent (>=BRIGHTNESS_CHANGE_DELAY_MSEC ago)\n-                logger.debug(\"  $BRI change sent >={}ms ago, sending requestStatus...\", BRIGHTNESS_CHANGE_DELAY_MSEC);\n-                Where w = deviceWhere;\n-                if (w != null) {\n-                    try {\n-                        send(Lighting.requestStatus(w.value()));\n-                        brightnessLevelRequested = true;\n-                    } catch (OWNException e) {\n-                        logger.warn(\"  $BRI exception while requesting light state: {}\", e.getMessage());\n-                    }\n-                }\n-            } else {\n-                logger.debug(\"  $BRI change sent {}<{}ms, NO requestStatus needed\", delta,\n-                        BRIGHTNESS_CHANGE_DELAY_MSEC);\n+    private void updateBrightnessState(Lighting msg) {\n+        if (msg.getWhat() != null) {\n+            int newBrightnessWhat = msg.getWhat().value();\n+            int brightnessWhat = UNKNOWN_STATE;\n+            if (brightness != UNKNOWN_STATE) {\n+                brightnessWhat = Lighting.percentToWhat(brightness).value();\n             }\n-        } else {\n-            logger.debug(\"  $BRI update from network -> level should be present in WHAT part of the message\");\n-            if (msg.getWhat() != null) {\n-                int newLevel = msg.getWhat().value();\n-                logger.debug(\"  $BRI current level={} ----> new level={}\", latestBrightnessWhat, newLevel);\n-                if (latestBrightnessWhat != newLevel) {\n-                    updateState(channel, new PercentType(Lighting.levelToPercent(newLevel)));\n-                    if (msg.isOff()) {\n-                        latestBrightnessWhatBeforeOff = latestBrightnessWhat;\n-                    }\n-                    latestBrightnessWhat = newLevel;\n-                } else {\n-                    logger.debug(\"  $BRI no change\");\n-                }\n-                brightnessLevelRequested = false;\n-            } else { // dimension notification\n-                if (msg.getDim() == Lighting.DIM.DIMMER_LEVEL_100) {\n-                    int newPercent;\n-                    try {\n-                        newPercent = msg.parseDimmerLevel100();\n-                    } catch (FrameException fe) {\n-                        logger.warn(\"updateLightBrightnessState() Wrong value for dimmerLevel100 in message: {}\", msg);\n-                        return;\n-                    }\n-                    int newLevel = Lighting.percentToWhat(newPercent).value();\n-                    logger.debug(\"  $BRI latest level={} ----> new percent={} ----> new level={}\", latestBrightnessWhat,\n-                            newPercent, newLevel);\n-                    updateState(channel, new PercentType(newPercent));\n-                    if (newPercent == 0) {\n-                        latestBrightnessWhatBeforeOff = latestBrightnessWhat;\n-                    }\n-                    latestBrightnessWhat = newLevel;\n-                    brightnessLevelRequested = false;\n-                } else {\n-                    logger.warn(\"updateLightBrightnessState() Cannot handle message {} for thing {}\", msg,\n-                            getThing().getUID());\n-                    return;\n+            logger.debug(\"  $BRI brightnessWhat {} --> {}\", brightnessWhat, newBrightnessWhat);\n+            if (brightnessWhat != newBrightnessWhat) {\n+                int newBrightness = Lighting.levelToPercent(newBrightnessWhat);\n+                updateState(CHANNEL_BRIGHTNESS, new PercentType(newBrightness));\n+                if (msg.isOff()) {\n+                    brightnessBeforeOff = brightness;\n                 }\n+                brightness = newBrightness;\n+                logger.debug(\"  $BRI brightness CHANGED to {}\", brightness);\n+            } else {\n+                logger.debug(\"  $BRI no change\");\n             }\n         }\n-        logger.debug(\"  $BRI latestBriWhat={} latestBriBeforeOff={} brightnessLevelRequested={}\", latestBrightnessWhat,\n-                latestBrightnessWhatBeforeOff, brightnessLevelRequested);\n     }\n \n     /**\n-     * Returns a WHERE address string based on bridge type and unit (optional)\n+     * Updates light on/off state based on a OWN Lighting event message received\n      *\n-     * @param unit the device unit\n-     **/\n-    @Nullable\n-    protected String toWhere(String unit) {\n-        Where w = deviceWhere;\n-        if (w != null) {\n-            OpenWebNetBridgeHandler brH = bridgeHandler;\n-            if (brH != null && brH.isBusGateway()) {\n-                return w.value();\n+     * @param msg the Lighting message received\n+     */\n+    private void updateOnOffState(Lighting msg) {\n+        OpenWebNetBridgeHandler brH = bridgeHandler;\n+        if (brH != null) {\n+            if (msg.isOn() || msg.isOff()) {\n+                String channelId;\n+                int switchId = 0;\n+                if (brH.isBusGateway()) {\n+                    channelId = CHANNEL_SWITCH;\n+                } else {\n+                    WhereZigBee w = (WhereZigBee) (msg.getWhere());\n+                    if (WhereZigBee.UNIT_02.equals(w.getUnit())) {\n+                        channelId = CHANNEL_SWITCH_02;\n+                        switchId = 1;\n+                    } else {\n+                        channelId = CHANNEL_SWITCH_01;\n+                    }\n+                }\n+                int currentSt = sw[switchId];\n+                int newSt = (msg.isOn() ? 1 : 0);\n+                if (newSt != currentSt) {\n+                    updateState(channelId, (newSt == 1 ? OnOffType.ON : OnOffType.OFF));\n+                    sw[switchId] = newSt;\n+                    logger.debug(\"  {} ONOFF CHANGED to {}\", ownId, newSt);\n+                } else {\n+                    logger.debug(\"  {} ONOFF no change\", ownId);\n+                }\n             } else {\n-                return w + unit;\n+                logger.debug(\"updateOnOffState() Ignoring unsupported WHAT for thing {}. Frame={}\", getThing().getUID(),\n+                        msg.getFrameValue());\n+                return;\n             }\n-        } else {\n-            return null;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU1NDE4Mg=="}, "originalCommit": {"oid": "82b7951739d83c1ada328c26400728162bbc2eb3"}, "originalPosition": 453}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3968, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}