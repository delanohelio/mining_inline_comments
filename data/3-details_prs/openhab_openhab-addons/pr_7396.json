{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NzgzMzA2", "number": 7396, "title": "[squeezebox] Implement like/unlike for remote streaming services", "bodyText": "Some streaming services, such as Pandora and Slacker, support \"liking\" or \"unliking\" the currently playing song. Liking a song causes the streaming service to play more songs like the currently playing song. Unliking the song skips the currently playing song, and won't play it again. As each streaming service has a different way to accomplish this, the LMS jsonrpc service supplies the specific like/unlike commands based on the service that's streaming the song. It does this by overriding the functionality of the repeat and shuffle buttons\nThis change adds two new channels to the player thing - like and unlike. If a streaming service doesn't support the like/unlike functionality, sending a command to the like or unlike channel does nothing.\nUnfortunately, the current implementation of the squeezebox binding does not use the Logitech Media Server (LMS) jsonrpc service; it uses the older command line interface (CLI). Therefore, I needed to extend the binding to support the jsonrpc service in order to obtain the like/unlike commands.\nI considered changing the binding to use only the jsonrpc service; however, that would require very significant modifications to the binding, which I chose to not undertake at this time.\nThis PR also introduces a slight change to the process to retrieve favorites from the LMS. Currently, there's a slight race condition where it's possible for the bridge to send the favorites to the player handlers before the player handlers have completed initialization. This change simply adds a slight delay to the retrieval of the favorites from the LMS.\nThis PR also changes the binding to use constructor injection.\nI considered adding null annotations, but decided to save that for another PR as the changes looked pretty significant.\nSigned-off-by: Mark Hilbush mark@hilbush.com", "createdAt": "2020-04-16T22:07:18Z", "url": "https://github.com/openhab/openhab-addons/pull/7396", "merged": true, "mergeCommit": {"oid": "ba61eda76b8b6e558bfada87af9c5c230e931f92"}, "closed": true, "closedAt": "2020-07-08T18:03:48Z", "author": {"login": "mhilbush"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb2sqvABqjMyNzc3OTMwMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcy-XdZAFqTQ0NTAwNzI5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a3f3ec4347739c0fd6011f8543b225fc370d518", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/5a3f3ec4347739c0fd6011f8543b225fc370d518", "committedDate": "2020-04-16T22:04:38Z", "message": "Implement like/unlike for remote streaming services\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "5f37700428e75a15e20d38c8acbb975f796166db", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/5f37700428e75a15e20d38c8acbb975f796166db", "committedDate": "2020-04-27T22:04:59Z", "message": "Implement like/unlike for remote streaming services\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDE1OTg2", "url": "https://github.com/openhab/openhab-addons/pull/7396#pullrequestreview-404015986", "createdAt": "2020-05-01T04:32:16Z", "commit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDozMjoxN1rOGPB2_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDo0Mzo0OVrOGPB_aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjI4Ng==", "bodyText": "Do you really need to add another author tag each time?", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418412286", "createdAt": "2020-05-01T04:32:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "diffHunk": "@@ -68,6 +68,7 @@\n  * @author Patrik Gfeller - Timeout for TTS messages increased from 30 to 90s.\n  * @author Mark Hilbush - Get favorites from server and play favorite\n  * @author Mark Hilbush - Convert sound notification volume from channel to config parameter\n+ * @author Mark Hilbush - Add like/unlike functionality", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMjYyMg==", "bodyText": "So the command param isn't used? Shouldn't you confirm that the ON command was sent?", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418412622", "createdAt": "2020-05-01T04:34:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxPlayerHandler.java", "diffHunk": "@@ -289,6 +296,16 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             case CHANNEL_FAVORITES_PLAY:\n                 squeezeBoxServerHandler.playFavorite(mac, command.toString());\n                 break;\n+            case CHANNEL_LIKE:\n+                if (likeCommand != null) {\n+                    squeezeBoxServerHandler.like(mac, likeCommand);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzI5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            scheduler.execute(() -> {\n          \n          \n            \n                                updateCustomButtons(mac);\n          \n          \n            \n                            });\n          \n          \n            \n                            scheduler.execute(() -> updateCustomButtons(mac));", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413292", "createdAt": "2020-05-01T04:37:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -836,6 +865,10 @@ private void handlePlaylistMessage(final String mac, String[] messageParts) {\n             String mode;\n             if (action.equals(\"newsong\")) {\n                 mode = \"play\";\n+                // Execute in separate thread to avoid delaying listener\n+                scheduler.execute(() -> {\n+                    updateCustomButtons(mac);\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzQ2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        scheduler.schedule(() -> {\n          \n          \n            \n                            requestFavorites();\n          \n          \n            \n                        }, 3L, TimeUnit.SECONDS);\n          \n          \n            \n                        scheduler.schedule(this::requestFavorites, 3L, TimeUnit.SECONDS);", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413463", "createdAt": "2020-05-01T04:38:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1023,64 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(() -> {\n+                requestFavorites();\n+            }, 3L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzY4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n          \n          \n            \n                        button.enabled = value != 0;", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413680", "createdAt": "2020-05-01T04:39:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMzcwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        button.custom = Boolean.TRUE;\n          \n          \n            \n                        button.custom = true;", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418413705", "createdAt": "2020-05-01T04:39:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n+        } else if (jsonElement.isJsonObject()) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNDQ0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<String> commandList = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n          \n          \n            \n                                .map(JsonElement::getAsString).collect(Collectors.toList());\n          \n          \n            \n                        button.command = StringUtils.join(commandList, \" \");\n          \n          \n            \n                        button.command = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n          \n          \n            \n                                .map(JsonElement::getAsString).collect(Collectors.joining(\" \"));", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r418414440", "createdAt": "2020-05-01T04:43:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/dto/ButtonDTODeserializer.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.squeezebox.internal.dto;\n+\n+import java.lang.reflect.Type;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+\n+/**\n+ * The {@link ButtonDTODeserializer} is responsible for deserializing a button object, which\n+ * can either be an Integer, or a custom button specification.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+public class ButtonDTODeserializer implements JsonDeserializer<ButtonDTO> {\n+\n+    @Override\n+    public ButtonDTO deserialize(JsonElement jsonElement, Type tyoeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        ButtonDTO button = null;\n+        if (jsonElement.isJsonPrimitive() && jsonElement.getAsJsonPrimitive().isNumber()) {\n+            Integer value = jsonElement.getAsInt();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.FALSE;\n+            button.enabled = value == 0 ? Boolean.FALSE : Boolean.TRUE;\n+        } else if (jsonElement.isJsonObject()) {\n+            JsonObject jsonObject = jsonElement.getAsJsonObject();\n+            button = new ButtonDTO();\n+            button.custom = Boolean.TRUE;\n+            button.icon = jsonObject.get(\"icon\").getAsString();\n+            button.jiveStyle = jsonObject.get(\"jiveStyle\").getAsString();\n+            button.toolTip = jsonObject.get(\"tooltip\").getAsString();\n+            List<String> commandList = StreamSupport.stream(jsonObject.getAsJsonArray(\"command\").spliterator(), false)\n+                    .map(JsonElement::getAsString).collect(Collectors.toList());\n+            button.command = StringUtils.join(commandList, \" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb1259f7f77e490caac8ffb5dfa00eed55c7c6b"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a03ffd37cc15683180a43e4e9dd1d4d4ef2d1d9", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/2a03ffd37cc15683180a43e4e9dd1d4d4ef2d1d9", "committedDate": "2020-05-01T12:01:38Z", "message": "Address review feedback\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "1365cf02a7e2b5eb1455d430e17c678118965874", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/1365cf02a7e2b5eb1455d430e17c678118965874", "committedDate": "2020-05-18T19:26:52Z", "message": "Address review feedback\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjU2ODI1", "url": "https://github.com/openhab/openhab-addons/pull/7396#pullrequestreview-426656825", "createdAt": "2020-06-08T22:10:13Z", "commit": {"oid": "1365cf02a7e2b5eb1455d430e17c678118965874"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoxMDoxM1rOGgyJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjoxMDoxM1rOGgyJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyOTIyMA==", "bodyText": "After reading the above discussion I agree with representing like/unlike with a single command channel. I understand that there might be UI issues regarding dynamic updating but I think it would be the correct direction to go here. For now you can just always provide the \"like/unlike\" commands and just ignore invalid requests.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r437029220", "createdAt": "2020-06-08T22:10:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -298,4 +300,14 @@\n \t\t<description>Number of playlist tracks</description>\n \t\t<state readOnly=\"true\" pattern=\"%d\"></state>\n \t</channel-type>\n+\t<channel-type id=\"like\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Like Song</label>\n+\t\t<description>Likes the current song (if the service supports it)</description>\n+\t</channel-type>\n+\t<channel-type id=\"unlike\" advanced=\"true\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Unlike Song</label>\n+\t\t<description>Unlikes the current song (if the service supports it)</description>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1365cf02a7e2b5eb1455d430e17c678118965874"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f4e816faf9bd9c2e27254516e83d3d10d2aeec8", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/4f4e816faf9bd9c2e27254516e83d3d10d2aeec8", "committedDate": "2020-06-18T18:01:50Z", "message": "Implement like/unlike for remote streaming services\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbd93b5e2d30b664e93cac72984ece90cbdba13d", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/cbd93b5e2d30b664e93cac72984ece90cbdba13d", "committedDate": "2020-06-18T18:01:51Z", "message": "Fix formatting\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c59477862564e247282f33427d8322aa5f73f5c8", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/c59477862564e247282f33427d8322aa5f73f5c8", "committedDate": "2020-06-18T18:01:51Z", "message": "Address review feedback\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/d0587d5047e6142bee4001ec71b7b961f6568fbf", "committedDate": "2020-06-18T18:01:51Z", "message": "Combine like/unlike to single rate channel\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f066633c633767b68c8254c8e04b21779d0ac6d", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/7f066633c633767b68c8254c8e04b21779d0ac6d", "committedDate": "2020-06-10T17:06:40Z", "message": "Combine like/unlike to single rate channel\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/d0587d5047e6142bee4001ec71b7b961f6568fbf", "committedDate": "2020-06-18T18:01:51Z", "message": "Combine like/unlike to single rate channel\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzIxMDAx", "url": "https://github.com/openhab/openhab-addons/pull/7396#pullrequestreview-438721001", "createdAt": "2020-06-27T19:54:59Z", "commit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MzM3NjYz", "url": "https://github.com/openhab/openhab-addons/pull/7396#pullrequestreview-439337663", "createdAt": "2020-06-29T17:03:56Z", "commit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzowMzo1NlrOGqaHTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzowNToyNFrOGqaKoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMTIyOQ==", "bodyText": "You should cancel the future this produces in case this handler gets disposed.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r447121229", "createdAt": "2020-06-29T17:03:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -998,6 +1019,62 @@ private void updateChannelFavoritesList(List<Favorite> favorites) {\n                 updateState(CHANNEL_FAVORITES_LIST, new StringType(favoritesList));\n             }\n         }\n+\n+        private void scheduleRequestFavorites() {\n+            // Delay the execution to give the player thing handlers a chance to initialize\n+            scheduler.schedule(SqueezeBoxServerHandler.this::requestFavorites, 3L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMjA4MQ==", "bodyText": "You should specify the charset used here.", "url": "https://github.com/openhab/openhab-addons/pull/7396#discussion_r447122081", "createdAt": "2020-06-29T17:05:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.squeezebox/src/main/java/org/openhab/binding/squeezebox/internal/handler/SqueezeBoxServerHandler.java", "diffHunk": "@@ -306,6 +331,8 @@ public void login() {\n         if (StringUtils.isEmpty(userId)) {\n             return;\n         }\n+        // Create basic auth string for jsonrpc interface\n+        basicAuthorization = new String(Base64.getEncoder().encode((userId + \":\" + password).getBytes()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0587d5047e6142bee4001ec71b7b961f6568fbf"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32d148a350517679ed72ca38ee4ec063af8b0a98", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/32d148a350517679ed72ca38ee4ec063af8b0a98", "committedDate": "2020-07-01T13:03:10Z", "message": "Address review comments\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1MDA3Mjk2", "url": "https://github.com/openhab/openhab-addons/pull/7396#pullrequestreview-445007296", "createdAt": "2020-07-08T18:02:02Z", "commit": {"oid": "32d148a350517679ed72ca38ee4ec063af8b0a98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 828, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}