{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDgxOTIx", "number": 9248, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0OToyMFrOFCC-rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MzoxM1rOFCDDDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjkwMjg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerKeypad.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo0OToyMFrOIBAMbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwODo1NzoyM1rOIEcv6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMjY2OA==", "bodyText": "I think you forgot to remove this.", "url": "https://github.com/openhab/openhab-addons/pull/9248#discussion_r537922668", "createdAt": "2020-12-07T23:49:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerKeypad.java", "diffHunk": "@@ -26,25 +38,84 @@\n  */\n @NonNullByDefault\n public class ThingHandlerKeypad extends CaddxBaseThingHandler {\n-    /**\n-     * Constructor.\n-     *\n-     * @param thing\n-     */\n+    private final Logger logger = LoggerFactory.getLogger(ThingHandlerKeypad.class);\n+\n     public ThingHandlerKeypad(Thing thing) {\n         super(thing, CaddxThingType.KEYPAD);\n     }\n \n     @Override\n     public void updateChannel(ChannelUID channelUID, String data) {\n+        if (channelUID.getId().equals(CaddxBindingConstants.KEYPAD_KEY_PRESSED)) {\n+            StringType stringType = new StringType(data);\n+            updateState(channelUID, stringType);\n+        }\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n+    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+        logger.trace(\"caddxEventReceived(): Event Received - {}.\", event);\n+\n+        if (getThing().equals(thing)) {\n+            CaddxMessage message = event.getCaddxMessage();\n+            CaddxMessageType mt = message.getCaddxMessageType();\n+            ChannelUID channelUID = null;\n+\n+            // Log event messages have special handling\n+            if (CaddxMessageType.KEYPAD_MESSAGE_RECEIVED.equals(mt)) {\n+                for (CaddxProperty p : mt.properties) {\n+                    if (!(\"\".equals(p.getId()))) {\n+                        String value = message.getPropertyById(p.getId());\n+                        channelUID = new ChannelUID(getThing().getUID(), p.getId());\n+                        updateChannel(channelUID, value);\n+                    }\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n     }\n \n     @Override\n-    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n         updateStatus(ThingStatus.ONLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac101086fa4672435e8274ba0a3bc8753a5e000"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5ODUwMw==", "bodyText": "I did intentionally not remove this.\nThe keypad has a function that it can act as an input device. To do that first the enterTerminalMode() action has to be executed and then the keypad will receive an event if a button is pressed.\nIf the keypad does not enter terminal mode, it will stay offline.", "url": "https://github.com/openhab/openhab-addons/pull/9248#discussion_r541098503", "createdAt": "2020-12-11T17:11:59Z", "author": {"login": "jossuar"}, "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerKeypad.java", "diffHunk": "@@ -26,25 +38,84 @@\n  */\n @NonNullByDefault\n public class ThingHandlerKeypad extends CaddxBaseThingHandler {\n-    /**\n-     * Constructor.\n-     *\n-     * @param thing\n-     */\n+    private final Logger logger = LoggerFactory.getLogger(ThingHandlerKeypad.class);\n+\n     public ThingHandlerKeypad(Thing thing) {\n         super(thing, CaddxThingType.KEYPAD);\n     }\n \n     @Override\n     public void updateChannel(ChannelUID channelUID, String data) {\n+        if (channelUID.getId().equals(CaddxBindingConstants.KEYPAD_KEY_PRESSED)) {\n+            StringType stringType = new StringType(data);\n+            updateState(channelUID, stringType);\n+        }\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n+    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+        logger.trace(\"caddxEventReceived(): Event Received - {}.\", event);\n+\n+        if (getThing().equals(thing)) {\n+            CaddxMessage message = event.getCaddxMessage();\n+            CaddxMessageType mt = message.getCaddxMessageType();\n+            ChannelUID channelUID = null;\n+\n+            // Log event messages have special handling\n+            if (CaddxMessageType.KEYPAD_MESSAGE_RECEIVED.equals(mt)) {\n+                for (CaddxProperty p : mt.properties) {\n+                    if (!(\"\".equals(p.getId()))) {\n+                        String value = message.getPropertyById(p.getId());\n+                        channelUID = new ChannelUID(getThing().getUID(), p.getId());\n+                        updateChannel(channelUID, value);\n+                    }\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n     }\n \n     @Override\n-    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n         updateStatus(ThingStatus.ONLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMjY2OA=="}, "originalCommit": {"oid": "1ac101086fa4672435e8274ba0a3bc8753a5e000"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2MjkxOQ==", "bodyText": "But the next line just sets a new status anyway...", "url": "https://github.com/openhab/openhab-addons/pull/9248#discussion_r541162919", "createdAt": "2020-12-11T18:59:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerKeypad.java", "diffHunk": "@@ -26,25 +38,84 @@\n  */\n @NonNullByDefault\n public class ThingHandlerKeypad extends CaddxBaseThingHandler {\n-    /**\n-     * Constructor.\n-     *\n-     * @param thing\n-     */\n+    private final Logger logger = LoggerFactory.getLogger(ThingHandlerKeypad.class);\n+\n     public ThingHandlerKeypad(Thing thing) {\n         super(thing, CaddxThingType.KEYPAD);\n     }\n \n     @Override\n     public void updateChannel(ChannelUID channelUID, String data) {\n+        if (channelUID.getId().equals(CaddxBindingConstants.KEYPAD_KEY_PRESSED)) {\n+            StringType stringType = new StringType(data);\n+            updateState(channelUID, stringType);\n+        }\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n+    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+        logger.trace(\"caddxEventReceived(): Event Received - {}.\", event);\n+\n+        if (getThing().equals(thing)) {\n+            CaddxMessage message = event.getCaddxMessage();\n+            CaddxMessageType mt = message.getCaddxMessageType();\n+            ChannelUID channelUID = null;\n+\n+            // Log event messages have special handling\n+            if (CaddxMessageType.KEYPAD_MESSAGE_RECEIVED.equals(mt)) {\n+                for (CaddxProperty p : mt.properties) {\n+                    if (!(\"\".equals(p.getId()))) {\n+                        String value = message.getPropertyById(p.getId());\n+                        channelUID = new ChannelUID(getThing().getUID(), p.getId());\n+                        updateChannel(channelUID, value);\n+                    }\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n     }\n \n     @Override\n-    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n         updateStatus(ThingStatus.ONLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMjY2OA=="}, "originalCommit": {"oid": "1ac101086fa4672435e8274ba0a3bc8753a5e000"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTUzNjIzNQ==", "bodyText": "You are right. I needed a coffee...\nCorrected.", "url": "https://github.com/openhab/openhab-addons/pull/9248#discussion_r541536235", "createdAt": "2020-12-12T08:57:23Z", "author": {"login": "jossuar"}, "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerKeypad.java", "diffHunk": "@@ -26,25 +38,84 @@\n  */\n @NonNullByDefault\n public class ThingHandlerKeypad extends CaddxBaseThingHandler {\n-    /**\n-     * Constructor.\n-     *\n-     * @param thing\n-     */\n+    private final Logger logger = LoggerFactory.getLogger(ThingHandlerKeypad.class);\n+\n     public ThingHandlerKeypad(Thing thing) {\n         super(thing, CaddxThingType.KEYPAD);\n     }\n \n     @Override\n     public void updateChannel(ChannelUID channelUID, String data) {\n+        if (channelUID.getId().equals(CaddxBindingConstants.KEYPAD_KEY_PRESSED)) {\n+            StringType stringType = new StringType(data);\n+            updateState(channelUID, stringType);\n+        }\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n+    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+        logger.trace(\"caddxEventReceived(): Event Received - {}.\", event);\n+\n+        if (getThing().equals(thing)) {\n+            CaddxMessage message = event.getCaddxMessage();\n+            CaddxMessageType mt = message.getCaddxMessageType();\n+            ChannelUID channelUID = null;\n+\n+            // Log event messages have special handling\n+            if (CaddxMessageType.KEYPAD_MESSAGE_RECEIVED.equals(mt)) {\n+                for (CaddxProperty p : mt.properties) {\n+                    if (!(\"\".equals(p.getId()))) {\n+                        String value = message.getPropertyById(p.getId());\n+                        channelUID = new ChannelUID(getThing().getUID(), p.getId());\n+                        updateChannel(channelUID, value);\n+                    }\n+                }\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n     }\n \n     @Override\n-    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n         updateStatus(ThingStatus.ONLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMjY2OA=="}, "originalCommit": {"oid": "1ac101086fa4672435e8274ba0a3bc8753a5e000"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjkwNjg1OnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.binding.caddx/src/main/resources/OH-INF/thing/channels.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MDo0NlrOIBAOmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxMzowNlrOIECE-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzIyNA==", "bodyText": "Why are you removing this channel?", "url": "https://github.com/openhab/openhab-addons/pull/9248#discussion_r537923224", "createdAt": "2020-12-07T23:50:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.caddx/src/main/resources/OH-INF/thing/channels.xml", "diffHunk": "@@ -110,17 +110,11 @@\n \t</channel-type>\n \n \t<!-- keypad -->\n-\t<channel-type id=\"led\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac101086fa4672435e8274ba0a3bc8753a5e000"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA5OTI1Nw==", "bodyText": "This channel was from a copy/paste when i initially wrote the binding. It is not used.", "url": "https://github.com/openhab/openhab-addons/pull/9248#discussion_r541099257", "createdAt": "2020-12-11T17:13:06Z", "author": {"login": "jossuar"}, "path": "bundles/org.openhab.binding.caddx/src/main/resources/OH-INF/thing/channels.xml", "diffHunk": "@@ -110,17 +110,11 @@\n \t</channel-type>\n \n \t<!-- keypad -->\n-\t<channel-type id=\"led\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyMzIyNA=="}, "originalCommit": {"oid": "1ac101086fa4672435e8274ba0a3bc8753a5e000"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjkxNDA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerKeypad.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzo1MzoxM1rOIBASvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNjo0OFrOIECNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNDI4NA==", "bodyText": "I see no reason that this variable needs to be defined outside of the for loop.", "url": "https://github.com/openhab/openhab-addons/pull/9248#discussion_r537924284", "createdAt": "2020-12-07T23:53:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerKeypad.java", "diffHunk": "@@ -26,25 +38,84 @@\n  */\n @NonNullByDefault\n public class ThingHandlerKeypad extends CaddxBaseThingHandler {\n-    /**\n-     * Constructor.\n-     *\n-     * @param thing\n-     */\n+    private final Logger logger = LoggerFactory.getLogger(ThingHandlerKeypad.class);\n+\n     public ThingHandlerKeypad(Thing thing) {\n         super(thing, CaddxThingType.KEYPAD);\n     }\n \n     @Override\n     public void updateChannel(ChannelUID channelUID, String data) {\n+        if (channelUID.getId().equals(CaddxBindingConstants.KEYPAD_KEY_PRESSED)) {\n+            StringType stringType = new StringType(data);\n+            updateState(channelUID, stringType);\n+        }\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n+    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+        logger.trace(\"caddxEventReceived(): Event Received - {}.\", event);\n+\n+        if (getThing().equals(thing)) {\n+            CaddxMessage message = event.getCaddxMessage();\n+            CaddxMessageType mt = message.getCaddxMessageType();\n+            ChannelUID channelUID = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ac101086fa4672435e8274ba0a3bc8753a5e000"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMTQ0Nw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/9248#discussion_r541101447", "createdAt": "2020-12-11T17:16:48Z", "author": {"login": "jossuar"}, "path": "bundles/org.openhab.binding.caddx/src/main/java/org/openhab/binding/caddx/internal/handler/ThingHandlerKeypad.java", "diffHunk": "@@ -26,25 +38,84 @@\n  */\n @NonNullByDefault\n public class ThingHandlerKeypad extends CaddxBaseThingHandler {\n-    /**\n-     * Constructor.\n-     *\n-     * @param thing\n-     */\n+    private final Logger logger = LoggerFactory.getLogger(ThingHandlerKeypad.class);\n+\n     public ThingHandlerKeypad(Thing thing) {\n         super(thing, CaddxThingType.KEYPAD);\n     }\n \n     @Override\n     public void updateChannel(ChannelUID channelUID, String data) {\n+        if (channelUID.getId().equals(CaddxBindingConstants.KEYPAD_KEY_PRESSED)) {\n+            StringType stringType = new StringType(data);\n+            updateState(channelUID, stringType);\n+        }\n     }\n \n     @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n+    public void caddxEventReceived(CaddxEvent event, Thing thing) {\n+        logger.trace(\"caddxEventReceived(): Event Received - {}.\", event);\n+\n+        if (getThing().equals(thing)) {\n+            CaddxMessage message = event.getCaddxMessage();\n+            CaddxMessageType mt = message.getCaddxMessageType();\n+            ChannelUID channelUID = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyNDI4NA=="}, "originalCommit": {"oid": "1ac101086fa4672435e8274ba0a3bc8753a5e000"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3860, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}