{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MjczMTcy", "number": 8284, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoxOTo0NFrOEc1_wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNzozOTozMFrOEd_Zyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NjgwMjU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lcn/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDoxOTo0NFrOHHn3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwODoxNjozMFrOHIFbXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc1NTI3Ng==", "bodyText": "Is it necessary to include <event/>?", "url": "https://github.com/openhab/openhab-addons/pull/8284#discussion_r477755276", "createdAt": "2020-08-27T00:19:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lcn/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -658,4 +659,17 @@\n \t\t<label>Remote Control Low Battery</label>\n \t\t<event/>\n \t</channel-type>\n+\n+\t<channel-group-type id=\"hostcommands\">\n+\t\t<label>Host Command (to openHAB)</label>\n+\t\t<channels>\n+\t\t\t<channel typeId=\"sendKeys\" id=\"sendKeys\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-type id=\"sendKeys\" advanced=\"true\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Send Keys</label>\n+\t\t<event/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71b1b7ce504efe97a0d5adb32f94509d4390e6fc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIzOTU4Mg==", "bodyText": "I think so, as the trigger contains payload like \"A1:HIT\" or \"B2:MAKE\". I added the options tag.", "url": "https://github.com/openhab/openhab-addons/pull/8284#discussion_r478239582", "createdAt": "2020-08-27T08:16:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.lcn/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -658,4 +659,17 @@\n \t\t<label>Remote Control Low Battery</label>\n \t\t<event/>\n \t</channel-type>\n+\n+\t<channel-group-type id=\"hostcommands\">\n+\t\t<label>Host Command (to openHAB)</label>\n+\t\t<channels>\n+\t\t\t<channel typeId=\"sendKeys\" id=\"sendKeys\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-type id=\"sendKeys\" advanced=\"true\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Send Keys</label>\n+\t\t<event/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzc1NTI3Ng=="}, "originalCommit": {"oid": "71b1b7ce504efe97a0d5adb32f94509d4390e6fc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODgyNzM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lcn/src/main/java/org/openhab/binding/lcn/internal/subhandler/LcnModuleHostCommandSubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNzozNjoxOFrOHJc3MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNzozNjoxOFrOHJc3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3MjExMw==", "bodyText": "It looks lik the code depends on the ordering in the enum, which is dangerous. Maybe add an int to the enum. Or in some other way store the range used here in some variable.", "url": "https://github.com/openhab/openhab-addons/pull/8284#discussion_r479672113", "createdAt": "2020-08-29T17:36:18Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.lcn/src/main/java/org/openhab/binding/lcn/internal/subhandler/LcnModuleHostCommandSubHandler.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lcn.internal.subhandler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.lcn.internal.LcnModuleHandler;\n+import org.openhab.binding.lcn.internal.common.LcnChannelGroup;\n+import org.openhab.binding.lcn.internal.common.LcnDefs;\n+import org.openhab.binding.lcn.internal.common.LcnException;\n+import org.openhab.binding.lcn.internal.connection.ModInfo;\n+\n+/**\n+ * Handles 'send key' commands sent to this PCK host.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LcnModuleHostCommandSubHandler extends AbstractLcnModuleSubHandler {\n+    private static final Pattern SEND_KEY_PATTERN = Pattern\n+            .compile(\"\\\\+M(?<hostId>\\\\d{3})(?<segId>\\\\d{3})(?<modId>\\\\d{3})\\\\.STH(?<byte0>\\\\d{3})(?<byte1>\\\\d{3})\");\n+\n+    public LcnModuleHostCommandSubHandler(LcnModuleHandler handler, ModInfo info) {\n+        super(handler, info);\n+    }\n+\n+    @Override\n+    public void handleRefresh(LcnChannelGroup channelGroup, int number) {\n+        // nothing\n+    }\n+\n+    @Override\n+    public void handleStatusMessage(Matcher matcher) throws LcnException {\n+        int keyTableAndActionMask = Integer.parseInt(matcher.group(\"byte0\"));\n+        int keyNumberMask = Integer.parseInt(matcher.group(\"byte1\"));\n+\n+        if ((keyTableAndActionMask & (1 << 6)) == 0) {\n+            return;\n+        }\n+\n+        // PCHK 3.22 supports only the old 'send key' command with key tables A-C\n+        for (int keyTableNumber = 0; keyTableNumber < LcnDefs.KEY_TABLE_COUNT_UNTIL_0C030C0; keyTableNumber++) {\n+            String keyTableName = LcnDefs.KeyTable.values()[keyTableNumber].name();\n+\n+            for (int keyNumber = 0; keyNumber < LcnDefs.KEY_COUNT; keyNumber++) {\n+                int actionRaw = (keyTableAndActionMask >> (keyTableNumber * 2)) & 3;\n+\n+                if (actionRaw > LcnDefs.SendKeyCommand.DONTSEND.ordinal()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2900c25a1b04b548261bb13ec93d94fc9d3466d6"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5ODgyOTU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.lcn/src/test/java/org/openhab/binding/lcn/internal/subhandler/LcnModuleHostCommandSubHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNzozOTozMFrOHJc4Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOVQxNzozOTozMFrOHJc4Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY3MjM4Nw==", "bodyText": "L is very easily mixed with 1. Maybe use a different, longer name.", "url": "https://github.com/openhab/openhab-addons/pull/8284#discussion_r479672387", "createdAt": "2020-08-29T17:39:30Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.lcn/src/test/java/org/openhab/binding/lcn/internal/subhandler/LcnModuleHostCommandSubHandlerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lcn.internal.subhandler;\n+\n+import static org.mockito.Mockito.verify;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openhab.binding.lcn.internal.common.LcnChannelGroup;\n+\n+/**\n+ * Test class.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LcnModuleHostCommandSubHandlerTest extends AbstractTestLcnModuleSubHandler {\n+    private @NonNullByDefault({}) LcnModuleHostCommandSubHandler l;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2900c25a1b04b548261bb13ec93d94fc9d3466d6"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4608, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}