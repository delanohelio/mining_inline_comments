{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDcxODE0", "number": 7235, "title": "[influxdb] Added support for InfluxDB 2.0", "bodyText": "This addon provides persistence support for InfluxDB 2.0.\nIt is based on some previous work on InfluxDB 1.0 addon but is major rewrite/refactor\nIt only provides support for InfluxDB 2.0 as APIs are incompatible\nSome forum topics involved:\nhttps://community.openhab.org/t/base-branch-for-a-persistence-plugin/88846\nhttps://community.openhab.org/t/updated-influxdb-binding-with-tags/79645/14\nNOTES:\n\nThe links provided in the new PR template are broken (at least guidelines and sign ones)\nI will correctly sign the commits. I was not aware of the need but I see the instructions from DCO bot", "createdAt": "2020-03-26T23:23:08Z", "url": "https://github.com/openhab/openhab-addons/pull/7235", "merged": true, "mergeCommit": {"oid": "edf7cefb3f0c1c317065f7a0b75bccea7b8f0d35"}, "closed": true, "closedAt": "2020-04-11T17:20:57Z", "author": {"login": "lujop"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcR1QEhgBqjMxNzM2MjI4OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWpBNtgH2gAyMzk0NDcxODE0OmFkNTA2YWY4NmI3OTQ1NTk1YmQ4YWRhOWQ2NWVmZjc5ZGVlMDkyZDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afd3087134b5690d0f8bbcb2dc7bfe8413b413f1", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/afd3087134b5690d0f8bbcb2dc7bfe8413b413f1", "committedDate": "2020-03-26T23:06:16Z", "message": "Add influxdb to bundles pom and minor fixes"}, "afterCommit": {"oid": "a1f04fbfb5843a3464277d351b728627f86c1132", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/a1f04fbfb5843a3464277d351b728627f86c1132", "committedDate": "2020-03-27T18:35:04Z", "message": "Add influxdb to bundles pom and minor fixes\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7016e0b037c50e23d083d5aa9b4c157c9d050773", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/7016e0b037c50e23d083d5aa9b4c157c9d050773", "committedDate": "2020-03-31T22:13:48Z", "message": "Tunning formatter options to work as eclipse\nSolve static code analysis warnings\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}, "afterCommit": {"oid": "c640b4b6b2626b2c8ddf0adb7e4d6ca626eaee5e", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/c640b4b6b2626b2c8ddf0adb7e4d6ca626eaee5e", "committedDate": "2020-03-31T22:35:19Z", "message": "Tunning formatter options to work as eclipse\nSolve static code analysis warnings\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "927f0802d3a7887adaa2d457161eb79b5ef478b2", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/927f0802d3a7887adaa2d457161eb79b5ef478b2", "committedDate": "2020-04-01T20:03:46Z", "message": "Initial contribution to InfluxDB 2.0 persistence addon\nThe addon is a complete refactor based on previous work on 1.0 addon\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4706d58d29766dced488cd56bbfff9f9a33abdd7", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/4706d58d29766dced488cd56bbfff9f9a33abdd7", "committedDate": "2020-04-01T20:03:46Z", "message": "Add influxdb to bundles pom and minor fixes\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "493d75a37e7ae21af4f0d70fd1ecce975b9c97bf", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/493d75a37e7ae21af4f0d70fd1ecce975b9c97bf", "committedDate": "2020-04-01T20:03:46Z", "message": "Fix warning\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddd44104ce4a902322022d5590c5bc19f460fb81", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/ddd44104ce4a902322022d5590c5bc19f460fb81", "committedDate": "2020-04-01T20:03:46Z", "message": "Refactor to be able to support several InfluxDB versions that use different clients.\nRepository interface has been refactored removing references to driver objects and code particular to each version is moved to repository and query creator interfaces.\nAdd dependencies for InfluxDB 1 client\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2183f16a0c697ca8a6d42b6d726322211afa4788", "author": {"user": {"login": "wborn", "name": "Wouter Born"}}, "url": "https://github.com/openhab/openhab-addons/commit/2183f16a0c697ca8a6d42b6d726322211afa4788", "committedDate": "2020-04-01T20:11:06Z", "message": "Fix SAT NPE and errors\n\nSigned-off-by: Wouter Born <github@maindrain.net>\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b0df8931f9921320ff14f71e867380e79869938", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/2b0df8931f9921320ff14f71e867380e79869938", "committedDate": "2020-04-01T20:11:07Z", "message": "Add license headers and some class comments\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78a071c863c39fae2ddb7768cc292cd1e789c77c", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/78a071c863c39fae2ddb7768cc292cd1e789c77c", "committedDate": "2020-04-01T20:11:07Z", "message": "Added InfluxDB 1.0 implementation\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca92627211c4d5e3218440ae427851a85938b2b8", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/ca92627211c4d5e3218440ae427851a85938b2b8", "committedDate": "2020-04-01T20:11:08Z", "message": "Tunning formatter options to work as eclipse\nSolve static code analysis warnings\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd644aa78ea3ad6818f49cfa8a36c1909545e0e9", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/bd644aa78ea3ad6818f49cfa8a36c1909545e0e9", "committedDate": "2020-04-01T20:17:12Z", "message": "Add license header and fix static code analysis warning\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c640b4b6b2626b2c8ddf0adb7e4d6ca626eaee5e", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/c640b4b6b2626b2c8ddf0adb7e4d6ca626eaee5e", "committedDate": "2020-03-31T22:35:19Z", "message": "Tunning formatter options to work as eclipse\nSolve static code analysis warnings\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}, "afterCommit": {"oid": "bd644aa78ea3ad6818f49cfa8a36c1909545e0e9", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/bd644aa78ea3ad6818f49cfa8a36c1909545e0e9", "committedDate": "2020-04-01T20:17:12Z", "message": "Add license header and fix static code analysis warning\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "080f31efa81a12a661a00e29723c9781751dedf7", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/080f31efa81a12a661a00e29723c9781751dedf7", "committedDate": "2020-04-01T21:34:12Z", "message": "Rename addon to influxdb overwritting previous one\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4912e48d61c9226920ef5f89c6ccde8e4726a4e", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/c4912e48d61c9226920ef5f89c6ccde8e4726a4e", "committedDate": "2020-04-01T21:52:57Z", "message": "Some minor fixes after merging name with existing influxdb addon\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/535708b5a6b698e4eb8afc7d65319fe17a5abff8", "committedDate": "2020-04-02T21:29:27Z", "message": "Force checking connection status on connect\nStyle and warning fixes\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODM3Njcy", "url": "https://github.com/openhab/openhab-addons/pull/7235#pullrequestreview-386837672", "createdAt": "2020-04-02T23:05:40Z", "commit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzowNTo0MFrOF__ktQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzozMTo0MVrOGAAFZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NjE5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.warn(\"{} {}\", msg, reason.toString());\n          \n          \n            \n                        logger.warn(\"{} {}\", msg, reason);", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402646197", "createdAt": "2020-04-02T23:05:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBConfiguration.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Contains this addon configurable parameters\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDBConfiguration {\n+    public static final String URL_PARAM = \"url\";\n+    public static final String TOKEN_PARAM = \"token\";\n+    public static final String USER_PARAM = \"user\";\n+    public static final String PASSWORD_PARAM = \"password\";\n+    public static final String DATABASE_PARAM = \"db\";\n+    public static final String RETENTION_POLICY_PARAM = \"retentionPolicy\";\n+    public static final String VERSION_PARAM = \"version\";\n+    public static final String REPLACE_UNDERSCORE_PARAM = \"replaceUnderscore\";\n+    public static final String ADD_CATEGORY_TAG_PARAM = \"addCategoryTag\";\n+    public static final String ADD_LABEL_TAG_PARAM = \"addLabelTag\";\n+    public static final String ADD_TYPE_TAG_PARAM = \"addTypeTag\";\n+    public static InfluxDBConfiguration NO_CONFIGURATION = new InfluxDBConfiguration(Collections.emptyMap());\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDBConfiguration.class);\n+    private String url;\n+    private String user;\n+    private String password;\n+    private String token;\n+    private String databaseName;\n+    private String retentionPolicy;\n+    private InfluxDBVersion version;\n+\n+    private boolean replaceUnderscore;\n+    private boolean addCategoryTag;\n+    private boolean addTypeTag;\n+    private boolean addLabelTag;\n+\n+    @SuppressWarnings(\"null\")\n+    public InfluxDBConfiguration(Map<String, @Nullable Object> config) {\n+        url = (String) config.getOrDefault(URL_PARAM, \"http://127.0.0.1:8086\");\n+        user = (String) config.getOrDefault(USER_PARAM, \"openhab\");\n+        password = (String) config.getOrDefault(PASSWORD_PARAM, \"\");\n+        token = (String) config.getOrDefault(TOKEN_PARAM, \"\");\n+        databaseName = (String) config.getOrDefault(DATABASE_PARAM, \"openhab\");\n+        retentionPolicy = (String) config.getOrDefault(RETENTION_POLICY_PARAM, \"autogen\");\n+        version = parseInfluxVersion(config.getOrDefault(VERSION_PARAM, InfluxDBVersion.V1.name()));\n+\n+        replaceUnderscore = getConfigBooleanValue(config, REPLACE_UNDERSCORE_PARAM, false);\n+        addCategoryTag = getConfigBooleanValue(config, ADD_CATEGORY_TAG_PARAM, false);\n+        addLabelTag = getConfigBooleanValue(config, ADD_LABEL_TAG_PARAM, false);\n+        addTypeTag = getConfigBooleanValue(config, ADD_TYPE_TAG_PARAM, false);\n+    }\n+\n+    private static boolean getConfigBooleanValue(Map<String, @Nullable Object> config, String key,\n+            boolean defaultValue) {\n+        Object object = config.get(key);\n+\n+        if (object instanceof Boolean) {\n+            return (Boolean) object;\n+        } else if (object != null) {\n+            return \"true\".equalsIgnoreCase((String) object);\n+        } else {\n+            return defaultValue;\n+        }\n+    }\n+\n+    private InfluxDBVersion parseInfluxVersion(@Nullable Object value) {\n+        try {\n+            return InfluxDBVersion.valueOf((String) value);\n+        } catch (RuntimeException e) {\n+            logger.warn(\"Invalid version {}\", value);\n+            return InfluxDBVersion.UNKNOWN;\n+        }\n+    }\n+\n+    public boolean isValid() {\n+        boolean hasVersion = version != InfluxDBVersion.UNKNOWN;\n+        boolean hasCredentials = false;\n+        if (version == InfluxDBVersion.V1) {\n+            hasCredentials = StringUtils.isNotBlank(user) && StringUtils.isNotBlank(password);\n+        } else if (version == InfluxDBVersion.V2) {\n+            hasCredentials = StringUtils.isNotBlank(token)\n+                    || (StringUtils.isNotBlank(user) && StringUtils.isNotBlank(password));\n+        }\n+        boolean hasDatabase = StringUtils.isNotBlank(databaseName);\n+        boolean hasRetentionPolicy = StringUtils.isNotBlank(retentionPolicy);\n+\n+        boolean valid = hasVersion && hasCredentials && hasDatabase && hasRetentionPolicy;\n+        if (valid) {\n+            return true;\n+        } else {\n+            String msg = \"InfluxDB configuration isn't valid. Addon won't work: \";\n+            StringJoiner reason = new StringJoiner(\",\");\n+            if (!hasVersion) {\n+                reason.add(\"Unknown version\");\n+            } else {\n+                if (!hasCredentials)\n+                    reason.add(\"No credentials\");\n+                if (!hasDatabase)\n+                    reason.add(\"No database name / organization defined\");\n+                if (!hasRetentionPolicy)\n+                    reason.add(\"No retention policy / bucket defined\");\n+            }\n+            logger.warn(\"{} {}\", msg, reason.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NjY2NQ==", "bodyText": "This needs to be run through the formatter. It is missing brackets.", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402646665", "createdAt": "2020-04-02T23:07:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBConfiguration.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Contains this addon configurable parameters\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDBConfiguration {\n+    public static final String URL_PARAM = \"url\";\n+    public static final String TOKEN_PARAM = \"token\";\n+    public static final String USER_PARAM = \"user\";\n+    public static final String PASSWORD_PARAM = \"password\";\n+    public static final String DATABASE_PARAM = \"db\";\n+    public static final String RETENTION_POLICY_PARAM = \"retentionPolicy\";\n+    public static final String VERSION_PARAM = \"version\";\n+    public static final String REPLACE_UNDERSCORE_PARAM = \"replaceUnderscore\";\n+    public static final String ADD_CATEGORY_TAG_PARAM = \"addCategoryTag\";\n+    public static final String ADD_LABEL_TAG_PARAM = \"addLabelTag\";\n+    public static final String ADD_TYPE_TAG_PARAM = \"addTypeTag\";\n+    public static InfluxDBConfiguration NO_CONFIGURATION = new InfluxDBConfiguration(Collections.emptyMap());\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDBConfiguration.class);\n+    private String url;\n+    private String user;\n+    private String password;\n+    private String token;\n+    private String databaseName;\n+    private String retentionPolicy;\n+    private InfluxDBVersion version;\n+\n+    private boolean replaceUnderscore;\n+    private boolean addCategoryTag;\n+    private boolean addTypeTag;\n+    private boolean addLabelTag;\n+\n+    @SuppressWarnings(\"null\")\n+    public InfluxDBConfiguration(Map<String, @Nullable Object> config) {\n+        url = (String) config.getOrDefault(URL_PARAM, \"http://127.0.0.1:8086\");\n+        user = (String) config.getOrDefault(USER_PARAM, \"openhab\");\n+        password = (String) config.getOrDefault(PASSWORD_PARAM, \"\");\n+        token = (String) config.getOrDefault(TOKEN_PARAM, \"\");\n+        databaseName = (String) config.getOrDefault(DATABASE_PARAM, \"openhab\");\n+        retentionPolicy = (String) config.getOrDefault(RETENTION_POLICY_PARAM, \"autogen\");\n+        version = parseInfluxVersion(config.getOrDefault(VERSION_PARAM, InfluxDBVersion.V1.name()));\n+\n+        replaceUnderscore = getConfigBooleanValue(config, REPLACE_UNDERSCORE_PARAM, false);\n+        addCategoryTag = getConfigBooleanValue(config, ADD_CATEGORY_TAG_PARAM, false);\n+        addLabelTag = getConfigBooleanValue(config, ADD_LABEL_TAG_PARAM, false);\n+        addTypeTag = getConfigBooleanValue(config, ADD_TYPE_TAG_PARAM, false);\n+    }\n+\n+    private static boolean getConfigBooleanValue(Map<String, @Nullable Object> config, String key,\n+            boolean defaultValue) {\n+        Object object = config.get(key);\n+\n+        if (object instanceof Boolean) {\n+            return (Boolean) object;\n+        } else if (object != null) {\n+            return \"true\".equalsIgnoreCase((String) object);\n+        } else {\n+            return defaultValue;\n+        }\n+    }\n+\n+    private InfluxDBVersion parseInfluxVersion(@Nullable Object value) {\n+        try {\n+            return InfluxDBVersion.valueOf((String) value);\n+        } catch (RuntimeException e) {\n+            logger.warn(\"Invalid version {}\", value);\n+            return InfluxDBVersion.UNKNOWN;\n+        }\n+    }\n+\n+    public boolean isValid() {\n+        boolean hasVersion = version != InfluxDBVersion.UNKNOWN;\n+        boolean hasCredentials = false;\n+        if (version == InfluxDBVersion.V1) {\n+            hasCredentials = StringUtils.isNotBlank(user) && StringUtils.isNotBlank(password);\n+        } else if (version == InfluxDBVersion.V2) {\n+            hasCredentials = StringUtils.isNotBlank(token)\n+                    || (StringUtils.isNotBlank(user) && StringUtils.isNotBlank(password));\n+        }\n+        boolean hasDatabase = StringUtils.isNotBlank(databaseName);\n+        boolean hasRetentionPolicy = StringUtils.isNotBlank(retentionPolicy);\n+\n+        boolean valid = hasVersion && hasCredentials && hasDatabase && hasRetentionPolicy;\n+        if (valid) {\n+            return true;\n+        } else {\n+            String msg = \"InfluxDB configuration isn't valid. Addon won't work: \";\n+            StringJoiner reason = new StringJoiner(\",\");\n+            if (!hasVersion) {\n+                reason.add(\"Unknown version\");\n+            } else {\n+                if (!hasCredentials)\n+                    reason.add(\"No credentials\");\n+                if (!hasDatabase)\n+                    reason.add(\"No database name / organization defined\");\n+                if (!hasRetentionPolicy)\n+                    reason.add(\"No retention policy / bucket defined\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NzQ0OA==", "bodyText": "Unless formatting standards have changed, the pom file is supposed to have 2 space indentation, not tabs. If this is new with oh3 then please correct me.", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402647448", "createdAt": "2020-04-02T23:09:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/pom.xml", "diffHunk": "@@ -1,47 +1,136 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.openhab.addons.bundles</groupId>\n-    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n-    <version>3.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <artifactId>org.openhab.persistence.influxdb</artifactId>\n-\n-  <name>openHAB Add-ons :: Bundles :: Persistence Service :: InfluxDB</name>\n-\n-  <properties>\n-    <bnd.importpackage>!android.*,!com.android.*,!com.google.appengine.*,!org.apache.harmony.*,!org.apache.http.*,!rx.*</bnd.importpackage>\n-  </properties>\n-\n-  <dependencies>\n-    <!-- https://mvnrepository.com/artifact/org.influxdb/influxdb-java -->\n-    <dependency>\n-      <groupId>org.influxdb</groupId>\n-      <artifactId>influxdb-java</artifactId>\n-      <version>2.2</version>\n-    </dependency>\n-    <!-- https://mvnrepository.com/artifact/com.squareup.okhttp/okhttp -->\n-    <dependency>\n-      <groupId>com.squareup.okhttp</groupId>\n-      <artifactId>okhttp</artifactId>\n-      <version>2.4.0</version>\n-    </dependency>\n-    <!-- https://mvnrepository.com/artifact/com.squareup.okio/okio -->\n-    <dependency>\n-      <groupId>com.squareup.okio</groupId>\n-      <artifactId>okio</artifactId>\n-      <version>1.4.0</version>\n-    </dependency>\n-    <!-- https://mvnrepository.com/artifact/com.squareup.retrofit/retrofit -->\n-    <dependency>\n-      <groupId>com.squareup.retrofit</groupId>\n-      <artifactId>retrofit</artifactId>\n-      <version>1.9.0</version>\n-    </dependency>\n-  </dependencies>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+\t<modelVersion>4.0.0</modelVersion>\n+\n+\t<parent>\n+\t\t<groupId>org.openhab.addons.bundles</groupId>\n+\t\t<artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+\t\t<version>3.0.0-SNAPSHOT</version>\n+\t</parent>\n+\n+\t<artifactId>org.openhab.persistence.influxdb</artifactId>\n+\n+\t<name>openHAB Add-ons :: Bundles :: Persistence Service :: InfluxDB</name>\n+\n+\t<properties>\n+\t\t<bnd.importpackage>\n+\t\t\t!javax.annotation;!android.*,!com.android.*,!com.google.appengine.*,!dalvik.system,!kotlin.*,!org.conscrypt,!sun.security.ssl,!org.apache.harmony.*,!org.apache.http.*,!rx.*\n+\t\t</bnd.importpackage>\n+\t</properties>\n+\n+\t<dependencies>\n+\t\t<!-- START InfluxDB 2.0-->\n+\t\t<!-- START influxdb-client-java-->\n+\t\t<dependency>\n+\t\t\t<groupId>com.influxdb</groupId>\n+\t\t\t<artifactId>influxdb-client-java</artifactId>\n+\t\t\t<version>1.6.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>influxdb-client-core</artifactId>\n+\t\t\t<groupId>com.influxdb</groupId>\n+\t\t\t<version>1.6.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>converter-gson</artifactId>\n+\t\t\t<groupId>com.squareup.retrofit2</groupId>\n+\t\t\t<version>2.5.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>converter-scalars</artifactId>\n+\t\t\t<groupId>com.squareup.retrofit2</groupId>\n+\t\t\t<version>2.5.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>gson</artifactId>\n+\t\t\t<groupId>com.google.code.gson</groupId>\n+\t\t\t<version>2.8.5</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>gson-fire</artifactId>\n+\t\t\t<groupId>io.gsonfire</groupId>\n+\t\t\t<version>1.8.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>okio</artifactId>\n+\t\t\t<groupId>com.squareup.okio</groupId>\n+\t\t\t<version>1.17.3</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>commons-csv</artifactId>\n+\t\t\t<groupId>org.apache.commons</groupId>\n+\t\t\t<version>1.6</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>json</artifactId>\n+\t\t\t<groupId>org.json</groupId>\n+\t\t\t<version>20180813</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>okhttp</artifactId>\n+\t\t\t<groupId>com.squareup.okhttp3</groupId>\n+\t\t\t<version>3.13.1</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>retrofit</artifactId>\n+\t\t\t<groupId>com.squareup.retrofit2</groupId>\n+\t\t\t<version>2.5.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>jsr305</artifactId>\n+\t\t\t<groupId>com.google.code.findbugs</groupId>\n+\t\t\t<version>3.0.2</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>logging-interceptor</artifactId>\n+\t\t\t<groupId>com.squareup.okhttp3</groupId>\n+\t\t\t<version>3.13.1</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>rxjava</artifactId>\n+\t\t\t<groupId>io.reactivex.rxjava2</groupId>\n+\t\t\t<version>2.2.17</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>reactive-streams</artifactId>\n+\t\t\t<groupId>org.reactivestreams</groupId>\n+\t\t\t<version>1.0.3</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<artifactId>swagger-annotations</artifactId>\n+\t\t\t<groupId>io.swagger</groupId>\n+\t\t\t<version>1.5.22</version>\n+\t\t</dependency>\n+\t\t<!--END influxdb-client-java-->\n+\n+\n+\t\t<dependency>\n+\t\t\t<groupId>com.influxdb</groupId>\n+\t\t\t<artifactId>flux-dsl</artifactId>\n+\t\t\t<version>1.6.0</version>\n+\t\t</dependency>\n+\n+\t\t<!--END InfluxDB 2.0-->\n+\n+\t\t<!--START InfluxDB 1.0-->\n+\t\t<dependency>\n+\t\t\t<groupId>org.influxdb</groupId>\n+\t\t\t<artifactId>influxdb-java</artifactId>\n+\t\t\t<version>2.2</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.squareup.okhttp</groupId>\n+\t\t\t<artifactId>okhttp</artifactId>\n+\t\t\t<version>2.4.0</version>\n+\t\t</dependency>\n+\t\t<dependency>\n+\t\t\t<groupId>com.squareup.retrofit</groupId>\n+\t\t\t<artifactId>retrofit</artifactId>\n+\t\t\t<version>1.9.0</version>\n+\t\t</dependency>\n+\t\t<!-- END InfluxDB 1.0 -->\n+\t</dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0NzY2Ng==", "bodyText": "Looked like the annotation was flying away there.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Activate\n          \n          \n            \n                /**\n          \n          \n            \n                 * Connect to database when service is activated\n          \n          \n            \n                 */\n          \n          \n            \n                public void activate(final @Nullable Map<String, @Nullable Object> config) {\n          \n          \n            \n                /**\n          \n          \n            \n                 * Connect to database when service is activated\n          \n          \n            \n                 */\n          \n          \n            \n                 @Activate\n          \n          \n            \n                public void activate(final @Nullable Map<String, @Nullable Object> config) {", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402647666", "createdAt": "2020-04-02T23:09:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/InfluxDBPersistenceService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.config.core.ConfigurableService;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.persistence.FilterCriteria;\n+import org.openhab.core.persistence.HistoricItem;\n+import org.openhab.core.persistence.PersistenceItemInfo;\n+import org.openhab.core.persistence.PersistenceService;\n+import org.openhab.core.persistence.QueryablePersistenceService;\n+import org.openhab.core.persistence.strategy.PersistenceStrategy;\n+import org.openhab.core.types.State;\n+import org.openhab.persistence.influxdb.internal.FilterCriteriaQueryCreator;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBHistoricItem;\n+import org.openhab.persistence.influxdb.internal.InfluxDBPersistentItemInfo;\n+import org.openhab.persistence.influxdb.internal.InfluxDBRepository;\n+import org.openhab.persistence.influxdb.internal.InfluxDBStateConvertUtils;\n+import org.openhab.persistence.influxdb.internal.InfluxPoint;\n+import org.openhab.persistence.influxdb.internal.InfluxRow;\n+import org.openhab.persistence.influxdb.internal.ItemToStorePointCreator;\n+import org.openhab.persistence.influxdb.internal.RepositoryFactory;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is the implementation of the InfluxDB {@link PersistenceService}. It persists item values\n+ * using the <a href=\"http://influxdb.org\">InfluxDB time series database. The states (\n+ * {@link State}) of an {@link Item} are persisted by default in a time series with names equal to the name of\n+ * the item.\n+ *\n+ * This addon supports 1.X and 2.X versions, as two versions are incompatible and use different drivers the\n+ * specific code for each version is accessed by {@link InfluxDBRepository} and {@link FilterCriteriaQueryCreator}\n+ * interfaces and specific implementation reside in {@link org.openhab.persistence.influxdb.internal.influx1} and\n+ * {@link org.openhab.persistence.influxdb.internal.influx2} packages\n+ *\n+ * @author Theo Weiss - Initial contribution, rewrite of org.openhab.persistence.influxdb\n+ * @author Joan Pujol Espinar - Addon rewrite refactoring code and adding support for InfluxDB 2.0. Some tag code is\n+ *         based\n+ *         from not integrated branch from Dominik Vorreiter\n+ */\n+@NonNullByDefault\n+@Component(service = { PersistenceService.class,\n+        QueryablePersistenceService.class }, configurationPid = \"org.openhab.influxdb\", property = {\n+                Constants.SERVICE_PID + \"=org.openhab.influxdb\",\n+                ConfigurableService.SERVICE_PROPERTY_DESCRIPTION_URI + \"=persistence:influxdb\",\n+                ConfigurableService.SERVICE_PROPERTY_LABEL + \"=InfluxDB persistence layer\",\n+                ConfigurableService.SERVICE_PROPERTY_CATEGORY + \"=persistence\" })\n+public class InfluxDBPersistenceService implements QueryablePersistenceService {\n+    public static final String SERVICE_NAME = \"influxdb\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDBPersistenceService.class);\n+\n+    // External dependencies\n+    @Nullable\n+    private ItemRegistry itemRegistry;\n+    @Nullable\n+    private MetadataRegistry metadataRegistry;\n+\n+    // Internal dependencies/state\n+    private InfluxDBConfiguration configuration = InfluxDBConfiguration.NO_CONFIGURATION;\n+    @NonNullByDefault({}) // Relax rules because can only be null if component is not active\n+    private ItemToStorePointCreator itemToStorePointCreator;\n+    @NonNullByDefault({}) // Relax rules because can only be null if component is not active\n+    private InfluxDBRepository influxDBRepository;\n+\n+    @Activate\n+    /**\n+     * Connect to database when service is activated\n+     */\n+    public void activate(final @Nullable Map<String, @Nullable Object> config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0Nzg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ItemRegistry itemRegistry;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                private MetadataRegistry metadataRegistry;\n          \n          \n            \n                private @Nullable ItemRegistry itemRegistry;\n          \n          \n            \n                private @Nullable MetadataRegistry metadataRegistry;", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402647884", "createdAt": "2020-04-02T23:10:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/InfluxDBPersistenceService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.config.core.ConfigurableService;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.persistence.FilterCriteria;\n+import org.openhab.core.persistence.HistoricItem;\n+import org.openhab.core.persistence.PersistenceItemInfo;\n+import org.openhab.core.persistence.PersistenceService;\n+import org.openhab.core.persistence.QueryablePersistenceService;\n+import org.openhab.core.persistence.strategy.PersistenceStrategy;\n+import org.openhab.core.types.State;\n+import org.openhab.persistence.influxdb.internal.FilterCriteriaQueryCreator;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBHistoricItem;\n+import org.openhab.persistence.influxdb.internal.InfluxDBPersistentItemInfo;\n+import org.openhab.persistence.influxdb.internal.InfluxDBRepository;\n+import org.openhab.persistence.influxdb.internal.InfluxDBStateConvertUtils;\n+import org.openhab.persistence.influxdb.internal.InfluxPoint;\n+import org.openhab.persistence.influxdb.internal.InfluxRow;\n+import org.openhab.persistence.influxdb.internal.ItemToStorePointCreator;\n+import org.openhab.persistence.influxdb.internal.RepositoryFactory;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is the implementation of the InfluxDB {@link PersistenceService}. It persists item values\n+ * using the <a href=\"http://influxdb.org\">InfluxDB time series database. The states (\n+ * {@link State}) of an {@link Item} are persisted by default in a time series with names equal to the name of\n+ * the item.\n+ *\n+ * This addon supports 1.X and 2.X versions, as two versions are incompatible and use different drivers the\n+ * specific code for each version is accessed by {@link InfluxDBRepository} and {@link FilterCriteriaQueryCreator}\n+ * interfaces and specific implementation reside in {@link org.openhab.persistence.influxdb.internal.influx1} and\n+ * {@link org.openhab.persistence.influxdb.internal.influx2} packages\n+ *\n+ * @author Theo Weiss - Initial contribution, rewrite of org.openhab.persistence.influxdb\n+ * @author Joan Pujol Espinar - Addon rewrite refactoring code and adding support for InfluxDB 2.0. Some tag code is\n+ *         based\n+ *         from not integrated branch from Dominik Vorreiter\n+ */\n+@NonNullByDefault\n+@Component(service = { PersistenceService.class,\n+        QueryablePersistenceService.class }, configurationPid = \"org.openhab.influxdb\", property = {\n+                Constants.SERVICE_PID + \"=org.openhab.influxdb\",\n+                ConfigurableService.SERVICE_PROPERTY_DESCRIPTION_URI + \"=persistence:influxdb\",\n+                ConfigurableService.SERVICE_PROPERTY_LABEL + \"=InfluxDB persistence layer\",\n+                ConfigurableService.SERVICE_PROPERTY_CATEGORY + \"=persistence\" })\n+public class InfluxDBPersistenceService implements QueryablePersistenceService {\n+    public static final String SERVICE_NAME = \"influxdb\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDBPersistenceService.class);\n+\n+    // External dependencies\n+    @Nullable\n+    private ItemRegistry itemRegistry;\n+    @Nullable\n+    private MetadataRegistry metadataRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0ODA4OA==", "bodyText": "Doesn't logging this as info have the potential to flood the logs?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402648088", "createdAt": "2020-04-02T23:11:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/InfluxDBPersistenceService.java", "diffHunk": "@@ -0,0 +1,264 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.config.core.ConfigurableService;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.persistence.FilterCriteria;\n+import org.openhab.core.persistence.HistoricItem;\n+import org.openhab.core.persistence.PersistenceItemInfo;\n+import org.openhab.core.persistence.PersistenceService;\n+import org.openhab.core.persistence.QueryablePersistenceService;\n+import org.openhab.core.persistence.strategy.PersistenceStrategy;\n+import org.openhab.core.types.State;\n+import org.openhab.persistence.influxdb.internal.FilterCriteriaQueryCreator;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBHistoricItem;\n+import org.openhab.persistence.influxdb.internal.InfluxDBPersistentItemInfo;\n+import org.openhab.persistence.influxdb.internal.InfluxDBRepository;\n+import org.openhab.persistence.influxdb.internal.InfluxDBStateConvertUtils;\n+import org.openhab.persistence.influxdb.internal.InfluxPoint;\n+import org.openhab.persistence.influxdb.internal.InfluxRow;\n+import org.openhab.persistence.influxdb.internal.ItemToStorePointCreator;\n+import org.openhab.persistence.influxdb.internal.RepositoryFactory;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is the implementation of the InfluxDB {@link PersistenceService}. It persists item values\n+ * using the <a href=\"http://influxdb.org\">InfluxDB time series database. The states (\n+ * {@link State}) of an {@link Item} are persisted by default in a time series with names equal to the name of\n+ * the item.\n+ *\n+ * This addon supports 1.X and 2.X versions, as two versions are incompatible and use different drivers the\n+ * specific code for each version is accessed by {@link InfluxDBRepository} and {@link FilterCriteriaQueryCreator}\n+ * interfaces and specific implementation reside in {@link org.openhab.persistence.influxdb.internal.influx1} and\n+ * {@link org.openhab.persistence.influxdb.internal.influx2} packages\n+ *\n+ * @author Theo Weiss - Initial contribution, rewrite of org.openhab.persistence.influxdb\n+ * @author Joan Pujol Espinar - Addon rewrite refactoring code and adding support for InfluxDB 2.0. Some tag code is\n+ *         based\n+ *         from not integrated branch from Dominik Vorreiter\n+ */\n+@NonNullByDefault\n+@Component(service = { PersistenceService.class,\n+        QueryablePersistenceService.class }, configurationPid = \"org.openhab.influxdb\", property = {\n+                Constants.SERVICE_PID + \"=org.openhab.influxdb\",\n+                ConfigurableService.SERVICE_PROPERTY_DESCRIPTION_URI + \"=persistence:influxdb\",\n+                ConfigurableService.SERVICE_PROPERTY_LABEL + \"=InfluxDB persistence layer\",\n+                ConfigurableService.SERVICE_PROPERTY_CATEGORY + \"=persistence\" })\n+public class InfluxDBPersistenceService implements QueryablePersistenceService {\n+    public static final String SERVICE_NAME = \"influxdb\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDBPersistenceService.class);\n+\n+    // External dependencies\n+    @Nullable\n+    private ItemRegistry itemRegistry;\n+    @Nullable\n+    private MetadataRegistry metadataRegistry;\n+\n+    // Internal dependencies/state\n+    private InfluxDBConfiguration configuration = InfluxDBConfiguration.NO_CONFIGURATION;\n+    @NonNullByDefault({}) // Relax rules because can only be null if component is not active\n+    private ItemToStorePointCreator itemToStorePointCreator;\n+    @NonNullByDefault({}) // Relax rules because can only be null if component is not active\n+    private InfluxDBRepository influxDBRepository;\n+\n+    @Activate\n+    /**\n+     * Connect to database when service is activated\n+     */\n+    public void activate(final @Nullable Map<String, @Nullable Object> config) {\n+        logger.debug(\"InfluxDB persistence service is being activated\");\n+\n+        if (loadConfiguration(config)) {\n+            itemToStorePointCreator = new ItemToStorePointCreator(configuration, metadataRegistry);\n+            influxDBRepository = createInfluxDBRepository();\n+            influxDBRepository.connect();\n+        } else {\n+            logger.error(\"Cannot load configuration, persistence service wont work\");\n+        }\n+\n+        logger.debug(\"InfluxDB persistence service is now activated\");\n+    }\n+\n+    @NotNull\n+    // Visible for testing\n+    protected InfluxDBRepository createInfluxDBRepository() {\n+        return RepositoryFactory.createRepository(configuration);\n+    }\n+\n+    @Deactivate\n+    /**\n+     * Disconnect from database when service is deactivated\n+     */\n+    public void deactivate() {\n+        logger.debug(\"InfluxDB persistence service deactivated\");\n+        if (influxDBRepository != null) {\n+            influxDBRepository.disconnect();\n+            influxDBRepository = null;\n+        }\n+        if (itemToStorePointCreator != null) {\n+            itemToStorePointCreator = null;\n+        }\n+    }\n+\n+    @Modified\n+    /**\n+     * Rerun deactivation/activation code each time configuration is changed\n+     */\n+    protected void modified(@Nullable Map<String, @Nullable Object> config) {\n+        if (config != null) {\n+            logger.debug(\"Config has been modified will deactivate/activate with new config\");\n+\n+            deactivate();\n+            activate(config);\n+        } else {\n+            logger.warn(\"Null configuration, ignoring\");\n+        }\n+    }\n+\n+    private boolean loadConfiguration(@Nullable Map<String, @Nullable Object> config) {\n+        boolean configurationIsValid;\n+        if (config != null) {\n+            configuration = new InfluxDBConfiguration(config);\n+            configurationIsValid = configuration.isValid();\n+            if (configurationIsValid) {\n+                logger.debug(\"Loaded configuration {}\", config);\n+            } else {\n+                logger.warn(\"Some configuration properties are not valid {}\", config);\n+            }\n+        } else {\n+            configuration = InfluxDBConfiguration.NO_CONFIGURATION;\n+            configurationIsValid = false;\n+            logger.warn(\"Ignoring configuration because it's null\");\n+        }\n+        return configurationIsValid;\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return SERVICE_NAME;\n+    }\n+\n+    @Override\n+    public String getLabel(@Nullable Locale locale) {\n+        return \"InfluxDB persistence layer\";\n+    }\n+\n+    @Override\n+    public Set<PersistenceItemInfo> getItemInfo() {\n+        if (influxDBRepository != null && influxDBRepository.isConnected()) {\n+            return influxDBRepository.getStoredItemsCount().entrySet().stream()\n+                    .map(entry -> new InfluxDBPersistentItemInfo(entry.getKey(), entry.getValue()))\n+                    .collect(Collectors.toSet());\n+        } else {\n+            logger.info(\"getItemInfo ignored, InfluxDB is not yet connected\");\n+            return Collections.emptySet();\n+        }\n+    }\n+\n+    @Override\n+    public void store(Item item) {\n+        store(item, item.getName());\n+    }\n+\n+    @Override\n+    public void store(Item item, @Nullable String alias) {\n+        if (influxDBRepository != null && influxDBRepository.isConnected()) {\n+            InfluxPoint point = itemToStorePointCreator.convert(item, alias);\n+            if (point != null) {\n+                logger.trace(\"Storing item {} in InfluxDB point {}\", item, point);\n+                influxDBRepository.write(point);\n+            } else {\n+                logger.trace(\"Ignoring item {} as is cannot be converted to a InfluxDB point\", item);\n+            }\n+        } else {\n+            logger.info(\"store ignored, InfluxDB is not yet connected\");\n+        }\n+    }\n+\n+    @Override\n+    public Iterable<HistoricItem> query(FilterCriteria filter) {\n+        logger.debug(\"Got a query for historic points!\");\n+\n+        if (influxDBRepository != null && influxDBRepository.isConnected()) {\n+            logger.trace(\n+                    \"Filter: itemname: {}, ordering: {}, state: {},  operator: {}, getBeginDate: {}, getEndDate: {}, getPageSize: {}, getPageNumber: {}\",\n+                    filter.getItemName(), filter.getOrdering().toString(), filter.getState(), filter.getOperator(),\n+                    filter.getBeginDateZoned(), filter.getEndDateZoned(), filter.getPageSize(), filter.getPageNumber());\n+\n+            String query = RepositoryFactory.createQueryCreator(configuration).createQuery(filter,\n+                    configuration.getRetentionPolicy());\n+            List<InfluxRow> results = influxDBRepository.query(query);\n+            return results.stream().map(this::mapRow2HistoricItem).collect(Collectors.toList());\n+        } else {\n+            logger.info(\"query ignored, InfluxDB is not yet connected\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0ODUwNA==", "bodyText": "can these be made final?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402648504", "createdAt": "2020-04-02T23:12:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBConfiguration.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Contains this addon configurable parameters\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDBConfiguration {\n+    public static final String URL_PARAM = \"url\";\n+    public static final String TOKEN_PARAM = \"token\";\n+    public static final String USER_PARAM = \"user\";\n+    public static final String PASSWORD_PARAM = \"password\";\n+    public static final String DATABASE_PARAM = \"db\";\n+    public static final String RETENTION_POLICY_PARAM = \"retentionPolicy\";\n+    public static final String VERSION_PARAM = \"version\";\n+    public static final String REPLACE_UNDERSCORE_PARAM = \"replaceUnderscore\";\n+    public static final String ADD_CATEGORY_TAG_PARAM = \"addCategoryTag\";\n+    public static final String ADD_LABEL_TAG_PARAM = \"addLabelTag\";\n+    public static final String ADD_TYPE_TAG_PARAM = \"addTypeTag\";\n+    public static InfluxDBConfiguration NO_CONFIGURATION = new InfluxDBConfiguration(Collections.emptyMap());\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDBConfiguration.class);\n+    private String url;\n+    private String user;\n+    private String password;\n+    private String token;\n+    private String databaseName;\n+    private String retentionPolicy;\n+    private InfluxDBVersion version;\n+\n+    private boolean replaceUnderscore;\n+    private boolean addCategoryTag;\n+    private boolean addTypeTag;\n+    private boolean addLabelTag;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0ODg3MQ==", "bodyText": "The if block already returns, so using an else here is redundant. Also, less indentation looks better \ud83d\ude04", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402648871", "createdAt": "2020-04-02T23:13:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBConfiguration.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Contains this addon configurable parameters\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDBConfiguration {\n+    public static final String URL_PARAM = \"url\";\n+    public static final String TOKEN_PARAM = \"token\";\n+    public static final String USER_PARAM = \"user\";\n+    public static final String PASSWORD_PARAM = \"password\";\n+    public static final String DATABASE_PARAM = \"db\";\n+    public static final String RETENTION_POLICY_PARAM = \"retentionPolicy\";\n+    public static final String VERSION_PARAM = \"version\";\n+    public static final String REPLACE_UNDERSCORE_PARAM = \"replaceUnderscore\";\n+    public static final String ADD_CATEGORY_TAG_PARAM = \"addCategoryTag\";\n+    public static final String ADD_LABEL_TAG_PARAM = \"addLabelTag\";\n+    public static final String ADD_TYPE_TAG_PARAM = \"addTypeTag\";\n+    public static InfluxDBConfiguration NO_CONFIGURATION = new InfluxDBConfiguration(Collections.emptyMap());\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDBConfiguration.class);\n+    private String url;\n+    private String user;\n+    private String password;\n+    private String token;\n+    private String databaseName;\n+    private String retentionPolicy;\n+    private InfluxDBVersion version;\n+\n+    private boolean replaceUnderscore;\n+    private boolean addCategoryTag;\n+    private boolean addTypeTag;\n+    private boolean addLabelTag;\n+\n+    @SuppressWarnings(\"null\")\n+    public InfluxDBConfiguration(Map<String, @Nullable Object> config) {\n+        url = (String) config.getOrDefault(URL_PARAM, \"http://127.0.0.1:8086\");\n+        user = (String) config.getOrDefault(USER_PARAM, \"openhab\");\n+        password = (String) config.getOrDefault(PASSWORD_PARAM, \"\");\n+        token = (String) config.getOrDefault(TOKEN_PARAM, \"\");\n+        databaseName = (String) config.getOrDefault(DATABASE_PARAM, \"openhab\");\n+        retentionPolicy = (String) config.getOrDefault(RETENTION_POLICY_PARAM, \"autogen\");\n+        version = parseInfluxVersion(config.getOrDefault(VERSION_PARAM, InfluxDBVersion.V1.name()));\n+\n+        replaceUnderscore = getConfigBooleanValue(config, REPLACE_UNDERSCORE_PARAM, false);\n+        addCategoryTag = getConfigBooleanValue(config, ADD_CATEGORY_TAG_PARAM, false);\n+        addLabelTag = getConfigBooleanValue(config, ADD_LABEL_TAG_PARAM, false);\n+        addTypeTag = getConfigBooleanValue(config, ADD_TYPE_TAG_PARAM, false);\n+    }\n+\n+    private static boolean getConfigBooleanValue(Map<String, @Nullable Object> config, String key,\n+            boolean defaultValue) {\n+        Object object = config.get(key);\n+\n+        if (object instanceof Boolean) {\n+            return (Boolean) object;\n+        } else if (object != null) {\n+            return \"true\".equalsIgnoreCase((String) object);\n+        } else {\n+            return defaultValue;\n+        }\n+    }\n+\n+    private InfluxDBVersion parseInfluxVersion(@Nullable Object value) {\n+        try {\n+            return InfluxDBVersion.valueOf((String) value);\n+        } catch (RuntimeException e) {\n+            logger.warn(\"Invalid version {}\", value);\n+            return InfluxDBVersion.UNKNOWN;\n+        }\n+    }\n+\n+    public boolean isValid() {\n+        boolean hasVersion = version != InfluxDBVersion.UNKNOWN;\n+        boolean hasCredentials = false;\n+        if (version == InfluxDBVersion.V1) {\n+            hasCredentials = StringUtils.isNotBlank(user) && StringUtils.isNotBlank(password);\n+        } else if (version == InfluxDBVersion.V2) {\n+            hasCredentials = StringUtils.isNotBlank(token)\n+                    || (StringUtils.isNotBlank(user) && StringUtils.isNotBlank(password));\n+        }\n+        boolean hasDatabase = StringUtils.isNotBlank(databaseName);\n+        boolean hasRetentionPolicy = StringUtils.isNotBlank(retentionPolicy);\n+\n+        boolean valid = hasVersion && hasCredentials && hasDatabase && hasRetentionPolicy;\n+        if (valid) {\n+            return true;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0OTE2Mw==", "bodyText": "Initial contribution might not be the right description on this file...", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402649163", "createdAt": "2020-04-02T23:14:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBHistoricItem.java", "diffHunk": "@@ -18,21 +18,26 @@\n import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.openhab.core.persistence.HistoricItem;\n import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n \n /**\n- * This is a Java bean used to return historic items from Influxdb.\n+ * Java bean used to return items queries results from InfluxDB.\n  *\n  * @author Theo Weiss - Initial Contribution\n- *\n+ * @author Joan Pujol Espinar - Initial contribution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MDQ2NQ==", "bodyText": "Why is the getter nullable when the field is not?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402650465", "createdAt": "2020-04-02T23:18:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBPersistentItemInfo.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import java.util.Date;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.persistence.PersistenceItemInfo;\n+\n+/**\n+ * Java bean used to return information about stored items\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDBPersistentItemInfo implements PersistenceItemInfo {\n+    private final String name;\n+    private final Integer count;\n+\n+    public InfluxDBPersistentItemInfo(String name, Integer count) {\n+        this.name = name;\n+        this.count = count;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    @Nullable\n+    public Integer getCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MjA4NQ==", "bodyText": "The first letter of every word in a label should be capitalized. Please update other labels as well.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Add label tag</label>\n          \n          \n            \n            \t\t\t<label>Add Label Tag</label>", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402652085", "createdAt": "2020-04-02T23:23:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\t\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\t\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\t\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0\n+\t\thttps://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\t<config-description uri=\"persistence:influxdb\">\n+\n+\t\t<parameter-group name=\"connection\">\n+\t\t\t<label>Connection</label>\n+\t\t\t<description>This group defines connection parameters.</description>\n+\t\t\t<advanced>false</advanced>\n+\t\t</parameter-group>\n+\n+\t\t<parameter-group name=\"tags\">\n+\t\t\t<label>Additional Tags</label>\n+\t\t\t<description>This group defines additional tags which can be added.</description>\n+\t\t\t<advanced>false</advanced>\n+\t\t</parameter-group>\n+\n+\t\t<parameter-group name=\"misc\">\n+\t\t\t<label>Miscellaneous</label>\n+\t\t\t<description>This group defines miscellaneous parameters.</description>\n+\t\t\t<advanced>false</advanced>\n+\t\t</parameter-group>\n+\n+\t\t<parameter name=\"url\" type=\"text\" required=\"true\" groupName=\"connection\">\n+\t\t\t<context>url</context>\n+\t\t\t<label>Database URL</label>\n+\t\t\t<description>The database URL, e.g. http://127.0.0.1:8086 or http://127.0.0.1:9999</description>\n+\t\t\t<default>http://127.0.0.1:8086</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"version\" type=\"text\" required=\"true\" groupName=\"connection\">\n+\t\t\t<label>Database version</label>\n+\t\t\t<description>InfluxDB version</description>\n+\t\t\t<default>V1</default>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"V1\">InfluxDB 1</option>\n+\t\t\t\t<option value=\"V2\">InfluxDB 2</option>\n+\t\t\t</options>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"user\" type=\"text\" required=\"true\" groupName=\"connection\">\n+\t\t\t<label>Username</label>\n+\t\t\t<description>Database username</description>\n+\t\t\t<default>openhab</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"password\" type=\"text\" required=\"false\" groupName=\"connection\">\n+\t\t\t<context>password</context>\n+\t\t\t<label>Database password</label>\n+\t\t\t<description>Database password</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"token\" type=\"text\" required=\"false\" groupName=\"connection\">\n+\t\t\t<label>Authentication token</label>\n+\t\t\t<description>The token to authenticate to database (alternative to username/password for InfluxDB 2.0)\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"db\" type=\"text\" required=\"true\" groupName=\"connection\">\n+\t\t\t<label>Database/Organization</label>\n+\t\t\t<description>The name of the database (InfluxDB 1.0) or Organization for (InfluxDB 2.0)</description>\n+\t\t\t<default>openhab</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"retentionPolicy\" type=\"text\" required=\"true\" groupName=\"connection\">\n+\t\t\t<label>Retention policy / Bucket</label>\n+\t\t\t<description>The name of the retention policy (Influx DB 1.0) or bucket (InfluxDB 2.0) to write data\n+\t\t\t</description>\n+\t\t\t<default>openhab</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"replaceUnderscore\" type=\"boolean\" required=\"true\" groupName=\"misc\">\n+\t\t\t<label>Replace underscore</label>\n+\t\t\t<description>Whether underscores \"_\" in item names should be replaced by a dot \".\" (\"test_item\" ->\n+\t\t\t\t\"test.item\"). Only for measurement name, not for tags. Also applies to alias names.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"addCategoryTag\" type=\"boolean\" required=\"true\" groupName=\"tags\">\n+\t\t\t<label>Add category tag</label>\n+\t\t\t<description>Should the category of the item be included as tag \"category\"? If no category is set, \"n/a\" is\n+\t\t\t\tused.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"addTypeTag\" type=\"boolean\" required=\"true\" groupName=\"tags\">\n+\t\t\t<label>Add type tag</label>\n+\t\t\t<description>Should the item type be included as tag \"type\"?</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"addLabelTag\" type=\"boolean\" required=\"true\" groupName=\"tags\">\n+\t\t\t<label>Add label tag</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1Mjc4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StringBuffer query = new StringBuffer();\n          \n          \n            \n                    StringBuilder query = new StringBuilder();", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402652783", "createdAt": "2020-04-02T23:26:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/influx1/Influx1FilterCriteriaQueryCreatorImpl.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal.influx1;\n+\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.persistence.FilterCriteria;\n+import org.openhab.persistence.influxdb.internal.FilterCriteriaQueryCreator;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConstants;\n+import org.openhab.persistence.influxdb.internal.InfluxDBStateConvertUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation of {@link FilterCriteriaQueryCreator} for InfluxDB 1.0\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution. Most code has been moved from\n+ *         {@link org.openhab.persistence.influxdb.InfluxDBPersistenceService} where it was in previous version\n+ */\n+@NonNullByDefault\n+public class Influx1FilterCriteriaQueryCreatorImpl implements FilterCriteriaQueryCreator {\n+    private final Logger logger = LoggerFactory.getLogger(Influx1FilterCriteriaQueryCreatorImpl.class);\n+    private final InfluxDBConfiguration configuration;\n+\n+    public Influx1FilterCriteriaQueryCreatorImpl(InfluxDBConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public String createQuery(FilterCriteria filter, String retentionPolicy) {\n+        StringBuffer query = new StringBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MzIyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private final MetadataRegistry metadataRegistry;\n          \n          \n            \n                private final @Nullable MetadataRegistry metadataRegistry;", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402653228", "createdAt": "2020-04-02T23:27:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/ItemToStorePointCreator.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_CATEGORY_NAME;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_ITEM_NAME;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_LABEL_NAME;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_TYPE_NAME;\n+\n+import java.time.Instant;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.Metadata;\n+import org.openhab.core.items.MetadataKey;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.openhab.persistence.influxdb.InfluxDBPersistenceService;\n+\n+/**\n+ * Logic to create an InfluxDB {@link InfluxPoint} from an openHAB {@link Item}\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ItemToStorePointCreator {\n+    private final InfluxDBConfiguration configuration;\n+    @Nullable\n+    private final MetadataRegistry metadataRegistry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NDMwNg==", "bodyText": "Shouldn't you be looping through the list of accepted command types? Or am I missing something?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402654306", "createdAt": "2020-04-02T23:30:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/ItemToStorePointCreator.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_CATEGORY_NAME;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_ITEM_NAME;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_LABEL_NAME;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_TYPE_NAME;\n+\n+import java.time.Instant;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.Metadata;\n+import org.openhab.core.items.MetadataKey;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.openhab.persistence.influxdb.InfluxDBPersistenceService;\n+\n+/**\n+ * Logic to create an InfluxDB {@link InfluxPoint} from an openHAB {@link Item}\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ItemToStorePointCreator {\n+    private final InfluxDBConfiguration configuration;\n+    @Nullable\n+    private final MetadataRegistry metadataRegistry;\n+\n+    public ItemToStorePointCreator(InfluxDBConfiguration configuration, @Nullable MetadataRegistry metadataRegistry) {\n+        this.configuration = configuration;\n+        this.metadataRegistry = metadataRegistry;\n+    }\n+\n+    public @Nullable InfluxPoint convert(Item item, @Nullable String storeAlias) {\n+        if (item.getState() instanceof UnDefType) {\n+            return null;\n+        }\n+\n+        String measurementName = calculateMeasurementName(item, storeAlias);\n+        String itemName = item.getName();\n+        State state = getItemState(item);\n+\n+        Object value = InfluxDBStateConvertUtils.stateToObject(state);\n+\n+        InfluxPoint.Builder point = InfluxPoint.newBuilder(measurementName).withTime(Instant.now()).withValue(value)\n+                .withTag(TAG_ITEM_NAME, itemName);\n+\n+        addPointTags(item, point);\n+\n+        return point.build();\n+    }\n+\n+    @SuppressWarnings(\"null\")\n+    private String calculateMeasurementName(Item item, @Nullable String storeAlias) {\n+        String name;\n+        if (StringUtils.isNotBlank(storeAlias)) {\n+            name = storeAlias;\n+        } else {\n+            name = item.getName();\n+        }\n+\n+        if (configuration.isReplaceUnderscore()) {\n+            name = name.replace('_', '.');\n+        }\n+\n+        return name;\n+    }\n+\n+    private State getItemState(Item item) {\n+        final State state;\n+        final Class<? extends State> desiredConversion = calculateDesiredTypeConversionToStore(item);\n+        if (desiredConversion != null) {\n+            State convertedState = item.getStateAs(desiredConversion);\n+            if (convertedState != null) {\n+                state = convertedState;\n+            } else {\n+                state = item.getState();\n+            }\n+        } else {\n+            state = item.getState();\n+        }\n+        return state;\n+    }\n+\n+    private @Nullable Class<? extends State> calculateDesiredTypeConversionToStore(Item item) {\n+        Class<? extends State> conversion = null;\n+        if (item.getAcceptedCommandTypes().size() > 1) {\n+            if (item.getAcceptedCommandTypes().get(0).isAssignableFrom(State.class)) {\n+                conversion = item.getAcceptedCommandTypes().get(0).asSubclass(State.class);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1NDU2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StringBuffer buf = new StringBuffer();\n          \n          \n            \n                    StringBuilder buf = new StringBuilder();", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r402654567", "createdAt": "2020-04-02T23:31:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBStateConvertUtils.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.TimeZone;\n+\n+import org.apache.commons.lang.BooleanUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.items.GroupItem;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemNotFoundException;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.library.items.ColorItem;\n+import org.openhab.core.library.items.ContactItem;\n+import org.openhab.core.library.items.DateTimeItem;\n+import org.openhab.core.library.items.DimmerItem;\n+import org.openhab.core.library.items.LocationItem;\n+import org.openhab.core.library.items.NumberItem;\n+import org.openhab.core.library.items.RollershutterItem;\n+import org.openhab.core.library.items.SwitchItem;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Conversion logic between openHAB {@link State} types and InfluxDB store types\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution, based on previous work from Theo Weiss and Dominik Vorreiter\n+ */\n+@NonNullByDefault\n+public class InfluxDBStateConvertUtils {\n+    static final String DIGITAL_VALUE_OFF = \"false\"; // Visible for testing\n+    static final String DIGITAL_VALUE_ON = \"true\"; // Visible for testing\n+    private static Logger logger = LoggerFactory.getLogger(InfluxDBStateConvertUtils.class);\n+\n+    /**\n+     * Converts {@link State} to a String suitable for influxdb queries.\n+     *\n+     * @param state to be converted\n+     * @return {@link String} equivalent of the {@link State}\n+     */\n+    public static String stateToString(State state) {\n+        String value;\n+        if (state instanceof DecimalType) {\n+            value = ((DecimalType) state).toBigDecimal().toString();\n+        } else if (state instanceof QuantityType<?>) {\n+            value = ((QuantityType<?>) state).toBigDecimal().toString();\n+        } else if (state instanceof PointType) {\n+            value = point2String((PointType) state);\n+        } else if (state instanceof OnOffType) {\n+            value = state == OnOffType.ON ? DIGITAL_VALUE_ON : DIGITAL_VALUE_OFF;\n+        } else if (state instanceof OpenClosedType) {\n+            value = state == OpenClosedType.OPEN ? DIGITAL_VALUE_ON : DIGITAL_VALUE_OFF;\n+        } else if (state instanceof DateTimeType) {\n+            value = String.valueOf(((DateTimeType) state).getZonedDateTime().toInstant().toEpochMilli());\n+        } else {\n+            value = state.toString();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Converts {@link State} to objects fitting into influxdb values.\n+     *\n+     * @param state to be converted\n+     * @return integer or double value for DecimalType, 0 or 1 for OnOffType and OpenClosedType,\n+     *         integer for DateTimeType, String for all others\n+     */\n+    public static Object stateToObject(State state) {\n+        Object value;\n+        if (state instanceof HSBType) {\n+            value = state.toString();\n+        } else if (state instanceof PointType) {\n+            value = point2String((PointType) state);\n+        } else if (state instanceof DecimalType) {\n+            value = convertBigDecimalToNum(((DecimalType) state).toBigDecimal());\n+        } else if (state instanceof QuantityType<?>) {\n+            value = convertBigDecimalToNum(((QuantityType<?>) state).toBigDecimal());\n+        } else if (state instanceof OnOffType) {\n+            value = state == OnOffType.ON ? Boolean.TRUE : Boolean.FALSE;\n+        } else if (state instanceof OpenClosedType) {\n+            value = state == OpenClosedType.OPEN ? Boolean.TRUE : Boolean.FALSE;\n+        } else if (state instanceof DateTimeType) {\n+            value = ((DateTimeType) state).getZonedDateTime().toInstant().toEpochMilli();\n+        } else {\n+            value = state.toString();\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Converts a value to a {@link State} which is suitable for the given {@link Item}. This is\n+     * needed for querying a {@link InfluxDBHistoricItem}.\n+     *\n+     * @param value to be converted to a {@link State}\n+     * @param itemName name of the {@link Item} to get the {@link State} for\n+     * @return the state of the item represented by the itemName parameter, else the string value of\n+     *         the Object parameter\n+     */\n+    public static State objectToState(Object value, String itemName, @Nullable ItemRegistry itemRegistry) {\n+        State state = null;\n+        if (itemRegistry != null) {\n+            try {\n+                Item item = itemRegistry.getItem(itemName);\n+                state = objectToState(value, item);\n+            } catch (ItemNotFoundException e) {\n+                logger.info(\"Could not find item '{}' in registry\", itemName);\n+            }\n+        }\n+\n+        if (state == null) {\n+            state = new StringType(String.valueOf(value));\n+        }\n+\n+        return state;\n+    }\n+\n+    public static State objectToState(Object value, Item itemToSetState) {\n+        String valueStr = String.valueOf(value);\n+\n+        Item item = itemToSetState;\n+        if (item instanceof GroupItem) {\n+            item = ((GroupItem) item).getBaseItem();\n+        }\n+        if (item instanceof ColorItem) {\n+            return new HSBType(valueStr);\n+        } else if (item instanceof LocationItem) {\n+            return new PointType(valueStr);\n+        } else if (item instanceof NumberItem) {\n+            return new DecimalType(valueStr);\n+        } else if (item instanceof DimmerItem) {\n+            return new PercentType(valueStr);\n+        } else if (item instanceof SwitchItem) {\n+            return toBoolean(valueStr) ? OnOffType.ON : OnOffType.OFF;\n+        } else if (item instanceof ContactItem) {\n+            return toBoolean(valueStr) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+        } else if (item instanceof RollershutterItem) {\n+            return new PercentType(valueStr);\n+        } else if (item instanceof DateTimeItem) {\n+            Instant i = Instant.ofEpochMilli(new BigDecimal(valueStr).longValue());\n+            ZonedDateTime z = ZonedDateTime.ofInstant(i, TimeZone.getDefault().toZoneId());\n+            return new DateTimeType(z);\n+        } else {\n+            return new StringType(valueStr);\n+        }\n+    }\n+\n+    private static boolean toBoolean(@Nullable Object object) {\n+        if (object instanceof Boolean) {\n+            return (Boolean) object;\n+        } else if (object != null) {\n+            if (\"1\".equals(object)) {\n+                return true;\n+            } else {\n+                return BooleanUtils.toBoolean(String.valueOf(object));\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    private static String point2String(PointType point) {\n+        StringBuffer buf = new StringBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535708b5a6b698e4eb8afc7d65319fe17a5abff8"}, "originalPosition": 186}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0972d4945a0e1f886b9a04d78f43c5dc3e873b62", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/0972d4945a0e1f886b9a04d78f43c5dc3e873b62", "committedDate": "2020-04-03T20:49:34Z", "message": "Apply suggestions from code review\r\n\r\nApply review suggestions\n\nCo-Authored-By: cpmeister <mistercpp2000@gmail.com>\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd242cbad173cb4854d22734572b4edce80d9390", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/cd242cbad173cb4854d22734572b4edce80d9390", "committedDate": "2020-04-03T20:49:34Z", "message": "PR review fixes\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a35195ecb7b819446f65922bfc5880137fd45a1d", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/a35195ecb7b819446f65922bfc5880137fd45a1d", "committedDate": "2020-04-03T13:36:29Z", "message": "Apply suggestions from code review\r\n\r\nApply review suggestions\n\nCo-Authored-By: cpmeister <mistercpp2000@gmail.com>"}, "afterCommit": {"oid": "cd242cbad173cb4854d22734572b4edce80d9390", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/cd242cbad173cb4854d22734572b4edce80d9390", "committedDate": "2020-04-03T20:49:34Z", "message": "PR review fixes\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjAzODY2", "url": "https://github.com/openhab/openhab-addons/pull/7235#pullrequestreview-387603866", "createdAt": "2020-04-03T21:57:25Z", "commit": {"oid": "cd242cbad173cb4854d22734572b4edce80d9390"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo1NzoyNlrOGAq5Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoxMjo0NlrOGArNkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1NTk5MQ==", "bodyText": "Why not use BooleanUtils.toStringTrueFalse instead these constants?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r403355991", "createdAt": "2020-04-03T21:57:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBStateConvertUtils.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n+import java.util.TimeZone;\n+\n+import org.apache.commons.lang.BooleanUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.items.GroupItem;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemNotFoundException;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.library.items.ColorItem;\n+import org.openhab.core.library.items.ContactItem;\n+import org.openhab.core.library.items.DateTimeItem;\n+import org.openhab.core.library.items.DimmerItem;\n+import org.openhab.core.library.items.LocationItem;\n+import org.openhab.core.library.items.NumberItem;\n+import org.openhab.core.library.items.RollershutterItem;\n+import org.openhab.core.library.items.SwitchItem;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.PointType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Conversion logic between openHAB {@link State} types and InfluxDB store types\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution, based on previous work from Theo Weiss and Dominik Vorreiter\n+ */\n+@NonNullByDefault\n+public class InfluxDBStateConvertUtils {\n+    static final String DIGITAL_VALUE_OFF = \"false\"; // Visible for testing\n+    static final String DIGITAL_VALUE_ON = \"true\"; // Visible for testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd242cbad173cb4854d22734572b4edce80d9390"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1ODQxNw==", "bodyText": "Shouldn't you check for escape characters?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r403358417", "createdAt": "2020-04-03T22:04:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/influx1/Influx1FilterCriteriaQueryCreatorImpl.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal.influx1;\n+\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.persistence.FilterCriteria;\n+import org.openhab.persistence.influxdb.internal.FilterCriteriaQueryCreator;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConstants;\n+import org.openhab.persistence.influxdb.internal.InfluxDBStateConvertUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation of {@link FilterCriteriaQueryCreator} for InfluxDB 1.0\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution. Most code has been moved from\n+ *         {@link org.openhab.persistence.influxdb.InfluxDBPersistenceService} where it was in previous version\n+ */\n+@NonNullByDefault\n+public class Influx1FilterCriteriaQueryCreatorImpl implements FilterCriteriaQueryCreator {\n+    private final Logger logger = LoggerFactory.getLogger(Influx1FilterCriteriaQueryCreatorImpl.class);\n+    private final InfluxDBConfiguration configuration;\n+\n+    public Influx1FilterCriteriaQueryCreatorImpl(InfluxDBConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public String createQuery(FilterCriteria filter, String retentionPolicy) {\n+        StringBuilder query = new StringBuilder();\n+        query.append(\"select \").append(InfluxDBConstants.COLUMN_VALUE_NAME).append(' ').append(\"from \\\"\")\n+                .append(configuration.getRetentionPolicy()).append(\"\\\".\");\n+\n+        if (filter.getItemName() != null) {\n+            query.append('\"').append(filter.getItemName()).append('\"');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd242cbad173cb4854d22734572b4edce80d9390"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1OTAwNg==", "bodyText": "What about ordering by ascending?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r403359006", "createdAt": "2020-04-03T22:06:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/influx1/Influx1FilterCriteriaQueryCreatorImpl.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal.influx1;\n+\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.persistence.FilterCriteria;\n+import org.openhab.persistence.influxdb.internal.FilterCriteriaQueryCreator;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConstants;\n+import org.openhab.persistence.influxdb.internal.InfluxDBStateConvertUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation of {@link FilterCriteriaQueryCreator} for InfluxDB 1.0\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution. Most code has been moved from\n+ *         {@link org.openhab.persistence.influxdb.InfluxDBPersistenceService} where it was in previous version\n+ */\n+@NonNullByDefault\n+public class Influx1FilterCriteriaQueryCreatorImpl implements FilterCriteriaQueryCreator {\n+    private final Logger logger = LoggerFactory.getLogger(Influx1FilterCriteriaQueryCreatorImpl.class);\n+    private final InfluxDBConfiguration configuration;\n+\n+    public Influx1FilterCriteriaQueryCreatorImpl(InfluxDBConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public String createQuery(FilterCriteria filter, String retentionPolicy) {\n+        StringBuilder query = new StringBuilder();\n+        query.append(\"select \").append(InfluxDBConstants.COLUMN_VALUE_NAME).append(' ').append(\"from \\\"\")\n+                .append(configuration.getRetentionPolicy()).append(\"\\\".\");\n+\n+        if (filter.getItemName() != null) {\n+            query.append('\"').append(filter.getItemName()).append('\"');\n+        } else {\n+            query.append(\"/.*/\");\n+        }\n+\n+        logger.trace(\n+                \"Filter: itemname: {}, ordering: {}, state: {},  operator: {}, getBeginDate: {}, getEndDate: {}, getPageSize: {}, getPageNumber: {}\",\n+                filter.getItemName(), filter.getOrdering().toString(), filter.getState(), filter.getOperator(),\n+                filter.getBeginDateZoned(), filter.getEndDateZoned(), filter.getPageSize(), filter.getPageNumber());\n+\n+        if ((filter.getState() != null && filter.getOperator() != null) || filter.getBeginDateZoned() != null\n+                || filter.getEndDateZoned() != null) {\n+            query.append(\" where \");\n+            boolean foundState = false;\n+            boolean foundBeginDate = false;\n+            if (filter.getState() != null && filter.getOperator() != null) {\n+                String value = InfluxDBStateConvertUtils.stateToString(filter.getState());\n+                foundState = true;\n+                query.append(InfluxDBConstants.COLUMN_VALUE_NAME);\n+                query.append(\" \");\n+                query.append(filter.getOperator().toString());\n+                query.append(\" \");\n+                query.append(value);\n+            }\n+\n+            if (filter.getBeginDateZoned() != null) {\n+                foundBeginDate = true;\n+                if (foundState) {\n+                    query.append(\" and\");\n+                }\n+                query.append(\" \");\n+                query.append(InfluxDBConstants.COLUMN_TIME_NAME);\n+                query.append(\" > \");\n+                query.append(getTimeFilter(filter.getBeginDateZoned()));\n+                query.append(\" \");\n+            }\n+\n+            if (filter.getEndDateZoned() != null) {\n+                if (foundState || foundBeginDate) {\n+                    query.append(\" and\");\n+                }\n+                query.append(\" \");\n+                query.append(InfluxDBConstants.COLUMN_TIME_NAME);\n+                query.append(\" < \");\n+                query.append(getTimeFilter(filter.getEndDateZoned()));\n+                query.append(\" \");\n+            }\n+        }\n+\n+        if (filter.getOrdering() == FilterCriteria.Ordering.DESCENDING) {\n+            query.append(String.format(\" ORDER BY %s DESC\", InfluxDBConstants.COLUMN_TIME_NAME));\n+            logger.debug(\"descending ordering \");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd242cbad173cb4854d22734572b4edce80d9390"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1OTk4Mg==", "bodyText": "startEntryNum isn't used in the query? Paging doesn't work?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r403359982", "createdAt": "2020-04-03T22:09:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/influx1/Influx1FilterCriteriaQueryCreatorImpl.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal.influx1;\n+\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.persistence.FilterCriteria;\n+import org.openhab.persistence.influxdb.internal.FilterCriteriaQueryCreator;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConstants;\n+import org.openhab.persistence.influxdb.internal.InfluxDBStateConvertUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation of {@link FilterCriteriaQueryCreator} for InfluxDB 1.0\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution. Most code has been moved from\n+ *         {@link org.openhab.persistence.influxdb.InfluxDBPersistenceService} where it was in previous version\n+ */\n+@NonNullByDefault\n+public class Influx1FilterCriteriaQueryCreatorImpl implements FilterCriteriaQueryCreator {\n+    private final Logger logger = LoggerFactory.getLogger(Influx1FilterCriteriaQueryCreatorImpl.class);\n+    private final InfluxDBConfiguration configuration;\n+\n+    public Influx1FilterCriteriaQueryCreatorImpl(InfluxDBConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public String createQuery(FilterCriteria filter, String retentionPolicy) {\n+        StringBuilder query = new StringBuilder();\n+        query.append(\"select \").append(InfluxDBConstants.COLUMN_VALUE_NAME).append(' ').append(\"from \\\"\")\n+                .append(configuration.getRetentionPolicy()).append(\"\\\".\");\n+\n+        if (filter.getItemName() != null) {\n+            query.append('\"').append(filter.getItemName()).append('\"');\n+        } else {\n+            query.append(\"/.*/\");\n+        }\n+\n+        logger.trace(\n+                \"Filter: itemname: {}, ordering: {}, state: {},  operator: {}, getBeginDate: {}, getEndDate: {}, getPageSize: {}, getPageNumber: {}\",\n+                filter.getItemName(), filter.getOrdering().toString(), filter.getState(), filter.getOperator(),\n+                filter.getBeginDateZoned(), filter.getEndDateZoned(), filter.getPageSize(), filter.getPageNumber());\n+\n+        if ((filter.getState() != null && filter.getOperator() != null) || filter.getBeginDateZoned() != null\n+                || filter.getEndDateZoned() != null) {\n+            query.append(\" where \");\n+            boolean foundState = false;\n+            boolean foundBeginDate = false;\n+            if (filter.getState() != null && filter.getOperator() != null) {\n+                String value = InfluxDBStateConvertUtils.stateToString(filter.getState());\n+                foundState = true;\n+                query.append(InfluxDBConstants.COLUMN_VALUE_NAME);\n+                query.append(\" \");\n+                query.append(filter.getOperator().toString());\n+                query.append(\" \");\n+                query.append(value);\n+            }\n+\n+            if (filter.getBeginDateZoned() != null) {\n+                foundBeginDate = true;\n+                if (foundState) {\n+                    query.append(\" and\");\n+                }\n+                query.append(\" \");\n+                query.append(InfluxDBConstants.COLUMN_TIME_NAME);\n+                query.append(\" > \");\n+                query.append(getTimeFilter(filter.getBeginDateZoned()));\n+                query.append(\" \");\n+            }\n+\n+            if (filter.getEndDateZoned() != null) {\n+                if (foundState || foundBeginDate) {\n+                    query.append(\" and\");\n+                }\n+                query.append(\" \");\n+                query.append(InfluxDBConstants.COLUMN_TIME_NAME);\n+                query.append(\" < \");\n+                query.append(getTimeFilter(filter.getEndDateZoned()));\n+                query.append(\" \");\n+            }\n+        }\n+\n+        if (filter.getOrdering() == FilterCriteria.Ordering.DESCENDING) {\n+            query.append(String.format(\" ORDER BY %s DESC\", InfluxDBConstants.COLUMN_TIME_NAME));\n+            logger.debug(\"descending ordering \");\n+        }\n+\n+        int limit = (filter.getPageNumber() + 1) * filter.getPageSize();\n+        query.append(\" limit \" + limit);\n+        logger.trace(\"appending limit {}\", limit);\n+\n+        int totalEntriesAffected = ((filter.getPageNumber() + 1) * filter.getPageSize());\n+        int startEntryNum = totalEntriesAffected\n+                - (totalEntriesAffected - (filter.getPageSize() * filter.getPageNumber()));\n+        logger.trace(\"startEntryNum {}\", startEntryNum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd242cbad173cb4854d22734572b4edce80d9390"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2MTE2OQ==", "bodyText": "Create a local variable for valuess.get(i) so you can reuse it.", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r403361169", "createdAt": "2020-04-03T22:12:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/influx1/InfluxDB1RepositoryImpl.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal.influx1;\n+\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.COLUMN_TIME_NAME;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.COLUMN_VALUE_NAME;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.influxdb.InfluxDB;\n+import org.influxdb.InfluxDBFactory;\n+import org.influxdb.dto.Point;\n+import org.influxdb.dto.Pong;\n+import org.influxdb.dto.Query;\n+import org.influxdb.dto.QueryResult;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBRepository;\n+import org.openhab.persistence.influxdb.internal.InfluxPoint;\n+import org.openhab.persistence.influxdb.internal.InfluxRow;\n+import org.openhab.persistence.influxdb.internal.UnnexpectedConditionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import retrofit.RetrofitError;\n+\n+/**\n+ * Implementation of {@link InfluxDBRepository} for InfluxDB 1.0\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution. Most code has beenmoved from\n+ *         {@link org.openhab.persistence.influxdb.InfluxDBPersistenceService} where it was in previous version\n+ */\n+@NonNullByDefault\n+public class InfluxDB1RepositoryImpl implements InfluxDBRepository {\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDB1RepositoryImpl.class);\n+    private InfluxDBConfiguration configuration;\n+    @Nullable\n+    private InfluxDB client;\n+\n+    public InfluxDB1RepositoryImpl(InfluxDBConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public boolean isConnected() {\n+        return client != null;\n+    }\n+\n+    @Override\n+    public boolean connect() {\n+        final InfluxDB createdClient = InfluxDBFactory.connect(configuration.getUrl(), configuration.getUser(),\n+                configuration.getPassword());\n+        createdClient.enableBatch(200, 100, TimeUnit.MILLISECONDS);\n+        this.client = createdClient;\n+        return checkConnectionStatus();\n+    }\n+\n+    @Override\n+    public void disconnect() {\n+        this.client = null;\n+    }\n+\n+    @Override\n+    public boolean checkConnectionStatus() {\n+        boolean dbStatus = false;\n+        final InfluxDB currentClient = client;\n+        if (currentClient != null) {\n+            try {\n+                Pong pong = currentClient.ping();\n+                String version = pong.getVersion();\n+                // may be check for version >= 0.9\n+                if (version != null && !version.contains(\"unknown\")) {\n+                    dbStatus = true;\n+                    logger.debug(\"database status is OK, version is {}\", version);\n+                } else {\n+                    logger.warn(\"database ping error, version is: \\\"{}\\\" response time was \\\"{}\\\"\", version,\n+                            pong.getResponseTime());\n+                    dbStatus = false;\n+                }\n+            } catch (RuntimeException e) {\n+                dbStatus = false;\n+                logger.error(\"database connection failed\", e);\n+                handleDatabaseException(e);\n+            }\n+        } else {\n+            logger.warn(\"checkConnection: database is not connected\");\n+        }\n+        return dbStatus;\n+    }\n+\n+    private void handleDatabaseException(Exception e) {\n+        if (e instanceof RetrofitError) {\n+            // e.g. raised if influxdb is not running\n+            logger.warn(\"database connection error {}\", e.getMessage(), e);\n+        } else if (e instanceof RuntimeException) {\n+            // e.g. raised by authentication errors\n+            logger.warn(\"database error: {}\", e.getMessage(), e);\n+        }\n+    }\n+\n+    @Override\n+    public void write(InfluxPoint point) {\n+        final InfluxDB currentClient = this.client;\n+        if (currentClient != null) {\n+            Point clientPoint = convertPointToClientFormat(point);\n+            currentClient.write(configuration.getDatabaseName(), configuration.getRetentionPolicy(), clientPoint);\n+        } else {\n+            logger.warn(\"Write point {} ignored due to client isn't connected\", point);\n+        }\n+    }\n+\n+    private Point convertPointToClientFormat(InfluxPoint point) {\n+        Point.Builder clientPoint = Point.measurement(point.getMeasurementName()).time(point.getTime().toEpochMilli(),\n+                TimeUnit.MILLISECONDS);\n+        setPointValue(point.getValue(), clientPoint);\n+        point.getTags().entrySet().forEach(e -> clientPoint.tag(e.getKey(), e.getValue()));\n+        point.getFields().entrySet().forEach(e -> clientPoint.addField(e.getKey(), e.getValue()));\n+        return clientPoint.build();\n+    }\n+\n+    private void setPointValue(@Nullable Object value, Point.Builder point) {\n+        if (value instanceof String)\n+            point.addField(COLUMN_VALUE_NAME, (String) value);\n+        else if (value instanceof Number)\n+            point.addField(COLUMN_VALUE_NAME, (Number) value);\n+        else if (value instanceof Boolean)\n+            point.addField(COLUMN_VALUE_NAME, (Boolean) value);\n+        else if (value == null)\n+            point.addField(COLUMN_VALUE_NAME, (String) null);\n+        else\n+            throw new UnnexpectedConditionException(\"Not expected value type\");\n+    }\n+\n+    @Override\n+    public List<InfluxRow> query(String query) {\n+        final InfluxDB currentClient = client;\n+        if (currentClient != null) {\n+            Query parsedQuery = new Query(query, configuration.getDatabaseName());\n+            List<QueryResult.Result> results = currentClient.query(parsedQuery, TimeUnit.MILLISECONDS).getResults();\n+            return convertClientResutToRepository(results);\n+        } else {\n+            logger.warn(\"Returning empty list because queryAPI isn't present\");\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    private List<InfluxRow> convertClientResutToRepository(List<QueryResult.Result> results) {\n+        List<InfluxRow> rows = new ArrayList<>();\n+        for (QueryResult.Result result : results) {\n+            List<QueryResult.Series> seriess = result.getSeries();\n+            if (result.getError() != null) {\n+                logger.warn(\"{}\", result.getError());\n+                continue;\n+            }\n+            if (seriess == null) {\n+                logger.debug(\"query returned no series\");\n+            } else {\n+                for (QueryResult.Series series : seriess) {\n+                    logger.trace(\"series {}\", series.toString());\n+                    String itemName = series.getName();\n+                    List<List<Object>> valuess = series.getValues();\n+                    if (valuess == null) {\n+                        logger.debug(\"query returned no values\");\n+                    } else {\n+                        List<String> columns = series.getColumns();\n+                        logger.trace(\"columns {}\", columns);\n+                        if (columns != null) {\n+                            Integer timestampColumn = null;\n+                            Integer valueColumn = null;\n+                            for (int i = 0; i < columns.size(); i++) {\n+                                String columnName = columns.get(i);\n+                                if (columnName.equals(COLUMN_TIME_NAME)) {\n+                                    timestampColumn = i;\n+                                } else if (columnName.equals(COLUMN_VALUE_NAME)) {\n+                                    valueColumn = i;\n+                                }\n+                            }\n+                            if (valueColumn == null || timestampColumn == null) {\n+                                throw new IllegalStateException(\"missing column\");\n+                            }\n+                            for (int i = 0; i < valuess.size(); i++) {\n+                                Double rawTime = (Double) valuess.get(i).get(timestampColumn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd242cbad173cb4854d22734572b4edce80d9390"}, "originalPosition": 198}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de6aab161cf73d25dbff057adb5662159df9c60d", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/de6aab161cf73d25dbff057adb5662159df9c60d", "committedDate": "2020-04-05T14:07:08Z", "message": "Refactor InfluxDB 1.0 filter criteria queries using QueryBuilder from driver library\nMake a test for FilterCriteria queries\nFix several issues about FilterCriteria queries\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fea14dc2ff8ae9ad0f8bc5618dececedd1a38e6", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/2fea14dc2ff8ae9ad0f8bc5618dececedd1a38e6", "committedDate": "2020-04-05T14:20:49Z", "message": "Fix formatting issues\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODg5Njkw", "url": "https://github.com/openhab/openhab-addons/pull/7235#pullrequestreview-387889690", "createdAt": "2020-04-06T01:25:29Z", "commit": {"oid": "2fea14dc2ff8ae9ad0f8bc5618dececedd1a38e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMToyNTozMFrOGBFSdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTozMzo0M1rOGBFXpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4ODQwNg==", "bodyText": "Is date type supported?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r403788406", "createdAt": "2020-04-06T01:25:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/influx2/InfluxDB2RepositoryImpl.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal.influx2;\n+\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.COLUMN_TIME_NAME_V2;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.COLUMN_VALUE_NAME_V2;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.FIELD_VALUE_NAME;\n+import static org.openhab.persistence.influxdb.internal.InfluxDBConstants.TAG_ITEM_NAME;\n+\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConstants;\n+import org.openhab.persistence.influxdb.internal.InfluxDBRepository;\n+import org.openhab.persistence.influxdb.internal.InfluxPoint;\n+import org.openhab.persistence.influxdb.internal.InfluxRow;\n+import org.openhab.persistence.influxdb.internal.UnnexpectedConditionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.influxdb.client.InfluxDBClient;\n+import com.influxdb.client.InfluxDBClientFactory;\n+import com.influxdb.client.InfluxDBClientOptions;\n+import com.influxdb.client.QueryApi;\n+import com.influxdb.client.WriteApi;\n+import com.influxdb.client.domain.Ready;\n+import com.influxdb.client.domain.WritePrecision;\n+import com.influxdb.client.write.Point;\n+import com.influxdb.query.FluxTable;\n+\n+/**\n+ * Implementation of {@link InfluxDBRepository} for InfluxDB 2.0\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDB2RepositoryImpl implements InfluxDBRepository {\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDB2RepositoryImpl.class);\n+    private InfluxDBConfiguration configuration;\n+    @Nullable\n+    private InfluxDBClient client;\n+    @Nullable\n+    private QueryApi queryAPI;\n+    @Nullable\n+    private WriteApi writeAPI;\n+\n+    public InfluxDB2RepositoryImpl(InfluxDBConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * Returns if the client has been successfully connected to server\n+     *\n+     * @return True if it's connected, otherwise false\n+     */\n+    @Override\n+    public boolean isConnected() {\n+        return client != null;\n+    }\n+\n+    /**\n+     * Connect to InfluxDB server\n+     *\n+     * @return True if successful, otherwise false\n+     */\n+    @Override\n+    public boolean connect() {\n+        InfluxDBClientOptions.Builder optionsBuilder = InfluxDBClientOptions.builder().url(configuration.getUrl())\n+                .org(configuration.getDatabaseName()).bucket(configuration.getRetentionPolicy());\n+        if (StringUtils.isNotBlank(\"token\")) {\n+            optionsBuilder.authenticateToken(configuration.getTokenAsCharArray());\n+        } else {\n+            optionsBuilder.authenticate(configuration.getUser(), configuration.getPassword().toCharArray());\n+        }\n+        InfluxDBClientOptions clientOptions = optionsBuilder.build();\n+\n+        final InfluxDBClient createdClient = InfluxDBClientFactory.create(clientOptions);\n+        this.client = createdClient;\n+        logger.debug(\"Succesfully connected to InfluxDB. Instance ready={}\", createdClient.ready());\n+        queryAPI = createdClient.getQueryApi();\n+        writeAPI = createdClient.getWriteApi();\n+        return checkConnectionStatus();\n+    }\n+\n+    /**\n+     * Disconnect from InfluxDB server\n+     */\n+    @Override\n+    public void disconnect() {\n+        final InfluxDBClient currentClient = this.client;\n+        if (currentClient != null) {\n+            currentClient.close();\n+        }\n+        this.client = null;\n+    }\n+\n+    /**\n+     * Check if connection is currently ready\n+     *\n+     * @return True if its ready, otherwise false\n+     */\n+    @Override\n+    public boolean checkConnectionStatus() {\n+        final InfluxDBClient currentClient = client;\n+        if (currentClient != null) {\n+            Ready ready = currentClient.ready();\n+            boolean isUp = ready != null && ready.getStatus() == Ready.StatusEnum.READY;\n+            if (isUp) {\n+                logger.debug(\"database status is OK\");\n+            } else {\n+                logger.warn(\"database not ready\");\n+            }\n+            return isUp;\n+        } else {\n+            logger.warn(\"checkConnection: database is not connected\");\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Write point to database\n+     *\n+     * @param point\n+     */\n+    @Override\n+    public void write(InfluxPoint point) {\n+        final WriteApi currentWriteAPI = writeAPI;\n+        if (currentWriteAPI != null) {\n+            currentWriteAPI.writePoint(convertPointToClientFormat(point));\n+        } else {\n+            logger.warn(\"Write point {} ignored due to writeAPI isn't present\", point);\n+        }\n+    }\n+\n+    private Point convertPointToClientFormat(InfluxPoint point) {\n+        Point clientPoint = Point.measurement(point.getMeasurementName()).time(point.getTime(), WritePrecision.MS);\n+        setPointValue(point.getValue(), clientPoint);\n+        point.getTags().entrySet().forEach(e -> clientPoint.addTag(e.getKey(), e.getValue()));\n+        return clientPoint;\n+    }\n+\n+    private void setPointValue(@Nullable Object value, Point point) {\n+        if (value instanceof String) {\n+            point.addField(FIELD_VALUE_NAME, (String) value);\n+        } else if (value instanceof Number) {\n+            point.addField(FIELD_VALUE_NAME, (Number) value);\n+        } else if (value instanceof Boolean) {\n+            point.addField(FIELD_VALUE_NAME, (Boolean) value);\n+        } else if (value == null) {\n+            point.addField(FIELD_VALUE_NAME, (String) null);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fea14dc2ff8ae9ad0f8bc5618dececedd1a38e6"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4OTQwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else if (object != null) {\n          \n          \n            \n                    } else if (object instanceof String) {", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r403789405", "createdAt": "2020-04-06T01:31:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/internal/InfluxDBConfiguration.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb.internal;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Contains this addon configurable parameters\n+ *\n+ * @author Joan Pujol Espinar - Initial contribution\n+ */\n+@NonNullByDefault\n+public class InfluxDBConfiguration {\n+    public static final String URL_PARAM = \"url\";\n+    public static final String TOKEN_PARAM = \"token\";\n+    public static final String USER_PARAM = \"user\";\n+    public static final String PASSWORD_PARAM = \"password\";\n+    public static final String DATABASE_PARAM = \"db\";\n+    public static final String RETENTION_POLICY_PARAM = \"retentionPolicy\";\n+    public static final String VERSION_PARAM = \"version\";\n+    public static final String REPLACE_UNDERSCORE_PARAM = \"replaceUnderscore\";\n+    public static final String ADD_CATEGORY_TAG_PARAM = \"addCategoryTag\";\n+    public static final String ADD_LABEL_TAG_PARAM = \"addLabelTag\";\n+    public static final String ADD_TYPE_TAG_PARAM = \"addTypeTag\";\n+    public static InfluxDBConfiguration NO_CONFIGURATION = new InfluxDBConfiguration(Collections.emptyMap());\n+    private final Logger logger = LoggerFactory.getLogger(InfluxDBConfiguration.class);\n+    private final String url;\n+    private final String user;\n+    private final String password;\n+    private final String token;\n+    private final String databaseName;\n+    private final String retentionPolicy;\n+    private final InfluxDBVersion version;\n+\n+    private final boolean replaceUnderscore;\n+    private final boolean addCategoryTag;\n+    private final boolean addTypeTag;\n+    private final boolean addLabelTag;\n+\n+    @SuppressWarnings(\"null\")\n+    public InfluxDBConfiguration(Map<String, @Nullable Object> config) {\n+        url = (String) config.getOrDefault(URL_PARAM, \"http://127.0.0.1:8086\");\n+        user = (String) config.getOrDefault(USER_PARAM, \"openhab\");\n+        password = (String) config.getOrDefault(PASSWORD_PARAM, \"\");\n+        token = (String) config.getOrDefault(TOKEN_PARAM, \"\");\n+        databaseName = (String) config.getOrDefault(DATABASE_PARAM, \"openhab\");\n+        retentionPolicy = (String) config.getOrDefault(RETENTION_POLICY_PARAM, \"autogen\");\n+        version = parseInfluxVersion(config.getOrDefault(VERSION_PARAM, InfluxDBVersion.V1.name()));\n+\n+        replaceUnderscore = getConfigBooleanValue(config, REPLACE_UNDERSCORE_PARAM, false);\n+        addCategoryTag = getConfigBooleanValue(config, ADD_CATEGORY_TAG_PARAM, false);\n+        addLabelTag = getConfigBooleanValue(config, ADD_LABEL_TAG_PARAM, false);\n+        addTypeTag = getConfigBooleanValue(config, ADD_TYPE_TAG_PARAM, false);\n+    }\n+\n+    private static boolean getConfigBooleanValue(Map<String, @Nullable Object> config, String key,\n+            boolean defaultValue) {\n+        Object object = config.get(key);\n+\n+        if (object instanceof Boolean) {\n+            return (Boolean) object;\n+        } else if (object != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fea14dc2ff8ae9ad0f8bc5618dececedd1a38e6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4OTczNQ==", "bodyText": "what needs this?", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r403789735", "createdAt": "2020-04-06T01:33:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.persistence.influxdb/pom.xml", "diffHunk": "@@ -15,33 +15,124 @@\n   <name>openHAB Add-ons :: Bundles :: Persistence Service :: InfluxDB</name>\n \n   <properties>\n-    <bnd.importpackage>!android.*,!com.android.*,!com.google.appengine.*,!org.apache.harmony.*,!org.apache.http.*,!rx.*</bnd.importpackage>\n+    <bnd.importpackage>\n+      !javax.annotation;!android.*,!com.android.*,!com.google.appengine.*,!dalvik.system,!kotlin.*,!kotlinx.*,!org.conscrypt,!sun.security.ssl,!org.apache.harmony.*,!org.apache.http.*,!rx.*,!org.msgpack.*\n+    </bnd.importpackage>\n   </properties>\n \n   <dependencies>\n-    <!-- https://mvnrepository.com/artifact/org.influxdb/influxdb-java -->\n+    <!-- START InfluxDB 2.0 -->\n+    <!-- START influxdb-client-java -->\n     <dependency>\n-      <groupId>org.influxdb</groupId>\n-      <artifactId>influxdb-java</artifactId>\n-      <version>2.2</version>\n+      <groupId>com.influxdb</groupId>\n+      <artifactId>influxdb-client-java</artifactId>\n+      <version>1.6.0</version>\n     </dependency>\n-    <!-- https://mvnrepository.com/artifact/com.squareup.okhttp/okhttp -->\n     <dependency>\n-      <groupId>com.squareup.okhttp</groupId>\n-      <artifactId>okhttp</artifactId>\n-      <version>2.4.0</version>\n+      <artifactId>influxdb-client-core</artifactId>\n+      <groupId>com.influxdb</groupId>\n+      <version>1.6.0</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>converter-gson</artifactId>\n+      <groupId>com.squareup.retrofit2</groupId>\n+      <version>2.5.0</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>converter-scalars</artifactId>\n+      <groupId>com.squareup.retrofit2</groupId>\n+      <version>2.5.0</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>gson</artifactId>\n+      <groupId>com.google.code.gson</groupId>\n+      <version>2.8.5</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>gson-fire</artifactId>\n+      <groupId>io.gsonfire</groupId>\n+      <version>1.8.0</version>\n     </dependency>\n-    <!-- https://mvnrepository.com/artifact/com.squareup.okio/okio -->\n     <dependency>\n-      <groupId>com.squareup.okio</groupId>\n       <artifactId>okio</artifactId>\n-      <version>1.4.0</version>\n+      <groupId>com.squareup.okio</groupId>\n+      <version>1.17.3</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>commons-csv</artifactId>\n+      <groupId>org.apache.commons</groupId>\n+      <version>1.6</version>\n+    </dependency>\n+    <dependency>\n+      <artifactId>json</artifactId>\n+      <groupId>org.json</groupId>\n+      <version>20180813</version>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fea14dc2ff8ae9ad0f8bc5618dececedd1a38e6"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82d81dba9e7debbf1203bed0439135899d4f82ec", "author": {"user": {"login": "lujop", "name": "Joan Pujol"}}, "url": "https://github.com/openhab/openhab-addons/commit/82d81dba9e7debbf1203bed0439135899d4f82ec", "committedDate": "2020-04-06T05:54:05Z", "message": "PR review fix\n\nSigned-off-by: Joan Pujol <joanpujol@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTU3NTcy", "url": "https://github.com/openhab/openhab-addons/pull/7235#pullrequestreview-387957572", "createdAt": "2020-04-06T06:16:42Z", "commit": {"oid": "82d81dba9e7debbf1203bed0439135899d4f82ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzg0MzA4", "url": "https://github.com/openhab/openhab-addons/pull/7235#pullrequestreview-391784308", "createdAt": "2020-04-11T17:18:41Z", "commit": {"oid": "82d81dba9e7debbf1203bed0439135899d4f82ec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzoxODo0MlrOGEOrbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxNzoxODo0MlrOGEOrbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4Nzk4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            ConfigurableService.SERVICE_PROPERTY_LABEL + \"=InfluxDB persistence layer\",\n          \n          \n            \n                            ConfigurableService.SERVICE_PROPERTY_LABEL + \"=InfluxDB Persistence Service\",", "url": "https://github.com/openhab/openhab-addons/pull/7235#discussion_r407087980", "createdAt": "2020-04-11T17:18:42Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/InfluxDBPersistenceService.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.persistence.influxdb;\n+\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.config.core.ConfigurableService;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.MetadataRegistry;\n+import org.openhab.core.persistence.FilterCriteria;\n+import org.openhab.core.persistence.HistoricItem;\n+import org.openhab.core.persistence.PersistenceItemInfo;\n+import org.openhab.core.persistence.PersistenceService;\n+import org.openhab.core.persistence.QueryablePersistenceService;\n+import org.openhab.core.persistence.strategy.PersistenceStrategy;\n+import org.openhab.core.types.State;\n+import org.openhab.persistence.influxdb.internal.FilterCriteriaQueryCreator;\n+import org.openhab.persistence.influxdb.internal.InfluxDBConfiguration;\n+import org.openhab.persistence.influxdb.internal.InfluxDBHistoricItem;\n+import org.openhab.persistence.influxdb.internal.InfluxDBPersistentItemInfo;\n+import org.openhab.persistence.influxdb.internal.InfluxDBRepository;\n+import org.openhab.persistence.influxdb.internal.InfluxDBStateConvertUtils;\n+import org.openhab.persistence.influxdb.internal.InfluxPoint;\n+import org.openhab.persistence.influxdb.internal.InfluxRow;\n+import org.openhab.persistence.influxdb.internal.ItemToStorePointCreator;\n+import org.openhab.persistence.influxdb.internal.RepositoryFactory;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Modified;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+import org.osgi.service.component.annotations.ReferencePolicy;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is the implementation of the InfluxDB {@link PersistenceService}. It persists item values\n+ * using the <a href=\"http://influxdb.org\">InfluxDB time series database. The states (\n+ * {@link State}) of an {@link Item} are persisted by default in a time series with names equal to the name of\n+ * the item.\n+ *\n+ * This addon supports 1.X and 2.X versions, as two versions are incompatible and use different drivers the\n+ * specific code for each version is accessed by {@link InfluxDBRepository} and {@link FilterCriteriaQueryCreator}\n+ * interfaces and specific implementation reside in {@link org.openhab.persistence.influxdb.internal.influx1} and\n+ * {@link org.openhab.persistence.influxdb.internal.influx2} packages\n+ *\n+ * @author Theo Weiss - Initial contribution, rewrite of org.openhab.persistence.influxdb\n+ * @author Joan Pujol Espinar - Addon rewrite refactoring code and adding support for InfluxDB 2.0. Some tag code is\n+ *         based\n+ *         from not integrated branch from Dominik Vorreiter\n+ */\n+@NonNullByDefault\n+@Component(service = { PersistenceService.class,\n+        QueryablePersistenceService.class }, configurationPid = \"org.openhab.influxdb\", property = {\n+                Constants.SERVICE_PID + \"=org.openhab.influxdb\",\n+                ConfigurableService.SERVICE_PROPERTY_DESCRIPTION_URI + \"=persistence:influxdb\",\n+                ConfigurableService.SERVICE_PROPERTY_LABEL + \"=InfluxDB persistence layer\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82d81dba9e7debbf1203bed0439135899d4f82ec"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1b820f215e8a8e2bc68c7e3e4ca2a0c0b1b0d89", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/b1b820f215e8a8e2bc68c7e3e4ca2a0c0b1b0d89", "committedDate": "2020-04-11T17:18:48Z", "message": "Update bundles/org.openhab.persistence.influxdb/src/main/java/org/openhab/persistence/influxdb/InfluxDBPersistenceService.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzg0MzU1", "url": "https://github.com/openhab/openhab-addons/pull/7235#pullrequestreview-391784355", "createdAt": "2020-04-11T17:19:09Z", "commit": {"oid": "b1b820f215e8a8e2bc68c7e3e4ca2a0c0b1b0d89"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad506af86b7945595bd8ada9d65eff79dee092d3", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/ad506af86b7945595bd8ada9d65eff79dee092d3", "committedDate": "2020-04-11T17:19:51Z", "message": "Merge branch 'master' into influxdb2clean"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 961, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}