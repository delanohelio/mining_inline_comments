{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NDQ5Mzcy", "number": 7487, "title": "[daikin] Add support for BRP072C42 adapter", "bodyText": "Add support for BRP072C42 adapter, which requires access via https with self signed certificate, uuid and key authentication.\nRefactored the data parsing routine to remove code duplication.\nUpdated README.md\nDiscussion: https://community.openhab.org/t/daikin-wi-fi-adapter-brp072c42-not-visible-or-configurable-in-oh/85847", "createdAt": "2020-04-27T11:49:49Z", "url": "https://github.com/openhab/openhab-addons/pull/7487", "merged": true, "mergeCommit": {"oid": "0e10392b07697c7ad1cc381e07ce52ceae787588"}, "closed": true, "closedAt": "2020-05-04T04:07:58Z", "author": {"login": "jimtng"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZA5G9AH2gAyNDA5NDQ5MzcyOjZhYjY3NDNiNjk0YmM0YTMwMmI1MjQ1NGQ2M2EzMDUzOGE0OGY2YWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd3cI6AFqTQwNDcwMDYyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6ab6743b694bc4a302b52454d63a30538a48f6ad", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/6ab6743b694bc4a302b52454d63a30538a48f6ad", "committedDate": "2020-04-19T02:16:34Z", "message": "[daikin] Add support for BRP072C42 adapter\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af49791e5e89ce9c68ddab9d525c91081402c63d", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/af49791e5e89ce9c68ddab9d525c91081402c63d", "committedDate": "2020-04-24T00:43:10Z", "message": "[daikin] Implement autodiscovery for BRP072C42\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49ded0cf4ae5c6f62d4c82d9a84ade757236d355", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/49ded0cf4ae5c6f62d4c82d9a84ade757236d355", "committedDate": "2020-04-27T11:38:26Z", "message": "[daikin] Revert to manually creating HttpClient\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c091c3e55cb64dac829a1c59c4db08f421d1ae13", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/c091c3e55cb64dac829a1c59c4db08f421d1ae13", "committedDate": "2020-04-27T11:49:24Z", "message": "[daikin] Code cleanup\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86e962909031a860bddf1c84c2eff84b2f1256b9", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/86e962909031a860bddf1c84c2eff84b2f1256b9", "committedDate": "2020-04-27T12:04:38Z", "message": "[daikin] Code cleanup\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25f9dd99ef9c8c4c213a3b03af477b7c1e710071", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/25f9dd99ef9c8c4c213a3b03af477b7c1e710071", "committedDate": "2020-04-27T12:12:09Z", "message": "[daikin] Code cleanup\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13a148532a0e47dd8aae1045fb0cdefc2a3dfb2f", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/13a148532a0e47dd8aae1045fb0cdefc2a3dfb2f", "committedDate": "2020-04-27T22:21:37Z", "message": "[daikin] Centralise httpClient creation into DaikinWebTargets\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4139d7cbb6d2b0d35835b3d71db2741de867c81a", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/4139d7cbb6d2b0d35835b3d71db2741de867c81a", "committedDate": "2020-04-27T12:34:11Z", "message": "Merge branch '2.5.x' into daikin-BRP072C42"}, "afterCommit": {"oid": "13a148532a0e47dd8aae1045fb0cdefc2a3dfb2f", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/13a148532a0e47dd8aae1045fb0cdefc2a3dfb2f", "committedDate": "2020-04-27T22:21:37Z", "message": "[daikin] Centralise httpClient creation into DaikinWebTargets\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/fd712d38dec63f7922157e74f3c9d677d0f43fa7", "committedDate": "2020-04-27T22:26:14Z", "message": "Merge branch '2.5.x' into daikin-BRP072C42"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMDM3MDc3", "url": "https://github.com/openhab/openhab-addons/pull/7487#pullrequestreview-402037077", "createdAt": "2020-04-28T17:02:08Z", "commit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNzowMjowOFrOGNeC7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODowNzowMVrOGNgmng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc3Njk0Mg==", "bodyText": "You should still log this", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416776942", "createdAt": "2020-04-28T17:02:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/handler/DaikinAcUnitHandler.java", "diffHunk": "@@ -131,4 +131,13 @@ protected void changeFanDir(String fanDir) throws DaikinCommunicationException {\n         info.fanMovement = FanMovement.valueOf(fanDir);\n         webTargets.setControlInfo(info);\n     }\n+\n+    @Override\n+    protected void registerUuid(String key) {\n+        try {\n+            webTargets.registerUuid(key);\n+        } catch (Exception e) {\n+            // suppress exceptions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNzIyNQ==", "bodyText": "You should also pass e in your constructor as a cause exception.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416817225", "createdAt": "2020-04-28T18:04:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -145,13 +192,39 @@ private String invoke(String uri, Map<String, String> params) throws DaikinCommu\n         }\n \n         if (response == null) {\n-            throw new DaikinCommunicationException(\n-                    String.format(\"Daikin controller returned error while invoking %s\", uriWithParams));\n+            throw new DaikinCommunicationException(\"Daikin controller returned error while invoking \" + uriWithParams);\n         }\n \n         return response;\n     }\n \n+    private String executeUrl(String url) throws DaikinCommunicationException {\n+        try {\n+            Request request = httpClient.newRequest(url)\n+                                        .method(HttpMethod.GET)\n+                                        .timeout(TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+            if (uuid != null) {\n+                request.header(\"X-Daikin-uuid\", uuid);\n+                logger.debug(\"Header: X-Daikin-uuid: {}\", uuid);\n+            }\n+            ContentResponse response = request.send();\n+\n+            if (response.getStatus() == HttpStatus.FORBIDDEN_403) {\n+                throw new DaikinCommunicationForbiddenException(\"Daikin controller access denied. Check uuid/key.\");\n+            }\n+\n+            if (response.getStatus() != HttpStatus.OK_200) {\n+                logger.debug(\"Daikin controller HTTP status: {} - {}\", response.getStatus(), response.getReason());\n+            }\n+\n+            return response.getContentAsString();\n+        } catch (DaikinCommunicationException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            throw new DaikinCommunicationException(\"Daikin HTTP error: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxNzk5Nw==", "bodyText": "Does DaikinCommunicationException extend an IOException? If not then you don't need to catch it here.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416817997", "createdAt": "2020-04-28T18:05:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -136,7 +176,14 @@ private String invoke(String uri, Map<String, String> params) throws DaikinCommu\n         String response;\n         synchronized (this) {\n             try {\n-                response = HttpUtil.executeUrl(\"GET\", uriWithParams, TIMEOUT_MS);\n+                if (httpClient != null) {\n+                    response = executeUrl(uriWithParams);\n+                } else {\n+                    // a fall back method\n+                    response = HttpUtil.executeUrl(\"GET\", uriWithParams, TIMEOUT_MS);\n+                }\n+            } catch (DaikinCommunicationException ex) {\n+                throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjgxODg0Ng==", "bodyText": "Are these new configs backwards compatible with existing setups?", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r416818846", "createdAt": "2020-04-28T18:07:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/config/DaikinConfiguration.java", "diffHunk": "@@ -16,12 +16,18 @@\n  * Holds configuration data for a Daikin air conditioning unit.\n  *\n  * @author Tim Waterhouse - Initial contribution\n+ * @author Jimmy Tanagra - Add secure, uuid\n  *\n  */\n public class DaikinConfiguration {\n     public static final String HOST = \"host\";\n+    public static final String SECURE = \"secure\";\n+    public static final String UUID = \"uuid\";\n+    public static final String KEY = \"key\";\n \n     public String host;\n-\n+    public Boolean secure;\n+    public String uuid;\n+    public String key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd712d38dec63f7922157e74f3c9d677d0f43fa7"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95781edea3a0e5dda63d85f63c3c16914dcd624c", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/95781edea3a0e5dda63d85f63c3c16914dcd624c", "committedDate": "2020-04-28T18:56:05Z", "message": "[daikin] Modify exception\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/3e35bf70d756612e14ed292ed693d59397a78f20", "committedDate": "2020-04-28T19:03:39Z", "message": "[daikin] Log exception in DaikinAcUnitHandler.java\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzk1ODgw", "url": "https://github.com/openhab/openhab-addons/pull/7487#pullrequestreview-403795880", "createdAt": "2020-04-30T19:00:14Z", "commit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowMDoxNFrOGO2ZTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowODo0M1rOGO2qvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNDQ2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<context>network_address</context>\n          \n          \n            \n            \t\t\t\t<context>network-address</context>", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418224461", "createdAt": "2020-04-30T19:00:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNDY5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418224694", "createdAt": "2020-04-30T19:00:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"secure\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Secure/HTTPS</label>\n+\t\t\t\t<description>Whether to access using https (default:false).</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"uuid\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>UUID</label>\n+\t\t\t\t<description>A unique UUID for authentication if required.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"key\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Key</label>\n+\t\t\t\t<description>The key obtained from the Daikin adapter.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNTEwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n          \n          \n            \n            \t\t\t\t<description>Time between fetches of the AC unit state.</description>", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418225103", "createdAt": "2020-04-30T19:01:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -5,16 +5,28 @@\n \txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n \n \t<config-description uri=\"thing-type:daikin:config\">\n-\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n-\t\t\t<label>Host</label>\n-\t\t\t<description>The Host address of the Daikin AC unit.</description>\n-\t\t\t<context>network_address</context>\n-\t\t</parameter>\n-\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n-\t\t\t<label>Refresh Interval</label>\n-\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>\n-\t\t\t<default>60</default>\n-\t\t</parameter>\n+\t\t\t<parameter name=\"host\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Host</label>\n+\t\t\t\t<description>The Host address of the Daikin AC unit.</description>\n+\t\t\t\t<context>network_address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"secure\" type=\"boolean\" required=\"false\">\n+\t\t\t\t<label>Secure/HTTPS</label>\n+\t\t\t\t<description>Whether to access using https (default:false).</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"uuid\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>UUID</label>\n+\t\t\t\t<description>A unique UUID for authentication if required.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"key\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Key</label>\n+\t\t\t\t<description>The key obtained from the Daikin adapter.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>The number of seconds between fetches of the AC unit state.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODQ2Ng==", "bodyText": "You should be creating client instances from the osgi org.eclipse.smarthome.io.net.http.HttpClientFactory service.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418228466", "createdAt": "2020-04-30T19:07:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;\n+\n     private Logger logger = LoggerFactory.getLogger(DaikinWebTargets.class);\n \n-    public DaikinWebTargets(String ipAddress) {\n-        String baseUri = \"http://\" + ipAddress + \"/\";\n+    public DaikinWebTargets(String host, Boolean secure, String uuid) {\n+        if (httpClient == null) {\n+            httpClient = new HttpClient(new SslContextFactory(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyODkyNQ==", "bodyText": "Make this non-static and final.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r418228925", "createdAt": "2020-04-30T19:08:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinWebTargets.java", "diffHunk": "@@ -49,13 +61,29 @@\n     private String getAirbaseZoneInfoUri;\n     private String setAirbaseZoneInfoUri;\n \n+    private String uuid;\n+    private static HttpClient httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e35bf70d756612e14ed292ed693d59397a78f20"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1c108c0447ab137fe42d56f4120d1f0a1e5492c", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/e1c108c0447ab137fe42d56f4120d1f0a1e5492c", "committedDate": "2020-04-30T22:47:34Z", "message": "[daikin] Fix a typo, add unit, rephrase description in config.xml\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "655260ba80811864c880c5c313b17b763d943bb5", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/655260ba80811864c880c5c313b17b763d943bb5", "committedDate": "2020-05-02T13:55:24Z", "message": "[daikin] Add DaikinHttpClientFactory osgi component\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/e98aeb2d2306b50a9ca1b96c5e76e067861edaab", "committedDate": "2020-05-02T14:03:24Z", "message": "[daikin] Clean up DaikinWebTargets imports\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTU3MzAz", "url": "https://github.com/openhab/openhab-addons/pull/7487#pullrequestreview-404557303", "createdAt": "2020-05-02T20:13:37Z", "commit": {"oid": "655260ba80811864c880c5c313b17b763d943bb5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxMzozN1rOGPl4kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxMzozN1rOGPl4kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjUxMw==", "bodyText": "Just to be safe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void initialize() {\n          \n          \n            \n                private synchronized void initialize() {", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419002513", "createdAt": "2020-05-02T20:13:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.error(\"error while stopping Daikin http client\", e);\n+                // nothing else we can do here\n+            }\n+            httpClient = null;\n+            logger.debug(\"Daikin http client stopped\");\n+        }\n+    }\n+\n+    @Override\n+    public HttpClient getHttpClient() {\n+        initialize();\n+        return httpClient;\n+    }\n+\n+    private void initialize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655260ba80811864c880c5c313b17b763d943bb5"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTU3NDYz", "url": "https://github.com/openhab/openhab-addons/pull/7487#pullrequestreview-404557463", "createdAt": "2020-05-02T20:16:11Z", "commit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxNjoxMVrOGPl5hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQyMDoxODo1NVrOGPl6pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMjc1Ng==", "bodyText": "The default charset varies from system to system so it is better to specify it yourself instead of using the default.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419002756", "createdAt": "2020-05-02T20:16:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/discovery/DaikinACUnitDiscoveryService.java", "diffHunk": "@@ -117,33 +128,54 @@ private Runnable createScanner() {\n \n     private boolean receivePacketAndDiscover(DatagramSocket socket) {\n         try {\n-            // Use a one byte buffer since we don't really care about the contents.\n-            byte[] buffer = new byte[1];\n+            byte[] buffer = new byte[512];\n             DatagramPacket incomingPacket = new DatagramPacket(buffer, buffer.length);\n             socket.setSoTimeout(1000 /* one second */);\n             socket.receive(incomingPacket);\n \n             String host = incomingPacket.getAddress().toString().substring(1);\n-            logger.debug(\"Received packet from {}\", host);\n+            String data = new String(incomingPacket.getData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTAwMzA0Nw==", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.\nMy general rule for logging levels is:\n\ntrace - used for normal expected execution paths\ndebug - used for unexepected execution paths, but well within normal operation\ninfo - used for notable points in an execution path, like a milestone. (in openhab we try reserve this logging level for the core, so bindings should rarely ever call this.)\nwarn - used for notable unexpected execution paths that a regular user (not just a developer) should be notified of. Warnings should be used to indicate that something not-normal occurred and user intervention is required to resolve. Warnings do not indicate a failure to operate merely an abnormal condition of operation that can still be handled by the binding. Failures in binding operation should be indicated by changing the thing status to offline.\nerror - used to indicate catastrophic program failure. This should be used to indicate a catastrophic failure in openhab's ability to operate. A failure in a binding would never cause openhab as a whole to fail so a failure in a bindings should never log an error. Instead that failure should be indicated by changing the thing status.", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419003047", "createdAt": "2020-05-02T20:18:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.error(\"error while stopping Daikin http client\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e98aeb2d2306b50a9ca1b96c5e76e067861edaab"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b83636f48eb36cba4e83f85344da39ac8e70455", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/6b83636f48eb36cba4e83f85344da39ac8e70455", "committedDate": "2020-05-02T22:41:06Z", "message": "[daikin] Specify charset in incoming datagram packet\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTgwMDkx", "url": "https://github.com/openhab/openhab-addons/pull/7487#pullrequestreview-404580091", "createdAt": "2020-05-03T04:17:10Z", "commit": {"oid": "6b83636f48eb36cba4e83f85344da39ac8e70455"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDoxNzoxMFrOGPocgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDoyMTo0OVrOGPod_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NDQ4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Could not start Daikin http client\", e);\n          \n          \n            \n                            logger.debug(\"Could not start Daikin http client\", e);", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419044480", "createdAt": "2020-05-03T04:17:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+                logger.debug(\"Daikin http client stopped\");\n+            } catch (Exception e) {\n+                logger.debug(\"error while stopping Daikin http client\", e);\n+            }\n+            httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public HttpClient getHttpClient() {\n+        initialize();\n+        return httpClient;\n+    }\n+\n+    private synchronized void initialize() {\n+        if (httpClient == null) {\n+            httpClient = new HttpClient(new SslContextFactory(true));\n+            try {\n+                httpClient.start();\n+                logger.debug(\"Daikin http client started\");\n+            } catch (Exception e) {\n+                logger.error(\"Could not start Daikin http client\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b83636f48eb36cba4e83f85344da39ac8e70455"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NDg2Mw==", "bodyText": "I can understand the hassle of dealing with the null checker, but please don't try to bypass it with @NonNullByDefault({}), it just hides potential concurrency issues.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNullByDefault({}) HttpClient httpClient;\n          \n          \n            \n                private @Nullable HttpClient httpClient;", "url": "https://github.com/openhab/openhab-addons/pull/7487#discussion_r419044863", "createdAt": "2020-05-03T04:21:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.daikin/src/main/java/org/openhab/binding/daikin/internal/DaikinHttpClientFactoryImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.daikin.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Factory class to create Jetty web clients\n+ *\n+ * Some Daikin controllers communicate via https using a custom common name, \n+ * and they are accessed using an ip address.\n+ *\n+ * The core HttpClientFactory creates a HttpClient that will fail because of this.\n+ * This factory creates a HttpClient with SslContextFactory(true)\n+ * which will accept any ssl certificate without checking for common name mismatches.\n+ *\n+ * @author Jimmy Tanagra - Initial contribution\n+ */\n+@Component\n+@NonNullByDefault\n+public class DaikinHttpClientFactoryImpl implements DaikinHttpClientFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(DaikinHttpClientFactoryImpl.class);\n+\n+    private @NonNullByDefault({}) HttpClient httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b83636f48eb36cba4e83f85344da39ac8e70455"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "316363ca5b73606fafd0760fe8180c49d3083097", "author": {"user": {"login": "jimtng", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/316363ca5b73606fafd0760fe8180c49d3083097", "committedDate": "2020-05-03T08:07:38Z", "message": "[daikin] Add @NonNullByDefault, Refactor setAirbaseZoneInfo, Change logger.error to debug\n\nSigned-off-by: Jimmy Tanagra <jcode@tanagra.id.au>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NzAwNjI3", "url": "https://github.com/openhab/openhab-addons/pull/7487#pullrequestreview-404700627", "createdAt": "2020-05-04T04:05:24Z", "commit": {"oid": "316363ca5b73606fafd0760fe8180c49d3083097"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 920, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}