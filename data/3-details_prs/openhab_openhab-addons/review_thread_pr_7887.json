{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjI1ODE5", "number": 7887, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0MzoyM1rOEEb6_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDo0Mzo1N1rOEFRmwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDg3MjMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0MzoyM1rOGiDwvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTo0MzoyM1rOGiDwvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM2NjM5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Switch          cooler_active \t\t\t\t\"Cooler Active\" \t\t\t\t    (gCooller) \t\t    {homekit=\"ActiveStatus\"}\n          \n          \n            \n            Switch          cooler_active \t\t\t\t\"Cooler Active\" \t\t\t\t    (gCooler) \t\t    {homekit=\"ActiveStatus\"}\n          \n      \n    \n    \n  \n\nalso below", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438366399", "createdAt": "2020-06-10T19:43:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/README.md", "diffHunk": "@@ -378,6 +389,14 @@ Switch          contactsensor_tampered     \"Contact Sensor Tampered\"\n Group           gSecuritySystem            \"Security System Group\"                                   {homekit=\"SecuritySystem\"}\n String          security_current_state     \"Security Current State\"             (gSecuritySystem)    {homekit=\"SecuritySystem.CurrentSecuritySystemState\"}\n String          security_target_state      \"Security Target State\"              (gSecuritySystem)    {homekit=\"SecuritySystem.TargetSecuritySystemState\"}\n+\n+Group  \t\t\tgCooller    \t\t\t\t\"Cooler Group\"       \t\t\t\t \t                {homekit=\"HeaterCooler\"}\n+Switch          cooler_active \t\t\t\t\"Cooler Active\" \t\t\t\t    (gCooller) \t\t    {homekit=\"ActiveStatus\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97601a4d7e310a3dd9bb8977422530cedca19bbd"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTAxODkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozMDo1OFrOGiFPRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozMDo1OFrOGiFPRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MDU5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Number \t\t\tcooler_hea_thrs \t        \"Cooler Heat Threshold Temp [%.1f C]\"  \t(gCooller)  \t{homekit=\"HeatingThresholdTemperature\" [minValue=0.5, maxValue=20]}\n          \n          \n            \n            Number \t\t\tcooler_heat_thrs \t        \"Cooler Heat Threshold Temp [%.1f C]\"  \t(gCooller)  \t{homekit=\"HeatingThresholdTemperature\" [minValue=0.5, maxValue=20]}", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438390598", "createdAt": "2020-06-10T20:30:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/README.md", "diffHunk": "@@ -378,6 +389,14 @@ Switch          contactsensor_tampered     \"Contact Sensor Tampered\"\n Group           gSecuritySystem            \"Security System Group\"                                   {homekit=\"SecuritySystem\"}\n String          security_current_state     \"Security Current State\"             (gSecuritySystem)    {homekit=\"SecuritySystem.CurrentSecuritySystemState\"}\n String          security_target_state      \"Security Target State\"              (gSecuritySystem)    {homekit=\"SecuritySystem.TargetSecuritySystemState\"}\n+\n+Group  \t\t\tgCooller    \t\t\t\t\"Cooler Group\"       \t\t\t\t \t                {homekit=\"HeaterCooler\"}\n+Switch          cooler_active \t\t\t\t\"Cooler Active\" \t\t\t\t    (gCooller) \t\t    {homekit=\"ActiveStatus\"}\n+Number \t\t\tcooler_current_temp     \t\"Cooler Current Temp [%.1f C]\"  \t(gCooller)  \t    {homekit=\"CurrentTemperature\"}\n+String \t\t\tcooler_current_mode  \t    \"Cooler Current Mode\" \t\t        (gCooller) \t\t\t{homekit=\"CurrentHeaterCoolerState\" [HEATING=\"HEAT\", COOLING=\"COOL\"]}          \n+String \t\t\tcooler_target_mode  \t    \"Cooler Target Mode\" \t\t\t\t(gCooller)          {homekit=\"TargetHeaterCoolerState\"}  \n+Number \t\t\tcooler_cool_thrs \t        \"Cooler Cool Threshold Temp [%.1f C]\"  \t(gCooller)  \t{homekit=\"CoolingThresholdTemperature\" [minValue=10.5, maxValue=50]}\n+Number \t\t\tcooler_hea_thrs \t        \"Cooler Heat Threshold Temp [%.1f C]\"  \t(gCooller)  \t{homekit=\"HeatingThresholdTemperature\" [minValue=0.5, maxValue=20]}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTA4NjUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDo1MzowM1rOGiF65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDo1MzowM1rOGiF65g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwMTc2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType, HashMap<T, String> mapping,\n          \n          \n            \n                protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType, Map<T, String> mapping,", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438401766", "createdAt": "2020-06-10T20:53:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -209,8 +200,58 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n     protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType,\n             @NonNull String key, @NonNull T defaultValue) {\n         final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n-        return characteristic.isPresent() ? getItemConfiguration(characteristic.get(), key, defaultValue)\n-                : defaultValue;\n+        return characteristic.isPresent() ? characteristic.get().getConfiguration(key, defaultValue) : defaultValue;\n+    }\n+\n+    /**\n+     * update mapping with values from item configuration.\n+     * it checks for all keys from the mapping whether there is configuration at item with the same key and if yes,\n+     * replace the value.\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param map mapping to update\n+     */\n+    protected void updateMapping(HomekitCharacteristicType characteristicType, HashMap<?, String> map) {\n+        getCharacteristic(characteristicType).ifPresent(c -> {\n+            final Map<String, Object> configuration = c.getConfiguration();\n+            if (configuration != null) {\n+                map.replaceAll((k, current_value) -> {\n+                    final Object new_value = configuration.get(current_value);\n+                    return (new_value instanceof String) ? (String) new_value : current_value;\n+                });\n+            }\n+        });\n+    }\n+\n+    /**\n+     * takes item state as value and retrieves the key for that value from mapping.\n+     * e.g. used to map StringItem value to HomeKit Enum\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param mapping mapping\n+     * @param defaultValue default value if nothing found in mapping\n+     * @param <T> type of the result derived from\n+     * @return key for the value\n+     */\n+    protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType, HashMap<T, String> mapping,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTEzMDc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTowNzoyMFrOGiGW5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMToyOTowMlrOGiG8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwODkzNQ==", "bodyText": "Seems like a perfect place to use an EnumMap instead of a HashMap", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438408935", "createdAt": "2020-06-10T21:07:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final HashMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new HashMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxODY4Ng==", "bodyText": "i was not aware of EnumMap. cool. learned something new.", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438418686", "createdAt": "2020-06-10T21:29:02Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final HashMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new HashMap() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwODkzNQ=="}, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTEzMTIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTowNzoyN1rOGiGXIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMTowNzoyN1rOGiGXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQwODk5Mg==", "bodyText": "here too", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438408992", "createdAt": "2020-06-10T21:07:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final HashMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new HashMap() {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final HashMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new HashMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5155ea6e8b9d6654725697b08a6ee6d37da4e145"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTM4ODQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1NDoxM1rOGiI6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1NDoxM1rOGiI6WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MDc3Nw==", "bodyText": "It is best to keep things as broadly defined as possible in order to maximize flexibility.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n          \n            \n                        EnumMap<T, String> mapping, final T defaultValue) {\n          \n          \n            \n                protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n          \n            \n                        Map<T, String> mapping, final T defaultValue) {", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438450777", "createdAt": "2020-06-10T22:54:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -209,8 +200,58 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n     protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType,\n             @NonNull String key, @NonNull T defaultValue) {\n         final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n-        return characteristic.isPresent() ? getItemConfiguration(characteristic.get(), key, defaultValue)\n-                : defaultValue;\n+        return characteristic.isPresent() ? characteristic.get().getConfiguration(key, defaultValue) : defaultValue;\n+    }\n+\n+    /**\n+     * update mapping with values from item configuration.\n+     * it checks for all keys from the mapping whether there is configuration at item with the same key and if yes,\n+     * replace the value.\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param map mapping to update\n+     */\n+    protected void updateMapping(HomekitCharacteristicType characteristicType, EnumMap<?, String> map) {\n+        getCharacteristic(characteristicType).ifPresent(c -> {\n+            final Map<String, Object> configuration = c.getConfiguration();\n+            if (configuration != null) {\n+                map.replaceAll((k, current_value) -> {\n+                    final Object new_value = configuration.get(current_value);\n+                    return (new_value instanceof String) ? (String) new_value : current_value;\n+                });\n+            }\n+        });\n+    }\n+\n+    /**\n+     * takes item state as value and retrieves the key for that value from mapping.\n+     * e.g. used to map StringItem value to HomeKit Enum\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param mapping mapping\n+     * @param defaultValue default value if nothing found in mapping\n+     * @param <T> type of the result derived from\n+     * @return key for the value\n+     */\n+    protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n+            EnumMap<T, String> mapping, final T defaultValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTM5MDgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1NTozMFrOGiI76g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTo1NDo0NFrOGisasA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n          \n          \n            \n                private final Map<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438451178", "createdAt": "2020-06-10T22:55:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MTI3NQ==", "bodyText": "i will change to map. but just for my understanding / learning - what is the advantage of using Map here?  compiler will probably replace Map with EnumMap at build time or?", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438641275", "createdAt": "2020-06-11T08:56:29Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTE3OA=="}, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNjY5NA==", "bodyText": "Generally you want your code to define behavior without being beholden to any particular concrete implementation. That is why you should interact with List, Set, Map, or Collection instead of ArrayList, LinkedList, HashMap, etc...\nInteracting with interfaces does a better job of displaying the code's intent without getting bogged down with the concrete implementations of your data structures.", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439026694", "createdAt": "2020-06-11T19:42:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTE3OA=="}, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAzMjQ5Ng==", "bodyText": "ok. understood. no optimisation but improving readability and best practice.", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439032496", "createdAt": "2020-06-11T19:54:44Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTE3OA=="}, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTM5MTA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1NTozOFrOGiI8Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1NTozOFrOGiI8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n          \n          \n            \n                private final Map<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438451214", "createdAt": "2020-06-10T22:55:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTM5MjYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjo1NjoxNFrOGiI86w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNjo1NToxNFrOGi5HbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTQzNQ==", "bodyText": "When do you plan to implement this?", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438451435", "createdAt": "2020-06-10T22:56:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Boolean> isActive() {\n+        final @Nullable State state = getStateAs(HomekitCharacteristicType.ACTIVE_STATUS, OnOffType.class);\n+        return CompletableFuture.completedFuture(state == OnOffType.ON);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setActive(final boolean state) {\n+        final @Nullable SwitchItem item = getItem(HomekitCharacteristicType.ACTIVE_STATUS, SwitchItem.class);\n+        if (item != null) {\n+            item.send(OnOffType.from(state));\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    @Override\n+    public CompletableFuture<CurrentHeaterCoolerStateEnum> getCurrentHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(getKeyFromMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping,\n+                CurrentHeaterCoolerStateEnum.INACTIVE));\n+    }\n+\n+    @Override\n+    public CompletableFuture<TargetHeaterCoolerStateEnum> getTargetHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(\n+                getKeyFromMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping, TargetHeaterCoolerStateEnum.AUTO));\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setTargetHeaterCoolerState(final TargetHeaterCoolerStateEnum state) {\n+        final Optional<HomekitTaggedItem> characteristic = getCharacteristic(\n+                HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE);\n+        if (characteristic.isPresent()) {\n+            ((StringItem) characteristic.get().getItem()).send(new StringType(targetStateMapping.get(state)));\n+        } else {\n+            logger.warn(\"Missing mandatory characteristic {}\",\n+                    HomekitCharacteristicType.TARGET_HEATING_COOLING_STATE.getTag());\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    public CompletableFuture<TemperatureDisplayUnitEnum> getTemperatureDisplayUnit() {\n+        return CompletableFuture\n+                .completedFuture(getSettings().useFahrenheitTemperature ? TemperatureDisplayUnitEnum.FAHRENHEIT\n+                        : TemperatureDisplayUnitEnum.CELSIUS);\n+    }\n+\n+    public void setTemperatureDisplayUnit(final TemperatureDisplayUnitEnum value) throws Exception {\n+        // TODO: add support for display unit change", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyMzk2Ng==", "bodyText": "Im not sure what is the best approach here from the user perspective.\ncurrently the temperature units (C/F) can be set at binding settings level. one can change the temperature units in the binding configuration and this will apply to all thermostats and coolers/heaters.\nhowever, in home app one can change the temperature units for each accessory independently.\nto implement this i see 2 options\n\n\na new openHAB item to store temperature units (as part of accessory group)\n\n\nhandle units internally in accessory class. i.e. one can change it from home app but not from openHAB\n\n\nsounds too much to me. we have already a lot of items for different characteristics. and that one is probably one nobody needs.\n\n\ndoes not sounds like a proper solution as one cannot change units from openHAB\n\n\nthe current solution - global setting is imho the best one.\nhow you see it? what is the approach in other bindings?", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438623966", "createdAt": "2020-06-11T08:25:55Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Boolean> isActive() {\n+        final @Nullable State state = getStateAs(HomekitCharacteristicType.ACTIVE_STATUS, OnOffType.class);\n+        return CompletableFuture.completedFuture(state == OnOffType.ON);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setActive(final boolean state) {\n+        final @Nullable SwitchItem item = getItem(HomekitCharacteristicType.ACTIVE_STATUS, SwitchItem.class);\n+        if (item != null) {\n+            item.send(OnOffType.from(state));\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    @Override\n+    public CompletableFuture<CurrentHeaterCoolerStateEnum> getCurrentHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(getKeyFromMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping,\n+                CurrentHeaterCoolerStateEnum.INACTIVE));\n+    }\n+\n+    @Override\n+    public CompletableFuture<TargetHeaterCoolerStateEnum> getTargetHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(\n+                getKeyFromMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping, TargetHeaterCoolerStateEnum.AUTO));\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setTargetHeaterCoolerState(final TargetHeaterCoolerStateEnum state) {\n+        final Optional<HomekitTaggedItem> characteristic = getCharacteristic(\n+                HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE);\n+        if (characteristic.isPresent()) {\n+            ((StringItem) characteristic.get().getItem()).send(new StringType(targetStateMapping.get(state)));\n+        } else {\n+            logger.warn(\"Missing mandatory characteristic {}\",\n+                    HomekitCharacteristicType.TARGET_HEATING_COOLING_STATE.getTag());\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    public CompletableFuture<TemperatureDisplayUnitEnum> getTemperatureDisplayUnit() {\n+        return CompletableFuture\n+                .completedFuture(getSettings().useFahrenheitTemperature ? TemperatureDisplayUnitEnum.FAHRENHEIT\n+                        : TemperatureDisplayUnitEnum.CELSIUS);\n+    }\n+\n+    public void setTemperatureDisplayUnit(final TemperatureDisplayUnitEnum value) throws Exception {\n+        // TODO: add support for display unit change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTQzNQ=="}, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYyNTI2Nw==", "bodyText": "I would vote for global setting.", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r438625267", "createdAt": "2020-06-11T08:28:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Boolean> isActive() {\n+        final @Nullable State state = getStateAs(HomekitCharacteristicType.ACTIVE_STATUS, OnOffType.class);\n+        return CompletableFuture.completedFuture(state == OnOffType.ON);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setActive(final boolean state) {\n+        final @Nullable SwitchItem item = getItem(HomekitCharacteristicType.ACTIVE_STATUS, SwitchItem.class);\n+        if (item != null) {\n+            item.send(OnOffType.from(state));\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    @Override\n+    public CompletableFuture<CurrentHeaterCoolerStateEnum> getCurrentHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(getKeyFromMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping,\n+                CurrentHeaterCoolerStateEnum.INACTIVE));\n+    }\n+\n+    @Override\n+    public CompletableFuture<TargetHeaterCoolerStateEnum> getTargetHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(\n+                getKeyFromMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping, TargetHeaterCoolerStateEnum.AUTO));\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setTargetHeaterCoolerState(final TargetHeaterCoolerStateEnum state) {\n+        final Optional<HomekitTaggedItem> characteristic = getCharacteristic(\n+                HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE);\n+        if (characteristic.isPresent()) {\n+            ((StringItem) characteristic.get().getItem()).send(new StringType(targetStateMapping.get(state)));\n+        } else {\n+            logger.warn(\"Missing mandatory characteristic {}\",\n+                    HomekitCharacteristicType.TARGET_HEATING_COOLING_STATE.getTag());\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    public CompletableFuture<TemperatureDisplayUnitEnum> getTemperatureDisplayUnit() {\n+        return CompletableFuture\n+                .completedFuture(getSettings().useFahrenheitTemperature ? TemperatureDisplayUnitEnum.FAHRENHEIT\n+                        : TemperatureDisplayUnitEnum.CELSIUS);\n+    }\n+\n+    public void setTemperatureDisplayUnit(final TemperatureDisplayUnitEnum value) throws Exception {\n+        // TODO: add support for display unit change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTQzNQ=="}, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0MDU1Nw==", "bodyText": "ok. global settings are already working. i removed TODO here.", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439240557", "createdAt": "2020-06-12T06:55:14Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final EnumMap<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final EnumMap<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Boolean> isActive() {\n+        final @Nullable State state = getStateAs(HomekitCharacteristicType.ACTIVE_STATUS, OnOffType.class);\n+        return CompletableFuture.completedFuture(state == OnOffType.ON);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setActive(final boolean state) {\n+        final @Nullable SwitchItem item = getItem(HomekitCharacteristicType.ACTIVE_STATUS, SwitchItem.class);\n+        if (item != null) {\n+            item.send(OnOffType.from(state));\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    @Override\n+    public CompletableFuture<CurrentHeaterCoolerStateEnum> getCurrentHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(getKeyFromMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping,\n+                CurrentHeaterCoolerStateEnum.INACTIVE));\n+    }\n+\n+    @Override\n+    public CompletableFuture<TargetHeaterCoolerStateEnum> getTargetHeaterCoolerState() {\n+        return CompletableFuture.completedFuture(\n+                getKeyFromMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping, TargetHeaterCoolerStateEnum.AUTO));\n+    }\n+\n+    @Override\n+    public CompletableFuture<Void> setTargetHeaterCoolerState(final TargetHeaterCoolerStateEnum state) {\n+        final Optional<HomekitTaggedItem> characteristic = getCharacteristic(\n+                HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE);\n+        if (characteristic.isPresent()) {\n+            ((StringItem) characteristic.get().getItem()).send(new StringType(targetStateMapping.get(state)));\n+        } else {\n+            logger.warn(\"Missing mandatory characteristic {}\",\n+                    HomekitCharacteristicType.TARGET_HEATING_COOLING_STATE.getTag());\n+        }\n+        return CompletableFuture.completedFuture(null);\n+    }\n+\n+    public CompletableFuture<TemperatureDisplayUnitEnum> getTemperatureDisplayUnit() {\n+        return CompletableFuture\n+                .completedFuture(getSettings().useFahrenheitTemperature ? TemperatureDisplayUnitEnum.FAHRENHEIT\n+                        : TemperatureDisplayUnitEnum.CELSIUS);\n+    }\n+\n+    public void setTemperatureDisplayUnit(final TemperatureDisplayUnitEnum value) throws Exception {\n+        // TODO: add support for display unit change", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ1MTQzNQ=="}, "originalCommit": {"oid": "8051d7133e8f22927ccbe544d7e8f45e5917709c"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTY2NDg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDozNzozMlrOGjZSBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMToxOToyOFrOGjZcfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NzU1Nw==", "bodyText": "I don't know why you would need to force the generic type to an enum.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n          \n            \n                protected <T> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n      \n    \n    \n  \n\nbut if you really must.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,\n          \n          \n            \n                protected <T extends Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439767557", "createdAt": "2020-06-13T20:37:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -209,8 +199,58 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n     protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType,\n             @NonNull String key, @NonNull T defaultValue) {\n         final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n-        return characteristic.isPresent() ? getItemConfiguration(characteristic.get(), key, defaultValue)\n-                : defaultValue;\n+        return characteristic.isPresent() ? characteristic.get().getConfiguration(key, defaultValue) : defaultValue;\n+    }\n+\n+    /**\n+     * update mapping with values from item configuration.\n+     * it checks for all keys from the mapping whether there is configuration at item with the same key and if yes,\n+     * replace the value.\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param map mapping to update\n+     */\n+    protected void updateMapping(HomekitCharacteristicType characteristicType, Map<?, String> map) {\n+        getCharacteristic(characteristicType).ifPresent(c -> {\n+            final Map<String, Object> configuration = c.getConfiguration();\n+            if (configuration != null) {\n+                map.replaceAll((k, current_value) -> {\n+                    final Object new_value = configuration.get(current_value);\n+                    return (new_value instanceof String) ? (String) new_value : current_value;\n+                });\n+            }\n+        });\n+    }\n+\n+    /**\n+     * takes item state as value and retrieves the key for that value from mapping.\n+     * e.g. used to map StringItem value to HomeKit Enum\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param mapping mapping\n+     * @param defaultValue default value if nothing found in mapping\n+     * @param <T> type of the result derived from\n+     * @return key for the value\n+     */\n+    protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3MDIzOA==", "bodyText": "i was just thinking that Enum and EnumMap would help JVM optimise things.. but probably these few nano-seconds (if it at all) is not worth to make the method less generic. who knows, maybe we will need it for non-enum.", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439770238", "createdAt": "2020-06-13T21:19:28Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -209,8 +199,58 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n     protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType,\n             @NonNull String key, @NonNull T defaultValue) {\n         final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n-        return characteristic.isPresent() ? getItemConfiguration(characteristic.get(), key, defaultValue)\n-                : defaultValue;\n+        return characteristic.isPresent() ? characteristic.get().getConfiguration(key, defaultValue) : defaultValue;\n+    }\n+\n+    /**\n+     * update mapping with values from item configuration.\n+     * it checks for all keys from the mapping whether there is configuration at item with the same key and if yes,\n+     * replace the value.\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param map mapping to update\n+     */\n+    protected void updateMapping(HomekitCharacteristicType characteristicType, Map<?, String> map) {\n+        getCharacteristic(characteristicType).ifPresent(c -> {\n+            final Map<String, Object> configuration = c.getConfiguration();\n+            if (configuration != null) {\n+                map.replaceAll((k, current_value) -> {\n+                    final Object new_value = configuration.get(current_value);\n+                    return (new_value instanceof String) ? (String) new_value : current_value;\n+                });\n+            }\n+        });\n+    }\n+\n+    /**\n+     * takes item state as value and retrieves the key for that value from mapping.\n+     * e.g. used to map StringItem value to HomeKit Enum\n+     * \n+     * @param characteristicType characteristicType to identify item\n+     * @param mapping mapping\n+     * @param defaultValue default value if nothing found in mapping\n+     * @param <T> type of the result derived from\n+     * @return key for the value\n+     */\n+    protected <T extends java.lang.Enum<T>> T getKeyFromMapping(final HomekitCharacteristicType characteristicType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2NzU1Nw=="}, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTY2Nzg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMDo0Mzo1N1rOGjZThg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QyMzo1Njo0MlrOGjZ8_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2Nzk0Mg==", "bodyText": "If the underlying state could be a QuantityType then you should use the QuantityType to handle your unit conversions.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n          \n          \n            \n                    return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);\n          \n          \n            \n                    final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n          \n          \n            \n                    return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439767942", "createdAt": "2020-06-13T20:43:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final Map<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final Map<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3MTA1OQ==", "bodyText": "to me it looks like \"covertToCelsius\" makes already use of QuantityType (AbstractHomekitAccessoryImpl.convertAndRound)", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439771059", "createdAt": "2020-06-13T21:33:34Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final Map<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final Map<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2Nzk0Mg=="}, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3NTQxOQ==", "bodyText": "I'm just concerned that getStateAs would end up converting a QuantityType into a DecimalType thus losing access to the units field.\nIs it guaranteed that all of the items you are tracking are using the same units determined in getSettings()? What if the settings change?", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439775419", "createdAt": "2020-06-13T22:48:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final Map<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final Map<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2Nzk0Mg=="}, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3NzU2Mw==", "bodyText": "currently we are using temperature (and conversion from C to F) in thermostat, temperature sensor and with this PR also in HeaterCooler. they all are using the same method.\nyou are right, the QuantityType gets lost and also settings change will not get propagated to the items and to the home app. the other direction will also not work, i.e. change of units in home app will have no impact on OH settings. So, basically the current code does not support changes of temperature units at runtime.\nit needs to fix. but i would suggest to make a separate enhancement & PR for this and fix it for all 3 accessories with temperature units.", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439777563", "createdAt": "2020-06-13T23:31:16Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final Map<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final Map<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2Nzk0Mg=="}, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc3ODU1OQ==", "bodyText": "I agree, it should be done in another PR.", "url": "https://github.com/openhab/openhab-addons/pull/7887#discussion_r439778559", "createdAt": "2020-06-13T23:56:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/HomekitHeaterCoolerImpl.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.homekit.internal.accessories;\n+\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.CURRENT_HEATER_COOLER_STATE;\n+import static org.openhab.io.homekit.internal.HomekitCharacteristicType.TARGET_HEATER_COOLER_STATE;\n+\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.items.GenericItem;\n+import org.eclipse.smarthome.core.library.items.StringItem;\n+import org.eclipse.smarthome.core.library.items.SwitchItem;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.io.homekit.internal.HomekitAccessoryUpdater;\n+import org.openhab.io.homekit.internal.HomekitCharacteristicType;\n+import org.openhab.io.homekit.internal.HomekitSettings;\n+import org.openhab.io.homekit.internal.HomekitTaggedItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.github.hapjava.accessories.HeaterCoolerAccessory;\n+import io.github.hapjava.characteristics.HomekitCharacteristicChangeCallback;\n+import io.github.hapjava.characteristics.impl.heatercooler.CurrentHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.heatercooler.TargetHeaterCoolerStateEnum;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitCharacteristic;\n+import io.github.hapjava.characteristics.impl.thermostat.TemperatureDisplayUnitEnum;\n+import io.github.hapjava.services.impl.HeaterCoolerService;\n+\n+/**\n+ * Implements Heater Cooler\n+ *\n+ * @author Eugen Freiter - Initial contribution\n+ */\n+\n+public class HomekitHeaterCoolerImpl extends AbstractHomekitAccessoryImpl implements HeaterCoolerAccessory {\n+    private final Logger logger = LoggerFactory.getLogger(HomekitHeaterCoolerImpl.class);\n+    private final BooleanItemReader activeReader;\n+    private final Map<CurrentHeaterCoolerStateEnum, String> currentStateMapping = new EnumMap(\n+            CurrentHeaterCoolerStateEnum.class) {\n+        {\n+            put(CurrentHeaterCoolerStateEnum.INACTIVE, \"INACTIVE\");\n+            put(CurrentHeaterCoolerStateEnum.IDLE, \"IDLE\");\n+            put(CurrentHeaterCoolerStateEnum.HEATING, \"HEATING\");\n+            put(CurrentHeaterCoolerStateEnum.COOLING, \"COOLING\");\n+\n+        }\n+    };\n+    private final Map<TargetHeaterCoolerStateEnum, String> targetStateMapping = new EnumMap(\n+            TargetHeaterCoolerStateEnum.class) {\n+        {\n+            put(TargetHeaterCoolerStateEnum.AUTO, \"AUTO\");\n+            put(TargetHeaterCoolerStateEnum.HEAT, \"HEAT\");\n+            put(TargetHeaterCoolerStateEnum.COOL, \"COOL\");\n+        }\n+    };\n+\n+    public HomekitHeaterCoolerImpl(HomekitTaggedItem taggedItem, List<HomekitTaggedItem> mandatoryCharacteristics,\n+            HomekitAccessoryUpdater updater, HomekitSettings settings) throws IncompleteAccessoryException {\n+        super(taggedItem, mandatoryCharacteristics, updater, settings);\n+        activeReader = new BooleanItemReader(getItem(HomekitCharacteristicType.ACTIVE_STATUS, GenericItem.class),\n+                OnOffType.ON, OpenClosedType.OPEN);\n+        updateMapping(CURRENT_HEATER_COOLER_STATE, currentStateMapping);\n+        updateMapping(TARGET_HEATER_COOLER_STATE, targetStateMapping);\n+        final HeaterCoolerService service = new HeaterCoolerService(this);\n+        service.addOptionalCharacteristic(new TemperatureDisplayUnitCharacteristic(() -> getTemperatureDisplayUnit(),\n+                (value) -> setTemperatureDisplayUnit(value), (callback) -> subscribeTemperatureDisplayUnit(callback),\n+                () -> unsubscribeTemperatureDisplayUnit()));\n+        getServices().add(service);\n+    }\n+\n+    @Override\n+    public CompletableFuture<Double> getCurrentTemperature() {\n+        @Nullable\n+        final DecimalType state = getStateAs(HomekitCharacteristicType.CURRENT_TEMPERATURE, DecimalType.class);\n+        return CompletableFuture.completedFuture(state != null ? convertToCelsius(state.doubleValue()) : 0.0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2Nzk0Mg=="}, "originalCommit": {"oid": "de6783c0308cbbe9b18a6a79ea6381150414e859"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 19, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}