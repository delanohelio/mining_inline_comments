{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTM1MjA0", "number": 8922, "title": "[OmniLink] Binding Initial Contribution", "bodyText": "Initial contribution / migration from OH1 of the OmniLink Binding. Ported with permission from @craigham and @boc-tothefuture who were the primary developers of this code.\nThis was created to add support to the main OH code-base for the OmniLink protocol to allow for more usage of it's abilities.\nSigned-off-by: Ethan Dye mrtops03@gmail.com", "createdAt": "2020-11-01T03:34:53Z", "url": "https://github.com/openhab/openhab-addons/pull/8922", "merged": true, "mergeCommit": {"oid": "63b81792a3e7e11e0378e954e136f5fe99f2d8b7"}, "closed": true, "closedAt": "2021-01-19T23:31:11Z", "author": {"login": "ecdye"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddDNdFgFqTUzMTA5NzczMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxyh9MAFqTU3MTY5MTM1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMDk3NzMx", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-531097731", "createdAt": "2020-11-16T08:39:51Z", "commit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODozOTo1MVrOHzszMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMToxNjowMFrOHz3BKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3MzQyNg==", "bodyText": "It's better to put each sentence in a separate line to make reading diffs easier.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This binding integrates the [OmniPro and Lumina](http://www.leviton.com/en/products/security-automation/automation-av-controllers/omni-security-systems) line of home automation systems. At Its core the OmniPro is a hardware board that provides security and access features. It connects to many other devices through serial ports or wired contacts and exposes them through a single TCP based API.\n          \n          \n            \n            This binding integrates the [OmniPro and Lumina](http://www.leviton.com/en/products/security-automation/automation-av-controllers/omni-security-systems) line of home automation systems. At its core the OmniPro is a hardware board that provides security and access features. It connects to many other devices through serial ports or wired contacts and exposes them through a single TCP based API.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r523973426", "createdAt": "2020-11-16T08:39:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/README.md", "diffHunk": "@@ -0,0 +1,218 @@\n+# HAI/Leviton OmniLink Binding\n+\n+This binding integrates the [OmniPro and Lumina](http://www.leviton.com/en/products/security-automation/automation-av-controllers/omni-security-systems) line of home automation systems. At Its core the OmniPro is a hardware board that provides security and access features. It connects to many other devices through serial ports or wired contacts and exposes them through a single TCP based API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEwMTQ4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The devices are identified by device number that the OmniLink bridge assigns to them, see the (Full Example)[#full-example] section below for a manual configuration example.\n          \n          \n            \n            The devices are identified by the device number that the OmniLink bridge assigns to them, see the [Full Example](#full-example) section below for a manual configuration example.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524101487", "createdAt": "2020-11-16T10:40:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/README.md", "diffHunk": "@@ -0,0 +1,218 @@\n+# HAI/Leviton OmniLink Binding\n+\n+This binding integrates the [OmniPro and Lumina](http://www.leviton.com/en/products/security-automation/automation-av-controllers/omni-security-systems) line of home automation systems. At Its core the OmniPro is a hardware board that provides security and access features. It connects to many other devices through serial ports or wired contacts and exposes them through a single TCP based API.\n+\n+## Supported Things\n+\n+The OmniPro/Lumina controller acts as a \"bridge\" for accessing other connected devices.\n+\n+\n+| Omni type           | Hardware Type                                    | Things                   |\n+|:--------------------|:-------------------------------------------------|:-------------------------|\n+| Controller          | Omni (Pro II, IIe, LTe), Lumina                  | omni, lumina             |\n+| Lights              | Builtin, UPB,X-10, PLC, ALC                      | unit, upb, x10, plc, alc |\n+| Thermostats         | Omnistat, Omnistat2                              | thermostat               |\n+| Zones               | Built-in/Hardwire, GE Wireless                   | zone                     |\n+| Audio Zones/Sources | HAI Hi-Fi, Russound, NuVo, Xantech, Speakercraft | audio_zone, audio_source |\n+| Consoles            | HAI Omni Console, HAI Lumina Console             | console                  |\n+| Areas               | Builtin                                          | area                     |\n+| Buttons             | Builtin                                          | button                   |\n+| Flags               | Builtin                                          | flag                     |\n+\n+\n+## Discovery\n+\n+### Controller\n+\n+Omni and Lumina controllers must be manually added using the IP and port of the controller as well as the 2 encryption keys required for network access.\n+\n+### Devices\n+\n+Once a connection can be established to a controller, all connected devices will be automatically discovered and added to the inbox.\n+\n+## Thing Configuration\n+\n+A Omni or Lumina controller requires the IP address, optional port (defaults to 4369), and 2 encryption keys.  The hexadecimal pairs in the encryption keys are typically delimited using a colon`:`, but dashes `-`, spaces ` ` or no delimiter may be used.\n+\n+In the thing file, this looks e.g. like\n+\n+```\n+Bridge omnilink:controller:home [ ipAddress=\"127.0.0.1\", port=4369, key1=\"XXXXXXXXXXXXXXXX\", key2=\"XXXXXXXXXXXXXXXX\" ] {\n+    // Add your things here\n+}\n+```\n+\n+The devices are identified by device number that the OmniLink bridge assigns to them, see the (Full Example)[#full-example] section below for a manual configuration example.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEwNjAzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n          \n          \n            \n                        .of(THING_TYPE_OMNI_AREA, THING_TYPE_LUMINA_AREA, THING_TYPE_ZONE, THING_TYPE_BRIDGE, THING_TYPE_FLAG,\n          \n          \n            \n                                THING_TYPE_ROOM, THING_TYPE_BUTTON, THING_TYPE_UNIT_UPB, THING_TYPE_THERMOSTAT, THING_TYPE_CONSOLE,\n          \n          \n            \n                                THING_TYPE_AUDIO_ZONE, THING_TYPE_AUDIO_SOURCE, THING_TYPE_TEMP_SENSOR, THING_TYPE_HUMIDITY_SENSOR,\n          \n          \n            \n                                THING_TYPE_LOCK, THING_TYPE_OUTPUT, THING_TYPE_UNIT, THING_TYPE_DIMMABLE)\n          \n          \n            \n                        .collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_OMNI_AREA,\n          \n          \n            \n                        THING_TYPE_LUMINA_AREA, THING_TYPE_ZONE, THING_TYPE_BRIDGE, THING_TYPE_FLAG, THING_TYPE_ROOM,\n          \n          \n            \n                        THING_TYPE_BUTTON, THING_TYPE_UNIT_UPB, THING_TYPE_THERMOSTAT, THING_TYPE_CONSOLE, THING_TYPE_AUDIO_ZONE,\n          \n          \n            \n                        THING_TYPE_AUDIO_SOURCE, THING_TYPE_TEMP_SENSOR, THING_TYPE_HUMIDITY_SENSOR, THING_TYPE_LOCK,\n          \n          \n            \n                        THING_TYPE_OUTPUT, THING_TYPE_UNIT, THING_TYPE_DIMMABLE);", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524106031", "createdAt": "2020-11-16T10:44:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.OmnilinkDiscoveryService;\n+import org.openhab.binding.omnilink.internal.handler.AudioSourceHandler;\n+import org.openhab.binding.omnilink.internal.handler.AudioZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.ButtonHandler;\n+import org.openhab.binding.omnilink.internal.handler.ConsoleHandler;\n+import org.openhab.binding.omnilink.internal.handler.DimmableUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.FlagHandler;\n+import org.openhab.binding.omnilink.internal.handler.HumiditySensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.LockHandler;\n+import org.openhab.binding.omnilink.internal.handler.LuminaAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmniAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.binding.omnilink.internal.handler.OutputHandler;\n+import org.openhab.binding.omnilink.internal.handler.TempSensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.ThermostatHandler;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.UpbRoomHandler;\n+import org.openhab.binding.omnilink.internal.handler.UpbUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.ZoneHandler;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OmnilinkHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.omnilink\")\n+public class OmnilinkHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkHandlerFactory.class);\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(THING_TYPE_OMNI_AREA, THING_TYPE_LUMINA_AREA, THING_TYPE_ZONE, THING_TYPE_BRIDGE, THING_TYPE_FLAG,\n+                    THING_TYPE_ROOM, THING_TYPE_BUTTON, THING_TYPE_UNIT_UPB, THING_TYPE_THERMOSTAT, THING_TYPE_CONSOLE,\n+                    THING_TYPE_AUDIO_ZONE, THING_TYPE_AUDIO_SOURCE, THING_TYPE_TEMP_SENSOR, THING_TYPE_HUMIDITY_SENSOR,\n+                    THING_TYPE_LOCK, THING_TYPE_OUTPUT, THING_TYPE_UNIT, THING_TYPE_DIMMABLE)\n+            .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEwNjk0MQ==", "bodyText": "Syntactical sugar.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegistrations = new HashMap<ThingUID, ServiceRegistration<?>>();\n          \n          \n            \n                private final Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegistrations = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524106941", "createdAt": "2020-11-16T10:45:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.OmnilinkDiscoveryService;\n+import org.openhab.binding.omnilink.internal.handler.AudioSourceHandler;\n+import org.openhab.binding.omnilink.internal.handler.AudioZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.ButtonHandler;\n+import org.openhab.binding.omnilink.internal.handler.ConsoleHandler;\n+import org.openhab.binding.omnilink.internal.handler.DimmableUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.FlagHandler;\n+import org.openhab.binding.omnilink.internal.handler.HumiditySensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.LockHandler;\n+import org.openhab.binding.omnilink.internal.handler.LuminaAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmniAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.binding.omnilink.internal.handler.OutputHandler;\n+import org.openhab.binding.omnilink.internal.handler.TempSensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.ThermostatHandler;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.UpbRoomHandler;\n+import org.openhab.binding.omnilink.internal.handler.UpbUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.ZoneHandler;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OmnilinkHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.omnilink\")\n+public class OmnilinkHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkHandlerFactory.class);\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(THING_TYPE_OMNI_AREA, THING_TYPE_LUMINA_AREA, THING_TYPE_ZONE, THING_TYPE_BRIDGE, THING_TYPE_FLAG,\n+                    THING_TYPE_ROOM, THING_TYPE_BUTTON, THING_TYPE_UNIT_UPB, THING_TYPE_THERMOSTAT, THING_TYPE_CONSOLE,\n+                    THING_TYPE_AUDIO_ZONE, THING_TYPE_AUDIO_SOURCE, THING_TYPE_TEMP_SENSOR, THING_TYPE_HUMIDITY_SENSOR,\n+                    THING_TYPE_LOCK, THING_TYPE_OUTPUT, THING_TYPE_UNIT, THING_TYPE_DIMMABLE)\n+            .collect(Collectors.toSet()));\n+\n+    private final Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegistrations = new HashMap<ThingUID, ServiceRegistration<?>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExMTM5OA==", "bodyText": "You could let your discovery service implement ThingHandlerService. Then, this method and that below is not necessary anymore.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524111398", "createdAt": "2020-11-16T10:49:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.OmnilinkDiscoveryService;\n+import org.openhab.binding.omnilink.internal.handler.AudioSourceHandler;\n+import org.openhab.binding.omnilink.internal.handler.AudioZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.ButtonHandler;\n+import org.openhab.binding.omnilink.internal.handler.ConsoleHandler;\n+import org.openhab.binding.omnilink.internal.handler.DimmableUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.FlagHandler;\n+import org.openhab.binding.omnilink.internal.handler.HumiditySensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.LockHandler;\n+import org.openhab.binding.omnilink.internal.handler.LuminaAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmniAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.binding.omnilink.internal.handler.OutputHandler;\n+import org.openhab.binding.omnilink.internal.handler.TempSensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.ThermostatHandler;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.UpbRoomHandler;\n+import org.openhab.binding.omnilink.internal.handler.UpbUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.ZoneHandler;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OmnilinkHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.omnilink\")\n+public class OmnilinkHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkHandlerFactory.class);\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(THING_TYPE_OMNI_AREA, THING_TYPE_LUMINA_AREA, THING_TYPE_ZONE, THING_TYPE_BRIDGE, THING_TYPE_FLAG,\n+                    THING_TYPE_ROOM, THING_TYPE_BUTTON, THING_TYPE_UNIT_UPB, THING_TYPE_THERMOSTAT, THING_TYPE_CONSOLE,\n+                    THING_TYPE_AUDIO_ZONE, THING_TYPE_AUDIO_SOURCE, THING_TYPE_TEMP_SENSOR, THING_TYPE_HUMIDITY_SENSOR,\n+                    THING_TYPE_LOCK, THING_TYPE_OUTPUT, THING_TYPE_UNIT, THING_TYPE_DIMMABLE)\n+            .collect(Collectors.toSet()));\n+\n+    private final Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegistrations = new HashMap<ThingUID, ServiceRegistration<?>>();\n+\n+    @Override\n+    protected void removeHandler(ThingHandler thingHandler) {\n+        // if the omnilink bridge, let's fix up discovery\n+        super.removeHandler(thingHandler);\n+        if (thingHandler instanceof OmnilinkBridgeHandler) {\n+            ServiceRegistration<?> discovery = discoveryServiceRegistrations.get(thingHandler.getThing().getUID());\n+            logger.debug(\"unRegistering OmniLink discovery: {} \", discovery);\n+            if (discovery != null) {\n+                discovery.unregister();\n+            }\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExMjUyMQ==", "bodyText": "This is already logged by the framework an can therefore be removed.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524112521", "createdAt": "2020-11-16T10:50:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.OmnilinkDiscoveryService;\n+import org.openhab.binding.omnilink.internal.handler.AudioSourceHandler;\n+import org.openhab.binding.omnilink.internal.handler.AudioZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.ButtonHandler;\n+import org.openhab.binding.omnilink.internal.handler.ConsoleHandler;\n+import org.openhab.binding.omnilink.internal.handler.DimmableUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.FlagHandler;\n+import org.openhab.binding.omnilink.internal.handler.HumiditySensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.LockHandler;\n+import org.openhab.binding.omnilink.internal.handler.LuminaAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmniAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.binding.omnilink.internal.handler.OutputHandler;\n+import org.openhab.binding.omnilink.internal.handler.TempSensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.ThermostatHandler;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.UpbRoomHandler;\n+import org.openhab.binding.omnilink.internal.handler.UpbUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.ZoneHandler;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OmnilinkHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.omnilink\")\n+public class OmnilinkHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkHandlerFactory.class);\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(THING_TYPE_OMNI_AREA, THING_TYPE_LUMINA_AREA, THING_TYPE_ZONE, THING_TYPE_BRIDGE, THING_TYPE_FLAG,\n+                    THING_TYPE_ROOM, THING_TYPE_BUTTON, THING_TYPE_UNIT_UPB, THING_TYPE_THERMOSTAT, THING_TYPE_CONSOLE,\n+                    THING_TYPE_AUDIO_ZONE, THING_TYPE_AUDIO_SOURCE, THING_TYPE_TEMP_SENSOR, THING_TYPE_HUMIDITY_SENSOR,\n+                    THING_TYPE_LOCK, THING_TYPE_OUTPUT, THING_TYPE_UNIT, THING_TYPE_DIMMABLE)\n+            .collect(Collectors.toSet()));\n+\n+    private final Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegistrations = new HashMap<ThingUID, ServiceRegistration<?>>();\n+\n+    @Override\n+    protected void removeHandler(ThingHandler thingHandler) {\n+        // if the omnilink bridge, let's fix up discovery\n+        super.removeHandler(thingHandler);\n+        if (thingHandler instanceof OmnilinkBridgeHandler) {\n+            ServiceRegistration<?> discovery = discoveryServiceRegistrations.get(thingHandler.getThing().getUID());\n+            logger.debug(\"unRegistering OmniLink discovery: {} \", discovery);\n+            if (discovery != null) {\n+                discovery.unregister();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_UNIT_UPB)) {\n+            return new UpbUnitHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_BRIDGE)) {\n+            OmnilinkBridgeHandler handler = new OmnilinkBridgeHandler((Bridge) thing);\n+            registerOmnilnkBridgeDiscoveryService(handler);\n+            return handler;\n+        } else if (thingTypeUID.equals(THING_TYPE_ZONE)) {\n+            return new ZoneHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_OMNI_AREA)) {\n+            return new OmniAreaHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_LUMINA_AREA)) {\n+            return new LuminaAreaHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_FLAG)) {\n+            return new FlagHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_UNIT)) {\n+            return new UnitHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DIMMABLE)) {\n+            return new DimmableUnitHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_OUTPUT)) {\n+            return new OutputHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_ROOM)) {\n+            return new UpbRoomHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_BUTTON)) {\n+            return new ButtonHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_THERMOSTAT)) {\n+            return new ThermostatHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_AUDIO_ZONE)) {\n+            return new AudioZoneHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_AUDIO_SOURCE)) {\n+            return new AudioSourceHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_TEMP_SENSOR)) {\n+            return new TempSensorHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HUMIDITY_SENSOR)) {\n+            return new HumiditySensorHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_LOCK)) {\n+            return new LockHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_CONSOLE)) {\n+            return new ConsoleHandler(thing);\n+        } else {\n+            logger.warn(\"Unsupported Thing - {} not added to handler\", thing);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExNDAyOQ==", "bodyText": "Normally, config parameters have no unit suffix.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524114029", "createdAt": "2020-11-16T10:51:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/config/OmnilinkBridgeConfig.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link OmnilinkBridgeConfig} sets the authentication settings of the\n+ * OmniLink Controller that will allow for proper communication.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeConfig {\n+\n+    private @Nullable String key1;\n+    private @Nullable String key2;\n+    private @Nullable String ipAddress;\n+    private int port;\n+    private int logPollingSeconds;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExNTYzNg==", "bodyText": "What about this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n          \n          \n            \n                public static <T extends ObjectProperties, U extends ObjectPropertyRequests<T>> Builder<T> builder(\n          \n          \n            \n                        OmnilinkBridgeHandler bridgeHandler, U request) {\n          \n          \n            \n                    return new Builder(bridgeHandler, request);\n          \n          \n            \n                }\n          \n          \n            \n                public static <T extends ObjectProperties, U extends ObjectPropertyRequests<T>> Builder<T> builder(\n          \n          \n            \n                        OmnilinkBridgeHandler bridgeHandler, U request) {\n          \n          \n            \n                    return new Builder<>(bridgeHandler, request);\n          \n          \n            \n                }", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524115636", "createdAt": "2020-11-16T10:53:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/ObjectPropertyRequest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ *\n+ * @param <T>\n+ */\n+@NonNullByDefault\n+class ObjectPropertyRequest<T extends ObjectProperties> implements Iterable<T> {\n+    private final Logger logger = LoggerFactory.getLogger(ObjectPropertyRequest.class);\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public static <T extends ObjectProperties, U extends ObjectPropertyRequests<T>> Builder<T> builder(\n+            OmnilinkBridgeHandler bridgeHandler, U request) {\n+        return new Builder(bridgeHandler, request);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExODkzNQ==", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be warn. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nAlso, logging the exception's message might be enough in most cases. You are logging the stack trace.\nPlease see all other (also logging stack trace).\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Error retrieving object properties\", e);\n          \n          \n            \n                            logger.warn(\"Error retrieving object properties: {}\", e.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524118935", "createdAt": "2020-11-16T10:56:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/ObjectPropertyRequest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ *\n+ * @param <T>\n+ */\n+@NonNullByDefault\n+class ObjectPropertyRequest<T extends ObjectProperties> implements Iterable<T> {\n+    private final Logger logger = LoggerFactory.getLogger(ObjectPropertyRequest.class);\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    public static <T extends ObjectProperties, U extends ObjectPropertyRequests<T>> Builder<T> builder(\n+            OmnilinkBridgeHandler bridgeHandler, U request) {\n+        return new Builder(bridgeHandler, request);\n+    }\n+\n+    private final OmnilinkBridgeHandler bridgeHandler;\n+    private final ObjectPropertyRequests<T> request;\n+    private final int filter1;\n+    private final int filter2;\n+    private final int filter3;\n+\n+    private static final int RELATIVE_OFFSET_DIRECTION = 1;\n+\n+    private ObjectPropertyRequest(OmnilinkBridgeHandler bridgeHandler, ObjectPropertyRequests<T> request, int filter1,\n+            int filter2, int filter3) {\n+        this.bridgeHandler = bridgeHandler;\n+        this.request = request;\n+        this.filter1 = filter1;\n+        this.filter2 = filter2;\n+        this.filter3 = filter3;\n+    }\n+\n+    @Override\n+    public Iterator<T> iterator() {\n+        List<T> messages = new ArrayList<T>();\n+        int currentObjectNumber = 0;\n+\n+        while (true) {\n+            try {\n+                Message message = bridgeHandler.reqObjectProperties(request.getPropertyRequest(), currentObjectNumber,\n+                        RELATIVE_OFFSET_DIRECTION, filter1, filter2, filter3);\n+                if (message.getMessageType() == Message.MESG_TYPE_OBJ_PROP) {\n+                    ObjectProperties objectProperties = (ObjectProperties) message;\n+                    currentObjectNumber = objectProperties.getNumber();\n+                    messages.add(request.getResponseType().cast(objectProperties));\n+                } else {\n+                    break;\n+                }\n+            } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.error(\"Error retrieving object properties\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEyMDAwNw==", "bodyText": "See above.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524120007", "createdAt": "2020-11-16T10:56:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioSourceProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ButtonProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.LockProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ThermostatProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    private static final Set<Integer> TEMP_SENSOR_TYPES = Collections\n+            .unmodifiableSet(Stream.of(AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_OUTDOOR_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE_ALARM,\n+                    AuxSensorProperties.SENSOR_TYPE_OUTDOOR_TEMPERATURE, AuxSensorProperties.SENSOR_TYPE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_TEMPERATURE_ALARM).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEyMDYyMw==", "bodyText": "Why only a dash?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524120623", "createdAt": "2020-11-16T10:57:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioSourceProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ButtonProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.LockProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ThermostatProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    private static final Set<Integer> TEMP_SENSOR_TYPES = Collections\n+            .unmodifiableSet(Stream.of(AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_OUTDOOR_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE_ALARM,\n+                    AuxSensorProperties.SENSOR_TYPE_OUTDOOR_TEMPERATURE, AuxSensorProperties.SENSOR_TYPE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_TEMPERATURE_ALARM).collect(Collectors.toSet()));\n+\n+    /**\n+     * Creates an OmnilinkDiscoveryService.\n+     *\n+     * @param bridgeHandler Bride to discover things on\n+     */\n+    public OmnilinkDiscoveryService(OmnilinkBridgeHandler bridgeHandler) {\n+        super(Collections.singleton(new ThingTypeUID(BINDING_ID, \"-\")), DISCOVER_TIMEOUT_SECONDS, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEyMjM1Nw==", "bodyText": "Can you add the representation property? Please check the others, too.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524122357", "createdAt": "2020-11-16T10:59:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioSourceProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ButtonProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.LockProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ThermostatProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    private static final Set<Integer> TEMP_SENSOR_TYPES = Collections\n+            .unmodifiableSet(Stream.of(AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_OUTDOOR_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE_ALARM,\n+                    AuxSensorProperties.SENSOR_TYPE_OUTDOOR_TEMPERATURE, AuxSensorProperties.SENSOR_TYPE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_TEMPERATURE_ALARM).collect(Collectors.toSet()));\n+\n+    /**\n+     * Creates an OmnilinkDiscoveryService.\n+     *\n+     * @param bridgeHandler Bride to discover things on\n+     */\n+    public OmnilinkDiscoveryService(OmnilinkBridgeHandler bridgeHandler) {\n+        super(Collections.singleton(new ThingTypeUID(BINDING_ID, \"-\")), DISCOVER_TIMEOUT_SECONDS, false);\n+        this.bridgeHandler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        logger.debug(\"Starting scan\");\n+        try {\n+            SystemInformation systemInformation = bridgeHandler.reqSystemInformation();\n+            this.systemType = SystemType.getType(systemInformation.getModel());\n+            this.areas = discoverAreas();\n+            discoverUnits();\n+            discoverZones();\n+            discoverButtons();\n+            discoverThermostats();\n+            discoverAudioZones();\n+            discoverAudioSources();\n+            discoverTempSensors();\n+            discoverHumiditySensors();\n+            discoverLocks();\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.debug(\"Received error during discovery\", e);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Calculate the area filter the a supplied area\n+     *\n+     * @param area Area to calculate filter for.\n+     * @return Calculated Bit Filter for the supplied area. Bit 0 is area 1, bit 2 is area 2 and so on.\n+     */\n+    private static int bitFilterForArea(AreaProperties areaProperties) {\n+        return BigInteger.ZERO.setBit(areaProperties.getNumber() - 1).intValue();\n+    }\n+\n+    /**\n+     * Discovers OmniLink buttons\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverButtons()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        final List<AreaProperties> areas = this.areas;\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ButtonProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.BUTTONS).selectNamed().areaFilter(areaFilter)\n+                        .build();\n+\n+                for (ButtonProperties buttonProperties : objectPropertyRequest) {\n+\n+                    int objnum = buttonProperties.getNumber();\n+                    Map<String, Object> properties = new HashMap<>();\n+                    ThingUID thingUID = new ThingUID(THING_TYPE_BUTTON, bridgeHandler.getThing().getUID(),\n+                            Integer.toString(objnum));\n+                    properties.put(THING_PROPERTIES_NUMBER, objnum);\n+                    properties.put(THING_PROPERTIES_NAME, buttonProperties.getName());\n+                    properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                            .withBridge(this.bridgeHandler.getThing().getUID()).withLabel(buttonProperties.getName())\n+                            .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEyNDEwMA==", "bodyText": "These exceptions are never thrown. Same for several other method signatures in this class.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524124100", "createdAt": "2020-11-16T11:00:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioSourceProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ButtonProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.LockProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ThermostatProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    private static final Set<Integer> TEMP_SENSOR_TYPES = Collections\n+            .unmodifiableSet(Stream.of(AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_OUTDOOR_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE_ALARM,\n+                    AuxSensorProperties.SENSOR_TYPE_OUTDOOR_TEMPERATURE, AuxSensorProperties.SENSOR_TYPE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_TEMPERATURE_ALARM).collect(Collectors.toSet()));\n+\n+    /**\n+     * Creates an OmnilinkDiscoveryService.\n+     *\n+     * @param bridgeHandler Bride to discover things on\n+     */\n+    public OmnilinkDiscoveryService(OmnilinkBridgeHandler bridgeHandler) {\n+        super(Collections.singleton(new ThingTypeUID(BINDING_ID, \"-\")), DISCOVER_TIMEOUT_SECONDS, false);\n+        this.bridgeHandler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        logger.debug(\"Starting scan\");\n+        try {\n+            SystemInformation systemInformation = bridgeHandler.reqSystemInformation();\n+            this.systemType = SystemType.getType(systemInformation.getModel());\n+            this.areas = discoverAreas();\n+            discoverUnits();\n+            discoverZones();\n+            discoverButtons();\n+            discoverThermostats();\n+            discoverAudioZones();\n+            discoverAudioSources();\n+            discoverTempSensors();\n+            discoverHumiditySensors();\n+            discoverLocks();\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.debug(\"Received error during discovery\", e);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Calculate the area filter the a supplied area\n+     *\n+     * @param area Area to calculate filter for.\n+     * @return Calculated Bit Filter for the supplied area. Bit 0 is area 1, bit 2 is area 2 and so on.\n+     */\n+    private static int bitFilterForArea(AreaProperties areaProperties) {\n+        return BigInteger.ZERO.setBit(areaProperties.getNumber() - 1).intValue();\n+    }\n+\n+    /**\n+     * Discovers OmniLink buttons\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverButtons()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEyNzkyNg==", "bodyText": "Can you add a table with the Channels? You could take a look at other bindings for some examples.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524127926", "createdAt": "2020-11-16T11:04:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/README.md", "diffHunk": "@@ -0,0 +1,218 @@\n+# HAI/Leviton OmniLink Binding\n+\n+This binding integrates the [OmniPro and Lumina](http://www.leviton.com/en/products/security-automation/automation-av-controllers/omni-security-systems) line of home automation systems. At Its core the OmniPro is a hardware board that provides security and access features. It connects to many other devices through serial ports or wired contacts and exposes them through a single TCP based API.\n+\n+## Supported Things", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzMDQ5OQ==", "bodyText": "Can you implement it or remove the TODO?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524130499", "createdAt": "2020-11-16T11:06:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioSourceProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ButtonProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.LockProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ThermostatProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    private static final Set<Integer> TEMP_SENSOR_TYPES = Collections\n+            .unmodifiableSet(Stream.of(AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_OUTDOOR_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_EXTENDED_RANGE_TEMPERATURE_ALARM,\n+                    AuxSensorProperties.SENSOR_TYPE_OUTDOOR_TEMPERATURE, AuxSensorProperties.SENSOR_TYPE_TEMPERATURE,\n+                    AuxSensorProperties.SENSOR_TYPE_TEMPERATURE_ALARM).collect(Collectors.toSet()));\n+\n+    /**\n+     * Creates an OmnilinkDiscoveryService.\n+     *\n+     * @param bridgeHandler Bride to discover things on\n+     */\n+    public OmnilinkDiscoveryService(OmnilinkBridgeHandler bridgeHandler) {\n+        super(Collections.singleton(new ThingTypeUID(BINDING_ID, \"-\")), DISCOVER_TIMEOUT_SECONDS, false);\n+        this.bridgeHandler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        logger.debug(\"Starting scan\");\n+        try {\n+            SystemInformation systemInformation = bridgeHandler.reqSystemInformation();\n+            this.systemType = SystemType.getType(systemInformation.getModel());\n+            this.areas = discoverAreas();\n+            discoverUnits();\n+            discoverZones();\n+            discoverButtons();\n+            discoverThermostats();\n+            discoverAudioZones();\n+            discoverAudioSources();\n+            discoverTempSensors();\n+            discoverHumiditySensors();\n+            discoverLocks();\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.debug(\"Received error during discovery\", e);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Calculate the area filter the a supplied area\n+     *\n+     * @param area Area to calculate filter for.\n+     * @return Calculated Bit Filter for the supplied area. Bit 0 is area 1, bit 2 is area 2 and so on.\n+     */\n+    private static int bitFilterForArea(AreaProperties areaProperties) {\n+        return BigInteger.ZERO.setBit(areaProperties.getNumber() - 1).intValue();\n+    }\n+\n+    /**\n+     * Discovers OmniLink buttons\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverButtons()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        final List<AreaProperties> areas = this.areas;\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ButtonProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.BUTTONS).selectNamed().areaFilter(areaFilter)\n+                        .build();\n+\n+                for (ButtonProperties buttonProperties : objectPropertyRequest) {\n+\n+                    int objnum = buttonProperties.getNumber();\n+                    Map<String, Object> properties = new HashMap<>();\n+                    ThingUID thingUID = new ThingUID(THING_TYPE_BUTTON, bridgeHandler.getThing().getUID(),\n+                            Integer.toString(objnum));\n+                    properties.put(THING_PROPERTIES_NUMBER, objnum);\n+                    properties.put(THING_PROPERTIES_NAME, buttonProperties.getName());\n+                    properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                            .withBridge(this.bridgeHandler.getThing().getUID()).withLabel(buttonProperties.getName())\n+                            .build();\n+                    thingDiscovered(discoveryResult);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink locks\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverLocks()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        ObjectPropertyRequest<LockProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.LOCK).selectNamed().build();\n+\n+        for (LockProperties objectProperties : objectPropertyRequest) {\n+\n+            ThingUID thingUID = new ThingUID(THING_TYPE_LOCK, Integer.toString(objectProperties.getNumber()));\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(THING_PROPERTIES_NUMBER, objectProperties.getNumber());\n+            properties.put(THING_PROPERTIES_NAME, objectProperties.getName());\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withBridge(this.bridgeHandler.getThing().getUID()).withLabel(objectProperties.getName()).build();\n+            thingDiscovered(discoveryResult);\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink audio zones\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverAudioZones()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        ObjectPropertyRequest<AudioZoneProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.AUDIO_ZONE).selectNamed().build();\n+\n+        for (AudioZoneProperties objectProperties : objectPropertyRequest) {\n+\n+            ThingUID thingUID = new ThingUID(THING_TYPE_AUDIO_ZONE, Integer.toString(objectProperties.getNumber()));\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(THING_PROPERTIES_NUMBER, objectProperties.getNumber());\n+            properties.put(THING_PROPERTIES_NAME, objectProperties.getName());\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withBridge(this.bridgeHandler.getThing().getUID()).withLabel(objectProperties.getName()).build();\n+            thingDiscovered(discoveryResult);\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink audio sources\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverAudioSources()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        ObjectPropertyRequest<AudioSourceProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.AUDIO_SOURCE).selectNamed().build();\n+\n+        for (AudioSourceProperties objectProperties : objectPropertyRequest) {\n+\n+            ThingUID thingUID = new ThingUID(THING_TYPE_AUDIO_SOURCE, Integer.toString(objectProperties.getNumber()));\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(THING_PROPERTIES_NUMBER, objectProperties.getNumber());\n+            properties.put(THING_PROPERTIES_NAME, objectProperties.getName());\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withBridge(this.bridgeHandler.getThing().getUID()).withLabel(objectProperties.getName()).build();\n+            thingDiscovered(discoveryResult);\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink temperature sensors\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverTempSensors()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        final List<AreaProperties> areas = this.areas;\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<AuxSensorProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.AUX_SENSORS).selectNamed().areaFilter(areaFilter)\n+                        .build();\n+\n+                for (AuxSensorProperties objectProperties : objectPropertyRequest) {\n+\n+                    if (TEMP_SENSOR_TYPES.contains(objectProperties.getSensorType())) {\n+                        ThingUID thingUID = new ThingUID(THING_TYPE_TEMP_SENSOR, bridgeHandler.getThing().getUID(),\n+                                Integer.toString(objectProperties.getNumber()));\n+\n+                        Map<String, Object> properties = new HashMap<>();\n+                        properties.put(THING_PROPERTIES_NUMBER, objectProperties.getNumber());\n+                        properties.put(THING_PROPERTIES_NAME, objectProperties.getName());\n+                        properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID)\n+                                .withProperties(properties).withBridge(this.bridgeHandler.getThing().getUID())\n+                                .withLabel(objectProperties.getName()).build();\n+                        thingDiscovered(discoveryResult);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink humidity sensors\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverHumiditySensors()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        final List<AreaProperties> areas = this.areas;\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<AuxSensorProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.AUX_SENSORS).selectNamed().areaFilter(areaFilter)\n+                        .build();\n+\n+                for (AuxSensorProperties objectProperties : objectPropertyRequest) {\n+\n+                    if (objectProperties.getSensorType() == AuxSensorProperties.SENSOR_TYPE_HUMIDITY) {\n+                        ThingUID thingUID = new ThingUID(THING_TYPE_HUMIDITY_SENSOR, bridgeHandler.getThing().getUID(),\n+                                Integer.toString(objectProperties.getNumber()));\n+\n+                        Map<String, Object> properties = new HashMap<>();\n+                        properties.put(THING_PROPERTIES_NUMBER, objectProperties.getNumber());\n+                        properties.put(THING_PROPERTIES_NAME, objectProperties.getName());\n+                        properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID)\n+                                .withProperties(properties).withBridge(this.bridgeHandler.getThing().getUID())\n+                                .withLabel(objectProperties.getName()).build();\n+                        thingDiscovered(discoveryResult);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink thermostats\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverThermostats()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        final List<AreaProperties> areas = this.areas;\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ThermostatProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.THERMOSTAT).selectNamed().areaFilter(areaFilter)\n+                        .build();\n+\n+                for (ThermostatProperties thermostatProperties : objectPropertyRequest) {\n+\n+                    ThingUID thingUID = new ThingUID(THING_TYPE_THERMOSTAT, bridgeHandler.getThing().getUID(),\n+                            Integer.toString(thermostatProperties.getNumber()));\n+\n+                    Map<String, Object> properties = new HashMap<>();\n+                    properties.put(THING_PROPERTIES_NUMBER, thermostatProperties.getNumber());\n+                    properties.put(THING_PROPERTIES_NAME, thermostatProperties.getName());\n+                    properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                            .withBridge(this.bridgeHandler.getThing().getUID())\n+                            .withLabel(thermostatProperties.getName()).build();\n+                    thingDiscovered(discoveryResult);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink areas\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private List<AreaProperties> discoverAreas()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        ObjectPropertyRequest<AreaProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.AREA).build();\n+\n+        List<AreaProperties> areas = new LinkedList<>();\n+\n+        for (AreaProperties areaProperties : objectPropertyRequest) {\n+\n+            int objnum = areaProperties.getNumber();\n+\n+            /*\n+             * It seems that for simple OmniLink Controller configurations there is only 1 area, without a name. So if\n+             * there is no\n+             * name for the first area, we will call that Main. If other area's name is blank, we will not create a\n+             * thing.\n+             */\n+            String areaName = areaProperties.getName();\n+            if (areaProperties.getNumber() == 1 && \"\".equals(areaName)) {\n+                areaName = \"Main Area\";\n+            } else if (\"\".equals(areaName)) {\n+                break;\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            ThingUID thingUID = new ThingUID();\n+            final SystemType systemType = this.systemType;\n+            if (systemType != null) {\n+                switch (systemType) {\n+                    case LUMINA:\n+                        thingUID = new ThingUID(THING_TYPE_LUMINA_AREA, bridgeHandler.getThing().getUID(),\n+                                Integer.toString(objnum));\n+                        break;\n+                    case OMNI:\n+                        thingUID = new ThingUID(THING_TYPE_OMNI_AREA, bridgeHandler.getThing().getUID(),\n+                                Integer.toString(objnum));\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"Unknown System Type\");\n+                }\n+            }\n+\n+            properties.put(THING_PROPERTIES_NUMBER, objnum);\n+            properties.put(THING_PROPERTIES_NAME, areaName);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withBridge(this.bridgeHandler.getThing().getUID()).withLabel(areaName).build();\n+            thingDiscovered(discoveryResult);\n+            areas.add(areaProperties);\n+        }\n+        return areas;\n+    }\n+\n+    /**\n+     * Discovers OmniLink supported units\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverUnits()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        final ThingUID bridgeUID = this.bridgeHandler.getThing().getUID();\n+        final List<AreaProperties> areas = this.areas;\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<UnitProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.UNIT).selectNamed().areaFilter(areaFilter)\n+                        .selectAnyLoad().build();\n+\n+                String currentRoomName = \"\";\n+\n+                for (UnitProperties unitProperties : objectPropertyRequest) {\n+\n+                    int objnum = unitProperties.getNumber();\n+\n+                    String thingLabel = unitProperties.getName();\n+                    String thingID = Integer.toString(objnum);\n+\n+                    Map<String, Object> properties = new HashMap<>();\n+\n+                    properties.put(THING_PROPERTIES_NUMBER, objnum);\n+                    properties.put(THING_PROPERTIES_NAME, unitProperties.getName());\n+                    properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                    ThingUID thingUID = null;\n+\n+                    switch (unitProperties.getUnitType()) {\n+                        case UNIT_TYPE_HLC_ROOM:\n+                        case UNIT_TYPE_VIZIARF_ROOM:\n+                            thingUID = new ThingUID(THING_TYPE_ROOM, bridgeHandler.getThing().getUID(), thingID);\n+                            currentRoomName = unitProperties.getName();\n+                            break;\n+                        case UNIT_TYPE_FLAG:\n+                            thingUID = new ThingUID(THING_TYPE_FLAG, bridgeHandler.getThing().getUID(), thingID);\n+                            break;\n+                        case UNIT_TYPE_OUTPUT:\n+                            thingUID = new ThingUID(THING_TYPE_OUTPUT, bridgeHandler.getThing().getUID(), thingID);\n+                            break;\n+                        case UNIT_TYPE_UPB:\n+                        case UNIT_TYPE_HLC_LOAD:\n+                            thingUID = new ThingUID(THING_TYPE_UNIT_UPB, bridgeHandler.getThing().getUID(), thingID);\n+                            break;\n+                        case UNIT_TYPE_CENTRALITE:\n+                        case UNIT_TYPE_RADIORA:\n+                        case UNIT_TYPE_VIZIARF_LOAD:\n+                        case UNIT_TYPE_COMPOSE:\n+                            thingUID = new ThingUID(THING_TYPE_DIMMABLE, bridgeHandler.getThing().getUID(), thingID);\n+                            break;\n+                        default:\n+                            thingUID = new ThingUID(THING_TYPE_UNIT, bridgeHandler.getThing().getUID(), thingID);\n+                            logger.debug(\"Generic unit type: {}\", unitProperties.getUnitType());\n+                            break;\n+\n+                    }\n+\n+                    switch (unitProperties.getUnitType()) {\n+                        case UNIT_TYPE_UPB:\n+                        case UNIT_TYPE_HLC_LOAD:\n+                        case UNIT_TYPE_CENTRALITE:\n+                        case UNIT_TYPE_RADIORA:\n+                        case UNIT_TYPE_VIZIARF_LOAD:\n+                        case UNIT_TYPE_COMPOSE:\n+                            // let's prepend room name to unit name for label\n+                            // TODO could make this configurable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 487}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzMjY4MQ==", "bodyText": "As receiving invalid types should be treated as a normal use case, it seems unreasonable to throw an unchecked exception. You could simply log it. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524132681", "createdAt": "2020-11-16T11:08:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractAreaHandler.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.text.MessageFormat;\n+import java.util.EnumSet;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.AreaAlarm;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.AreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AbstractAreaHandler} defines some methods that can be used across\n+ * the many different areas defined in an OmniLink Controller.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractAreaHandler extends AbstractOmnilinkStatusHandler<AreaStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractAreaHandler.class);\n+\n+    public AbstractAreaHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand: {}, command: {}\", channelUID, command);\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_AREA_ACTIVATE_KEYPAD_EMERGENCY:\n+                handleKeypadEmergency(channelUID, command);\n+                break;\n+            default:\n+                handleSecurityMode(channelUID, command);\n+                break;\n+        }\n+    }\n+\n+    private void handleSecurityMode(ChannelUID channelUID, Command command) {\n+        int mode = getMode(channelUID);\n+        int areaNumber = getThingNumber();\n+\n+        if (!(command instanceof StringType)) {\n+            throw new IllegalArgumentException(\n+                    MessageFormat.format(\"Command {} is not valid for channel {}, only StringType are accepted\",\n+                            command, channelUID.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNjAyMA==", "bodyText": "Actually the framework takes care of the Thing status when the bridge is offline. Is this method really necessary?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524136020", "createdAt": "2020-11-16T11:11:31Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractOmnilinkHandler.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AbstractOmnilinkHandler} defines some methods that can be used across\n+ * the many different things exposed by the OmniLink protocol\n+ *\n+ * @author Brian O'Connell - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractOmnilinkHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractOmnilinkHandler.class);\n+\n+    public AbstractOmnilinkHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    public @Nullable OmnilinkBridgeHandler getOmnilinkBridgeHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            return (OmnilinkBridgeHandler) bridge.getHandler();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    protected void sendOmnilinkCommand(int message, int param1, int param2) {\n+        try {\n+            final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+            if (bridge != null) {\n+                bridge.sendOmnilinkCommand(message, param1, param2);\n+            } else {\n+                logger.debug(\"Received null bridge while sending OmniLink command!\");\n+            }\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.error(\"Could not send command to OmniLink Controller!\", e);\n+        }\n+    }\n+\n+    /**\n+     * Gets the configured number for a thing.\n+     *\n+     * @return Configured number for a thing.\n+     */\n+    protected int getThingNumber() {\n+        return ((Number) getThing().getConfiguration().get(THING_PROPERTIES_NUMBER)).intValue();\n+    }\n+\n+    /**\n+     * Gets the configured number for a thing.\n+     *\n+     * @return Configured number for a thing.\n+     */\n+    protected int getAreaNumber() {\n+        return ((Number) getThing().getConfiguration().get(THING_PROPERTIES_AREA)).intValue();\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.ONLINE);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzODUyNg==", "bodyText": "In case of an error the Thing should be set to offline. The message you are logging could be used as the ThingStatusDetailMessage. The framework will log it, then.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524138526", "createdAt": "2020-11-16T11:13:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractOmnilinkStatusHandler.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+\n+/**\n+ * The {@link AbstractOmnilinkStatusHandler} defines some methods that can be used across\n+ * the many different units exposed by the OmniLink protocol to retrive updated status information.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractOmnilinkStatusHandler<T extends Status> extends AbstractOmnilinkHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractOmnilinkStatusHandler.class);\n+\n+    public AbstractOmnilinkStatusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private volatile Optional<T> status = Optional.empty();\n+\n+    @Override\n+    public void initialize() {\n+        updateHandlerStatus();\n+    }\n+\n+    /**\n+     * Attempt to retrieve an updated status for this handler type.\n+     *\n+     * @return Optional with updated status if possible, empty optional otherwise.\n+     */\n+    protected abstract Optional<T> retrieveStatus();\n+\n+    /**\n+     * Update channels associated with handler\n+     *\n+     * @param t Status object to update channels with\n+     */\n+    protected abstract void updateChannels(T t);\n+\n+    /**\n+     * Process a status update for this handler. This will dispatch updateChannels where appropriate.\n+     *\n+     * @param t Status to process.\n+     */\n+    public void handleStatus(T t) {\n+        this.status = Optional.of(t);\n+        updateChannels(t);\n+    }\n+\n+    @Override\n+    public void channelLinked(ChannelUID channelUID) {\n+        logger.debug(\"Channel linked: {} for zone {}\", channelUID, getThingNumber());\n+        if (status.isPresent()) {\n+            updateChannels(status.get());\n+        }\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        super.bridgeStatusChanged(bridgeStatusInfo);\n+        updateHandlerStatus();\n+    }\n+\n+    private void updateHandlerStatus() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null && bridge.getStatus() == ThingStatus.ONLINE) {\n+            Optional<T> status = retrieveStatus();\n+            if (status.isPresent()) {\n+                handleStatus(status.get());\n+                updateStatus(ThingStatus.ONLINE);\n+            } else {\n+                logger.debug(\"Received null staus update!\");\n+                updateStatus(ThingStatus.UNKNOWN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzODg5MQ==", "bodyText": "It's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524138891", "createdAt": "2020-11-16T11:14:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AudioSourceHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.AudioSourceStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AudioSourceHandler} defines some methods that are used to\n+ * interface with an OmniLink Audio Source. This by extension also defines the\n+ * Audio Source thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Brian O'Connell - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AudioSourceHandler extends AbstractOmnilinkHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AudioSourceHandler.class);\n+    private static final long POLL_DELAY = 5; // 5 Second polling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzOTcyMQ==", "bodyText": "No harm in canceling a task that is already cancelled.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (scheduledPolling != null && !scheduledPolling.isDone()) {\n          \n          \n            \n                    if (scheduledPolling != null) {", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524139721", "createdAt": "2020-11-16T11:14:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AudioSourceHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.AudioSourceStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AudioSourceHandler} defines some methods that are used to\n+ * interface with an OmniLink Audio Source. This by extension also defines the\n+ * Audio Source thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Brian O'Connell - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AudioSourceHandler extends AbstractOmnilinkHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AudioSourceHandler.class);\n+    private static final long POLL_DELAY = 5; // 5 Second polling\n+    private @Nullable ScheduledFuture<?> scheduledPolling = null;\n+\n+    public AudioSourceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        cancelPolling();\n+        boolean autoStart = ((Boolean) getThing().getConfiguration().get(THING_PROPERTIES_AUTO_START)).booleanValue();\n+        int sourceNumber = getThingNumber();\n+\n+        if (autoStart) {\n+            logger.debug(\"Autostart enabled, scheduling polling for Audio Source {}\", sourceNumber);\n+            schedulePolling();\n+        } else {\n+            logger.debug(\"Autostart disabled, not scheduling polling for Audio Source {}\", sourceNumber);\n+        }\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public synchronized void dispose() {\n+        cancelPolling();\n+        super.dispose();\n+    }\n+\n+    private synchronized void cancelPolling() {\n+        final ScheduledFuture<?> scheduledPolling = this.scheduledPolling;\n+        if (scheduledPolling != null && !scheduledPolling.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDE0MDg0Mw==", "bodyText": "Syntactical sugar.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    scheduledPolling = super.scheduler.scheduleWithFixedDelay(() -> pollAudioSource(), 0, POLL_DELAY,\n          \n          \n            \n                    scheduledPolling = super.scheduler.scheduleWithFixedDelay(this::pollAudioSource, 0, POLL_DELAY,", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r524140843", "createdAt": "2020-11-16T11:16:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AudioSourceHandler.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.AudioSourceStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AudioSourceHandler} defines some methods that are used to\n+ * interface with an OmniLink Audio Source. This by extension also defines the\n+ * Audio Source thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Brian O'Connell - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AudioSourceHandler extends AbstractOmnilinkHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AudioSourceHandler.class);\n+    private static final long POLL_DELAY = 5; // 5 Second polling\n+    private @Nullable ScheduledFuture<?> scheduledPolling = null;\n+\n+    public AudioSourceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        cancelPolling();\n+        boolean autoStart = ((Boolean) getThing().getConfiguration().get(THING_PROPERTIES_AUTO_START)).booleanValue();\n+        int sourceNumber = getThingNumber();\n+\n+        if (autoStart) {\n+            logger.debug(\"Autostart enabled, scheduling polling for Audio Source {}\", sourceNumber);\n+            schedulePolling();\n+        } else {\n+            logger.debug(\"Autostart disabled, not scheduling polling for Audio Source {}\", sourceNumber);\n+        }\n+        updateStatus(ThingStatus.ONLINE);\n+    }\n+\n+    @Override\n+    public synchronized void dispose() {\n+        cancelPolling();\n+        super.dispose();\n+    }\n+\n+    private synchronized void cancelPolling() {\n+        final ScheduledFuture<?> scheduledPolling = this.scheduledPolling;\n+        if (scheduledPolling != null && !scheduledPolling.isDone()) {\n+            logger.debug(\"Cancelling polling for Audio Source {}\", getThingNumber());\n+            scheduledPolling.cancel(false);\n+        }\n+    }\n+\n+    private synchronized void schedulePolling() {\n+        cancelPolling();\n+        int sourceNumber = getThingNumber();\n+        logger.debug(\"Scheduling polling for Audio Source {}\", sourceNumber);\n+        scheduledPolling = super.scheduler.scheduleWithFixedDelay(() -> pollAudioSource(), 0, POLL_DELAY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a546cab53df9a7139ec6d3a6c56ce902ab76315"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTQ4MDY0", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-555948064", "createdAt": "2020-12-19T15:17:00Z", "commit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNToxNzowMFrOII8aFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNjoxMzozN1rOII8wKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0OTIzOQ==", "bodyText": "Can these Channels consolidated to two Channels if using Number:Time?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546249239", "createdAt": "2020-12-19T15:17:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/README.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# HAI/Leviton OmniLink Binding\n+\n+This binding integrates the [OmniPro and Lumina](http://www.leviton.com/en/products/security-automation/automation-av-controllers/omni-security-systems) line of home automation systems.\n+At its core the OmniPro is a hardware board that provides security and access features.\n+It connects to many other devices through serial ports or wired contacts and exposes them through a single TCP based API.\n+\n+## Supported Things\n+\n+The OmniPro/Lumina controller acts as a \"bridge\" for accessing other connected devices.\n+\n+\n+| Omni type                  | Hardware Type                                    | Things                    |\n+|:---------------------------|:-------------------------------------------------|:--------------------------|\n+| Controller                 | Omni (Pro II, IIe, LTe), Lumina                  | controller (omni, lumina) |\n+| Lights                     | Built-in, UPB, HLC                               | unit, dimmable, upb, room |\n+| Thermostats                | Omnistat, Omnistat2                              | thermostat                |\n+| Temperature Sensors        | 31A00-1/31A00-7                                  | temp_sensor               |\n+| Humidity Sensors           | 31A00-2                                          | humidity_sensor           |\n+| Zones                      | Built-in/Hardwire, GE Wireless                   | zone                      |\n+| Audio Zones/Sources        | HAI Hi-Fi, Russound, NuVo, Xantech, Speakercraft | audio_zone, audio_source  |\n+| Consoles                   | HAI Omni Console, HAI Lumina Console             | console                   |\n+| Areas                      | Built-in                                         | area, lumina_area         |\n+| Buttons                    | Built-in                                         | button                    |\n+| Flags                      | Built-in                                         | flag                      |\n+| Output                     | Built-in/Hardwire                                | output                    |\n+| Access Control Reader Lock | Leviton Access Control Reader                    | lock                      |\n+\n+\n+\n+## Discovery\n+\n+### Controller\n+\n+Omni and Lumina controllers must be manually added using the IP and port of the controller as well as the 2 encryption keys required for network access.\n+\n+### Devices\n+\n+Once a connection can be established to a controller, all connected devices will be automatically discovered and added to the inbox.\n+\n+## Thing Configuration\n+\n+A Omni or Lumina controller requires the IP address, optional port (defaults to 4369), and 2 encryption keys.\n+The hexadecimal pairs in the encryption keys are typically delimited using a colon`:`, but dashes `-`, spaces ` ` or no delimiter may be used.\n+\n+In the thing file, this looks e.g. like\n+\n+```\n+Bridge omnilink:controller:home [ ipAddress=\"127.0.0.1\", port=4369, key1=\"XXXXXXXXXXXXXXXX\", key2=\"XXXXXXXXXXXXXXXX\" ] {\n+    // Add your things here\n+}\n+```\n+\n+The devices are identified by the device number that the OmniLink bridge assigns to them, see the [Full Example](#full-example) section below for a manual configuration example.\n+\n+## Channels\n+\n+The devices support some of the following channels:\n+\n+| Channel Type ID             | Item Type            | Description                                                                          | Thing types supporting this channel |\n+|-----------------------------|----------------------|--------------------------------------------------------------------------------------|-------------------------------------|\n+| activate_keypad_emergency   | Number               | Activate a burglary, fire, or auxiliary keypad emergency alarm on Omni based models. | area                                |\n+| alarm_burglary              | Switch               | Indicates if a burglary alarm is active.                                             | area                                |\n+| alarm_fire                  | Switch               | Indicates if a fire alarm is active.                                                 | area                                |\n+| alarm_gas                   | Switch               | Indicates if a gas alarm is active.                                                  | area                                |\n+| alarm_auxiliary             | Switch               | Indicates if a auxiliary alarm is active.                                            | area                                |\n+| alarm_freeze                | Switch               | Indicates if a freeze alarm is active.                                               | area                                |\n+| alarm_water                 | Switch               | Indicates if a water alarm is active.                                                | area                                |\n+| alarm_duress                | Switch               | Indicates if a duress alarm is active.                                               | area                                |\n+| alarm_temperature           | Switch               | Indicates if a temperature alarm is active.                                          | area                                |\n+| mode                        | Number               | Represents the area security mode.                                                   | area, lumina_area                   |\n+| disarm                      | String               | Send a 4 digit user code to disarm the system.                                       | area                                |\n+| day                         | String               | Send a 4 digit user code to arm the system to day.                                   | area                                |\n+| night                       | String               | Send a 4 digit user code to arm the system to night.                                 | area                                |\n+| away                        | String               | Send a 4 digit user code to arm the system to away.                                  | area                                |\n+| vacation                    | String               | Send a 4 digit user code to arm the system to vacation.                              | area                                |\n+| day_instant                 | String               | Send a 4 digit user code to arm the system to day instant.                           | area                                |\n+| night_delayed               | String               | Send a 4 digit user code to arm the system to night delayed.                         | area                                |\n+| home                        | String               | Send a 4 digit user code to set the system to home.                                  | lumina_area                         |\n+| sleep                       | String               | Send a 4 digit user code to set the system to sleep.                                 | lumina_area                         |\n+| away                        | String               | Send a 4 digit user code to set the system to away.                                  | lumina_area                         |\n+| vacation                    | String               | Send a 4 digit user code to set the system to vacation.                              | lumina_area                         |\n+| party                       | String               | Send a 4 digit user code to set the system to party.                                 | lumina_area                         |\n+| special                     | String               | Send a 4 digit user code to set the system to special.                               | lumina_area                         |\n+| source_text_{1,2,3,4,5,6}   | String               | A line of metadata from this audio source.                                           | audio_source                        |\n+| polling                     | Switch               | Enable or disable polling of this audio source.                                      | audio_source                        |\n+| zone_power                  | Switch               | Power status of this audio zone.                                                     | audio_zone                          |\n+| zone_mute                   | Switch               | Mute status of this audio zone.                                                      | audio_zone                          |\n+| zone_volume                 | Dimmer               | Volume level of this audio zone.                                                     | audio_zone                          |\n+| zone_source                 | Number               | Source for this audio zone.                                                          | audio_zone                          |\n+| zone_control                | Player               | Control the audio zone, e.g. start/stop/next/previous.                               | audio_zone                          |\n+| sysdate                     | DateTime             | Set controller date/time.                                                            | controller                          |\n+| last_log                    | String               | Last log message on the controller, represented in JSON.                             | controller                          |\n+| enable_disable_beeper       | Switch               | Enable/Disable the beeper for this/all console(s).                                   | controller, console                 |\n+| beep                        | Switch               | Send a beep command to this/all console(s).                                          | controller, console                 |\n+| press                       | Switch               | Sends a button event to the controller.                                              | button                              |\n+| low_setpoint                | Number               | The current low setpoint for this humidity/temperature sensor.                       | temp_sensor, humidity_sensor        |\n+| high_setpoint               | Number               | The current high setpoint for this humidity/temperature sensor.                      | temp_sensor, humidity_sensor        |\n+| temperature                 | Number:Temperature   | The current temperature at this thermostat/temperature sensor.                       | thermostat, temp_sensor             |\n+| humidity                    | Number:Dimensionless | The current relative humidity at this thermostat/humidity sensor.                    | thermostat, humidity_sensor         |\n+| freeze_alarm                | Contact              | Closed when freeze alarm is triggered by this thermostat.                            | thermostat                          |\n+| comm_failure                | Contact              | Closed during a communications failure with this thermostat.                         | thermostat                          |\n+| outdoor_temperature         | Number:Temperature   | The current outdoor temperature detected by this thermostat.                         | thermostat                          |\n+| heat_setpoint               | Number:Temperature   | The current low/heating setpoint of this thermostat.                                 | thermostat                          |\n+| cool_setpoint               | Number:Temperature   | The current high/cooling setpoint of this thermostat.                                | thermostat                          |\n+| humidify_setpoint           | Number:Dimensionless | The current low/humidify setpoint for this thermostat.                               | thermostat                          |\n+| dehumidify_setpoint         | Number:Dimensionless | The current high/dehumidify setpoint for this thermostat.                            | thermostat                          |\n+| system_mode                 | Number               | The current system mode of this thermostat.                                          | thermostat                          |\n+| fan_mode                    | Number               | The current fan mode of this thermostat.                                             | thermostat                          |\n+| hold_status                 | Number               | The current hold status of this thermostat.                                          | thermostat                          |\n+| status                      | Number               | The current numeric status of this thermostat/unit/dimmable unit.                    | thermostat, unit, dimmable          |\n+| level                       | Dimmer               | Increase/Decrease the level of this unit/dimmable unit/UPB unit.                     | unit, dimmable, upb                 |\n+| switch                      | Switch               | Turn this unit/dimmable unit/flag/output/room on/off.                                | unit, dimmable, flag, output, room  |\n+| on_for_seconds              | Number               | Turn on this unit for a specified number of seconds.                                 | unit, dimmable, upb, flag, output   |\n+| off_for_seconds             | Number               | Turn off this unit for a specified number of seconds.                                | unit, dimmable, upb, flag, output   |\n+| on_for_minutes              | Number               | Turn on this unit for a specified number of minutes.                                 | unit, dimmable, upb, flag, output   |\n+| off_for_minutes             | Number               | Turn off this unit for a specified number of minutes.                                | unit, dimmable, upb, flag, output   |\n+| on_for_hours                | Number               | Turn on this unit for a specified number of hours.                                   | unit, dimmable, upb, flag, output   |\n+| off_for_hours               | Number               | Turn off this unit for a specified number of hours.                                  | unit, dimmable, upb, flag, output   |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0OTUxMQ==", "bodyText": "You could use ThingHandlerService which would make this code and that below unnecessary. The documentation for this is not yet merged, but available in the PR: https://github.com/openhab/openhab-docs/pull/1262/files#diff-c4a4d8725430bc2ea046182bfc73ac51349d989c7f6a8a6fa3001a226a09ad98R932", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546249511", "createdAt": "2020-12-19T15:19:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.OmnilinkDiscoveryService;\n+import org.openhab.binding.omnilink.internal.handler.AudioSourceHandler;\n+import org.openhab.binding.omnilink.internal.handler.AudioZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.ButtonHandler;\n+import org.openhab.binding.omnilink.internal.handler.ConsoleHandler;\n+import org.openhab.binding.omnilink.internal.handler.HumiditySensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.LockHandler;\n+import org.openhab.binding.omnilink.internal.handler.LuminaAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmniAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.binding.omnilink.internal.handler.TempSensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.ThermostatHandler;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.ZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.DimmableUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.FlagHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.OutputHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.UpbRoomHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.dimmable.UpbUnitHandler;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link OmnilinkHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.omnilink\")\n+public class OmnilinkHandlerFactory extends BaseThingHandlerFactory {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkHandlerFactory.class);\n+\n+    private final Map<ThingUID, ServiceRegistration<?>> discoveryServiceRegistrations = new HashMap<>();\n+\n+    @Override\n+    protected synchronized void removeHandler(ThingHandler thingHandler) {\n+        super.removeHandler(thingHandler);\n+        if (thingHandler instanceof OmnilinkBridgeHandler) {\n+            ServiceRegistration<?> discovery = discoveryServiceRegistrations.get(thingHandler.getThing().getUID());\n+            logger.debug(\"unRegistering OmniLink discovery: {} \", discovery);\n+            if (discovery != null) {\n+                discovery.unregister();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0OTU3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public enum SystemType {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public enum SystemType {", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546249575", "createdAt": "2020-12-19T15:20:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/SystemType.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * The {@link SystemType} enum defines the two supported system types which can\n+ * interface with the binding\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+public enum SystemType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0OTk3NQ==", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.modelNumbers = new HashSet<Integer>(Arrays.asList(modelNumbers));\n          \n          \n            \n                    this.modelNumbers = Set.of(modelNumbers);", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546249975", "createdAt": "2020-12-19T15:24:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/SystemType.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * The {@link SystemType} enum defines the two supported system types which can\n+ * interface with the binding\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+public enum SystemType {\n+    OMNI(16, 30, 38),\n+    LUMINA(36, 37);\n+\n+    private final Set<Integer> modelNumbers;\n+\n+    SystemType(Integer... modelNumbers) {\n+        this.modelNumbers = new HashSet<Integer>(Arrays.asList(modelNumbers));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDE5OQ==", "bodyText": "Are you logging the stack trace by intention?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546250199", "createdAt": "2020-12-19T15:26:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,517 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties.*;\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.*;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link OmnilinkDiscoveryService} creates things based on the configured bridge.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.omnilink\")\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    /**\n+     * Creates an OmnilinkDiscoveryService.\n+     *\n+     * @param bridgeHandler Bridge to discover things on\n+     */\n+    public OmnilinkDiscoveryService(OmnilinkBridgeHandler bridgeHandler) {\n+        super(SUPPORTED_THING_TYPES_UIDS, DISCOVER_TIMEOUT_SECONDS, false);\n+        this.bridgeHandler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        logger.debug(\"Starting scan\");\n+        try {\n+            SystemInformation systemInformation = bridgeHandler.reqSystemInformation();\n+            this.systemType = SystemType.getType(systemInformation.getModel());\n+            this.areas = discoverAreas();\n+            discoverUnits();\n+            discoverZones();\n+            discoverButtons();\n+            discoverThermostats();\n+            discoverAudioZones();\n+            discoverAudioSources();\n+            discoverTempSensors();\n+            discoverHumiditySensors();\n+            discoverLocks();\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.debug(\"Received error during discovery\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDUyNg==", "bodyText": "Can you make \"number\" a constant?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546250526", "createdAt": "2020-12-19T15:29:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,517 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties.*;\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.*;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link OmnilinkDiscoveryService} creates things based on the configured bridge.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.omnilink\")\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    /**\n+     * Creates an OmnilinkDiscoveryService.\n+     *\n+     * @param bridgeHandler Bridge to discover things on\n+     */\n+    public OmnilinkDiscoveryService(OmnilinkBridgeHandler bridgeHandler) {\n+        super(SUPPORTED_THING_TYPES_UIDS, DISCOVER_TIMEOUT_SECONDS, false);\n+        this.bridgeHandler = bridgeHandler;\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        logger.debug(\"Starting scan\");\n+        try {\n+            SystemInformation systemInformation = bridgeHandler.reqSystemInformation();\n+            this.systemType = SystemType.getType(systemInformation.getModel());\n+            this.areas = discoverAreas();\n+            discoverUnits();\n+            discoverZones();\n+            discoverButtons();\n+            discoverThermostats();\n+            discoverAudioZones();\n+            discoverAudioSources();\n+            discoverTempSensors();\n+            discoverHumiditySensors();\n+            discoverLocks();\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.debug(\"Received error during discovery\", e);\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Calculate the area filter the a supplied area\n+     *\n+     * @param area Area to calculate filter for.\n+     * @return Calculated Bit Filter for the supplied area. Bit 0 is area 1, bit 2 is area 2 and so on.\n+     */\n+    private static int bitFilterForArea(AreaProperties areaProperties) {\n+        return BigInteger.ZERO.setBit(areaProperties.getNumber() - 1).intValue();\n+    }\n+\n+    /**\n+     * Discovers OmniLink buttons\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverButtons() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+        final List<AreaProperties> areas = this.areas;\n+\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ButtonProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.BUTTONS, 0, 1).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (ButtonProperties buttonProperties : objectPropertyRequest) {\n+                    String thingName = buttonProperties.getName();\n+                    String thingID = Integer.toString(buttonProperties.getNumber());\n+\n+                    Map<String, Object> properties = new HashMap<>();\n+                    properties.put(THING_PROPERTIES_NAME, thingName);\n+                    properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                    ThingUID thingUID = new ThingUID(THING_TYPE_BUTTON, bridgeUID, thingID);\n+\n+                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                            .withProperty(\"number\", thingID).withRepresentationProperty(\"number\").withBridge(bridgeUID)\n+                            .withLabel(thingName).build();\n+                    thingDiscovered(discoveryResult);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink locks\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverLocks() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+\n+        ObjectPropertyRequest<AccessControlReaderProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.LOCK, 0, 1).selectNamed().build();\n+\n+        for (AccessControlReaderProperties lockProperties : objectPropertyRequest) {\n+            String thingName = lockProperties.getName();\n+            String thingID = Integer.toString(lockProperties.getNumber());\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(THING_PROPERTIES_NAME, thingName);\n+\n+            ThingUID thingUID = new ThingUID(THING_TYPE_LOCK, bridgeUID, thingID);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withProperty(\"number\", thingID).withRepresentationProperty(\"number\").withBridge(bridgeUID)\n+                    .withLabel(thingName).build();\n+            thingDiscovered(discoveryResult);\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink audio zones\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverAudioZones() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+\n+        ObjectPropertyRequest<AudioZoneProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.AUDIO_ZONE, 0, 1).selectNamed().build();\n+\n+        for (AudioZoneProperties audioZoneProperties : objectPropertyRequest) {\n+            String thingName = audioZoneProperties.getName();\n+            String thingID = Integer.toString(audioZoneProperties.getNumber());\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(THING_PROPERTIES_NAME, thingName);\n+\n+            ThingUID thingUID = new ThingUID(THING_TYPE_AUDIO_ZONE, bridgeUID, thingID);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withProperty(\"number\", thingID).withRepresentationProperty(\"number\").withBridge(bridgeUID)\n+                    .withLabel(thingName).build();\n+            thingDiscovered(discoveryResult);\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink audio sources\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverAudioSources() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+\n+        ObjectPropertyRequest<AudioSourceProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.AUDIO_SOURCE, 0, 1).selectNamed().build();\n+\n+        for (AudioSourceProperties audioSourceProperties : objectPropertyRequest) {\n+            String thingName = audioSourceProperties.getName();\n+            String thingID = Integer.toString(audioSourceProperties.getNumber());\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(THING_PROPERTIES_NAME, thingName);\n+\n+            ThingUID thingUID = new ThingUID(THING_TYPE_AUDIO_SOURCE, bridgeUID, thingID);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withProperty(\"number\", thingID).withRepresentationProperty(\"number\").withBridge(bridgeUID)\n+                    .withLabel(thingName).build();\n+            thingDiscovered(discoveryResult);\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink temperature sensors\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverTempSensors() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+        final List<AreaProperties> areas = this.areas;\n+\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<AuxSensorProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.AUX_SENSORS, 0, 1).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (AuxSensorProperties auxSensorProperties : objectPropertyRequest) {\n+                    if (auxSensorProperties.getSensorType() != SENSOR_TYPE_PROGRAMMABLE_ENERGY_SAVER_MODULE\n+                            && auxSensorProperties.getSensorType() != SENSOR_TYPE_HUMIDITY) {\n+                        String thingName = auxSensorProperties.getName();\n+                        String thingID = Integer.toString(auxSensorProperties.getNumber());\n+\n+                        Map<String, Object> properties = new HashMap<>();\n+                        properties.put(THING_PROPERTIES_NAME, thingName);\n+                        properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                        ThingUID thingUID = new ThingUID(THING_TYPE_TEMP_SENSOR, bridgeUID, thingID);\n+\n+                        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID)\n+                                .withProperties(properties).withProperty(\"number\", thingID)\n+                                .withRepresentationProperty(\"number\").withBridge(bridgeUID).withLabel(thingName)\n+                                .build();\n+                        thingDiscovered(discoveryResult);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink humidity sensors\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverHumiditySensors() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+        final List<AreaProperties> areas = this.areas;\n+\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<AuxSensorProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.AUX_SENSORS, 0, 1).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (AuxSensorProperties auxSensorProperties : objectPropertyRequest) {\n+                    if (auxSensorProperties.getSensorType() == SENSOR_TYPE_HUMIDITY) {\n+                        String thingName = auxSensorProperties.getName();\n+                        String thingID = Integer.toString(auxSensorProperties.getNumber());\n+\n+                        Map<String, Object> properties = new HashMap<>();\n+                        properties.put(THING_PROPERTIES_NAME, thingName);\n+                        properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                        ThingUID thingUID = new ThingUID(THING_TYPE_HUMIDITY_SENSOR, bridgeUID, thingID);\n+\n+                        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID)\n+                                .withProperties(properties).withProperty(\"number\", thingID)\n+                                .withRepresentationProperty(\"number\").withBridge(bridgeUID).withLabel(thingName)\n+                                .build();\n+                        thingDiscovered(discoveryResult);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink thermostats\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverThermostats() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+        final List<AreaProperties> areas = this.areas;\n+\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ThermostatProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.THERMOSTAT, 0, 1).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (ThermostatProperties thermostatProperties : objectPropertyRequest) {\n+                    String thingName = thermostatProperties.getName();\n+                    String thingID = Integer.toString(thermostatProperties.getNumber());\n+\n+                    ThingUID thingUID = new ThingUID(THING_TYPE_THERMOSTAT, bridgeUID, thingID);\n+\n+                    Map<String, Object> properties = new HashMap<>();\n+                    properties.put(THING_PROPERTIES_NAME, thingName);\n+                    properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                            .withProperty(\"number\", thingID).withRepresentationProperty(\"number\").withBridge(bridgeUID)\n+                            .withLabel(thingName).build();\n+                    thingDiscovered(discoveryResult);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink areas\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private List<AreaProperties> discoverAreas() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+        List<AreaProperties> areas = new LinkedList<>();\n+\n+        ObjectPropertyRequest<AreaProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.AREA, 0, 1).build();\n+\n+        for (AreaProperties areaProperties : objectPropertyRequest) {\n+            int thingNumber = areaProperties.getNumber();\n+            String thingName = areaProperties.getName();\n+            String thingID = Integer.toString(thingNumber);\n+            ThingUID thingUID = null;\n+\n+            /*\n+             * It seems that for simple OmniLink Controller configurations there\n+             * is only 1 area, without a name. So if there is no name for the\n+             * first area, we will call that Main Area. If other area's name is\n+             * blank, we will not create a thing.\n+             */\n+            if (thingNumber == 1 && \"\".equals(thingName)) {\n+                thingName = \"Main Area\";\n+            } else if (\"\".equals(thingName)) {\n+                break;\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(THING_PROPERTIES_NAME, thingName);\n+\n+            final SystemType systemType = this.systemType;\n+            if (systemType != null) {\n+                switch (systemType) {\n+                    case LUMINA:\n+                        thingUID = new ThingUID(THING_TYPE_LUMINA_AREA, bridgeUID, thingID);\n+                        break;\n+                    case OMNI:\n+                        thingUID = new ThingUID(THING_TYPE_OMNI_AREA, bridgeUID, thingID);\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"Unknown System Type\");\n+                }\n+            }\n+\n+            if (thingUID != null) {\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withProperty(\"number\", thingID).withRepresentationProperty(\"number\").withBridge(bridgeUID)\n+                        .withLabel(thingName).build();\n+                thingDiscovered(discoveryResult);\n+            }\n+\n+            areas.add(areaProperties);\n+        }\n+        return areas;\n+    }\n+\n+    /**\n+     * Discovers OmniLink supported units\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverUnits() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+        final List<AreaProperties> areas = this.areas;\n+\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<UnitProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.UNIT, 0, 1).selectNamed().areaFilter(areaFilter)\n+                        .selectAnyLoad().build();\n+\n+                for (UnitProperties unitProperties : objectPropertyRequest) {\n+                    int thingType = unitProperties.getUnitType();\n+                    String thingName = unitProperties.getName();\n+                    String thingID = Integer.toString(unitProperties.getNumber());\n+                    ThingUID thingUID = null;\n+\n+                    Map<String, Object> properties = new HashMap<>();\n+                    properties.put(THING_PROPERTIES_NAME, thingName);\n+                    properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                    switch (thingType) {\n+                        case UNIT_TYPE_HLC_ROOM:\n+                        case UNIT_TYPE_VIZIARF_ROOM:\n+                            thingUID = new ThingUID(THING_TYPE_ROOM, bridgeUID, thingID);\n+                            break;\n+                        case UNIT_TYPE_FLAG:\n+                            thingUID = new ThingUID(THING_TYPE_FLAG, bridgeUID, thingID);\n+                            break;\n+                        case UNIT_TYPE_OUTPUT:\n+                            thingUID = new ThingUID(THING_TYPE_OUTPUT, bridgeUID, thingID);\n+                            break;\n+                        case UNIT_TYPE_UPB:\n+                        case UNIT_TYPE_HLC_LOAD:\n+                            thingUID = new ThingUID(THING_TYPE_UNIT_UPB, bridgeUID, thingID);\n+                            break;\n+                        case UNIT_TYPE_CENTRALITE:\n+                        case UNIT_TYPE_RADIORA:\n+                        case UNIT_TYPE_VIZIARF_LOAD:\n+                        case UNIT_TYPE_COMPOSE:\n+                            thingUID = new ThingUID(THING_TYPE_DIMMABLE, bridgeUID, thingID);\n+                            break;\n+                        default:\n+                            thingUID = new ThingUID(THING_TYPE_UNIT, bridgeUID, thingID);\n+                            logger.debug(\"Generic unit type: {}\", thingType);\n+                            break;\n+                    }\n+\n+                    DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                            .withProperty(\"number\", thingID).withRepresentationProperty(\"number\").withBridge(bridgeUID)\n+                            .withLabel(thingName).build();\n+                    thingDiscovered(discoveryResult);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Generates zone items\n+     *\n+     * @throws OmniInvalidResponseException\n+     * @throws OmniUnknownMessageTypeException\n+     * @throws BridgeOfflineException\n+     */\n+    private void discoverZones() {\n+        final ThingUID bridgeUID = bridgeHandler.getThing().getUID();\n+        final List<AreaProperties> areas = this.areas;\n+\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ZoneProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.ZONE, 0, 1).selectNamed().areaFilter(areaFilter)\n+                        .build();\n+\n+                for (ZoneProperties zoneProperties : objectPropertyRequest) {\n+                    if (zoneProperties.getZoneType() <= SENSOR_TYPE_PROGRAMMABLE_ENERGY_SAVER_MODULE) {\n+                        String thingName = zoneProperties.getName();\n+                        String thingID = Integer.toString(zoneProperties.getNumber());\n+\n+                        Map<String, Object> properties = new HashMap<>();\n+                        properties.put(THING_PROPERTIES_NAME, thingName);\n+                        properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                        ThingUID thingUID = new ThingUID(THING_TYPE_ZONE, bridgeUID, thingID);\n+\n+                        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID)\n+                                .withProperties(properties).withProperty(\"number\", thingID)\n+                                .withRepresentationProperty(\"number\").withBridge(bridgeUID).withLabel(thingName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 509}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDU1NQ==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546250555", "createdAt": "2020-12-19T15:30:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractAreaHandler.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.AreaAlarm;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AbstractAreaHandler} defines some methods that can be used across\n+ * the many different areas defined in an OmniLink Controller.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractAreaHandler extends AbstractOmnilinkStatusHandler<ExtendedAreaStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractAreaHandler.class);\n+    private final int thingID = getThingNumber();\n+\n+    public AbstractAreaHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing area handler.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDY2OQ==", "bodyText": "Instead of logging this, you could set the Thing OFFLINE with this message as the ThingStatusDetailMessage. It will be shown in the UI, then.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546250669", "createdAt": "2020-12-19T15:31:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractAreaHandler.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.AreaAlarm;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AbstractAreaHandler} defines some methods that can be used across\n+ * the many different areas defined in an OmniLink Controller.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractAreaHandler extends AbstractOmnilinkStatusHandler<ExtendedAreaStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractAreaHandler.class);\n+    private final int thingID = getThingNumber();\n+\n+    public AbstractAreaHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing area handler.\");\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateAreaProperties(bridgeHandler);\n+        } else {\n+            logger.debug(\"Could not connect to Bridge, failed to update area handler properties!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MDg3OQ==", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails. Please check all loggings.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546250879", "createdAt": "2020-12-19T15:34:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractAreaHandler.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.AreaAlarm;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AbstractAreaHandler} defines some methods that can be used across\n+ * the many different areas defined in an OmniLink Controller.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractAreaHandler extends AbstractOmnilinkStatusHandler<ExtendedAreaStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractAreaHandler.class);\n+    private final int thingID = getThingNumber();\n+\n+    public AbstractAreaHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing area handler.\");\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateAreaProperties(bridgeHandler);\n+        } else {\n+            logger.debug(\"Could not connect to Bridge, failed to update area handler properties!\");\n+        }\n+    }\n+\n+    private void updateAreaProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                String thingName = areaProperties.getName();\n+                if (areaProperties.getNumber() == 1 && \"\".equals(thingName)) {\n+                    thingName = \"Main Area\";\n+                }\n+                Map<String, String> properties = editProperties();\n+                properties.put(THING_PROPERTIES_NAME, thingName);\n+                updateProperties(properties);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand: {}, command: {}\", channelUID, command);\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_AREA_ACTIVATE_KEYPAD_EMERGENCY:\n+                handleKeypadEmergency(channelUID, command);\n+                break;\n+            default:\n+                handleSecurityMode(channelUID, command);\n+                break;\n+        }\n+    }\n+\n+    private void handleSecurityMode(ChannelUID channelUID, Command command) {\n+        int mode = getMode(channelUID);\n+\n+        if (!(command instanceof StringType)) {\n+            logger.warn(\"Invalid command: {}, must be StringType\", command);\n+            return;\n+        }\n+\n+        logger.debug(\"Received mode: {}, on area: {}\", mode, thingID);\n+\n+        char[] code = command.toFullString().toCharArray();\n+        if (code.length != 4) {\n+            logger.warn(\"Invalid code length, code must be 4 digits\");\n+        } else {\n+            // mode, codeNum, areaNum\n+            try {\n+                final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+                if (bridge != null) {\n+                    SecurityCodeValidation codeValidation = bridge.reqSecurityCodeValidation(thingID,\n+                            Character.getNumericValue(code[0]), Character.getNumericValue(code[1]),\n+                            Character.getNumericValue(code[2]), Character.getNumericValue(code[3]));\n+                    /*\n+                     * 0 Invalid code\n+                     * 1 Master\n+                     * 2 Manager\n+                     * 3 User\n+                     */\n+                    logger.debug(\"User code number: {}, level: {}\", codeValidation.getCodeNumber(),\n+                            codeValidation.getAuthorityLevel());\n+\n+                    /*\n+                     * Valid user code number are 1-99, 251 is duress code, 0 means code does not exist\n+                     */\n+                    if ((codeValidation.getCodeNumber() > 0 && codeValidation.getCodeNumber() <= 99)\n+                            && codeValidation.getAuthorityLevel() > 0) {\n+                        sendOmnilinkCommand(mode, codeValidation.getCodeNumber(), thingID);\n+                    } else {\n+                        logger.warn(\"System reported an invalid code\");\n+                    }\n+                } else {\n+                    logger.debug(\"Received null bridge while sending area command!\");\n+                }\n+            } catch (OmniInvalidResponseException e) {\n+                logger.debug(\"Could not arm area: {}, are all zones closed?\", e.getMessage());\n+            } catch (OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.debug(\"Could not send area command: {}\", e.getMessage());\n+            }\n+        }\n+        // This is a send only channel, so don't store the user code\n+        updateState(channelUID, UnDefType.UNDEF);\n+    }\n+\n+    /**\n+     * Get the specific mode for the OmniLink type\n+     *\n+     * @param channelUID Channel that maps to a mode\n+     * @return OmniLink representation of mode.\n+     */\n+    protected abstract int getMode(ChannelUID channelUID);\n+\n+    /**\n+     * Get the set of alarms supported by this area handler.\n+     *\n+     * @return Set of alarms for this handler.\n+     */\n+    protected abstract EnumSet<AreaAlarm> getAlarms();\n+\n+    private void handleKeypadEmergency(ChannelUID channelUID, Command command) {\n+        if (command instanceof DecimalType) {\n+            try {\n+                final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+                if (bridge != null) {\n+                    bridge.activateKeypadEmergency(thingID, ((DecimalType) command).intValue());\n+                } else {\n+                    logger.debug(\"Received null bridge while sending Keypad Emergency command!\");\n+                }\n+            } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.debug(\"Received exception while sending command to OmniLink Controller: {}\", e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+        }\n+    }\n+\n+    @Override\n+    public void updateChannels(ExtendedAreaStatus status) {\n+        logger.debug(\"Handle area event: mode: {}, alarms: {}, entryTimer: {}, exitTimer: {}\", status.getMode(),\n+                status.getAlarms(), status.getEntryTimer(), status.getExitTimer());\n+\n+        /*\n+         * According to the specification, if the 3rd bit is set on a area mode, then that mode is in a delayed state.\n+         * Unfortunately, this is not the case, but we can fix that by looking to see if the exit timer\n+         * is set and do this manually.\n+         */\n+        int mode = status.getExitTimer() > 0 ? status.getMode() | 1 << 3 : status.getMode();\n+        updateState(new ChannelUID(thing.getUID(), CHANNEL_AREA_MODE), new DecimalType(mode));\n+\n+        /*\n+         * Alarm status is actually 8 status, packed into each bit, so we loop through to see if a bit is set, note that\n+         * this means you can have multiple alarms set at once\n+         */\n+        BigInteger alarmBits = BigInteger.valueOf(status.getAlarms());\n+        for (AreaAlarm alarm : getAlarms()) {\n+            OnOffType alarmState = alarm.isSet(alarmBits) ? OnOffType.ON : OnOffType.OFF;\n+            updateState(new ChannelUID(thing.getUID(), alarm.getChannelUID()), alarmState);\n+        }\n+    }\n+\n+    public void handleAllOnOffEvent(AllOnOffEvent event) {\n+        ChannelUID activateChannel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_AREA_ALL_ON_OFF_EVENT);\n+        triggerChannel(activateChannel, event.isOn() ? \"ON\" : \"OFF\");\n+    }\n+\n+    @Override\n+    protected Optional<ExtendedAreaStatus> retrieveStatus() {\n+        try {\n+            final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+            if (bridge != null) {\n+                ObjectStatus objStatus = bridge.requestObjectStatus(Message.OBJ_TYPE_AREA, thingID, thingID, true);\n+                return Optional.of((ExtendedAreaStatus) objStatus.getStatuses()[0]);\n+            } else {\n+                logger.debug(\"Received null bridge while updating Area status!\");\n+                return Optional.empty();\n+            }\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.debug(\"Received exception while refreshing area!\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MTI5Nw==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging\nPlease check all.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546251297", "createdAt": "2020-12-19T15:38:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AudioSourceHandler.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.AudioSourceStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioSourceProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AudioSourceHandler} defines some methods that are used to\n+ * interface with an OmniLink Audio Source. This by extension also defines the\n+ * Audio Source thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Brian O'Connell - Initial contribution\n+ */\n+@NonNullByDefault\n+public class AudioSourceHandler extends AbstractOmnilinkHandler {\n+    private final Logger logger = LoggerFactory.getLogger(AudioSourceHandler.class);\n+    private final int POLL_DELAY_SECONDS = 5;\n+    private final int thingID = getThingNumber();\n+    private @Nullable ScheduledFuture<?> scheduledPolling = null;\n+    public @Nullable String number;\n+\n+    public AudioSourceHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Audio Source handler.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MTc0MA==", "bodyText": "Is this necessary?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546251740", "createdAt": "2020-12-19T15:43:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AudioZoneHandler.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.NextPreviousType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.PlayPauseType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AudioZoneHandler} defines some methods that are used to\n+ * interface with an OmniLink Audio Zone. This by extension also defines the\n+ * Audio Zone thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ * @author Ethan Dye - openHAB3 rewrite\n+ */\n+@NonNullByDefault\n+public class AudioZoneHandler extends AbstractOmnilinkStatusHandler<ExtendedAudioZoneStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(AudioZoneHandler.class);\n+    private final int thingID = getThingNumber();\n+    public @Nullable String number;\n+\n+    public AudioZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Audio Zone handler.\");\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateAudioZoneProperties(bridgeHandler);\n+        } else {\n+            logger.debug(\"Could not connect to Bridge, failed to update Audio Zone handler properties!\");\n+        }\n+    }\n+\n+    private void updateAudioZoneProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        ObjectPropertyRequest<AudioZoneProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.AUDIO_ZONE, thingID, 0).selectNamed().build();\n+\n+        for (AudioZoneProperties audioZoneProperties : objectPropertyRequest) {\n+            Map<String, String> properties = editProperties();\n+            properties.put(THING_PROPERTIES_NAME, audioZoneProperties.getName());\n+            updateProperties(properties);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_AUDIO_ZONE_POWER:\n+                if (command instanceof OnOffType) {\n+                    sendOmnilinkCommand(OmniLinkCmd.CMD_AUDIO_ZONE_SET_ON_MUTE.getNumber(),\n+                            OnOffType.OFF.equals((OnOffType) command) ? 0 : 1, thingID);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be OnOffType\", command);\n+                }\n+                break;\n+            case CHANNEL_AUDIO_ZONE_MUTE:\n+                if (command instanceof OnOffType) {\n+                    sendOmnilinkCommand(OmniLinkCmd.CMD_AUDIO_ZONE_SET_ON_MUTE.getNumber(),\n+                            OnOffType.OFF.equals((OnOffType) command) ? 2 : 3, thingID);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be OnOffType\", command);\n+                }\n+                break;\n+            case CHANNEL_AUDIO_ZONE_VOLUME:\n+                if (command instanceof PercentType) {\n+                    sendOmnilinkCommand(OmniLinkCmd.CMD_AUDIO_ZONE_SET_VOLUME.getNumber(),\n+                            ((PercentType) command).intValue(), thingID);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be PercentType\", command);\n+                }\n+                break;\n+            case CHANNEL_AUDIO_ZONE_SOURCE:\n+                if (command instanceof DecimalType) {\n+                    sendOmnilinkCommand(OmniLinkCmd.CMD_AUDIO_ZONE_SET_SOURCE.getNumber(),\n+                            ((DecimalType) command).intValue(), thingID);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            case CHANNEL_AUDIO_ZONE_CONTROL:\n+                if (command instanceof PlayPauseType) {\n+                    handlePlayPauseCommand(channelUID, (PlayPauseType) command);\n+                } else if (command instanceof NextPreviousType) {\n+                    handleNextPreviousCommand(channelUID, (NextPreviousType) command);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be PlayPauseType or NextPreviousType\", command);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Audio Zone thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    private void handlePlayPauseCommand(ChannelUID channelUID, PlayPauseType command) {\n+        logger.debug(\"handlePlayPauseCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        if (bridgeHandler != null) {\n+            Optional<AudioPlayer> audioPlayer = bridgeHandler.getAudioPlayer();\n+            if (audioPlayer.isPresent()) {\n+                AudioPlayer player = audioPlayer.get();\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_AUDIO_ZONE_SET_SOURCE.getNumber(),\n+                        PlayPauseType.PLAY.equals(command) ? player.getPlayCommand() : player.getPauseCommand(),\n+                        thingID);\n+            } else {\n+                logger.warn(\"No Audio Player was detected!\");\n+            }\n+        } else {\n+            logger.debug(\"Received null bridge while sending Audio Zone command!\");\n+        }\n+    }\n+\n+    private void handleNextPreviousCommand(ChannelUID channelUID, NextPreviousType command) {\n+        logger.debug(\"handleNextPreviousCommand called for channel: {}, command: {}\", channelUID.getAsString(),\n+                command);\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        if (bridgeHandler != null) {\n+            Optional<AudioPlayer> audioPlayer = bridgeHandler.getAudioPlayer();\n+            if (audioPlayer.isPresent()) {\n+                AudioPlayer player = audioPlayer.get();\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_AUDIO_ZONE_SET_SOURCE.getNumber(),\n+                        NextPreviousType.NEXT.equals(command) ? player.getNextCommand() : player.getPreviousCommand(),\n+                        thingID);\n+            } else {\n+                logger.warn(\"Audio Player could not be found!\");\n+            }\n+        } else {\n+            logger.debug(\"Received null bridge while sending Audio Zone command!\");\n+        }\n+    }\n+\n+    @Override\n+    public void updateChannels(ExtendedAudioZoneStatus status) {\n+        logger.debug(\"updateChannels called for Audio Zone status: {}\", status);\n+        updateState(CHANNEL_AUDIO_ZONE_POWER, status.isPower() ? OnOffType.ON : OnOffType.OFF);\n+        updateState(CHANNEL_AUDIO_ZONE_MUTE, status.isMute() ? OnOffType.ON : OnOffType.OFF);\n+        updateState(CHANNEL_AUDIO_ZONE_VOLUME, new PercentType(status.getVolume()));\n+        updateState(CHANNEL_AUDIO_ZONE_SOURCE, new DecimalType(status.getSource()));\n+    }\n+\n+    @Override\n+    public void channelLinked(ChannelUID channelUID) {\n+        logger.debug(\"Channel linked: {}, for Audio Zone: {}\", channelUID.getAsString(), thingID);\n+        super.channelLinked(channelUID);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MTk4MQ==", "bodyText": "See above. Necessary? Please check all.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546251981", "createdAt": "2020-12-19T15:45:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/HumiditySensorHandler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link HumiditySensorHandler} defines some methods that are used to\n+ * interface with an OmniLink Humidity Sensor. This by extension also defines\n+ * the Humidity Sensor thing that openHAB will be able to pick up and interface\n+ * with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ * @author Ethan Dye - openHAB3 rewrite\n+ */\n+@NonNullByDefault\n+public class HumiditySensorHandler extends AbstractOmnilinkStatusHandler<ExtendedAuxSensorStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(HumiditySensorHandler.class);\n+    private final int thingID = getThingNumber();\n+    public @Nullable String number;\n+\n+    public HumiditySensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing Humdity Sensor handler.\");\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateTempSensorProperties(bridgeHandler);\n+        } else {\n+            logger.debug(\"Could not connect to Bridge, failed to update Humdity Sensor properties!\");\n+        }\n+    }\n+\n+    private void updateTempSensorProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<AuxSensorProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.AUX_SENSORS, thingID, 0).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (AuxSensorProperties auxSensorProperties : objectPropertyRequest) {\n+                    Map<String, String> properties = editProperties();\n+                    properties.put(THING_PROPERTIES_NAME, auxSensorProperties.getName());\n+                    properties.put(THING_PROPERTIES_AREA, Integer.toString(areaProperties.getNumber()));\n+                    updateProperties(properties);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+\n+        if (!(command instanceof DecimalType)) {\n+            logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+            return;\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_AUX_LOW_SETPOINT:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_HEAT_LOW_POINT.getNumber(),\n+                        TemperatureFormat.FAHRENHEIT.formatToOmni(((DecimalType) command).intValue()), thingID);\n+                break;\n+            case CHANNEL_AUX_HIGH_SETPOINT:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_COOL_HIGH_POINT.getNumber(),\n+                        TemperatureFormat.FAHRENHEIT.formatToOmni(((DecimalType) command).intValue()), thingID);\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Humdity Sensor thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    @Override\n+    public void updateChannels(ExtendedAuxSensorStatus status) {\n+        logger.debug(\"updateChannels called for Humidity Sensor status: {}\", status);\n+        updateState(CHANNEL_AUX_HUMIDITY,\n+                new DecimalType(TemperatureFormat.FAHRENHEIT.omniToFormat(status.getTemperature())));\n+        updateState(CHANNEL_AUX_LOW_SETPOINT,\n+                new DecimalType(TemperatureFormat.FAHRENHEIT.omniToFormat(status.getHeatSetpoint())));\n+        updateState(CHANNEL_AUX_HIGH_SETPOINT,\n+                new DecimalType(TemperatureFormat.FAHRENHEIT.omniToFormat(status.getCoolSetpoint())));\n+    }\n+\n+    @Override\n+    public void channelLinked(ChannelUID channelUID) {\n+        logger.debug(\"Channel linked: {}, for Humidity Sensor: {}\", channelUID.getAsString(), thingID);\n+        super.channelLinked(channelUID);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MjI2MQ==", "bodyText": "Please make these Nullable.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546252261", "createdAt": "2020-12-19T15:47:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,678 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.time.ZonedDateTime;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.config.OmnilinkBridgeConfig;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Connection;\n+import com.digitaldan.jomnilinkII.DisconnectListener;\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.EventLogData;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFeatures;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFormats;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.ButtonEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SwitchPressEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SystemEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.UPBLinkEvent;\n+import com.digitaldan.jomnilinkII.NotificationListener;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniNotConnectedException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link OmnilinkBridgeHandler} defines some methods that are used to\n+ * interface with an OmniLink Controller. This by extension also defines the\n+ * OmniLink bridge that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeHandler extends BaseBridgeHandler implements NotificationListener, DisconnectListener {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkBridgeHandler.class);\n+    private @NonNullByDefault({}) Connection omniConnection = null;\n+    private @NonNullByDefault({}) ScheduledFuture<?> connectJob;\n+    private @NonNullByDefault({}) ScheduledFuture<?> eventPollingJob;\n+    private final int autoReconnectPeriod = 60;\n+    private Optional<AudioPlayer> audioPlayer = Optional.empty();\n+    private @NonNullByDefault({}) SystemType systemType = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MjU3MA==", "bodyText": "Syntactical sugar\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        OmnilinkBridgeConfig config = getThing().getConfiguration().as(OmnilinkBridgeConfig.class);\n          \n          \n            \n                        OmnilinkBridgeConfig config = getConfigAs(OmnilinkBridgeConfig.class);", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546252570", "createdAt": "2020-12-19T15:49:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,678 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.time.ZonedDateTime;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.config.OmnilinkBridgeConfig;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Connection;\n+import com.digitaldan.jomnilinkII.DisconnectListener;\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.EventLogData;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFeatures;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFormats;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.ButtonEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SwitchPressEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SystemEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.UPBLinkEvent;\n+import com.digitaldan.jomnilinkII.NotificationListener;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniNotConnectedException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link OmnilinkBridgeHandler} defines some methods that are used to\n+ * interface with an OmniLink Controller. This by extension also defines the\n+ * OmniLink bridge that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeHandler extends BaseBridgeHandler implements NotificationListener, DisconnectListener {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkBridgeHandler.class);\n+    private @NonNullByDefault({}) Connection omniConnection = null;\n+    private @NonNullByDefault({}) ScheduledFuture<?> connectJob;\n+    private @NonNullByDefault({}) ScheduledFuture<?> eventPollingJob;\n+    private final int autoReconnectPeriod = 60;\n+    private Optional<AudioPlayer> audioPlayer = Optional.empty();\n+    private @NonNullByDefault({}) SystemType systemType = null;\n+    private final Gson gson = new Gson();\n+    private int eventLogNumber = 0;\n+\n+    public OmnilinkBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    public void sendOmnilinkCommand(final int message, final int param1, final int param2)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().controllerCommand(message, param1, param2);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SecurityCodeValidation reqSecurityCodeValidation(int area, int digit1, int digit2, int digit3, int digit4)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSecurityCodeValidation(area, digit1, digit2, digit3, digit4);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public void activateKeypadEmergency(int area, int emergencyType)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().activateKeypadEmergency(area, emergencyType);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemInformation reqSystemInformation()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemInformation();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemFormats reqSystemFormats()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFormats();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    private SystemFeatures reqSystemFeatures()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFeatures();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID, command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_SYSTEMDATE:\n+                if (command instanceof DateTimeType) {\n+                    ZonedDateTime zdt = ((DateTimeType) command).getZonedDateTime();\n+                    boolean inDaylightSavings = zdt.getZone().getRules().isDaylightSavings(zdt.toInstant());\n+                    try {\n+                        getOmniConnection().setTimeCommand(zdt.getYear() - 2000, zdt.getMonthValue(),\n+                                zdt.getDayOfMonth(), zdt.getDayOfWeek().getValue(), zdt.getHour(), zdt.getMinute(),\n+                                inDaylightSavings);\n+                    } catch (IOException | OmniNotConnectedException | OmniInvalidResponseException\n+                            | OmniUnknownMessageTypeException e) {\n+                        logger.debug(\"Could not send Set Time command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DateTimeType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER:\n+                if (command instanceof StringType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_ENABLE_DISABLE_BEEPER.getNumber(),\n+                                ((StringType) command).equals(StringType.valueOf(\"OFF\")) ? 0 : 1, 0);\n+                        updateState(CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be StringType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_BEEP:\n+                if (command instanceof DecimalType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_BEEP.getNumber(),\n+                                ((DecimalType) command).intValue(), 0);\n+                        updateState(CHANNEL_CONSOLE_BEEP, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Bridge thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    private void makeOmnilinkConnection() {\n+        if (omniConnection != null && omniConnection.connected()) {\n+            return;\n+        }\n+\n+        logger.debug(\"Attempting to connect to controller!\");\n+        try {\n+            OmnilinkBridgeConfig config = getThing().getConfiguration().as(OmnilinkBridgeConfig.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MjYxOQ==", "bodyText": "Can these be combined to one else branch?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546252619", "createdAt": "2020-12-19T15:50:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,678 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.time.ZonedDateTime;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.config.OmnilinkBridgeConfig;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Connection;\n+import com.digitaldan.jomnilinkII.DisconnectListener;\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.EventLogData;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFeatures;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFormats;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.ButtonEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SwitchPressEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SystemEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.UPBLinkEvent;\n+import com.digitaldan.jomnilinkII.NotificationListener;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniNotConnectedException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link OmnilinkBridgeHandler} defines some methods that are used to\n+ * interface with an OmniLink Controller. This by extension also defines the\n+ * OmniLink bridge that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeHandler extends BaseBridgeHandler implements NotificationListener, DisconnectListener {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkBridgeHandler.class);\n+    private @NonNullByDefault({}) Connection omniConnection = null;\n+    private @NonNullByDefault({}) ScheduledFuture<?> connectJob;\n+    private @NonNullByDefault({}) ScheduledFuture<?> eventPollingJob;\n+    private final int autoReconnectPeriod = 60;\n+    private Optional<AudioPlayer> audioPlayer = Optional.empty();\n+    private @NonNullByDefault({}) SystemType systemType = null;\n+    private final Gson gson = new Gson();\n+    private int eventLogNumber = 0;\n+\n+    public OmnilinkBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    public void sendOmnilinkCommand(final int message, final int param1, final int param2)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().controllerCommand(message, param1, param2);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SecurityCodeValidation reqSecurityCodeValidation(int area, int digit1, int digit2, int digit3, int digit4)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSecurityCodeValidation(area, digit1, digit2, digit3, digit4);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public void activateKeypadEmergency(int area, int emergencyType)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().activateKeypadEmergency(area, emergencyType);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemInformation reqSystemInformation()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemInformation();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemFormats reqSystemFormats()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFormats();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    private SystemFeatures reqSystemFeatures()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFeatures();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID, command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_SYSTEMDATE:\n+                if (command instanceof DateTimeType) {\n+                    ZonedDateTime zdt = ((DateTimeType) command).getZonedDateTime();\n+                    boolean inDaylightSavings = zdt.getZone().getRules().isDaylightSavings(zdt.toInstant());\n+                    try {\n+                        getOmniConnection().setTimeCommand(zdt.getYear() - 2000, zdt.getMonthValue(),\n+                                zdt.getDayOfMonth(), zdt.getDayOfWeek().getValue(), zdt.getHour(), zdt.getMinute(),\n+                                inDaylightSavings);\n+                    } catch (IOException | OmniNotConnectedException | OmniInvalidResponseException\n+                            | OmniUnknownMessageTypeException e) {\n+                        logger.debug(\"Could not send Set Time command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DateTimeType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER:\n+                if (command instanceof StringType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_ENABLE_DISABLE_BEEPER.getNumber(),\n+                                ((StringType) command).equals(StringType.valueOf(\"OFF\")) ? 0 : 1, 0);\n+                        updateState(CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be StringType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_BEEP:\n+                if (command instanceof DecimalType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_BEEP.getNumber(),\n+                                ((DecimalType) command).intValue(), 0);\n+                        updateState(CHANNEL_CONSOLE_BEEP, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Bridge thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    private void makeOmnilinkConnection() {\n+        if (omniConnection != null && omniConnection.connected()) {\n+            return;\n+        }\n+\n+        logger.debug(\"Attempting to connect to controller!\");\n+        try {\n+            OmnilinkBridgeConfig config = getThing().getConfiguration().as(OmnilinkBridgeConfig.class);\n+\n+            this.omniConnection = new Connection(config.getIpAddress(), config.getPort(),\n+                    config.getKey1() + \":\" + config.getKey2());\n+\n+            /*\n+             * HAI only supports one audio player - cycle through features until we find a feature that is an audio\n+             * player.\n+             */\n+            audioPlayer = reqSystemFeatures().getFeatures().stream()\n+                    .map(featureCode -> AudioPlayer.getAudioPlayerForFeatureCode(featureCode))\n+                    .filter(Optional::isPresent).findFirst().orElse(Optional.empty());\n+\n+            systemType = SystemType.getType(reqSystemInformation().getModel());\n+\n+            if (config.getLogPollingInterval() > 0) {\n+                startEventPolling(config.getLogPollingInterval());\n+            }\n+\n+            if (omniConnection != null) {\n+                omniConnection.enableNotifications();\n+                omniConnection.addNotificationListener(OmnilinkBridgeHandler.this);\n+                omniConnection.addDisconnectListener(this);\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            cancelReconnectJob(false);\n+            updateBridgeProperties();\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        } catch (IOException e) {\n+            final Throwable cause = e.getCause();\n+            if (cause != null) {\n+                final String causeMessage = cause.getMessage();\n+\n+                if (causeMessage != null && causeMessage.contains(\"Connection timed out\")) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"IP Address probably incorrect, timed out creating connection!\");\n+                } else if (cause instanceof SocketException) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, causeMessage);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, causeMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MjY0NA==", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546252644", "createdAt": "2020-12-19T15:51:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,678 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.time.ZonedDateTime;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.config.OmnilinkBridgeConfig;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Connection;\n+import com.digitaldan.jomnilinkII.DisconnectListener;\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.EventLogData;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFeatures;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFormats;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.ButtonEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SwitchPressEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SystemEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.UPBLinkEvent;\n+import com.digitaldan.jomnilinkII.NotificationListener;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniNotConnectedException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link OmnilinkBridgeHandler} defines some methods that are used to\n+ * interface with an OmniLink Controller. This by extension also defines the\n+ * OmniLink bridge that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeHandler extends BaseBridgeHandler implements NotificationListener, DisconnectListener {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkBridgeHandler.class);\n+    private @NonNullByDefault({}) Connection omniConnection = null;\n+    private @NonNullByDefault({}) ScheduledFuture<?> connectJob;\n+    private @NonNullByDefault({}) ScheduledFuture<?> eventPollingJob;\n+    private final int autoReconnectPeriod = 60;\n+    private Optional<AudioPlayer> audioPlayer = Optional.empty();\n+    private @NonNullByDefault({}) SystemType systemType = null;\n+    private final Gson gson = new Gson();\n+    private int eventLogNumber = 0;\n+\n+    public OmnilinkBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    public void sendOmnilinkCommand(final int message, final int param1, final int param2)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().controllerCommand(message, param1, param2);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SecurityCodeValidation reqSecurityCodeValidation(int area, int digit1, int digit2, int digit3, int digit4)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSecurityCodeValidation(area, digit1, digit2, digit3, digit4);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public void activateKeypadEmergency(int area, int emergencyType)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().activateKeypadEmergency(area, emergencyType);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemInformation reqSystemInformation()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemInformation();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemFormats reqSystemFormats()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFormats();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    private SystemFeatures reqSystemFeatures()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFeatures();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID, command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_SYSTEMDATE:\n+                if (command instanceof DateTimeType) {\n+                    ZonedDateTime zdt = ((DateTimeType) command).getZonedDateTime();\n+                    boolean inDaylightSavings = zdt.getZone().getRules().isDaylightSavings(zdt.toInstant());\n+                    try {\n+                        getOmniConnection().setTimeCommand(zdt.getYear() - 2000, zdt.getMonthValue(),\n+                                zdt.getDayOfMonth(), zdt.getDayOfWeek().getValue(), zdt.getHour(), zdt.getMinute(),\n+                                inDaylightSavings);\n+                    } catch (IOException | OmniNotConnectedException | OmniInvalidResponseException\n+                            | OmniUnknownMessageTypeException e) {\n+                        logger.debug(\"Could not send Set Time command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DateTimeType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER:\n+                if (command instanceof StringType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_ENABLE_DISABLE_BEEPER.getNumber(),\n+                                ((StringType) command).equals(StringType.valueOf(\"OFF\")) ? 0 : 1, 0);\n+                        updateState(CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be StringType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_BEEP:\n+                if (command instanceof DecimalType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_BEEP.getNumber(),\n+                                ((DecimalType) command).intValue(), 0);\n+                        updateState(CHANNEL_CONSOLE_BEEP, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Bridge thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    private void makeOmnilinkConnection() {\n+        if (omniConnection != null && omniConnection.connected()) {\n+            return;\n+        }\n+\n+        logger.debug(\"Attempting to connect to controller!\");\n+        try {\n+            OmnilinkBridgeConfig config = getThing().getConfiguration().as(OmnilinkBridgeConfig.class);\n+\n+            this.omniConnection = new Connection(config.getIpAddress(), config.getPort(),\n+                    config.getKey1() + \":\" + config.getKey2());\n+\n+            /*\n+             * HAI only supports one audio player - cycle through features until we find a feature that is an audio\n+             * player.\n+             */\n+            audioPlayer = reqSystemFeatures().getFeatures().stream()\n+                    .map(featureCode -> AudioPlayer.getAudioPlayerForFeatureCode(featureCode))\n+                    .filter(Optional::isPresent).findFirst().orElse(Optional.empty());\n+\n+            systemType = SystemType.getType(reqSystemInformation().getModel());\n+\n+            if (config.getLogPollingInterval() > 0) {\n+                startEventPolling(config.getLogPollingInterval());\n+            }\n+\n+            if (omniConnection != null) {\n+                omniConnection.enableNotifications();\n+                omniConnection.addNotificationListener(OmnilinkBridgeHandler.this);\n+                omniConnection.addDisconnectListener(this);\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            cancelReconnectJob(false);\n+            updateBridgeProperties();\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        } catch (IOException e) {\n+            final Throwable cause = e.getCause();\n+            if (cause != null) {\n+                final String causeMessage = cause.getMessage();\n+\n+                if (causeMessage != null && causeMessage.contains(\"Connection timed out\")) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"IP Address probably incorrect, timed out creating connection!\");\n+                } else if (cause instanceof SocketException) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, causeMessage);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, causeMessage);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Mjk2NA==", "bodyText": "Would this work, too?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                triggerChannel(channel, event.getType().toString().substring(\"PHONE_LINE_\".length()));\n          \n          \n            \n                                triggerChannel(channel, event.getType().toString().replaceAll(\"^PHONE_LINE_\", \"\"));", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546252964", "createdAt": "2020-12-19T15:54:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,678 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.time.ZonedDateTime;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.config.OmnilinkBridgeConfig;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Connection;\n+import com.digitaldan.jomnilinkII.DisconnectListener;\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.EventLogData;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFeatures;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFormats;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.ButtonEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SwitchPressEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SystemEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.UPBLinkEvent;\n+import com.digitaldan.jomnilinkII.NotificationListener;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniNotConnectedException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link OmnilinkBridgeHandler} defines some methods that are used to\n+ * interface with an OmniLink Controller. This by extension also defines the\n+ * OmniLink bridge that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeHandler extends BaseBridgeHandler implements NotificationListener, DisconnectListener {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkBridgeHandler.class);\n+    private @NonNullByDefault({}) Connection omniConnection = null;\n+    private @NonNullByDefault({}) ScheduledFuture<?> connectJob;\n+    private @NonNullByDefault({}) ScheduledFuture<?> eventPollingJob;\n+    private final int autoReconnectPeriod = 60;\n+    private Optional<AudioPlayer> audioPlayer = Optional.empty();\n+    private @NonNullByDefault({}) SystemType systemType = null;\n+    private final Gson gson = new Gson();\n+    private int eventLogNumber = 0;\n+\n+    public OmnilinkBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    public void sendOmnilinkCommand(final int message, final int param1, final int param2)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().controllerCommand(message, param1, param2);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SecurityCodeValidation reqSecurityCodeValidation(int area, int digit1, int digit2, int digit3, int digit4)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSecurityCodeValidation(area, digit1, digit2, digit3, digit4);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public void activateKeypadEmergency(int area, int emergencyType)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().activateKeypadEmergency(area, emergencyType);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemInformation reqSystemInformation()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemInformation();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemFormats reqSystemFormats()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFormats();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    private SystemFeatures reqSystemFeatures()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFeatures();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID, command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_SYSTEMDATE:\n+                if (command instanceof DateTimeType) {\n+                    ZonedDateTime zdt = ((DateTimeType) command).getZonedDateTime();\n+                    boolean inDaylightSavings = zdt.getZone().getRules().isDaylightSavings(zdt.toInstant());\n+                    try {\n+                        getOmniConnection().setTimeCommand(zdt.getYear() - 2000, zdt.getMonthValue(),\n+                                zdt.getDayOfMonth(), zdt.getDayOfWeek().getValue(), zdt.getHour(), zdt.getMinute(),\n+                                inDaylightSavings);\n+                    } catch (IOException | OmniNotConnectedException | OmniInvalidResponseException\n+                            | OmniUnknownMessageTypeException e) {\n+                        logger.debug(\"Could not send Set Time command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DateTimeType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER:\n+                if (command instanceof StringType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_ENABLE_DISABLE_BEEPER.getNumber(),\n+                                ((StringType) command).equals(StringType.valueOf(\"OFF\")) ? 0 : 1, 0);\n+                        updateState(CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be StringType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_BEEP:\n+                if (command instanceof DecimalType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_BEEP.getNumber(),\n+                                ((DecimalType) command).intValue(), 0);\n+                        updateState(CHANNEL_CONSOLE_BEEP, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Bridge thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    private void makeOmnilinkConnection() {\n+        if (omniConnection != null && omniConnection.connected()) {\n+            return;\n+        }\n+\n+        logger.debug(\"Attempting to connect to controller!\");\n+        try {\n+            OmnilinkBridgeConfig config = getThing().getConfiguration().as(OmnilinkBridgeConfig.class);\n+\n+            this.omniConnection = new Connection(config.getIpAddress(), config.getPort(),\n+                    config.getKey1() + \":\" + config.getKey2());\n+\n+            /*\n+             * HAI only supports one audio player - cycle through features until we find a feature that is an audio\n+             * player.\n+             */\n+            audioPlayer = reqSystemFeatures().getFeatures().stream()\n+                    .map(featureCode -> AudioPlayer.getAudioPlayerForFeatureCode(featureCode))\n+                    .filter(Optional::isPresent).findFirst().orElse(Optional.empty());\n+\n+            systemType = SystemType.getType(reqSystemInformation().getModel());\n+\n+            if (config.getLogPollingInterval() > 0) {\n+                startEventPolling(config.getLogPollingInterval());\n+            }\n+\n+            if (omniConnection != null) {\n+                omniConnection.enableNotifications();\n+                omniConnection.addNotificationListener(OmnilinkBridgeHandler.this);\n+                omniConnection.addDisconnectListener(this);\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            cancelReconnectJob(false);\n+            updateBridgeProperties();\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        } catch (IOException e) {\n+            final Throwable cause = e.getCause();\n+            if (cause != null) {\n+                final String causeMessage = cause.getMessage();\n+\n+                if (causeMessage != null && causeMessage.contains(\"Connection timed out\")) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"IP Address probably incorrect, timed out creating connection!\");\n+                } else if (cause instanceof SocketException) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, causeMessage);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, causeMessage);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } catch (Exception e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            logger.debug(\"Error connecting to OmniLink Controller: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void objectStatusNotification(@Nullable ObjectStatus objectStatus) {\n+        if (objectStatus != null) {\n+            Status[] statuses = objectStatus.getStatuses();\n+            for (Status status : statuses) {\n+                if (status instanceof ExtendedUnitStatus) {\n+                    ExtendedUnitStatus unitStatus = (ExtendedUnitStatus) status;\n+                    int unitNumber = unitStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Unit: {}, status: {}\", unitNumber, unitStatus);\n+                    Optional<Thing> theThing = getUnitThing(unitNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((UnitHandler) theHandler).handleStatus(unitStatus));\n+                } else if (status instanceof ExtendedZoneStatus) {\n+                    ExtendedZoneStatus zoneStatus = (ExtendedZoneStatus) status;\n+                    int zoneNumber = zoneStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Zone: {}, status: {}\", zoneNumber, zoneStatus);\n+                    Optional<Thing> theThing = getChildThing(THING_TYPE_ZONE, zoneNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((ZoneHandler) theHandler).handleStatus(zoneStatus));\n+                } else if (status instanceof ExtendedAreaStatus) {\n+                    final SystemType systemType = this.systemType;\n+                    ExtendedAreaStatus areaStatus = (ExtendedAreaStatus) status;\n+                    int areaNumber = areaStatus.getNumber();\n+\n+                    if (systemType != null) {\n+                        logger.debug(\"Received status update for Area: {}, status: {}\", areaNumber, areaStatus);\n+                        Optional<Thing> theThing;\n+                        switch (systemType) {\n+                            case OMNI:\n+                                theThing = getChildThing(THING_TYPE_OMNI_AREA, areaNumber);\n+                                break;\n+                            case LUMINA:\n+                                theThing = getChildThing(THING_TYPE_LUMINA_AREA, areaNumber);\n+                                break;\n+                            default:\n+                                theThing = Optional.empty();\n+                        }\n+                        theThing.map(Thing::getHandler)\n+                                .ifPresent(theHandler -> ((AbstractAreaHandler) theHandler).handleStatus(areaStatus));\n+                    } else {\n+                        logger.debug(\"Received null System Type!\");\n+                    }\n+                } else if (status instanceof ExtendedAccessControlReaderLockStatus) {\n+                    ExtendedAccessControlReaderLockStatus lockStatus = (ExtendedAccessControlReaderLockStatus) status;\n+                    int lockNumber = lockStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Lock: {}, status: {}\", lockNumber, lockStatus);\n+                    Optional<Thing> theThing = getChildThing(THING_TYPE_LOCK, lockNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((LockHandler) theHandler).handleStatus(lockStatus));\n+                } else if (status instanceof ExtendedThermostatStatus) {\n+                    ExtendedThermostatStatus thermostatStatus = (ExtendedThermostatStatus) status;\n+                    int thermostatNumber = thermostatStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Thermostat: {}, status: {}\", thermostatNumber,\n+                            thermostatStatus);\n+                    Optional<Thing> theThing = getChildThing(THING_TYPE_THERMOSTAT, thermostatNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((ThermostatHandler) theHandler).handleStatus(thermostatStatus));\n+                } else if (status instanceof ExtendedAudioZoneStatus) {\n+                    ExtendedAudioZoneStatus audioZoneStatus = (ExtendedAudioZoneStatus) status;\n+                    int audioZoneNumber = audioZoneStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Audio Zone: {}, status: {}\", audioZoneNumber,\n+                            audioZoneStatus);\n+                    Optional<Thing> theThing = getChildThing(THING_TYPE_AUDIO_ZONE, audioZoneNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((AudioZoneHandler) theHandler).handleStatus(audioZoneStatus));\n+                } else if (status instanceof ExtendedAuxSensorStatus) {\n+                    ExtendedAuxSensorStatus auxSensorStatus = (ExtendedAuxSensorStatus) status;\n+                    int auxSensorNumber = auxSensorStatus.getNumber();\n+\n+                    // Aux Sensors can be either temperature or humidity, need to check both.\n+                    Optional<Thing> tempThing = getChildThing(THING_TYPE_TEMP_SENSOR, auxSensorNumber);\n+                    Optional<Thing> humidityThing = getChildThing(THING_TYPE_HUMIDITY_SENSOR, auxSensorNumber);\n+                    if (tempThing.isPresent()) {\n+                        logger.debug(\"Received status update for Temperature Sensor: {}, status: {}\", auxSensorNumber,\n+                                auxSensorStatus);\n+                        tempThing.map(Thing::getHandler).ifPresent(\n+                                theHandler -> ((TempSensorHandler) theHandler).handleStatus(auxSensorStatus));\n+                    }\n+                    if (humidityThing.isPresent()) {\n+                        logger.debug(\"Received status update for Humidity Sensor: {}, status: {}\", auxSensorNumber,\n+                                auxSensorStatus);\n+                        humidityThing.map(Thing::getHandler).ifPresent(\n+                                theHandler -> ((HumiditySensorHandler) theHandler).handleStatus(auxSensorStatus));\n+                    }\n+                } else {\n+                    logger.debug(\"Received Object Status Notification that was not processed: {}\", objectStatus);\n+                }\n+            }\n+        } else {\n+            logger.debug(\"Received null Object Status Notification!\");\n+        }\n+    }\n+\n+    @Override\n+    public void systemEventNotification(@Nullable SystemEvent event) {\n+        if (event != null) {\n+            logger.debug(\"Received System Event Notification of type: {}\", event.getType());\n+            switch (event.getType()) {\n+                case PHONE_LINE_DEAD:\n+                case PHONE_LINE_OFF_HOOK:\n+                case PHONE_LINE_ON_HOOK:\n+                case PHONE_LINE_RING:\n+                    ChannelUID channel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_PHONE_LINE_EVENT);\n+                    triggerChannel(channel, event.getType().toString().substring(\"PHONE_LINE_\".length()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 378}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MzIwNg==", "bodyText": "The framework takes care of the Thing status when disposing. So, this could be removed.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546253206", "createdAt": "2020-12-19T15:56:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,678 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.time.ZonedDateTime;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.config.OmnilinkBridgeConfig;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Connection;\n+import com.digitaldan.jomnilinkII.DisconnectListener;\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.EventLogData;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFeatures;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFormats;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.ButtonEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SwitchPressEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SystemEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.UPBLinkEvent;\n+import com.digitaldan.jomnilinkII.NotificationListener;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniNotConnectedException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link OmnilinkBridgeHandler} defines some methods that are used to\n+ * interface with an OmniLink Controller. This by extension also defines the\n+ * OmniLink bridge that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeHandler extends BaseBridgeHandler implements NotificationListener, DisconnectListener {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkBridgeHandler.class);\n+    private @NonNullByDefault({}) Connection omniConnection = null;\n+    private @NonNullByDefault({}) ScheduledFuture<?> connectJob;\n+    private @NonNullByDefault({}) ScheduledFuture<?> eventPollingJob;\n+    private final int autoReconnectPeriod = 60;\n+    private Optional<AudioPlayer> audioPlayer = Optional.empty();\n+    private @NonNullByDefault({}) SystemType systemType = null;\n+    private final Gson gson = new Gson();\n+    private int eventLogNumber = 0;\n+\n+    public OmnilinkBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    public void sendOmnilinkCommand(final int message, final int param1, final int param2)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().controllerCommand(message, param1, param2);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SecurityCodeValidation reqSecurityCodeValidation(int area, int digit1, int digit2, int digit3, int digit4)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSecurityCodeValidation(area, digit1, digit2, digit3, digit4);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public void activateKeypadEmergency(int area, int emergencyType)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().activateKeypadEmergency(area, emergencyType);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemInformation reqSystemInformation()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemInformation();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemFormats reqSystemFormats()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFormats();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    private SystemFeatures reqSystemFeatures()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFeatures();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID, command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_SYSTEMDATE:\n+                if (command instanceof DateTimeType) {\n+                    ZonedDateTime zdt = ((DateTimeType) command).getZonedDateTime();\n+                    boolean inDaylightSavings = zdt.getZone().getRules().isDaylightSavings(zdt.toInstant());\n+                    try {\n+                        getOmniConnection().setTimeCommand(zdt.getYear() - 2000, zdt.getMonthValue(),\n+                                zdt.getDayOfMonth(), zdt.getDayOfWeek().getValue(), zdt.getHour(), zdt.getMinute(),\n+                                inDaylightSavings);\n+                    } catch (IOException | OmniNotConnectedException | OmniInvalidResponseException\n+                            | OmniUnknownMessageTypeException e) {\n+                        logger.debug(\"Could not send Set Time command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DateTimeType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER:\n+                if (command instanceof StringType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_ENABLE_DISABLE_BEEPER.getNumber(),\n+                                ((StringType) command).equals(StringType.valueOf(\"OFF\")) ? 0 : 1, 0);\n+                        updateState(CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be StringType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_BEEP:\n+                if (command instanceof DecimalType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_BEEP.getNumber(),\n+                                ((DecimalType) command).intValue(), 0);\n+                        updateState(CHANNEL_CONSOLE_BEEP, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Bridge thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    private void makeOmnilinkConnection() {\n+        if (omniConnection != null && omniConnection.connected()) {\n+            return;\n+        }\n+\n+        logger.debug(\"Attempting to connect to controller!\");\n+        try {\n+            OmnilinkBridgeConfig config = getThing().getConfiguration().as(OmnilinkBridgeConfig.class);\n+\n+            this.omniConnection = new Connection(config.getIpAddress(), config.getPort(),\n+                    config.getKey1() + \":\" + config.getKey2());\n+\n+            /*\n+             * HAI only supports one audio player - cycle through features until we find a feature that is an audio\n+             * player.\n+             */\n+            audioPlayer = reqSystemFeatures().getFeatures().stream()\n+                    .map(featureCode -> AudioPlayer.getAudioPlayerForFeatureCode(featureCode))\n+                    .filter(Optional::isPresent).findFirst().orElse(Optional.empty());\n+\n+            systemType = SystemType.getType(reqSystemInformation().getModel());\n+\n+            if (config.getLogPollingInterval() > 0) {\n+                startEventPolling(config.getLogPollingInterval());\n+            }\n+\n+            if (omniConnection != null) {\n+                omniConnection.enableNotifications();\n+                omniConnection.addNotificationListener(OmnilinkBridgeHandler.this);\n+                omniConnection.addDisconnectListener(this);\n+            }\n+\n+            updateStatus(ThingStatus.ONLINE);\n+            cancelReconnectJob(false);\n+            updateBridgeProperties();\n+        } catch (UnknownHostException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        } catch (IOException e) {\n+            final Throwable cause = e.getCause();\n+            if (cause != null) {\n+                final String causeMessage = cause.getMessage();\n+\n+                if (causeMessage != null && causeMessage.contains(\"Connection timed out\")) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"IP Address probably incorrect, timed out creating connection!\");\n+                } else if (cause instanceof SocketException) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, causeMessage);\n+                } else {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, causeMessage);\n+                }\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+            }\n+        } catch (Exception e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            logger.debug(\"Error connecting to OmniLink Controller: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void objectStatusNotification(@Nullable ObjectStatus objectStatus) {\n+        if (objectStatus != null) {\n+            Status[] statuses = objectStatus.getStatuses();\n+            for (Status status : statuses) {\n+                if (status instanceof ExtendedUnitStatus) {\n+                    ExtendedUnitStatus unitStatus = (ExtendedUnitStatus) status;\n+                    int unitNumber = unitStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Unit: {}, status: {}\", unitNumber, unitStatus);\n+                    Optional<Thing> theThing = getUnitThing(unitNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((UnitHandler) theHandler).handleStatus(unitStatus));\n+                } else if (status instanceof ExtendedZoneStatus) {\n+                    ExtendedZoneStatus zoneStatus = (ExtendedZoneStatus) status;\n+                    int zoneNumber = zoneStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Zone: {}, status: {}\", zoneNumber, zoneStatus);\n+                    Optional<Thing> theThing = getChildThing(THING_TYPE_ZONE, zoneNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((ZoneHandler) theHandler).handleStatus(zoneStatus));\n+                } else if (status instanceof ExtendedAreaStatus) {\n+                    final SystemType systemType = this.systemType;\n+                    ExtendedAreaStatus areaStatus = (ExtendedAreaStatus) status;\n+                    int areaNumber = areaStatus.getNumber();\n+\n+                    if (systemType != null) {\n+                        logger.debug(\"Received status update for Area: {}, status: {}\", areaNumber, areaStatus);\n+                        Optional<Thing> theThing;\n+                        switch (systemType) {\n+                            case OMNI:\n+                                theThing = getChildThing(THING_TYPE_OMNI_AREA, areaNumber);\n+                                break;\n+                            case LUMINA:\n+                                theThing = getChildThing(THING_TYPE_LUMINA_AREA, areaNumber);\n+                                break;\n+                            default:\n+                                theThing = Optional.empty();\n+                        }\n+                        theThing.map(Thing::getHandler)\n+                                .ifPresent(theHandler -> ((AbstractAreaHandler) theHandler).handleStatus(areaStatus));\n+                    } else {\n+                        logger.debug(\"Received null System Type!\");\n+                    }\n+                } else if (status instanceof ExtendedAccessControlReaderLockStatus) {\n+                    ExtendedAccessControlReaderLockStatus lockStatus = (ExtendedAccessControlReaderLockStatus) status;\n+                    int lockNumber = lockStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Lock: {}, status: {}\", lockNumber, lockStatus);\n+                    Optional<Thing> theThing = getChildThing(THING_TYPE_LOCK, lockNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((LockHandler) theHandler).handleStatus(lockStatus));\n+                } else if (status instanceof ExtendedThermostatStatus) {\n+                    ExtendedThermostatStatus thermostatStatus = (ExtendedThermostatStatus) status;\n+                    int thermostatNumber = thermostatStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Thermostat: {}, status: {}\", thermostatNumber,\n+                            thermostatStatus);\n+                    Optional<Thing> theThing = getChildThing(THING_TYPE_THERMOSTAT, thermostatNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((ThermostatHandler) theHandler).handleStatus(thermostatStatus));\n+                } else if (status instanceof ExtendedAudioZoneStatus) {\n+                    ExtendedAudioZoneStatus audioZoneStatus = (ExtendedAudioZoneStatus) status;\n+                    int audioZoneNumber = audioZoneStatus.getNumber();\n+\n+                    logger.debug(\"Received status update for Audio Zone: {}, status: {}\", audioZoneNumber,\n+                            audioZoneStatus);\n+                    Optional<Thing> theThing = getChildThing(THING_TYPE_AUDIO_ZONE, audioZoneNumber);\n+                    theThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((AudioZoneHandler) theHandler).handleStatus(audioZoneStatus));\n+                } else if (status instanceof ExtendedAuxSensorStatus) {\n+                    ExtendedAuxSensorStatus auxSensorStatus = (ExtendedAuxSensorStatus) status;\n+                    int auxSensorNumber = auxSensorStatus.getNumber();\n+\n+                    // Aux Sensors can be either temperature or humidity, need to check both.\n+                    Optional<Thing> tempThing = getChildThing(THING_TYPE_TEMP_SENSOR, auxSensorNumber);\n+                    Optional<Thing> humidityThing = getChildThing(THING_TYPE_HUMIDITY_SENSOR, auxSensorNumber);\n+                    if (tempThing.isPresent()) {\n+                        logger.debug(\"Received status update for Temperature Sensor: {}, status: {}\", auxSensorNumber,\n+                                auxSensorStatus);\n+                        tempThing.map(Thing::getHandler).ifPresent(\n+                                theHandler -> ((TempSensorHandler) theHandler).handleStatus(auxSensorStatus));\n+                    }\n+                    if (humidityThing.isPresent()) {\n+                        logger.debug(\"Received status update for Humidity Sensor: {}, status: {}\", auxSensorNumber,\n+                                auxSensorStatus);\n+                        humidityThing.map(Thing::getHandler).ifPresent(\n+                                theHandler -> ((HumiditySensorHandler) theHandler).handleStatus(auxSensorStatus));\n+                    }\n+                } else {\n+                    logger.debug(\"Received Object Status Notification that was not processed: {}\", objectStatus);\n+                }\n+            }\n+        } else {\n+            logger.debug(\"Received null Object Status Notification!\");\n+        }\n+    }\n+\n+    @Override\n+    public void systemEventNotification(@Nullable SystemEvent event) {\n+        if (event != null) {\n+            logger.debug(\"Received System Event Notification of type: {}\", event.getType());\n+            switch (event.getType()) {\n+                case PHONE_LINE_DEAD:\n+                case PHONE_LINE_OFF_HOOK:\n+                case PHONE_LINE_ON_HOOK:\n+                case PHONE_LINE_RING:\n+                    ChannelUID channel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_PHONE_LINE_EVENT);\n+                    triggerChannel(channel, event.getType().toString().substring(\"PHONE_LINE_\".length()));\n+                    break;\n+                case AC_POWER_OFF:\n+                case AC_POWER_RESTORED:\n+                    ChannelUID acChannel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_AC_POWER_EVENT);\n+                    triggerChannel(acChannel, event.getType().toString().substring(\"AC_POWER_\".length()));\n+                    break;\n+                case BATTERY_LOW:\n+                case BATTERY_OK:\n+                    ChannelUID batteryChannel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_BATTERY_EVENT);\n+                    triggerChannel(batteryChannel, event.getType().toString().substring(\"BATTERY__\".length()));\n+                    break;\n+                case DCM_OK:\n+                case DCM_TROUBLE:\n+                    ChannelUID dcmChannel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_DCM_EVENT);\n+                    triggerChannel(dcmChannel, event.getType().toString().substring(\"DCM_\".length()));\n+                    break;\n+                case ENERGY_COST_CRITICAL:\n+                case ENERGY_COST_HIGH:\n+                case ENERGY_COST_LOW:\n+                case ENERGY_COST_MID:\n+                    ChannelUID energyChannel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_ENERGY_COST_EVENT);\n+                    triggerChannel(energyChannel, event.getType().toString().substring(\"ENERGY_COST_\".length()));\n+                    break;\n+                case CAMERA_1_TRIGGER:\n+                case CAMERA_2_TRIGGER:\n+                case CAMERA_3_TRIGGER:\n+                case CAMERA_4_TRIGGER:\n+                case CAMERA_5_TRIGGER:\n+                case CAMERA_6_TRIGGER:\n+                    ChannelUID cameraChannel = new ChannelUID(getThing().getUID(),\n+                            TRIGGER_CHANNEL_CAMERA_TRIGGER_EVENT);\n+                    triggerChannel(cameraChannel, String.valueOf(event.getType().toString().charAt(8)));\n+                    break;\n+                case BUTTON:\n+                    Optional<Thing> buttonThing = getChildThing(THING_TYPE_BUTTON,\n+                            ((ButtonEvent) event).getButtonNumber());\n+                    buttonThing.map(Thing::getHandler)\n+                            .ifPresent(theHandler -> ((ButtonHandler) theHandler).buttonActivated());\n+                    break;\n+                case ALL_ON_OFF:\n+                    Optional<Thing> areaThing = getChildThing(THING_TYPE_OMNI_AREA, ((AllOnOffEvent) event).getArea());\n+                    if (areaThing.isPresent()) {\n+                        logger.debug(\"Thing for allOnOff event: {}\", areaThing.get().getUID());\n+                        areaThing.map(Thing::getHandler).ifPresent(theHandler -> ((AbstractAreaHandler) theHandler)\n+                                .handleAllOnOffEvent((AllOnOffEvent) event));\n+                    }\n+                    break;\n+                case UPB_LINK:\n+                    UPBLinkEvent linkEvent = (UPBLinkEvent) event;\n+                    UPBLinkEvent.Command command = linkEvent.getLinkCommand();\n+                    int link = linkEvent.getLinkNumber();\n+                    handleUPBLink(link, command);\n+                    break;\n+                case ALC_UPB_RADIORA_STARLITE_SWITCH_PRESS:\n+                    SwitchPressEvent switchPressEvent = (SwitchPressEvent) event;\n+                    int unitNumber = switchPressEvent.getUnitNumber();\n+\n+                    Optional<Thing> unitThing = getUnitThing(unitNumber);\n+                    unitThing.map(Thing::getHandler).ifPresent(\n+                            theHandler -> ((UnitHandler) theHandler).handleSwitchPressEvent(switchPressEvent));\n+                    break;\n+                default:\n+                    logger.warn(\"Ignoring System Event Notification of type: {}\", event.getType());\n+            }\n+        } else {\n+            logger.debug(\"Received null System Event Notification!\");\n+        }\n+    }\n+\n+    private void handleUPBLink(int link, UPBLinkEvent.Command command) {\n+        final ChannelUID activateChannel;\n+\n+        if (command == UPBLinkEvent.Command.ACTIVATED) {\n+            activateChannel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_UPB_LINK_ACTIVATED_EVENT);\n+        } else if (command == UPBLinkEvent.Command.DEACTIVATED) {\n+            activateChannel = new ChannelUID(getThing().getUID(), TRIGGER_CHANNEL_UPB_LINK_DEACTIVATED_EVENT);\n+        } else {\n+            logger.debug(\"Received unsupported UPB link event: {}\", command);\n+            return;\n+        }\n+        triggerChannel(activateChannel, Integer.toString(link));\n+    }\n+\n+    @Override\n+    public void notConnectedEvent(@Nullable Exception e) {\n+        if (e != null) {\n+            logger.debug(\"Received an OmniLink Controller not connected event: {}\", e.getMessage());\n+            setOfflineAndReconnect(e.getMessage());\n+        }\n+    }\n+\n+    private void getSystemStatus() throws IOException, OmniNotConnectedException, OmniInvalidResponseException,\n+            OmniUnknownMessageTypeException {\n+        SystemStatus status = getOmniConnection().reqSystemStatus();\n+        logger.debug(\"Received system status: {}\", status);\n+        // Let's update system time\n+        String dateString = new StringBuilder().append(2000 + status.getYear()).append(\"-\")\n+                .append(String.format(\"%02d\", status.getMonth())).append(\"-\")\n+                .append(String.format(\"%02d\", status.getDay())).append(\"T\")\n+                .append(String.format(\"%02d\", status.getHour())).append(\":\")\n+                .append(String.format(\"%02d\", status.getMinute())).append(\":\")\n+                .append(String.format(\"%02d\", status.getSecond())).toString();\n+        updateState(CHANNEL_SYSTEMDATE, new DateTimeType(dateString));\n+    }\n+\n+    public Message reqObjectProperties(int objectType, int objectNum, int direction, int filter1, int filter2,\n+            int filter3) throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqObjectProperties(objectType, objectNum, direction, filter1, filter2, filter3);\n+        } catch (OmniNotConnectedException | IOException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public Message requestAudioSourceStatus(final int source, final int position)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqAudioSourceStatus(source, position);\n+        } catch (OmniNotConnectedException | IOException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public ObjectStatus requestObjectStatus(final int objType, final int startObject, final int endObject,\n+            boolean extended)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqObjectStatus(objType, startObject, endObject, extended);\n+        } catch (OmniNotConnectedException | IOException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public Optional<TemperatureFormat> getTemperatureFormat() {\n+        try {\n+            return Optional.of(TemperatureFormat.valueOf(reqSystemFormats().getTempFormat()));\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.debug(\"Could not request temperature format from controller: {}\", e.getMessage());\n+            return Optional.empty();\n+        }\n+    }\n+\n+    @Override\n+    public void channelLinked(ChannelUID channelUID) {\n+        try {\n+            getSystemStatus();\n+            updateState(CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER, UnDefType.UNDEF);\n+            updateState(CHANNEL_CONSOLE_BEEP, UnDefType.UNDEF);\n+        } catch (IOException | OmniNotConnectedException | OmniInvalidResponseException\n+                | OmniUnknownMessageTypeException e) {\n+            logger.warn(\"Unable to update bridge channels: {}\", e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 538}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MzU5MA==", "bodyText": "Is this still needed? CELSIUS doesn't seem to be used.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546253590", "createdAt": "2020-12-19T16:00:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/TemperatureFormat.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import com.digitaldan.jomnilinkII.MessageUtils;\n+\n+/**\n+ * The {@link TemperatureFormat} defines some methods that are used to\n+ * convert OmniLink temperature values into Fahrenheit or Celsius.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+public enum TemperatureFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Mzg2Mw==", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be warn. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546253863", "createdAt": "2020-12-19T16:03:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/ZoneHandler.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link ZoneHandler} defines some methods that are used to\n+ * interface with an OmniLink Zone. This by extension also defines the\n+ * OmniPro Zone thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZoneHandler extends AbstractOmnilinkStatusHandler<ExtendedZoneStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(ZoneHandler.class);\n+    public @Nullable String number;\n+\n+    public ZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing zone handler.\");\n+        final OmnilinkBridgeHandler bridgeHandler = super.getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateZoneProperties(bridgeHandler);\n+        } else {\n+            logger.debug(\"Could not connect to Bridge, failed to update Zone properties!\");\n+        }\n+    }\n+\n+    private void updateZoneProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = super.getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = super.bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ZoneProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.ZONE, getThingNumber(), 0).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (ZoneProperties zoneProperties : objectPropertyRequest) {\n+                    if (zoneProperties.getZoneType() <= SENSOR_TYPE_PROGRAMMABLE_ENERGY_SAVER_MODULE) {\n+                        Map<String, String> properties = editProperties();\n+                        properties.put(THING_PROPERTIES_NAME, zoneProperties.getName());\n+                        properties.put(THING_PROPERTIES_AREA, Integer.toString(areaProperties.getNumber()));\n+                        updateProperties(properties);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        int mode;\n+\n+        if (!(command instanceof StringType)) {\n+            logger.warn(\"Invalid command: {}, must be StringType\", command);\n+            return;\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_ZONE_BYPASS:\n+                mode = OmniLinkCmd.CMD_SECURITY_BYPASS_ZONE.getNumber();\n+                break;\n+            case CHANNEL_ZONE_RESTORE:\n+                mode = OmniLinkCmd.CMD_SECURITY_RESTORE_ZONE.getNumber();\n+                break;\n+            default:\n+                mode = -1;\n+        }\n+        int zoneNumber = getThingNumber();\n+        int areaNumber = getAreaNumber();\n+        logger.debug(\"mode {} on zone {} with code {}\", mode, zoneNumber, command.toFullString());\n+        char[] code = command.toFullString().toCharArray();\n+        if (code.length != 4) {\n+            logger.error(\"Invalid code length, code must be 4 digits\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1MzkzNw==", "bodyText": "See above. Logging stack trace and logging to error.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546253937", "createdAt": "2020-12-19T16:04:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/ZoneHandler.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link ZoneHandler} defines some methods that are used to\n+ * interface with an OmniLink Zone. This by extension also defines the\n+ * OmniPro Zone thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZoneHandler extends AbstractOmnilinkStatusHandler<ExtendedZoneStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(ZoneHandler.class);\n+    public @Nullable String number;\n+\n+    public ZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing zone handler.\");\n+        final OmnilinkBridgeHandler bridgeHandler = super.getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateZoneProperties(bridgeHandler);\n+        } else {\n+            logger.debug(\"Could not connect to Bridge, failed to update Zone properties!\");\n+        }\n+    }\n+\n+    private void updateZoneProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = super.getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = super.bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ZoneProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.ZONE, getThingNumber(), 0).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (ZoneProperties zoneProperties : objectPropertyRequest) {\n+                    if (zoneProperties.getZoneType() <= SENSOR_TYPE_PROGRAMMABLE_ENERGY_SAVER_MODULE) {\n+                        Map<String, String> properties = editProperties();\n+                        properties.put(THING_PROPERTIES_NAME, zoneProperties.getName());\n+                        properties.put(THING_PROPERTIES_AREA, Integer.toString(areaProperties.getNumber()));\n+                        updateProperties(properties);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        int mode;\n+\n+        if (!(command instanceof StringType)) {\n+            logger.warn(\"Invalid command: {}, must be StringType\", command);\n+            return;\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_ZONE_BYPASS:\n+                mode = OmniLinkCmd.CMD_SECURITY_BYPASS_ZONE.getNumber();\n+                break;\n+            case CHANNEL_ZONE_RESTORE:\n+                mode = OmniLinkCmd.CMD_SECURITY_RESTORE_ZONE.getNumber();\n+                break;\n+            default:\n+                mode = -1;\n+        }\n+        int zoneNumber = getThingNumber();\n+        int areaNumber = getAreaNumber();\n+        logger.debug(\"mode {} on zone {} with code {}\", mode, zoneNumber, command.toFullString());\n+        char[] code = command.toFullString().toCharArray();\n+        if (code.length != 4) {\n+            logger.error(\"Invalid code length, code must be 4 digits\");\n+        } else {\n+            try {\n+                final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+                if (bridge != null) {\n+                    SecurityCodeValidation codeValidation = bridge.reqSecurityCodeValidation(areaNumber,\n+                            Character.getNumericValue(code[0]), Character.getNumericValue(code[1]),\n+                            Character.getNumericValue(code[2]), Character.getNumericValue(code[3]));\n+                    /*\n+                     * 0 Invalid code\n+                     * 1 Master\n+                     * 2 Manager\n+                     * 3 User\n+                     */\n+                    logger.debug(\"User code number: {} level: {}\", codeValidation.getCodeNumber(),\n+                            codeValidation.getAuthorityLevel());\n+                    /*\n+                     * Valid user code number are 1-99, 251 is duress code, 0 means code does not exist\n+                     */\n+                    if ((codeValidation.getCodeNumber() > 0 && codeValidation.getCodeNumber() <= 99)\n+                            && codeValidation.getAuthorityLevel() > 0) {\n+                        sendOmnilinkCommand(mode, codeValidation.getCodeNumber(), zoneNumber);\n+                    } else {\n+                        logger.warn(\"System reported an invalid code\");\n+                    }\n+                } else {\n+                    logger.debug(\"Received null bridge while sending zone command!\");\n+                }\n+            } catch (OmniInvalidResponseException e) {\n+                logger.debug(\"Zone command failed\", e);\n+            } catch (OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.error(\"Could not send zone command\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Mzk4Ng==", "bodyText": "See above. Logging stack trace.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546253986", "createdAt": "2020-12-19T16:04:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/ZoneHandler.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link ZoneHandler} defines some methods that are used to\n+ * interface with an OmniLink Zone. This by extension also defines the\n+ * OmniPro Zone thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ZoneHandler extends AbstractOmnilinkStatusHandler<ExtendedZoneStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(ZoneHandler.class);\n+    public @Nullable String number;\n+\n+    public ZoneHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing zone handler.\");\n+        final OmnilinkBridgeHandler bridgeHandler = super.getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateZoneProperties(bridgeHandler);\n+        } else {\n+            logger.debug(\"Could not connect to Bridge, failed to update Zone properties!\");\n+        }\n+    }\n+\n+    private void updateZoneProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = super.getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = super.bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ZoneProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.ZONE, getThingNumber(), 0).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (ZoneProperties zoneProperties : objectPropertyRequest) {\n+                    if (zoneProperties.getZoneType() <= SENSOR_TYPE_PROGRAMMABLE_ENERGY_SAVER_MODULE) {\n+                        Map<String, String> properties = editProperties();\n+                        properties.put(THING_PROPERTIES_NAME, zoneProperties.getName());\n+                        properties.put(THING_PROPERTIES_AREA, Integer.toString(areaProperties.getNumber()));\n+                        updateProperties(properties);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        int mode;\n+\n+        if (!(command instanceof StringType)) {\n+            logger.warn(\"Invalid command: {}, must be StringType\", command);\n+            return;\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_ZONE_BYPASS:\n+                mode = OmniLinkCmd.CMD_SECURITY_BYPASS_ZONE.getNumber();\n+                break;\n+            case CHANNEL_ZONE_RESTORE:\n+                mode = OmniLinkCmd.CMD_SECURITY_RESTORE_ZONE.getNumber();\n+                break;\n+            default:\n+                mode = -1;\n+        }\n+        int zoneNumber = getThingNumber();\n+        int areaNumber = getAreaNumber();\n+        logger.debug(\"mode {} on zone {} with code {}\", mode, zoneNumber, command.toFullString());\n+        char[] code = command.toFullString().toCharArray();\n+        if (code.length != 4) {\n+            logger.error(\"Invalid code length, code must be 4 digits\");\n+        } else {\n+            try {\n+                final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+                if (bridge != null) {\n+                    SecurityCodeValidation codeValidation = bridge.reqSecurityCodeValidation(areaNumber,\n+                            Character.getNumericValue(code[0]), Character.getNumericValue(code[1]),\n+                            Character.getNumericValue(code[2]), Character.getNumericValue(code[3]));\n+                    /*\n+                     * 0 Invalid code\n+                     * 1 Master\n+                     * 2 Manager\n+                     * 3 User\n+                     */\n+                    logger.debug(\"User code number: {} level: {}\", codeValidation.getCodeNumber(),\n+                            codeValidation.getAuthorityLevel());\n+                    /*\n+                     * Valid user code number are 1-99, 251 is duress code, 0 means code does not exist\n+                     */\n+                    if ((codeValidation.getCodeNumber() > 0 && codeValidation.getCodeNumber() <= 99)\n+                            && codeValidation.getAuthorityLevel() > 0) {\n+                        sendOmnilinkCommand(mode, codeValidation.getCodeNumber(), zoneNumber);\n+                    } else {\n+                        logger.warn(\"System reported an invalid code\");\n+                    }\n+                } else {\n+                    logger.debug(\"Received null bridge while sending zone command!\");\n+                }\n+            } catch (OmniInvalidResponseException e) {\n+                logger.debug(\"Zone command failed\", e);\n+            } catch (OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.error(\"Could not send zone command\", e);\n+            }\n+        }\n+        // This is a send only channel, so don't store the user code\n+        updateState(channelUID, UnDefType.UNDEF);\n+    }\n+\n+    @Override\n+    protected void updateChannels(ExtendedZoneStatus zoneStatus) {\n+        // 0 Secure. 1 Not ready, 3 Trouble\n+        int current = ((zoneStatus.getStatus() >> 0) & 0x03);\n+        // 0 Secure, 1 Tripped, 2 Reset, but previously tripped\n+        int latched = ((zoneStatus.getStatus() >> 2) & 0x03);\n+        // 0 Disarmed, 1 Armed, 2 Bypass user, 3 Bypass system\n+        int arming = ((zoneStatus.getStatus() >> 4) & 0x03);\n+        State contactState = Integer.valueOf(current).equals(0) ? OpenClosedType.CLOSED : OpenClosedType.OPEN;\n+        logger.debug(\"handling Zone Status change to state: {}, current: {}, latched: {}, arming: {}\", contactState,\n+                current, latched, arming);\n+        updateState(CHANNEL_ZONE_CONTACT, contactState);\n+        updateState(CHANNEL_ZONE_CURRENT_CONDITION, new DecimalType(current));\n+        updateState(CHANNEL_ZONE_LATCHED_ALARM_STATUS, new DecimalType(latched));\n+        updateState(CHANNEL_ZONE_ARMING_STATUS, new DecimalType(arming));\n+    }\n+\n+    @Override\n+    protected Optional<ExtendedZoneStatus> retrieveStatus() {\n+        try {\n+            final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+            int zoneId = getThingNumber();\n+            if (bridge != null) {\n+                ObjectStatus objStatus = bridge.requestObjectStatus(Message.OBJ_TYPE_ZONE, zoneId, zoneId, true);\n+                return Optional.of((ExtendedZoneStatus) objStatus.getStatuses()[0]);\n+            } else {\n+                logger.debug(\"Received null bridge while updating Zone status!\");\n+                return Optional.empty();\n+            }\n+        } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+            logger.debug(\"Received exception while refreshing zone!\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1Mzk5NA==", "bodyText": "The author tag is deprecated and should therefore be removed. See openhab/openhab-core#1844.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546253994", "createdAt": "2020-12-19T16:04:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"omnilink\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>OmniLink Binding</name>\n+\t<description>This is the binding for OmniLink, a security system that interfaces with many devices.</description>\n+\t<author>Craig Hamilton</author>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NDM5NQ==", "bodyText": "Labels are expected to be as short as possible. Guideline is 2-3 words with up to 25 chars. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546254395", "createdAt": "2020-12-19T16:08:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/resources/OH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,173 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"omnilink\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- OmniLink Controller Bridge -->\n+\t<bridge-type id=\"controller\">\n+\t\t<label>OmniLink Controller</label>\n+\t\t<description>An OmniLink controller.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sysdate\" typeId=\"sysDate\"/>\n+\t\t\t<channel id=\"enable_disable_beeper\" typeId=\"console_enable_disable_beeper\">\n+\t\t\t\t<label>Enable/Disable All Console Beepers</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NDQzNA==", "bodyText": "Are you sure this context exists?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546254434", "createdAt": "2020-12-19T16:08:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/resources/OH-INF/thing/bridge.xml", "diffHunk": "@@ -0,0 +1,173 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"omnilink\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- OmniLink Controller Bridge -->\n+\t<bridge-type id=\"controller\">\n+\t\t<label>OmniLink Controller</label>\n+\t\t<description>An OmniLink controller.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"sysdate\" typeId=\"sysDate\"/>\n+\t\t\t<channel id=\"enable_disable_beeper\" typeId=\"console_enable_disable_beeper\">\n+\t\t\t\t<label>Enable/Disable All Console Beepers</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"beep\" typeId=\"console_beep\">\n+\t\t\t\t<label>Beep All Consoles</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"last_log\" typeId=\"last_log\"/>\n+\t\t\t<channel id=\"phone_line_event\" typeId=\"phone_line_event\"/>\n+\t\t\t<channel id=\"ac_power_event\" typeId=\"ac_power_event\"/>\n+\t\t\t<channel id=\"battery_event\" typeId=\"battery_event\"/>\n+\t\t\t<channel id=\"dcm_event\" typeId=\"dcm_event\"/>\n+\t\t\t<channel id=\"energy_cost_event\" typeId=\"energy_cost_event\"/>\n+\t\t\t<channel id=\"camera_trigger_event\" typeId=\"camera_trigger_event\"/>\n+\t\t\t<channel id=\"upb_link_activated_event\" typeId=\"upb_link_activated_event\"/>\n+\t\t\t<channel id=\"upb_link_deactivated_event\" typeId=\"upb_link_deactivated_event\"/>\n+\t\t</channels>\n+\t\t<properties>\n+\t\t\t<property name=\"model number\"/>\n+\t\t\t<property name=\"major version\"/>\n+\t\t\t<property name=\"minor version\"/>\n+\t\t\t<property name=\"revision\"/>\n+\t\t\t<property name=\"phone number\"/>\n+\t\t</properties>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ipAddress\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>network-address</context>\n+\t\t\t\t<label>IP or Host Name</label>\n+\t\t\t\t<description>The IP or host name of the controller.</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"port\" type=\"integer\" required=\"true\">\n+\t\t\t\t<context>network-port</context>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NDg4OA==", "bodyText": "See above. Label length. Please also check the following channel-types.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r546254888", "createdAt": "2020-12-19T16:13:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/src/main/resources/OH-INF/thing/unit.xml", "diffHunk": "@@ -0,0 +1,332 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"omnilink\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Unit Thing -->\n+\t<thing-type id=\"unit\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"controller\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Unit</label>\n+\t\t<description>A basic unit configured in the controller.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"status\" typeId=\"unit_status\"/>\n+\t\t\t<channel id=\"level\" typeId=\"unit_level\"/>\n+\t\t\t<channel id=\"switch\" typeId=\"unit_switch\"/>\n+\t\t\t<channel id=\"on_for_seconds\" typeId=\"on_for_seconds\"/>\n+\t\t\t<channel id=\"off_for_seconds\" typeId=\"off_for_seconds\"/>\n+\t\t\t<channel id=\"on_for_minutes\" typeId=\"on_for_minutes\"/>\n+\t\t\t<channel id=\"off_for_minutes\" typeId=\"off_for_minutes\"/>\n+\t\t\t<channel id=\"on_for_hours\" typeId=\"on_for_hours\"/>\n+\t\t\t<channel id=\"off_for_hours\" typeId=\"off_for_hours\"/>\n+\t\t</channels>\n+\t\t<properties>\n+\t\t\t<property name=\"name\"/>\n+\t\t\t<property name=\"area\"/>\n+\t\t</properties>\n+\t\t<representation-property>number</representation-property>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"number\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Unit Number</label>\n+\t\t\t\t<description>The unit number.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Dimmable Thing -->\n+\t<thing-type id=\"dimmable\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"controller\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Dimmable Unit</label>\n+\t\t<description>A dimmable unit configured in the controller.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"status\" typeId=\"unit_status\"/>\n+\t\t\t<channel id=\"level\" typeId=\"unit_level\"/>\n+\t\t\t<channel id=\"switch\" typeId=\"unit_switch\"/>\n+\t\t\t<channel id=\"on_for_seconds\" typeId=\"on_for_seconds\"/>\n+\t\t\t<channel id=\"off_for_seconds\" typeId=\"off_for_seconds\"/>\n+\t\t\t<channel id=\"on_for_minutes\" typeId=\"on_for_minutes\"/>\n+\t\t\t<channel id=\"off_for_minutes\" typeId=\"off_for_minutes\"/>\n+\t\t\t<channel id=\"on_for_hours\" typeId=\"on_for_hours\"/>\n+\t\t\t<channel id=\"off_for_hours\" typeId=\"off_for_hours\"/>\n+\t\t\t<channel id=\"switch_press_event\" typeId=\"switch_press_event\"/>\n+\t\t</channels>\n+\t\t<properties>\n+\t\t\t<property name=\"name\"/>\n+\t\t\t<property name=\"area\"/>\n+\t\t</properties>\n+\t\t<representation-property>number</representation-property>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"number\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Dimmable Unit Number</label>\n+\t\t\t\t<description>The dimmable unit number.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- UPB Thing -->\n+\t<thing-type id=\"upb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"controller\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>UPB Unit</label>\n+\t\t<description>A UPB unit configured in the controller.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"unit_level\"/>\n+\t\t\t<channel id=\"on_for_seconds\" typeId=\"on_for_seconds\"/>\n+\t\t\t<channel id=\"off_for_seconds\" typeId=\"off_for_seconds\"/>\n+\t\t\t<channel id=\"on_for_minutes\" typeId=\"on_for_minutes\"/>\n+\t\t\t<channel id=\"off_for_minutes\" typeId=\"off_for_minutes\"/>\n+\t\t\t<channel id=\"on_for_hours\" typeId=\"on_for_hours\"/>\n+\t\t\t<channel id=\"off_for_hours\" typeId=\"off_for_hours\"/>\n+\t\t\t<channel id=\"upb_status\" typeId=\"upb_status\"/>\n+\t\t\t<channel id=\"switch_press_event\" typeId=\"switch_press_event\"/>\n+\t\t</channels>\n+\t\t<properties>\n+\t\t\t<property name=\"name\"/>\n+\t\t\t<property name=\"area\"/>\n+\t\t</properties>\n+\t\t<representation-property>number</representation-property>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"number\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>UPB Unit Number</label>\n+\t\t\t\t<description>The UPB unit number.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Flag Thing -->\n+\t<thing-type id=\"flag\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"controller\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Flag</label>\n+\t\t<description>A flag configured in the controller.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"value\" typeId=\"flag_value\"/>\n+\t\t\t<channel id=\"switch\" typeId=\"flag_switch\"/>\n+\t\t\t<channel id=\"on_for_seconds\" typeId=\"on_for_seconds\"/>\n+\t\t\t<channel id=\"off_for_seconds\" typeId=\"off_for_seconds\"/>\n+\t\t\t<channel id=\"on_for_minutes\" typeId=\"on_for_minutes\"/>\n+\t\t\t<channel id=\"off_for_minutes\" typeId=\"off_for_minutes\"/>\n+\t\t\t<channel id=\"on_for_hours\" typeId=\"on_for_hours\"/>\n+\t\t\t<channel id=\"off_for_hours\" typeId=\"off_for_hours\"/>\n+\t\t</channels>\n+\t\t<properties>\n+\t\t\t<property name=\"name\"/>\n+\t\t\t<property name=\"area\"/>\n+\t\t</properties>\n+\t\t<representation-property>number</representation-property>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"number\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Flag Number</label>\n+\t\t\t\t<description>The flag number.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Output Thing -->\n+\t<thing-type id=\"output\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"controller\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Voltage Output</label>\n+\t\t<description>A voltage output configured in the controller.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"unit_switch\"/>\n+\t\t\t<channel id=\"on_for_seconds\" typeId=\"on_for_seconds\"/>\n+\t\t\t<channel id=\"off_for_seconds\" typeId=\"off_for_seconds\"/>\n+\t\t\t<channel id=\"on_for_minutes\" typeId=\"on_for_minutes\"/>\n+\t\t\t<channel id=\"off_for_minutes\" typeId=\"off_for_minutes\"/>\n+\t\t\t<channel id=\"on_for_hours\" typeId=\"on_for_hours\"/>\n+\t\t\t<channel id=\"off_for_hours\" typeId=\"off_for_hours\"/>\n+\t\t</channels>\n+\t\t<properties>\n+\t\t\t<property name=\"name\"/>\n+\t\t\t<property name=\"area\"/>\n+\t\t</properties>\n+\t\t<representation-property>number</representation-property>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"number\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Voltage Output Number</label>\n+\t\t\t\t<description>The voltage output number.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Room Thing -->\n+\t<thing-type id=\"room\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"controller\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Room</label>\n+\t\t<description>A room configured in the controller.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"switch\" typeId=\"room_switch\"/>\n+\t\t\t<channel id=\"scene_a\" typeId=\"scene_toggle\">\n+\t\t\t\t<label>Scene A</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"scene_b\" typeId=\"scene_toggle\">\n+\t\t\t\t<label>Scene B</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"scene_c\" typeId=\"scene_toggle\">\n+\t\t\t\t<label>Scene C</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"scene_d\" typeId=\"scene_toggle\">\n+\t\t\t\t<label>Scene D</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"state\" typeId=\"room_state\"/>\n+\t\t</channels>\n+\t\t<properties>\n+\t\t\t<property name=\"name\"/>\n+\t\t\t<property name=\"area\"/>\n+\t\t</properties>\n+\t\t<representation-property>number</representation-property>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"number\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Room Number</label>\n+\t\t\t\t<description>The room number.</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Unit channels -->\n+\t<channel-type id=\"unit_status\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Status</label>\n+\t\t<description>Represents the numeric status of this unit.</description>\n+\t\t<category>Number</category>\n+\t\t<state readOnly=\"true\" pattern=\"%d\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"unit_level\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Unit Level</label>\n+\t\t<description>Increase/Decrease the level of this unit.</description>\n+\t\t<category>Slider</category>\n+\t\t<state min=\"0\" max=\"100\" pattern=\"%d %%\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"unit_switch\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Switch</label>\n+\t\t<description>Turn this unit on/off.</description>\n+\t\t<category>Switch</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"on_for_seconds\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Turn Unit On For Seconds</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0e0d0a626e83b14e8d7de53ab2eb6d6a08fb5b3"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODA3NDY1", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-558807465", "createdAt": "2020-12-25T11:31:46Z", "commit": {"oid": "30c752e393651a7e2df5f1ff05b9a5cb40d78b48"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMTozMTo0NlrOILbvyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMTozMTo0NlrOILbvyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1OTg0OQ==", "bodyText": "To make the binding compile, you need to rebase your branch and set the version to the upcoming openHAB version: 3.1.0-SNAPSHOT.\nHere are the commands for rebasing your branch:\nIf not already done, add the upstream openHAB addon repo as a remote to your local repo and fetch it:\ngit remote add upstream https://github.com/openhab/openhab-addons.git\ngit fetch upstream\n\nThen, you can rebase your PR's branch onto main:\ngit rebase upstream/main\n\nFinally force-push the rebased branch to this PR's branch:\ngit push origin [your branch name of this PR] --force-with-lease", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r548859849", "createdAt": "2020-12-25T11:31:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.omnilink/pom.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c752e393651a7e2df5f1ff05b9a5cb40d78b48"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTUxMzQz", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-558951343", "createdAt": "2020-12-27T18:28:58Z", "commit": {"oid": "bde37f4be6ad0e78ac044b27a53415c96008e842"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODoyODo1OFrOILtanA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODoyODo1OFrOILtanA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE0OTM0MA==", "bodyText": "@ecdye where is the controller/bridge thing returned here ?  I'm not sure how this is working for you as you cannot create a bridge/controller  thing.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r549149340", "createdAt": "2020-12-27T18:28:58Z", "author": {"login": "digitaldan"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.handler.AudioSourceHandler;\n+import org.openhab.binding.omnilink.internal.handler.AudioZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.ButtonHandler;\n+import org.openhab.binding.omnilink.internal.handler.ConsoleHandler;\n+import org.openhab.binding.omnilink.internal.handler.HumiditySensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.LockHandler;\n+import org.openhab.binding.omnilink.internal.handler.LuminaAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmniAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.TempSensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.ThermostatHandler;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.ZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.DimmableUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.FlagHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.OutputHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.UpbRoomHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.dimmable.UpbUnitHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link OmnilinkHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.omnilink\")\n+public class OmnilinkHandlerFactory extends BaseThingHandlerFactory {\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde37f4be6ad0e78ac044b27a53415c96008e842"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4OTUyMTc0", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-558952174", "createdAt": "2020-12-27T18:45:37Z", "commit": {"oid": "bde37f4be6ad0e78ac044b27a53415c96008e842"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODo0NTozN1rOILtg1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QxODo0NTozN1rOILtg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTE1MDkzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                    } else if (thingTypeUID.equals(THING_TYPE_BRIDGE)) {\n          \n          \n            \n                        return new OmnilinkBridgeHandler((Bridge) thing);\n          \n          \n            \n                    } else {", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r549150935", "createdAt": "2020-12-27T18:45:37Z", "author": {"login": "digitaldan"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkHandlerFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.handler.AudioSourceHandler;\n+import org.openhab.binding.omnilink.internal.handler.AudioZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.ButtonHandler;\n+import org.openhab.binding.omnilink.internal.handler.ConsoleHandler;\n+import org.openhab.binding.omnilink.internal.handler.HumiditySensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.LockHandler;\n+import org.openhab.binding.omnilink.internal.handler.LuminaAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.OmniAreaHandler;\n+import org.openhab.binding.omnilink.internal.handler.TempSensorHandler;\n+import org.openhab.binding.omnilink.internal.handler.ThermostatHandler;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.ZoneHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.DimmableUnitHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.FlagHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.OutputHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.UpbRoomHandler;\n+import org.openhab.binding.omnilink.internal.handler.units.dimmable.UpbUnitHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link OmnilinkHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.omnilink\")\n+public class OmnilinkHandlerFactory extends BaseThingHandlerFactory {\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (thingTypeUID.equals(THING_TYPE_UNIT_UPB)) {\n+            return new UpbUnitHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_ZONE)) {\n+            return new ZoneHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_OMNI_AREA)) {\n+            return new OmniAreaHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_LUMINA_AREA)) {\n+            return new LuminaAreaHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_FLAG)) {\n+            return new FlagHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_UNIT)) {\n+            return new UnitHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_DIMMABLE)) {\n+            return new DimmableUnitHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_OUTPUT)) {\n+            return new OutputHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_ROOM)) {\n+            return new UpbRoomHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_BUTTON)) {\n+            return new ButtonHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_THERMOSTAT)) {\n+            return new ThermostatHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_AUDIO_ZONE)) {\n+            return new AudioZoneHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_AUDIO_SOURCE)) {\n+            return new AudioSourceHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_TEMP_SENSOR)) {\n+            return new TempSensorHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_HUMIDITY_SENSOR)) {\n+            return new HumiditySensorHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_LOCK)) {\n+            return new LockHandler(thing);\n+        } else if (thingTypeUID.equals(THING_TYPE_CONSOLE)) {\n+            return new ConsoleHandler(thing);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bde37f4be6ad0e78ac044b27a53415c96008e842"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2NDQyMTc1", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-566442175", "createdAt": "2021-01-12T16:21:06Z", "commit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNjoyMTowNlrOISJcVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxNzoyOToyN1rOISMbXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg5OTk4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Controller                 | Omni (Pro II, IIe, LTe), Lumina                  | controller (omni, lumina) |\n          \n          \n            \n            | Controller                 | Omni (Pro II, IIe, LTe), Lumina                  | `controller` (omni, lumina) |\n          \n      \n    \n    \n  \n\nPut thing names, channel names and alike in backquotes (`)", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555899989", "createdAt": "2021-01-12T16:21:06Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/README.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# HAI/Leviton OmniLink Binding\n+\n+This binding integrates the [OmniPro and Lumina](http://www.leviton.com/en/products/security-automation/automation-av-controllers/omni-security-systems) line of home automation systems.\n+At its core the OmniPro is a hardware board that provides security and access features.\n+It connects to many other devices through serial ports or wired contacts and exposes them through a single TCP based API.\n+\n+## Supported Things\n+\n+The OmniPro/Lumina controller acts as a \"bridge\" for accessing other connected devices.\n+\n+\n+| Omni type                  | Hardware Type                                    | Things                    |\n+|:---------------------------|:-------------------------------------------------|:--------------------------|\n+| Controller                 | Omni (Pro II, IIe, LTe), Lumina                  | controller (omni, lumina) |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwMDQyMA==", "bodyText": "Please add parameter names (e.g. port)", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555900420", "createdAt": "2021-01-12T16:21:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/README.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# HAI/Leviton OmniLink Binding\n+\n+This binding integrates the [OmniPro and Lumina](http://www.leviton.com/en/products/security-automation/automation-av-controllers/omni-security-systems) line of home automation systems.\n+At its core the OmniPro is a hardware board that provides security and access features.\n+It connects to many other devices through serial ports or wired contacts and exposes them through a single TCP based API.\n+\n+## Supported Things\n+\n+The OmniPro/Lumina controller acts as a \"bridge\" for accessing other connected devices.\n+\n+\n+| Omni type                  | Hardware Type                                    | Things                    |\n+|:---------------------------|:-------------------------------------------------|:--------------------------|\n+| Controller                 | Omni (Pro II, IIe, LTe), Lumina                  | controller (omni, lumina) |\n+| Lights                     | Built-in, UPB, HLC                               | unit, dimmable, upb, room |\n+| Thermostats                | Omnistat, Omnistat2                              | thermostat                |\n+| Temperature Sensors        | 31A00-1/31A00-7                                  | temp_sensor               |\n+| Humidity Sensors           | 31A00-2                                          | humidity_sensor           |\n+| Zones                      | Built-in/Hardwire, GE Wireless                   | zone                      |\n+| Audio Zones/Sources        | HAI Hi-Fi, Russound, NuVo, Xantech, Speakercraft | audio_zone, audio_source  |\n+| Consoles                   | HAI Omni Console, HAI Lumina Console             | console                   |\n+| Areas                      | Built-in                                         | area, lumina_area         |\n+| Buttons                    | Built-in                                         | button                    |\n+| Flags                      | Built-in                                         | flag                      |\n+| Output                     | Built-in/Hardwire                                | output                    |\n+| Access Control Reader Lock | Leviton Access Control Reader                    | lock                      |\n+\n+\n+\n+## Discovery\n+\n+### Controller\n+\n+Omni and Lumina controllers must be manually added using the IP and port of the controller as well as the 2 encryption keys required for network access.\n+\n+### Devices\n+\n+Once a connection can be established to a controller, all connected devices will be automatically discovered and added to the inbox.\n+\n+## Thing Configuration\n+\n+An Omni or Lumina controller requires the IP address, optional port (defaults to 4369), and 2 encryption keys.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwMTU2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                BURGLERY(CHANNEL_AREA_ALARM_BURGLARY, 0),\n          \n          \n            \n                BURGLARY(CHANNEL_AREA_ALARM_BURGLARY, 0),", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555901565", "createdAt": "2021-01-12T16:23:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/AreaAlarm.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link AreaAlarm} class defines the different types of alarms supported\n+ * by the OmniLink Protocol.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum AreaAlarm {\n+    BURGLERY(CHANNEL_AREA_ALARM_BURGLARY, 0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwMjMzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                AUXILARY(CHANNEL_AREA_ALARM_AUXILARY, 3),\n          \n          \n            \n                AUXILIARY(CHANNEL_AREA_ALARM_AUXILIARY, 3),", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555902331", "createdAt": "2021-01-12T16:24:20Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/AreaAlarm.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link AreaAlarm} class defines the different types of alarms supported\n+ * by the OmniLink Protocol.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum AreaAlarm {\n+    BURGLERY(CHANNEL_AREA_ALARM_BURGLARY, 0),\n+    FIRE(CHANNEL_AREA_ALARM_FIRE, 1),\n+    GAS(CHANNEL_AREA_ALARM_GAS, 2),\n+    AUXILARY(CHANNEL_AREA_ALARM_AUXILARY, 3),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwMzEyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final int featureCode;\n          \n          \n            \n                private final int featureCode;\n          \n      \n    \n    \n  \n\nalso below", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555903122", "createdAt": "2021-01-12T16:25:26Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/AudioPlayer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link AudioPlayer} defines some methods that are used to\n+ * interface with an OmniLink Audio Player.\n+ *\n+ * @author Brian O'Connell - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum AudioPlayer {\n+    NUVO(1, 6, 8, 7, 9, 10),\n+    NUVO_GRAND_ESSENTIA_SIMPLESE(2, 6, 8, 7, 9, 10),\n+    NUVO_GRAND_GRAND_CONCERTO(3, 6, 6, 6, 9, 10),\n+    RUSSOUND(4, 6, 8, 7, 11, 12),\n+    XANTECH(6, 13, 15, 14, 16, 17),\n+    SPEAKERCRAFT(7, 45, 44, 46, 42, 43),\n+    PROFICIENT(8, 45, 44, 46, 42, 43);\n+\n+    final int featureCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwNDI3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (AudioPlayer player : values()) {\n          \n          \n            \n                        if (player.featureCode == featureCode) {\n          \n          \n            \n                            return Optional.of(player);\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return Optional.empty();\n          \n          \n            \n                    return Arrays.stream(values()).filter(v -> v.featureCode == featureCode).findAny();", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555904274", "createdAt": "2021-01-12T16:26:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/AudioPlayer.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link AudioPlayer} defines some methods that are used to\n+ * interface with an OmniLink Audio Player.\n+ *\n+ * @author Brian O'Connell - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum AudioPlayer {\n+    NUVO(1, 6, 8, 7, 9, 10),\n+    NUVO_GRAND_ESSENTIA_SIMPLESE(2, 6, 8, 7, 9, 10),\n+    NUVO_GRAND_GRAND_CONCERTO(3, 6, 6, 6, 9, 10),\n+    RUSSOUND(4, 6, 8, 7, 11, 12),\n+    XANTECH(6, 13, 15, 14, 16, 17),\n+    SPEAKERCRAFT(7, 45, 44, 46, 42, 43),\n+    PROFICIENT(8, 45, 44, 46, 42, 43);\n+\n+    final int featureCode;\n+    final int playCommand;\n+    final int pauseCommand;\n+    final int stopCommand;\n+    final int previousCommand;\n+    final int nextCommand;\n+\n+    AudioPlayer(int featureCode, int playCommand, int pauseCommand, int stopCommand, int previousCommand,\n+            int nextCommand) {\n+        this.featureCode = featureCode;\n+        this.playCommand = playCommand;\n+        this.pauseCommand = pauseCommand;\n+        this.stopCommand = stopCommand;\n+        this.previousCommand = previousCommand;\n+        this.nextCommand = nextCommand;\n+    }\n+\n+    public int getPlayCommand() {\n+        return playCommand;\n+    }\n+\n+    public int getPauseCommand() {\n+        return pauseCommand;\n+    }\n+\n+    public int getStopCommand() {\n+        return stopCommand;\n+    }\n+\n+    public int getPreviousCommand() {\n+        return previousCommand;\n+    }\n+\n+    public int getNextCommand() {\n+        return nextCommand;\n+    }\n+\n+    public static Optional<AudioPlayer> getAudioPlayerForFeatureCode(int featureCode) {\n+        for (AudioPlayer player : values()) {\n+            if (player.featureCode == featureCode) {\n+                return Optional.of(player);\n+            }\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwNDY5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String CHANNEL_AREA_ALARM_AUXILARY = \"alarm_auxiliary\";\n          \n          \n            \n                public static final String CHANNEL_AREA_ALARM_AUXILIARY = \"alarm_auxiliary\";", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555904693", "createdAt": "2021-01-12T16:27:12Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkBindingConstants.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link OmnilinkBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBindingConstants {\n+\n+    public static final String BINDING_ID = \"omnilink\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"controller\");\n+    public static final ThingTypeUID THING_TYPE_OMNI_AREA = new ThingTypeUID(BINDING_ID, \"area\");\n+    public static final ThingTypeUID THING_TYPE_LUMINA_AREA = new ThingTypeUID(BINDING_ID, \"lumina_area\");\n+    public static final ThingTypeUID THING_TYPE_ZONE = new ThingTypeUID(BINDING_ID, \"zone\");\n+    public static final ThingTypeUID THING_TYPE_LOCK = new ThingTypeUID(BINDING_ID, \"lock\");\n+    public static final ThingTypeUID THING_TYPE_UNIT_UPB = new ThingTypeUID(BINDING_ID, \"upb\");\n+    public static final ThingTypeUID THING_TYPE_UNIT = new ThingTypeUID(BINDING_ID, \"unit\");\n+    public static final ThingTypeUID THING_TYPE_DIMMABLE = new ThingTypeUID(BINDING_ID, \"dimmable\");\n+    public static final ThingTypeUID THING_TYPE_FLAG = new ThingTypeUID(BINDING_ID, \"flag\");\n+    public static final ThingTypeUID THING_TYPE_OUTPUT = new ThingTypeUID(BINDING_ID, \"output\");\n+    public static final ThingTypeUID THING_TYPE_ROOM = new ThingTypeUID(BINDING_ID, \"room\");\n+    public static final ThingTypeUID THING_TYPE_BUTTON = new ThingTypeUID(BINDING_ID, \"button\");\n+    public static final ThingTypeUID THING_TYPE_THERMOSTAT = new ThingTypeUID(BINDING_ID, \"thermostat\");\n+    public static final ThingTypeUID THING_TYPE_AUDIO_ZONE = new ThingTypeUID(BINDING_ID, \"audio_zone\");\n+    public static final ThingTypeUID THING_TYPE_AUDIO_SOURCE = new ThingTypeUID(BINDING_ID, \"audio_source\");\n+    public static final ThingTypeUID THING_TYPE_CONSOLE = new ThingTypeUID(BINDING_ID, \"console\");\n+    public static final ThingTypeUID THING_TYPE_TEMP_SENSOR = new ThingTypeUID(BINDING_ID, \"temp_sensor\");\n+    public static final ThingTypeUID THING_TYPE_HUMIDITY_SENSOR = new ThingTypeUID(BINDING_ID, \"humidity_sensor\");\n+\n+    // List of all Channel ids\n+\n+    // zones\n+    public static final String CHANNEL_ZONE_CONTACT = \"contact\";\n+    public static final String CHANNEL_ZONE_CURRENT_CONDITION = \"current_condition\";\n+    public static final String CHANNEL_ZONE_LATCHED_ALARM_STATUS = \"latched_alarm_status\";\n+    public static final String CHANNEL_ZONE_ARMING_STATUS = \"arming_status\";\n+    public static final String CHANNEL_ZONE_BYPASS = \"bypass\";\n+    public static final String CHANNEL_ZONE_RESTORE = \"restore\";\n+\n+    // areas\n+    public static final String CHANNEL_AREA_MODE = \"mode\";\n+    public static final String CHANNEL_AREA_ACTIVATE_KEYPAD_EMERGENCY = \"activate_keypad_emergency\";\n+    public static final String CHANNEL_AREA_ALARM_BURGLARY = \"alarm_burglary\";\n+    public static final String CHANNEL_AREA_ALARM_FIRE = \"alarm_fire\";\n+    public static final String CHANNEL_AREA_ALARM_GAS = \"alarm_gas\";\n+    public static final String CHANNEL_AREA_ALARM_AUXILARY = \"alarm_auxiliary\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwNTQxNQ==", "bodyText": "Please don't use spaces in property names.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String THING_PROPERTIES_MODEL_NUMBER = \"model number\";\n          \n          \n            \n                public static final String THING_PROPERTIES_MODEL_NUMBER = \"modelNumber\";", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555905415", "createdAt": "2021-01-12T16:28:12Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/OmnilinkBindingConstants.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link OmnilinkBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBindingConstants {\n+\n+    public static final String BINDING_ID = \"omnilink\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"controller\");\n+    public static final ThingTypeUID THING_TYPE_OMNI_AREA = new ThingTypeUID(BINDING_ID, \"area\");\n+    public static final ThingTypeUID THING_TYPE_LUMINA_AREA = new ThingTypeUID(BINDING_ID, \"lumina_area\");\n+    public static final ThingTypeUID THING_TYPE_ZONE = new ThingTypeUID(BINDING_ID, \"zone\");\n+    public static final ThingTypeUID THING_TYPE_LOCK = new ThingTypeUID(BINDING_ID, \"lock\");\n+    public static final ThingTypeUID THING_TYPE_UNIT_UPB = new ThingTypeUID(BINDING_ID, \"upb\");\n+    public static final ThingTypeUID THING_TYPE_UNIT = new ThingTypeUID(BINDING_ID, \"unit\");\n+    public static final ThingTypeUID THING_TYPE_DIMMABLE = new ThingTypeUID(BINDING_ID, \"dimmable\");\n+    public static final ThingTypeUID THING_TYPE_FLAG = new ThingTypeUID(BINDING_ID, \"flag\");\n+    public static final ThingTypeUID THING_TYPE_OUTPUT = new ThingTypeUID(BINDING_ID, \"output\");\n+    public static final ThingTypeUID THING_TYPE_ROOM = new ThingTypeUID(BINDING_ID, \"room\");\n+    public static final ThingTypeUID THING_TYPE_BUTTON = new ThingTypeUID(BINDING_ID, \"button\");\n+    public static final ThingTypeUID THING_TYPE_THERMOSTAT = new ThingTypeUID(BINDING_ID, \"thermostat\");\n+    public static final ThingTypeUID THING_TYPE_AUDIO_ZONE = new ThingTypeUID(BINDING_ID, \"audio_zone\");\n+    public static final ThingTypeUID THING_TYPE_AUDIO_SOURCE = new ThingTypeUID(BINDING_ID, \"audio_source\");\n+    public static final ThingTypeUID THING_TYPE_CONSOLE = new ThingTypeUID(BINDING_ID, \"console\");\n+    public static final ThingTypeUID THING_TYPE_TEMP_SENSOR = new ThingTypeUID(BINDING_ID, \"temp_sensor\");\n+    public static final ThingTypeUID THING_TYPE_HUMIDITY_SENSOR = new ThingTypeUID(BINDING_ID, \"humidity_sensor\");\n+\n+    // List of all Channel ids\n+\n+    // zones\n+    public static final String CHANNEL_ZONE_CONTACT = \"contact\";\n+    public static final String CHANNEL_ZONE_CURRENT_CONDITION = \"current_condition\";\n+    public static final String CHANNEL_ZONE_LATCHED_ALARM_STATUS = \"latched_alarm_status\";\n+    public static final String CHANNEL_ZONE_ARMING_STATUS = \"arming_status\";\n+    public static final String CHANNEL_ZONE_BYPASS = \"bypass\";\n+    public static final String CHANNEL_ZONE_RESTORE = \"restore\";\n+\n+    // areas\n+    public static final String CHANNEL_AREA_MODE = \"mode\";\n+    public static final String CHANNEL_AREA_ACTIVATE_KEYPAD_EMERGENCY = \"activate_keypad_emergency\";\n+    public static final String CHANNEL_AREA_ALARM_BURGLARY = \"alarm_burglary\";\n+    public static final String CHANNEL_AREA_ALARM_FIRE = \"alarm_fire\";\n+    public static final String CHANNEL_AREA_ALARM_GAS = \"alarm_gas\";\n+    public static final String CHANNEL_AREA_ALARM_AUXILARY = \"alarm_auxiliary\";\n+    public static final String CHANNEL_AREA_ALARM_FREEZE = \"alarm_freeze\";\n+    public static final String CHANNEL_AREA_ALARM_WATER = \"alarm_water\";\n+    public static final String CHANNEL_AREA_ALARM_DURESS = \"alarm_duress\";\n+    public static final String CHANNEL_AREA_ALARM_TEMPERATURE = \"alarm_temperature\";\n+\n+    public static final String CHANNEL_AREA_SECURITY_MODE_DISARM = \"disarm\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_DAY = \"day\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_NIGHT = \"night\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_AWAY = \"away\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_VACATION = \"vacation\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_DAY_INSTANT = \"day_instant\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_NIGHT_DELAYED = \"night_delayed\";\n+\n+    public static final String CHANNEL_AREA_SECURITY_MODE_HOME = \"home\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_SLEEP = \"sleep\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_PARTY = \"party\";\n+    public static final String CHANNEL_AREA_SECURITY_MODE_SPECIAL = \"special\";\n+\n+    // units\n+    public static final String CHANNEL_UNIT_LEVEL = \"level\";\n+    public static final String CHANNEL_UNIT_SWITCH = \"switch\";\n+    public static final String CHANNEL_UNIT_ON_FOR_SECONDS = \"on_for_seconds\";\n+    public static final String CHANNEL_UNIT_ON_FOR_MINUTES = \"on_for_minutes\";\n+    public static final String CHANNEL_UNIT_ON_FOR_HOURS = \"on_for_hours\";\n+    public static final String CHANNEL_UNIT_OFF_FOR_SECONDS = \"off_for_seconds\";\n+    public static final String CHANNEL_UNIT_OFF_FOR_MINUTES = \"off_for_minutes\";\n+    public static final String CHANNEL_UNIT_OFF_FOR_HOURS = \"off_for_hours\";\n+    public static final String CHANNEL_FLAG_VALUE = \"value\";\n+    public static final String CHANNEL_FLAG_SWITCH = \"switch\";\n+    public static final String CHANNEL_UPB_STATUS = \"upb_status\";\n+\n+    public static final String CHANNEL_ROOM_SWITCH = \"switch\";\n+    public static final String CHANNEL_ROOM_SCENE_A = \"scene_a\";\n+    public static final String CHANNEL_ROOM_SCENE_B = \"scene_b\";\n+    public static final String CHANNEL_ROOM_SCENE_C = \"scene_c\";\n+    public static final String CHANNEL_ROOM_SCENE_D = \"scene_d\";\n+    public static final String CHANNEL_ROOM_STATE = \"state\";\n+\n+    public static final String CHANNEL_SYSTEMDATE = \"sysdate\";\n+    public static final String CHANNEL_EVENT_LOG = \"last_log\";\n+\n+    // buttons\n+    public static final String CHANNEL_BUTTON_PRESS = \"press\";\n+\n+    // locks\n+    public static final String CHANNEL_LOCK_SWITCH = \"switch\";\n+\n+    // thermostats\n+    public static final String CHANNEL_THERMO_FREEZE_ALARM = \"freeze_alarm\";\n+    public static final String CHANNEL_THERMO_COMM_FAILURE = \"comm_failure\";\n+    public static final String CHANNEL_THERMO_STATUS = \"status\";\n+    public static final String CHANNEL_THERMO_CURRENT_TEMP = \"temperature\";\n+    public static final String CHANNEL_THERMO_OUTDOOR_TEMP = \"outdoor_temperature\";\n+    public static final String CHANNEL_THERMO_HUMIDITY = \"humidity\";\n+    public static final String CHANNEL_THERMO_HUMIDIFY_SETPOINT = \"humidify_setpoint\";\n+    public static final String CHANNEL_THERMO_DEHUMIDIFY_SETPOINT = \"dehumidify_setpoint\";\n+    public static final String CHANNEL_THERMO_SYSTEM_MODE = \"system_mode\";\n+    public static final String CHANNEL_THERMO_FAN_MODE = \"fan_mode\";\n+    public static final String CHANNEL_THERMO_HOLD_STATUS = \"hold_status\";\n+    public static final String CHANNEL_THERMO_COOL_SETPOINT = \"cool_setpoint\";\n+    public static final String CHANNEL_THERMO_HEAT_SETPOINT = \"heat_setpoint\";\n+\n+    // temp / humidity sensors\n+    public static final String CHANNEL_AUX_TEMP = \"temperature\";\n+    public static final String CHANNEL_AUX_HUMIDITY = \"humidity\";\n+    public static final String CHANNEL_AUX_LOW_SETPOINT = \"low_setpoint\";\n+    public static final String CHANNEL_AUX_HIGH_SETPOINT = \"high_setpoint\";\n+\n+    // consoles\n+    public static final String CHANNEL_CONSOLE_BEEP = \"beep\";\n+    public static final String CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER = \"enable_disable_beeper\";\n+\n+    // audio zones\n+    public static final String CHANNEL_AUDIO_ZONE_POWER = \"zone_power\";\n+    public static final String CHANNEL_AUDIO_ZONE_MUTE = \"zone_mute\";\n+    public static final String CHANNEL_AUDIO_ZONE_VOLUME = \"zone_volume\";\n+    public static final String CHANNEL_AUDIO_ZONE_SOURCE = \"zone_source\";\n+    public static final String CHANNEL_AUDIO_ZONE_CONTROL = \"zone_control\";\n+\n+    // audio sources\n+    public static final String CHANNEL_AUDIO_SOURCE_TEXT1 = \"source_text_1\";\n+    public static final String CHANNEL_AUDIO_SOURCE_TEXT2 = \"source_text_2\";\n+    public static final String CHANNEL_AUDIO_SOURCE_TEXT3 = \"source_text_3\";\n+    public static final String CHANNEL_AUDIO_SOURCE_TEXT4 = \"source_text_4\";\n+    public static final String CHANNEL_AUDIO_SOURCE_TEXT5 = \"source_text_5\";\n+    public static final String CHANNEL_AUDIO_SOURCE_TEXT6 = \"source_text_6\";\n+    public static final String CHANNEL_AUDIO_SOURCE_POLLING = \"polling\";\n+\n+    // trigger channels\n+    public static final String TRIGGER_CHANNEL_BUTTON_ACTIVATED_EVENT = \"activated_event\";\n+    public static final String TRIGGER_CHANNEL_PHONE_LINE_EVENT = \"phone_line_event\";\n+    public static final String TRIGGER_CHANNEL_AC_POWER_EVENT = \"ac_power_event\";\n+    public static final String TRIGGER_CHANNEL_BATTERY_EVENT = \"battery_event\";\n+    public static final String TRIGGER_CHANNEL_DCM_EVENT = \"dcm_event\";\n+    public static final String TRIGGER_CHANNEL_ENERGY_COST_EVENT = \"energy_cost_event\";\n+    public static final String TRIGGER_CHANNEL_CAMERA_TRIGGER_EVENT = \"camera_trigger_event\";\n+    public static final String TRIGGER_CHANNEL_ACCESS_CONTROL_READER_EVENT = \"access_control_reader_event\";\n+    public static final String TRIGGER_CHANNEL_AREA_ALL_ON_OFF_EVENT = \"all_on_off_Event\";\n+    public static final String TRIGGER_CHANNEL_ZONE_STATE_EVENT = \"zone_state_Event\";\n+    public static final String TRIGGER_CHANNEL_SWITCH_PRESS_EVENT = \"switch_press_event\";\n+    public static final String TRIGGER_CHANNEL_UPB_LINK_ACTIVATED_EVENT = \"upb_link_activated_event\";\n+    public static final String TRIGGER_CHANNEL_UPB_LINK_DEACTIVATED_EVENT = \"upb_link_deactivated_event\";\n+\n+    // thing configuration and properties keys\n+    public static final String THING_PROPERTIES_NAME = \"name\";\n+    public static final String THING_PROPERTIES_NUMBER = \"number\";\n+    public static final String THING_PROPERTIES_AREA = \"area\";\n+    public static final String THING_PROPERTIES_AUTO_START = \"autostart\";\n+    public static final String THING_PROPERTIES_MODEL_NUMBER = \"model number\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkxMjgzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Map<String, Object> properties = new HashMap<>();\n          \n          \n            \n                            properties.put(THING_PROPERTIES_NAME, thingName);\n          \n          \n            \n                            Map<String, Object> properties = Map.of(THING_PROPERTIES_NAME, thingName);\n          \n      \n    \n    \n  \n\nalso in other places", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555912834", "createdAt": "2021-01-12T16:38:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,545 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties.*;\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AccessControlReaderProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioSourceProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ButtonProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ThermostatProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link OmnilinkDiscoveryService} creates things based on the configured bridge.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private @Nullable OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    /**\n+     * Creates an OmnilinkDiscoveryService.\n+     */\n+    public OmnilinkDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, DISCOVER_TIMEOUT_SECONDS, false);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof OmnilinkBridgeHandler) {\n+            bridgeHandler = (OmnilinkBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    @Override\n+    public void activate() {\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        final OmnilinkBridgeHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            logger.debug(\"Starting scan\");\n+            try {\n+                SystemInformation systemInformation = handler.reqSystemInformation();\n+                this.systemType = SystemType.getType(systemInformation.getModel());\n+                this.areas = discoverAreas();\n+                discoverUnits();\n+                discoverZones();\n+                discoverButtons();\n+                discoverThermostats();\n+                discoverAudioZones();\n+                discoverAudioSources();\n+                discoverTempSensors();\n+                discoverHumiditySensors();\n+                discoverLocks();\n+            } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.debug(\"Received error during discovery: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Calculate the area filter the a supplied area\n+     *\n+     * @param area Area to calculate filter for.\n+     * @return Calculated Bit Filter for the supplied area. Bit 0 is area 1, bit 2 is area 2 and so on.\n+     */\n+    private static int bitFilterForArea(AreaProperties areaProperties) {\n+        return BigInteger.ZERO.setBit(areaProperties.getNumber() - 1).intValue();\n+    }\n+\n+    /**\n+     * Discovers OmniLink buttons\n+     */\n+    private void discoverButtons() {\n+        final OmnilinkBridgeHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            final ThingUID bridgeUID = handler.getThing().getUID();\n+            final List<AreaProperties> areas = this.areas;\n+\n+            if (areas != null) {\n+                for (AreaProperties areaProperties : areas) {\n+                    int areaFilter = bitFilterForArea(areaProperties);\n+\n+                    ObjectPropertyRequest<ButtonProperties> objectPropertyRequest = ObjectPropertyRequest\n+                            .builder(handler, ObjectPropertyRequests.BUTTONS, 0, 1).selectNamed().areaFilter(areaFilter)\n+                            .build();\n+\n+                    for (ButtonProperties buttonProperties : objectPropertyRequest) {\n+                        String thingName = buttonProperties.getName();\n+                        String thingID = Integer.toString(buttonProperties.getNumber());\n+\n+                        Map<String, Object> properties = new HashMap<>();\n+                        properties.put(THING_PROPERTIES_NAME, thingName);\n+                        properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                        ThingUID thingUID = new ThingUID(THING_TYPE_BUTTON, bridgeUID, thingID);\n+\n+                        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID)\n+                                .withProperties(properties).withProperty(THING_PROPERTIES_NUMBER, thingID)\n+                                .withRepresentationProperty(THING_PROPERTIES_NUMBER).withBridge(bridgeUID)\n+                                .withLabel(thingName).build();\n+                        thingDiscovered(discoveryResult);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink locks\n+     */\n+    private void discoverLocks() {\n+        final OmnilinkBridgeHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            final ThingUID bridgeUID = handler.getThing().getUID();\n+\n+            ObjectPropertyRequest<AccessControlReaderProperties> objectPropertyRequest = ObjectPropertyRequest\n+                    .builder(handler, ObjectPropertyRequests.LOCK, 0, 1).selectNamed().build();\n+\n+            for (AccessControlReaderProperties lockProperties : objectPropertyRequest) {\n+                String thingName = lockProperties.getName();\n+                String thingID = Integer.toString(lockProperties.getNumber());\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(THING_PROPERTIES_NAME, thingName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkxNDkzMw==", "bodyText": "These methods look very similar. Do you think it is possible to refactor them to a common method? They seem to bedifferent only in the  ObjectPropertyRequests.* constants.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555914933", "createdAt": "2021-01-12T16:41:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/discovery/OmnilinkDiscoveryService.java", "diffHunk": "@@ -0,0 +1,545 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.discovery;\n+\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties.*;\n+import static com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties.*;\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AccessControlReaderProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioSourceProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AudioZoneProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ButtonProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ThermostatProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.UnitProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ZoneProperties;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link OmnilinkDiscoveryService} creates things based on the configured bridge.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkDiscoveryService.class);\n+    private static final int DISCOVER_TIMEOUT_SECONDS = 30;\n+    private @Nullable OmnilinkBridgeHandler bridgeHandler;\n+    private @Nullable SystemType systemType;\n+    private @Nullable List<AreaProperties> areas;\n+\n+    /**\n+     * Creates an OmnilinkDiscoveryService.\n+     */\n+    public OmnilinkDiscoveryService() {\n+        super(SUPPORTED_THING_TYPES_UIDS, DISCOVER_TIMEOUT_SECONDS, false);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof OmnilinkBridgeHandler) {\n+            bridgeHandler = (OmnilinkBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    @Override\n+    public void activate() {\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+    }\n+\n+    @Override\n+    protected synchronized void startScan() {\n+        final OmnilinkBridgeHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            logger.debug(\"Starting scan\");\n+            try {\n+                SystemInformation systemInformation = handler.reqSystemInformation();\n+                this.systemType = SystemType.getType(systemInformation.getModel());\n+                this.areas = discoverAreas();\n+                discoverUnits();\n+                discoverZones();\n+                discoverButtons();\n+                discoverThermostats();\n+                discoverAudioZones();\n+                discoverAudioSources();\n+                discoverTempSensors();\n+                discoverHumiditySensors();\n+                discoverLocks();\n+            } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.debug(\"Received error during discovery: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+        removeOlderResults(getTimestampOfLastScan());\n+    }\n+\n+    /**\n+     * Calculate the area filter the a supplied area\n+     *\n+     * @param area Area to calculate filter for.\n+     * @return Calculated Bit Filter for the supplied area. Bit 0 is area 1, bit 2 is area 2 and so on.\n+     */\n+    private static int bitFilterForArea(AreaProperties areaProperties) {\n+        return BigInteger.ZERO.setBit(areaProperties.getNumber() - 1).intValue();\n+    }\n+\n+    /**\n+     * Discovers OmniLink buttons\n+     */\n+    private void discoverButtons() {\n+        final OmnilinkBridgeHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            final ThingUID bridgeUID = handler.getThing().getUID();\n+            final List<AreaProperties> areas = this.areas;\n+\n+            if (areas != null) {\n+                for (AreaProperties areaProperties : areas) {\n+                    int areaFilter = bitFilterForArea(areaProperties);\n+\n+                    ObjectPropertyRequest<ButtonProperties> objectPropertyRequest = ObjectPropertyRequest\n+                            .builder(handler, ObjectPropertyRequests.BUTTONS, 0, 1).selectNamed().areaFilter(areaFilter)\n+                            .build();\n+\n+                    for (ButtonProperties buttonProperties : objectPropertyRequest) {\n+                        String thingName = buttonProperties.getName();\n+                        String thingID = Integer.toString(buttonProperties.getNumber());\n+\n+                        Map<String, Object> properties = new HashMap<>();\n+                        properties.put(THING_PROPERTIES_NAME, thingName);\n+                        properties.put(THING_PROPERTIES_AREA, areaProperties.getNumber());\n+\n+                        ThingUID thingUID = new ThingUID(THING_TYPE_BUTTON, bridgeUID, thingID);\n+\n+                        DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID)\n+                                .withProperties(properties).withProperty(THING_PROPERTIES_NUMBER, thingID)\n+                                .withRepresentationProperty(THING_PROPERTIES_NUMBER).withBridge(bridgeUID)\n+                                .withLabel(thingName).build();\n+                        thingDiscovered(discoveryResult);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink locks\n+     */\n+    private void discoverLocks() {\n+        final OmnilinkBridgeHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            final ThingUID bridgeUID = handler.getThing().getUID();\n+\n+            ObjectPropertyRequest<AccessControlReaderProperties> objectPropertyRequest = ObjectPropertyRequest\n+                    .builder(handler, ObjectPropertyRequests.LOCK, 0, 1).selectNamed().build();\n+\n+            for (AccessControlReaderProperties lockProperties : objectPropertyRequest) {\n+                String thingName = lockProperties.getName();\n+                String thingID = Integer.toString(lockProperties.getNumber());\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(THING_PROPERTIES_NAME, thingName);\n+\n+                ThingUID thingUID = new ThingUID(THING_TYPE_LOCK, bridgeUID, thingID);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withProperty(THING_PROPERTIES_NUMBER, thingID)\n+                        .withRepresentationProperty(THING_PROPERTIES_NUMBER).withBridge(bridgeUID).withLabel(thingName)\n+                        .build();\n+                thingDiscovered(discoveryResult);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Discovers OmniLink audio zones\n+     */\n+    private void discoverAudioZones() {\n+        final OmnilinkBridgeHandler handler = bridgeHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkxNjE3Mw==", "bodyText": "Can you implement RefreshType.REFRESH?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555916173", "createdAt": "2021-01-12T16:43:00Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractAreaHandler.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.AreaAlarm;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AbstractAreaHandler} defines some methods that can be used across\n+ * the many different areas defined in an OmniLink Controller.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractAreaHandler extends AbstractOmnilinkStatusHandler<ExtendedAreaStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractAreaHandler.class);\n+    private final int thingID = getThingNumber();\n+\n+    public AbstractAreaHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateAreaProperties(bridgeHandler);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Received null bridge while initializing Area!\");\n+        }\n+    }\n+\n+    private void updateAreaProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                String thingName = areaProperties.getName();\n+                if (areaProperties.getNumber() == 1 && \"\".equals(thingName)) {\n+                    thingName = \"Main Area\";\n+                }\n+                Map<String, String> properties = editProperties();\n+                properties.put(THING_PROPERTIES_NAME, thingName);\n+                updateProperties(properties);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand: {}, command: {}\", channelUID, command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkxOTAxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        OnOffType alarmState = alarm.isSet(alarmBits) ? OnOffType.ON : OnOffType.OFF;\n          \n          \n            \n                        OnOffType alarmState = OnOffType.from(alarm.isSet(alarmBits));\n          \n      \n    \n    \n  \n\nmaybe also in other places", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555919013", "createdAt": "2021-01-12T16:46:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractAreaHandler.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.AreaAlarm;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AbstractAreaHandler} defines some methods that can be used across\n+ * the many different areas defined in an OmniLink Controller.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractAreaHandler extends AbstractOmnilinkStatusHandler<ExtendedAreaStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractAreaHandler.class);\n+    private final int thingID = getThingNumber();\n+\n+    public AbstractAreaHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateAreaProperties(bridgeHandler);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Received null bridge while initializing Area!\");\n+        }\n+    }\n+\n+    private void updateAreaProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                String thingName = areaProperties.getName();\n+                if (areaProperties.getNumber() == 1 && \"\".equals(thingName)) {\n+                    thingName = \"Main Area\";\n+                }\n+                Map<String, String> properties = editProperties();\n+                properties.put(THING_PROPERTIES_NAME, thingName);\n+                updateProperties(properties);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand: {}, command: {}\", channelUID, command);\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_AREA_ACTIVATE_KEYPAD_EMERGENCY:\n+                handleKeypadEmergency(channelUID, command);\n+                break;\n+            default:\n+                handleSecurityMode(channelUID, command);\n+                break;\n+        }\n+    }\n+\n+    private void handleSecurityMode(ChannelUID channelUID, Command command) {\n+        int mode = getMode(channelUID);\n+\n+        if (!(command instanceof StringType)) {\n+            logger.warn(\"Invalid command: {}, must be StringType\", command);\n+            return;\n+        }\n+\n+        logger.debug(\"Received mode: {}, on area: {}\", mode, thingID);\n+\n+        char[] code = command.toFullString().toCharArray();\n+        if (code.length != 4) {\n+            logger.warn(\"Invalid code length, code must be 4 digits\");\n+        } else {\n+            // mode, codeNum, areaNum\n+            try {\n+                final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+                if (bridge != null) {\n+                    SecurityCodeValidation codeValidation = bridge.reqSecurityCodeValidation(thingID,\n+                            Character.getNumericValue(code[0]), Character.getNumericValue(code[1]),\n+                            Character.getNumericValue(code[2]), Character.getNumericValue(code[3]));\n+                    /*\n+                     * 0 Invalid code\n+                     * 1 Master\n+                     * 2 Manager\n+                     * 3 User\n+                     */\n+                    logger.debug(\"User code number: {}, level: {}\", codeValidation.getCodeNumber(),\n+                            codeValidation.getAuthorityLevel());\n+\n+                    /*\n+                     * Valid user code number are 1-99, 251 is duress code, 0 means code does not exist\n+                     */\n+                    if ((codeValidation.getCodeNumber() > 0 && codeValidation.getCodeNumber() <= 99)\n+                            && codeValidation.getAuthorityLevel() > 0) {\n+                        sendOmnilinkCommand(mode, codeValidation.getCodeNumber(), thingID);\n+                    } else {\n+                        logger.warn(\"System reported an invalid code\");\n+                    }\n+                } else {\n+                    logger.debug(\"Received null bridge while sending area command!\");\n+                }\n+            } catch (OmniInvalidResponseException e) {\n+                logger.debug(\"Could not arm area: {}, are all zones closed?\", e.getMessage());\n+            } catch (OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.debug(\"Could not send area command: {}\", e.getMessage());\n+            }\n+        }\n+        // This is a send only channel, so don't store the user code\n+        updateState(channelUID, UnDefType.UNDEF);\n+    }\n+\n+    /**\n+     * Get the specific mode for the OmniLink type\n+     *\n+     * @param channelUID Channel that maps to a mode\n+     * @return OmniLink representation of mode.\n+     */\n+    protected abstract int getMode(ChannelUID channelUID);\n+\n+    /**\n+     * Get the set of alarms supported by this area handler.\n+     *\n+     * @return Set of alarms for this handler.\n+     */\n+    protected abstract EnumSet<AreaAlarm> getAlarms();\n+\n+    private void handleKeypadEmergency(ChannelUID channelUID, Command command) {\n+        if (command instanceof DecimalType) {\n+            try {\n+                final OmnilinkBridgeHandler bridge = getOmnilinkBridgeHandler();\n+                if (bridge != null) {\n+                    bridge.activateKeypadEmergency(thingID, ((DecimalType) command).intValue());\n+                } else {\n+                    logger.debug(\"Received null bridge while sending Keypad Emergency command!\");\n+                }\n+            } catch (OmniInvalidResponseException | OmniUnknownMessageTypeException | BridgeOfflineException e) {\n+                logger.debug(\"Received exception while sending command to OmniLink Controller: {}\", e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+        }\n+    }\n+\n+    @Override\n+    public void updateChannels(ExtendedAreaStatus status) {\n+        logger.debug(\"Handle area event: mode: {}, alarms: {}, entryTimer: {}, exitTimer: {}\", status.getMode(),\n+                status.getAlarms(), status.getEntryTimer(), status.getExitTimer());\n+\n+        /*\n+         * According to the specification, if the 3rd bit is set on a area mode, then that mode is in a delayed state.\n+         * Unfortunately, this is not the case, but we can fix that by looking to see if the exit timer\n+         * is set and do this manually.\n+         */\n+        int mode = status.getExitTimer() > 0 ? status.getMode() | 1 << 3 : status.getMode();\n+        updateState(new ChannelUID(thing.getUID(), CHANNEL_AREA_MODE), new DecimalType(mode));\n+\n+        /*\n+         * Alarm status is actually 8 status, packed into each bit, so we loop through to see if a bit is set, note that\n+         * this means you can have multiple alarms set at once\n+         */\n+        BigInteger alarmBits = BigInteger.valueOf(status.getAlarms());\n+        for (AreaAlarm alarm : getAlarms()) {\n+            OnOffType alarmState = alarm.isSet(alarmBits) ? OnOffType.ON : OnOffType.OFF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkyMTQ5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (status.isPresent()) {\n          \n          \n            \n                        updateChannels(status.get());\n          \n          \n            \n                    }\n          \n          \n            \n                    status.ifPresent(this::updateChannels);", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555921492", "createdAt": "2021-01-12T16:50:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractOmnilinkStatusHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+\n+/**\n+ * The {@link AbstractOmnilinkStatusHandler} defines some methods that can be used across\n+ * the many different units exposed by the OmniLink protocol to retrive updated status information.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractOmnilinkStatusHandler<T extends Status> extends AbstractOmnilinkHandler {\n+    public AbstractOmnilinkStatusHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    private volatile Optional<T> status = Optional.empty();\n+\n+    @Override\n+    public void initialize() {\n+        updateHandlerStatus();\n+    }\n+\n+    /**\n+     * Attempt to retrieve an updated status for this handler type.\n+     *\n+     * @return Optional with updated status if possible, empty optional otherwise.\n+     */\n+    protected abstract Optional<T> retrieveStatus();\n+\n+    /**\n+     * Update channels associated with handler\n+     *\n+     * @param t Status object to update channels with\n+     */\n+    protected abstract void updateChannels(T t);\n+\n+    /**\n+     * Process a status update for this handler. This will dispatch updateChannels where appropriate.\n+     *\n+     * @param t Status to process.\n+     */\n+    public void handleStatus(T t) {\n+        this.status = Optional.of(t);\n+        updateChannels(t);\n+    }\n+\n+    @Override\n+    public void channelLinked(ChannelUID channelUID) {\n+        if (status.isPresent()) {\n+            updateChannels(status.get());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkyMzc2NQ==", "bodyText": "Is this really necessary?Handling the REFRESH command should be enough", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555923765", "createdAt": "2021-01-12T16:53:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/ConsoleHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ConsoleHandler} defines some methods that are used to\n+ * interface with an OmniLink Console. This by extension also defines the\n+ * Console thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ * @author Ethan Dye - openHAB3 rewrite\n+ */\n+@NonNullByDefault\n+public class ConsoleHandler extends AbstractOmnilinkHandler {\n+    private final Logger logger = LoggerFactory.getLogger(ConsoleHandler.class);\n+    private final int thingID = getThingNumber();\n+\n+    public ConsoleHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        if (getOmnilinkBridgeHandler() != null) {\n+            updateStatus(ThingStatus.ONLINE);\n+            updateChannels();\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Received null bridge while initializing Console!\");\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER:\n+                if (command instanceof StringType) {\n+                    sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_ENABLE_DISABLE_BEEPER.getNumber(),\n+                            ((StringType) command).equals(StringType.valueOf(\"OFF\")) ? 0 : 1, thingID);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be StringType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_BEEP:\n+                if (command instanceof DecimalType) {\n+                    sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_BEEP.getNumber(), ((DecimalType) command).intValue(),\n+                            thingID);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Console thing: {}\", channelUID.getAsString());\n+        }\n+        updateChannels();\n+    }\n+\n+    public void updateChannels() {\n+        updateState(CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER, UnDefType.UNDEF);\n+        updateState(CHANNEL_CONSOLE_BEEP, UnDefType.UNDEF);\n+    }\n+\n+    @Override\n+    public void channelLinked(ChannelUID channelUID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkyNTQ4NQ==", "bodyText": "Why don't you use QuantityType here?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555925485", "createdAt": "2021-01-12T16:55:46Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/HumiditySensorHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AuxSensorProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link HumiditySensorHandler} defines some methods that are used to\n+ * interface with an OmniLink Humidity Sensor. This by extension also defines\n+ * the Humidity Sensor thing that openHAB will be able to pick up and interface\n+ * with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ * @author Ethan Dye - openHAB3 rewrite\n+ */\n+@NonNullByDefault\n+public class HumiditySensorHandler extends AbstractOmnilinkStatusHandler<ExtendedAuxSensorStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(HumiditySensorHandler.class);\n+    private final int thingID = getThingNumber();\n+    public @Nullable String number;\n+\n+    public HumiditySensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+        if (bridgeHandler != null) {\n+            updateHumiditySensorProperties(bridgeHandler);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Received null bridge while initializing Humidity Sensor!\");\n+        }\n+    }\n+\n+    private void updateHumiditySensorProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<AuxSensorProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.AUX_SENSORS, thingID, 0).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (AuxSensorProperties auxSensorProperties : objectPropertyRequest) {\n+                    Map<String, String> properties = editProperties();\n+                    properties.put(THING_PROPERTIES_NAME, auxSensorProperties.getName());\n+                    properties.put(THING_PROPERTIES_AREA, Integer.toString(areaProperties.getNumber()));\n+                    updateProperties(properties);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+\n+        if (!(command instanceof DecimalType)) {\n+            logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+            return;\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_AUX_LOW_SETPOINT:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_HEAT_LOW_POINT.getNumber(),\n+                        TemperatureFormat.FAHRENHEIT.formatToOmni(((DecimalType) command).intValue()), thingID);\n+                break;\n+            case CHANNEL_AUX_HIGH_SETPOINT:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_COOL_HIGH_POINT.getNumber(),\n+                        TemperatureFormat.FAHRENHEIT.formatToOmni(((DecimalType) command).intValue()), thingID);\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Humdity Sensor thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    @Override\n+    public void updateChannels(ExtendedAuxSensorStatus status) {\n+        logger.debug(\"updateChannels called for Humidity Sensor status: {}\", status);\n+        updateState(CHANNEL_AUX_HUMIDITY,\n+                new DecimalType(TemperatureFormat.FAHRENHEIT.omniToFormat(status.getTemperature())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkzMDQ5NQ==", "bodyText": "Just ignore unsupported commands (if you want to log, log at TRACE or DEBUG)", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555930495", "createdAt": "2021-01-12T17:02:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/LockHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AccessControlReaderProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link LockHandler} defines some methods that are used to\n+ * interface with an OmniLink Lock. This by extension also defines the\n+ * Lock thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Brian O'Connell - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LockHandler extends AbstractOmnilinkStatusHandler<ExtendedAccessControlReaderLockStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(LockHandler.class);\n+    private final int thingID = getThingNumber();\n+    public @Nullable String number;\n+\n+    public LockHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+        if (bridgeHandler != null) {\n+            updateLockProperties(bridgeHandler);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Received null bridge while initializing Lock!\");\n+        }\n+    }\n+\n+    private void updateLockProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        ObjectPropertyRequest<AccessControlReaderProperties> objectPropertyRequest = ObjectPropertyRequest\n+                .builder(bridgeHandler, ObjectPropertyRequests.LOCK, thingID, 0).selectNamed().build();\n+\n+        for (AccessControlReaderProperties lockProperties : objectPropertyRequest) {\n+            Map<String, String> properties = editProperties();\n+            properties.put(THING_PROPERTIES_NAME, lockProperties.getName());\n+            updateProperties(properties);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LOCK_SWITCH:\n+                if (command instanceof OnOffType) {\n+                    sendOmnilinkCommand(OnOffType.OFF.equals(command) ? OmniLinkCmd.CMD_UNLOCK_DOOR.getNumber()\n+                            : OmniLinkCmd.CMD_LOCK_DOOR.getNumber(), 0, thingID);\n+                } else {\n+                    logger.warn(\"Invalid command {}, must be OnOffType\", command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkzMjQzNg==", "bodyText": "Why don't you use an Optional here? ou do that in other enums.", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555932436", "createdAt": "2021-01-12T17:05:10Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmniLinkCmd.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * OmniLink commands\n+ *\n+ * @author Dan Cunningham - Initial contribution\n+ * @since 1.5.0\n+ */\n+@NonNullByDefault\n+public enum OmniLinkCmd {\n+    CMD_UNIT_OFF(0),\n+    CMD_UNIT_ON(1),\n+    CMD_UNIT_AREA_ALL_OFF(2),\n+    CMD_UNIT_AREA_ALL_ON(3),\n+    CMD_UNIT_PERCENT(9),\n+    CMD_UNIT_LO9_LEVEL_HIGH7(101),\n+    CMD_UNIT_DECREMENT_COUNTER(10),\n+    CMD_UNIT_INCREMENT_COUNTER(11),\n+    CMD_UNIT_SET_COUNTER(12),\n+    CMD_UNIT_LO9_RAMP_HIGH7(13),\n+    CMD_UNIT_LIGHTOLIER(14),\n+    CMD_UNIT_UPB_REQ_STATUS(15),\n+    CMD_UNIT_UNIT_DIM_STEP_1(17),\n+    CMD_UNIT_UNIT_DIM_STEP_2(18),\n+    CMD_UNIT_UNIT_DIM_STEP_3(19),\n+    CMD_UNIT_UNIT_DIM_STEP_4(20),\n+    CMD_UNIT_UNIT_DIM_STEP_5(21),\n+    CMD_UNIT_UNIT_DIM_STEP_6(22),\n+    CMD_UNIT_UNIT_DIM_STEP_7(23),\n+    CMD_UNIT_UNIT_DIM_STEP_8(24),\n+    CMD_UNIT_UNIT_DIM_STEP_9(25),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_1(33),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_2(34),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_3(35),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_4(36),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_5(37),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_6(38),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_7(39),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_8(40),\n+    CMD_UNIT_UNIT_BRIGHTEN_STEP_9(41),\n+    CMD_UNIT_UPB_LO9_BLINK_HIGH7(26),\n+    CMD_UNIT_UPB_STOP_BLINK(27),\n+    CMD_UNIT_UPB_LINK_OFF(28),\n+    CMD_UNIT_UPB_LINK_ON(29),\n+    CMD_UNIT_UPB_LINK_SET(30),\n+    CMD_UNIT_CENTRALITE_SCENE_OFF(42),\n+    CMD_UNIT_CENTRALITE_SCENE_ON(43),\n+    CMD_UNIT_UPB_LED_OFF(44),\n+    CMD_UNIT_UPB_LED_ON(45),\n+    CMD_UNIT_RADIORA_PHANTOM_BUTTON_OFF(46),\n+    CMD_UNIT_RADIORA_PHANTM_BUTTON_ON(46),\n+    CMD_UNIT_LEVITON_SCENE_OFF(60),\n+    CMD_UNIT_LEVITON_SCENE_ON(61),\n+    CMD_UNIT_LEVITON_SCENE_SET(62),\n+\n+    CMD_SECURITY_OMNI_DISARM(48),\n+    CMD_SECURITY_OMNI_DAY_MODE(49),\n+    CMD_SECURITY_OMNI_NIGHT_MODE(50),\n+    CMD_SECURITY_OMNI_AWAY_MODE(51),\n+    CMD_SECURITY_OMNI_VACATION_MODE(52),\n+    CMD_SECURITY_OMNI_DAY_INSTANCE_MODE(53),\n+    CMD_SECURITY_OMNI_NIGHT_DELAYED_MODE(54),\n+    CMD_SECURITY_BYPASS_ZONE(4),\n+    CMD_SECURITY_RESTORE_ZONE(5),\n+    CMD_SECURITY_RESTORE_ALL_ZONES(6),\n+    CMD_SECURITY_LUMINA_HOME_MODE(49),\n+    CMD_SECURITY_LUMINA_SLEEP_MODE(50),\n+    CMD_SECURITY_LUMINA_AWAY_MODE(51),\n+    CMD_SECURITY_LUMINA_VACATION_MODE(52),\n+    CMD_SECURITY_LUMINA_PARTY_MODE(53),\n+    CMD_SECURITY_LUMINA_SPECIAL_MODE(54),\n+\n+    CMD_BUTTON(7),\n+\n+    CMD_ENERGY_SAVER_OFF(64),\n+    CMD_ENERGY_SAVER_ON(65),\n+\n+    CMD_THERMO_SET_HEAT_LOW_POINT(66),\n+    CMD_THERMO_SET_COOL_HIGH_POINT(67),\n+    CMD_THERMO_SET_SYSTEM_MODE(68),\n+    CMD_THERMO_SET_FAN_MODE(69),\n+    CMD_THERMO_SET_HOLD_MODE(70),\n+    CMD_THERMO_RAISE_LOWER_HEAT(71),\n+    CMD_THERMO_RAISE_LOWER_COOL(72),\n+    CMD_THERMO_SET_HUMDIFY_POINT(73),\n+    CMD_THERMO_SET_DEHUMIDIFY_POINT(74),\n+\n+    CMD_MESSAGE_SHOW_MESSAGE_WITH_BEEP_AND_LED(80),\n+    CMD_MESSAGE_SHOW_MESSAGE_WITH_BEEP_OR_LED(86),\n+    CMD_MESSAGE_LOG_MESSAGE(81),\n+    CMD_MESSAGE_CLEAR_MESSAGE(82),\n+    CMD_MESSAGE_SAY_MESSAGE(83),\n+    CMD_MESSAGE_PHONE_AND_SAY_MESSAGE(84),\n+    CMD_MESSAGE_SEND_MESSAGE_TO_SERIAL_PORT(85),\n+\n+    CMD_CONSOLE_ENABLE_DISABLE_BEEPER(102),\n+    CMD_CONSOLE_BEEP(103),\n+\n+    CMD_LOCK_DOOR(105),\n+    CMD_UNLOCK_DOOR(106),\n+\n+    CMD_AUDIO_ZONE_SET_ON_MUTE(112),\n+    CMD_AUDIO_ZONE_SET_VOLUME(113),\n+    CMD_AUDIO_ZONE_SET_SOURCE(114),\n+    CMD_AUDIO_ZONE_SELECT_KEY(115),\n+\n+    SENSOR_UNIT_POWER(1001),\n+    SENSOR_UNIT_LEVEL(1002),\n+    SENSOR_UNIT_DISPLAY(1003),\n+    SENSOR_THERMO_HEAT_POINTC(2001),\n+    SENSOR_THERMO_HEAT_POINTF(2002),\n+    SENSOR_THERMO_COOL_POINTC(2003),\n+    SENSOR_THERMO_COOL_POINTF(2004),\n+    SENSOR_THERMO_SYSTEM_MODE(2005),\n+    SENSOR_THERMO_FAN_MODE(2006),\n+    SENSOR_THERMO_HOLD_MODE(2007),\n+    SENSOR_THERMO_TEMPC(2006),\n+    SENSOR_THERMO_TEMPF(2007),\n+    SENSOR_ZONE_STATUS_CURRENT(3001),\n+    SENSOR_ZONE_STATUS_LATCHED(3002),\n+    SENSOR_ZONE_STATUS_ARMING(3003),\n+    SENSOR_AREA_STATUS_MODE(4001),\n+    SENSOR_AREA_STATUS_ALARM(4002),\n+    SENSOR_AREA_STATUS_EXIT_DELAY(4003),\n+    SENSOR_AREA_STATUS_ENTRY_DELAY(4003),\n+    SENSOR_AREA_EXIT_TIMER(4004),\n+    SENSOR_AREA_ENTRY_TIMER(4005),\n+    SENSOR_AUX_STATUS(5001),\n+    SENSOR_AUX_CURRENTC(5002),\n+    SENSOR_AUX_CURRENTF(5003),\n+    SENSOR_AUX_LOWC(5004),\n+    SENSOR_AUX_LOWF(5005),\n+    SENSOR_AUX_HIGHC(5006),\n+    SENSOR_AUX_HIGHF(5007),\n+    SENSOR_AUDIOZONE_POWER(6001),\n+    SENSOR_AUDIOZONE_SOURCE(6002),\n+    SENSOR_AUDIOZONE_VOLUME(6003),\n+    SENSOR_AUDIOZONE_MUTE(6004),\n+    SENSOR_AUDIOZONE_TEXT(6005),\n+    SENSOR_AUDIOZONE_TEXT_FIELD1(6006),\n+    SENSOR_AUDIOZONE_TEXT_FIELD2(6007),\n+    SENSOR_AUDIOZONE_TEXT_FIELD3(6008),\n+    SENSOR_AUDIOSOURCE_TEXT(7001),\n+    SENSOR_AUDIOSOURCE_TEXT_FIELD1(7002),\n+    SENSOR_AUDIOSOURCE_TEXT_FIELD2(7003),\n+    SENSOR_AUDIOSOURCE_TEXT_FIELD3(7004);\n+\n+    private int number;\n+\n+    OmniLinkCmd(int number) {\n+        this.number = number;\n+    }\n+\n+    public int getNumber() {\n+        return number;\n+    }\n+\n+    public static @Nullable OmniLinkCmd getCommand(String name) {\n+        for (OmniLinkCmd command : OmniLinkCmd.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkzMzIxMA==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555933210", "createdAt": "2021-01-12T17:06:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,688 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.config.OmnilinkBridgeConfig;\n+import org.openhab.binding.omnilink.internal.discovery.OmnilinkDiscoveryService;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Connection;\n+import com.digitaldan.jomnilinkII.DisconnectListener;\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.EventLogData;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFeatures;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFormats;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.ButtonEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SwitchPressEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SystemEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.UPBLinkEvent;\n+import com.digitaldan.jomnilinkII.NotificationListener;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniNotConnectedException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link OmnilinkBridgeHandler} defines some methods that are used to\n+ * interface with an OmniLink Controller. This by extension also defines the\n+ * OmniLink bridge that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeHandler extends BaseBridgeHandler implements NotificationListener, DisconnectListener {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkBridgeHandler.class);\n+    private @Nullable Connection omniConnection = null;\n+    private @Nullable ScheduledFuture<?> connectJob;\n+    private @Nullable ScheduledFuture<?> eventPollingJob;\n+    private final int autoReconnectPeriod = 60;\n+    private Optional<AudioPlayer> audioPlayer = Optional.empty();\n+    private @Nullable SystemType systemType = null;\n+    private final Gson gson = new Gson();\n+    private int eventLogNumber = 0;\n+\n+    public OmnilinkBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(OmnilinkDiscoveryService.class);\n+    }\n+\n+    public void sendOmnilinkCommand(final int message, final int param1, final int param2)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().controllerCommand(message, param1, param2);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SecurityCodeValidation reqSecurityCodeValidation(int area, int digit1, int digit2, int digit3, int digit4)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSecurityCodeValidation(area, digit1, digit2, digit3, digit4);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public void activateKeypadEmergency(int area, int emergencyType)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().activateKeypadEmergency(area, emergencyType);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemInformation reqSystemInformation()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemInformation();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemFormats reqSystemFormats()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFormats();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    private SystemFeatures reqSystemFeatures()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFeatures();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID, command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_SYSTEMDATE:\n+                if (command instanceof DateTimeType) {\n+                    ZonedDateTime zdt = ((DateTimeType) command).getZonedDateTime();\n+                    boolean inDaylightSavings = zdt.getZone().getRules().isDaylightSavings(zdt.toInstant());\n+                    try {\n+                        getOmniConnection().setTimeCommand(zdt.getYear() - 2000, zdt.getMonthValue(),\n+                                zdt.getDayOfMonth(), zdt.getDayOfWeek().getValue(), zdt.getHour(), zdt.getMinute(),\n+                                inDaylightSavings);\n+                    } catch (IOException | OmniNotConnectedException | OmniInvalidResponseException\n+                            | OmniUnknownMessageTypeException e) {\n+                        logger.debug(\"Could not send Set Time command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DateTimeType\", command);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkzNDk3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .map(featureCode -> AudioPlayer.getAudioPlayerForFeatureCode(featureCode))\n          \n          \n            \n                                .filter(Optional::isPresent).findFirst().orElse(Optional.empty());\n          \n          \n            \n                                .flatMap(AudioPlayer::getAudioPlayerForFeatureCode)\n          \n          \n            \n                                .filter(Objects::nonNull).findFirst();", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555934972", "createdAt": "2021-01-12T17:08:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,688 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.time.ZonedDateTime;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.AudioPlayer;\n+import org.openhab.binding.omnilink.internal.SystemType;\n+import org.openhab.binding.omnilink.internal.config.OmnilinkBridgeConfig;\n+import org.openhab.binding.omnilink.internal.discovery.OmnilinkDiscoveryService;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Connection;\n+import com.digitaldan.jomnilinkII.DisconnectListener;\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.EventLogData;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFeatures;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemFormats;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemInformation;\n+import com.digitaldan.jomnilinkII.MessageTypes.SystemStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAccessControlReaderLockStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAudioZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAuxSensorStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedZoneStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.Status;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.ButtonEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SwitchPressEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.SystemEvent;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.UPBLinkEvent;\n+import com.digitaldan.jomnilinkII.NotificationListener;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniNotConnectedException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link OmnilinkBridgeHandler} defines some methods that are used to\n+ * interface with an OmniLink Controller. This by extension also defines the\n+ * OmniLink bridge that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class OmnilinkBridgeHandler extends BaseBridgeHandler implements NotificationListener, DisconnectListener {\n+    private final Logger logger = LoggerFactory.getLogger(OmnilinkBridgeHandler.class);\n+    private @Nullable Connection omniConnection = null;\n+    private @Nullable ScheduledFuture<?> connectJob;\n+    private @Nullable ScheduledFuture<?> eventPollingJob;\n+    private final int autoReconnectPeriod = 60;\n+    private Optional<AudioPlayer> audioPlayer = Optional.empty();\n+    private @Nullable SystemType systemType = null;\n+    private final Gson gson = new Gson();\n+    private int eventLogNumber = 0;\n+\n+    public OmnilinkBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(OmnilinkDiscoveryService.class);\n+    }\n+\n+    public void sendOmnilinkCommand(final int message, final int param1, final int param2)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().controllerCommand(message, param1, param2);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SecurityCodeValidation reqSecurityCodeValidation(int area, int digit1, int digit2, int digit3, int digit4)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSecurityCodeValidation(area, digit1, digit2, digit3, digit4);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public void activateKeypadEmergency(int area, int emergencyType)\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            getOmniConnection().activateKeypadEmergency(area, emergencyType);\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemInformation reqSystemInformation()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemInformation();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    public SystemFormats reqSystemFormats()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFormats();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    private SystemFeatures reqSystemFeatures()\n+            throws OmniInvalidResponseException, OmniUnknownMessageTypeException, BridgeOfflineException {\n+        try {\n+            return getOmniConnection().reqSystemFeatures();\n+        } catch (IOException | OmniNotConnectedException e) {\n+            setOfflineAndReconnect(e.getMessage());\n+            throw new BridgeOfflineException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID, command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_SYSTEMDATE:\n+                if (command instanceof DateTimeType) {\n+                    ZonedDateTime zdt = ((DateTimeType) command).getZonedDateTime();\n+                    boolean inDaylightSavings = zdt.getZone().getRules().isDaylightSavings(zdt.toInstant());\n+                    try {\n+                        getOmniConnection().setTimeCommand(zdt.getYear() - 2000, zdt.getMonthValue(),\n+                                zdt.getDayOfMonth(), zdt.getDayOfWeek().getValue(), zdt.getHour(), zdt.getMinute(),\n+                                inDaylightSavings);\n+                    } catch (IOException | OmniNotConnectedException | OmniInvalidResponseException\n+                            | OmniUnknownMessageTypeException e) {\n+                        logger.debug(\"Could not send Set Time command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DateTimeType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER:\n+                if (command instanceof StringType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_ENABLE_DISABLE_BEEPER.getNumber(),\n+                                ((StringType) command).equals(StringType.valueOf(\"OFF\")) ? 0 : 1, 0);\n+                        updateState(CHANNEL_CONSOLE_ENABLE_DISABLE_BEEPER, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be StringType\", command);\n+                }\n+                break;\n+            case CHANNEL_CONSOLE_BEEP:\n+                if (command instanceof DecimalType) {\n+                    try {\n+                        sendOmnilinkCommand(OmniLinkCmd.CMD_CONSOLE_BEEP.getNumber(),\n+                                ((DecimalType) command).intValue(), 0);\n+                        updateState(CHANNEL_CONSOLE_BEEP, UnDefType.UNDEF);\n+                    } catch (NumberFormatException | OmniInvalidResponseException | OmniUnknownMessageTypeException\n+                            | BridgeOfflineException e) {\n+                        logger.debug(\"Could not send Console command to OmniLink Controller: {}\", e.getMessage());\n+                    }\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Bridge thing: {}\", channelUID.getAsString());\n+        }\n+    }\n+\n+    private void makeOmnilinkConnection() {\n+        final Connection connection = omniConnection;\n+        if (connection != null && connection.connected()) {\n+            return;\n+        }\n+\n+        logger.debug(\"Attempting to connect to controller!\");\n+        try {\n+            OmnilinkBridgeConfig config = getConfigAs(OmnilinkBridgeConfig.class);\n+\n+            this.omniConnection = new Connection(config.getIpAddress(), config.getPort(),\n+                    config.getKey1() + \":\" + config.getKey2());\n+\n+            /*\n+             * HAI only supports one audio player - cycle through features until we find a feature that is an audio\n+             * player.\n+             */\n+            audioPlayer = reqSystemFeatures().getFeatures().stream()\n+                    .map(featureCode -> AudioPlayer.getAudioPlayerForFeatureCode(featureCode))\n+                    .filter(Optional::isPresent).findFirst().orElse(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MzM1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TemperatureFormat(int formatNumber) {\n          \n          \n            \n                private TemperatureFormat(int formatNumber) {", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555943355", "createdAt": "2021-01-12T17:21:19Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/TemperatureFormat.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.digitaldan.jomnilinkII.MessageUtils;\n+\n+/**\n+ * The {@link TemperatureFormat} defines some methods that are used to\n+ * convert OmniLink temperature values into Fahrenheit or Celsius.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum TemperatureFormat {\n+    // Don't convert zero - it appears that is what omni returns when there is no value.\n+    CELSIUS(2) {\n+        @Override\n+        float omniToFormat(int omniNumber) {\n+            return MessageUtils.omniToC(omniNumber);\n+        }\n+\n+        @Override\n+        int formatToOmni(int celsius) {\n+            return MessageUtils.CToOmni(celsius);\n+        }\n+    },\n+    FAHRENHEIT(1) {\n+        @Override\n+        float omniToFormat(int omniNumber) {\n+            return MessageUtils.omniToF(omniNumber);\n+        }\n+\n+        @Override\n+        int formatToOmni(int fahrenheit) {\n+            return MessageUtils.FtoOmni(fahrenheit);\n+        }\n+    };\n+\n+    private final int formatNumber;\n+\n+    TemperatureFormat(int formatNumber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0MzU1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                abstract float omniToFormat(int omniNumber);\n          \n          \n            \n                public abstract float omniToFormat(int omniNumber);\n          \n      \n    \n    \n  \n\nalso other methods", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555943554", "createdAt": "2021-01-12T17:21:33Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/TemperatureFormat.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+import com.digitaldan.jomnilinkII.MessageUtils;\n+\n+/**\n+ * The {@link TemperatureFormat} defines some methods that are used to\n+ * convert OmniLink temperature values into Fahrenheit or Celsius.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public enum TemperatureFormat {\n+    // Don't convert zero - it appears that is what omni returns when there is no value.\n+    CELSIUS(2) {\n+        @Override\n+        float omniToFormat(int omniNumber) {\n+            return MessageUtils.omniToC(omniNumber);\n+        }\n+\n+        @Override\n+        int formatToOmni(int celsius) {\n+            return MessageUtils.CToOmni(celsius);\n+        }\n+    },\n+    FAHRENHEIT(1) {\n+        @Override\n+        float omniToFormat(int omniNumber) {\n+            return MessageUtils.omniToF(omniNumber);\n+        }\n+\n+        @Override\n+        int formatToOmni(int fahrenheit) {\n+            return MessageUtils.FtoOmni(fahrenheit);\n+        }\n+    };\n+\n+    private final int formatNumber;\n+\n+    TemperatureFormat(int formatNumber) {\n+        this.formatNumber = formatNumber;\n+    }\n+\n+    /**\n+     * Convert a number represented by the omni to the format.\n+     *\n+     * @param omniNumber Number to convert\n+     * @return Number converted to appropriate format.\n+     */\n+    abstract float omniToFormat(int omniNumber);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NTU5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.warn(\"Unknown channel for Thermostat thing: {}\", channelUID.getAsString());\n          \n          \n            \n                            logger.warn(\"Unknown channel for Thermostat thing: {}\", channelUID);\n          \n      \n    \n    \n  \n\nChannelUID properly implements toString", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555945599", "createdAt": "2021-01-12T17:24:39Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/ThermostatHandler.java", "diffHunk": "@@ -0,0 +1,241 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequest;\n+import org.openhab.binding.omnilink.internal.discovery.ObjectPropertyRequests;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.ThermostatProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedThermostatStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link ThermostatHandler} defines some methods that are used to\n+ * interface with an OmniLink Thermostat. This by extension also defines the\n+ * Thermostat thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThermostatHandler extends AbstractOmnilinkStatusHandler<ExtendedThermostatStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(ThermostatHandler.class);\n+    private final int thingID = getThingNumber();\n+    public @Nullable String number;\n+\n+    private enum ThermostatStatus {\n+        HEATING(0, 1),\n+        COOLING(1, 2),\n+        HUMIDIFYING(2, 3),\n+        DEHUMIDIFYING(3, 4);\n+\n+        private final int bit;\n+        private final int modeValue;\n+\n+        private ThermostatStatus(int bit, int modeValue) {\n+            this.bit = bit;\n+            this.modeValue = modeValue;\n+        }\n+    }\n+\n+    public ThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+        if (bridgeHandler != null) {\n+            updateThermostatProperties(bridgeHandler);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Received null bridge while initializing Thermostat!\");\n+        }\n+    }\n+\n+    private void updateThermostatProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                int areaFilter = bitFilterForArea(areaProperties);\n+\n+                ObjectPropertyRequest<ThermostatProperties> objectPropertyRequest = ObjectPropertyRequest\n+                        .builder(bridgeHandler, ObjectPropertyRequests.THERMOSTAT, thingID, 0).selectNamed()\n+                        .areaFilter(areaFilter).build();\n+\n+                for (ThermostatProperties thermostatProperties : objectPropertyRequest) {\n+                    Map<String, String> properties = editProperties();\n+                    properties.put(THING_PROPERTIES_NAME, thermostatProperties.getName());\n+                    properties.put(THING_PROPERTIES_AREA, Integer.toString(areaProperties.getNumber()));\n+                    updateProperties(properties);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+        Optional<TemperatureFormat> temperatureFormat = Optional.empty();\n+\n+        if (!(command instanceof DecimalType)) {\n+            logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+            return;\n+        }\n+        if (bridgeHandler != null) {\n+            temperatureFormat = bridgeHandler.getTemperatureFormat();\n+            if (!temperatureFormat.isPresent()) {\n+                logger.warn(\"Receieved null temperature format!\");\n+                return;\n+            }\n+        } else {\n+            logger.warn(\"Could not connect to Bridge, failed to get temperature format!\");\n+            return;\n+        }\n+\n+        switch (channelUID.getId()) {\n+            case CHANNEL_THERMO_SYSTEM_MODE:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_SYSTEM_MODE.getNumber(),\n+                        ((DecimalType) command).intValue(), thingID);\n+                break;\n+            case CHANNEL_THERMO_FAN_MODE:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_FAN_MODE.getNumber(), ((DecimalType) command).intValue(),\n+                        thingID);\n+                break;\n+            case CHANNEL_THERMO_HOLD_STATUS:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_HOLD_MODE.getNumber(),\n+                        ((DecimalType) command).intValue(), thingID);\n+                break;\n+            case CHANNEL_THERMO_HEAT_SETPOINT:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_HEAT_LOW_POINT.getNumber(),\n+                        temperatureFormat.get().formatToOmni(((DecimalType) command).intValue()), thingID);\n+                break;\n+            case CHANNEL_THERMO_COOL_SETPOINT:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_COOL_HIGH_POINT.getNumber(),\n+                        temperatureFormat.get().formatToOmni(((DecimalType) command).intValue()), thingID);\n+                break;\n+            case CHANNEL_THERMO_HUMIDIFY_SETPOINT:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_HUMDIFY_POINT.getNumber(),\n+                        TemperatureFormat.FAHRENHEIT.formatToOmni(((DecimalType) command).intValue()), thingID);\n+                break;\n+            case CHANNEL_THERMO_DEHUMIDIFY_SETPOINT:\n+                sendOmnilinkCommand(OmniLinkCmd.CMD_THERMO_SET_DEHUMIDIFY_POINT.getNumber(),\n+                        TemperatureFormat.FAHRENHEIT.formatToOmni(((DecimalType) command).intValue()), thingID);\n+                break;\n+            default:\n+                logger.warn(\"Unknown channel for Thermostat thing: {}\", channelUID.getAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0NzcxMQ==", "bodyText": "OnOffType.from", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555947711", "createdAt": "2021-01-12T17:27:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/units/FlagHandler.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler.units;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.handler.OmniLinkCmd;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+\n+/**\n+ * The {@link FlagHandler} defines some methods that are used to\n+ * interface with an OmniLink Flag. This by extension also defines the\n+ * Flag thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FlagHandler extends UnitHandler {\n+    private final Logger logger = LoggerFactory.getLogger(FlagHandler.class);\n+    private final int thingID = getThingNumber();\n+    public @Nullable String number;\n+\n+    public FlagHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_FLAG_VALUE:\n+                if (command instanceof DecimalType) {\n+                    sendOmnilinkCommand(OmniLinkCmd.CMD_UNIT_SET_COUNTER.getNumber(),\n+                            ((DecimalType) command).intValue(), thingID);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            case CHANNEL_FLAG_SWITCH:\n+                if (command instanceof OnOffType) {\n+                    handleOnOff(channelUID, (OnOffType) command);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be OnOffType\", command);\n+                }\n+                break;\n+            default:\n+                logger.debug(\"Unknown channel for Flag thing: {}\", channelUID.getAsString());\n+                super.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    public void updateChannels(ExtendedUnitStatus status) {\n+        logger.debug(\"updateChannels called for Flag status: {}\", status);\n+        updateState(CHANNEL_FLAG_VALUE, DecimalType.valueOf(Integer.toString(status.getStatus())));\n+        updateState(CHANNEL_FLAG_SWITCH, status.getStatus() == 0 ? OnOffType.OFF : OnOffType.ON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTk0ODg5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    updateState(CHANNEL_ROOM_SWITCH, Integer.valueOf(unitStatus).equals(1) ? OnOffType.ON : OnOffType.OFF);\n          \n          \n            \n                    updateState(CHANNEL_ROOM_SWITCH, OnOffType.from(unitStatus == 1);", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r555948894", "createdAt": "2021-01-12T17:29:27Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/units/UpbRoomHandler.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler.units;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.omnilink.internal.handler.BridgeOfflineException;\n+import org.openhab.binding.omnilink.internal.handler.OmniLinkCmd;\n+import org.openhab.binding.omnilink.internal.handler.OmnilinkBridgeHandler;\n+import org.openhab.binding.omnilink.internal.handler.UnitHandler;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedUnitStatus;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link UpbRoomHandler} defines some methods that are used to\n+ * interface with an OmniLink UPB Room. This by extension also defines the\n+ * OmniPro UPB Room thing that openHAB will be able to pick up and interface with.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ */\n+@NonNullByDefault\n+public class UpbRoomHandler extends UnitHandler {\n+    private final Logger logger = LoggerFactory.getLogger(UpbRoomHandler.class);\n+    private final int thingID = getThingNumber();\n+    public @Nullable String number;\n+\n+    public UpbRoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        switch (channelUID.getId()) {\n+            case CHANNEL_ROOM_SCENE_A:\n+            case CHANNEL_ROOM_SCENE_B:\n+            case CHANNEL_ROOM_SCENE_C:\n+            case CHANNEL_ROOM_SCENE_D:\n+                if (command instanceof OnOffType) {\n+                    handleRoomScene(channelUID, (OnOffType) command);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be OnOffType\", command);\n+                }\n+                break;\n+            case CHANNEL_ROOM_SWITCH:\n+                if (command instanceof OnOffType) {\n+                    super.handleOnOff(channelUID, (OnOffType) command);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be OnOffType\", command);\n+                }\n+                break;\n+            case CHANNEL_ROOM_STATE:\n+                if (command instanceof DecimalType) {\n+                    handleRoomState(channelUID, (DecimalType) command);\n+                } else {\n+                    logger.warn(\"Invalid command: {}, must be DecimalType\", command);\n+                }\n+                break;\n+            default:\n+                logger.debug(\"Unknown channel for UPB Room thing: {}\", channelUID.getAsString());\n+                super.handleCommand(channelUID, command);\n+        }\n+    }\n+\n+    private void handleRoomScene(ChannelUID channelUID, OnOffType command) {\n+        logger.debug(\"handleRoomScene called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        int linkNum;\n+\n+        switch (channelUID.getId()) {\n+            case \"scene_a\":\n+                linkNum = 0;\n+                break;\n+            case \"scene_b\":\n+                linkNum = 1;\n+                break;\n+            case \"scene_c\":\n+                linkNum = 2;\n+                break;\n+            case \"scene_d\":\n+                linkNum = 3;\n+                break;\n+            default:\n+                logger.warn(\"Unexpected UPB Room scene: {}\", channelUID.getAsString());\n+                return;\n+        }\n+        int roomNum = (thingID + 7) / 8;\n+        int param2 = ((roomNum * 6) - 3) + linkNum;\n+        sendOmnilinkCommand(OnOffType.ON.equals(command) ? OmniLinkCmd.CMD_UNIT_UPB_LINK_ON.getNumber()\n+                : OmniLinkCmd.CMD_UNIT_UPB_LINK_OFF.getNumber(), 0, param2);\n+    }\n+\n+    private void handleRoomState(ChannelUID channelUID, DecimalType command) {\n+        logger.debug(\"handleRoomState called for channel: {}, command: {}\", channelUID.getAsString(), command);\n+        final int cmdValue = command.intValue();\n+        int cmd;\n+        int param2;\n+\n+        switch (cmdValue) {\n+            case 0:\n+                cmd = OmniLinkCmd.CMD_UNIT_OFF.getNumber();\n+                param2 = thingID;\n+                break;\n+            case 1:\n+                cmd = OmniLinkCmd.CMD_UNIT_ON.getNumber();\n+                param2 = thingID;\n+                break;\n+            case 2:\n+            case 3:\n+            case 4:\n+            case 5:\n+                cmd = OmniLinkCmd.CMD_UNIT_UPB_LINK_ON.getNumber();\n+                /*\n+                 * A little magic with the link #'s: 0 and 1 are off and on, respectively.\n+                 * So A ends up being 2, but OmniLink Protocol expects an offset of 0. That\n+                 * is why we subtract the 2.\n+                 */\n+                int roomNum = (thingID + 7) / 8;\n+                param2 = ((roomNum * 6) - 3) + cmdValue - 2;\n+                break;\n+            default:\n+                logger.warn(\"Unexpected UPB Room state: {}\", Integer.toString(cmdValue));\n+                return;\n+        }\n+\n+        sendOmnilinkCommand(cmd, 0, param2);\n+    }\n+\n+    @Override\n+    public void updateChannels(ExtendedUnitStatus status) {\n+        logger.debug(\"updateChannels called for UPB Room status: {}\", status);\n+        int unitStatus = status.getStatus();\n+\n+        updateState(CHANNEL_ROOM_STATE, new DecimalType(unitStatus));\n+        updateState(CHANNEL_ROOM_SWITCH, Integer.valueOf(unitStatus).equals(1) ? OnOffType.ON : OnOffType.OFF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080da1c5850692f547b480021703686eff6eedb2"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5Mjg3ODgw", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-569287880", "createdAt": "2021-01-15T14:07:13Z", "commit": {"oid": "b1d01d91c4d3169e6b5f5bf3710474c3e4052e96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNDowNzoxM1rOIUdq-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNDowNzoxM1rOIUdq-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMyODU2OA==", "bodyText": "Is this a good idea? What if the connection is not present? Wouldn't it make more sense to call updateChannels immediately after a successful connection?", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r558328568", "createdAt": "2021-01-15T14:07:13Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/OmnilinkBridgeHandler.java", "diffHunk": "@@ -612,6 +617,7 @@ private void updateBridgeProperties() {\n     @Override\n     public void initialize() {\n         scheduleReconnectJob();\n+        updateChannels();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1d01d91c4d3169e6b5f5bf3710474c3e4052e96"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNTQwMDU3", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-571540057", "createdAt": "2021-01-19T18:39:26Z", "commit": {"oid": "3b213b433b29ca7cc55dbecf0a91d3b62b0617db"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxODozOToyNlrOIWcFoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxODozOToyNlrOIWcFoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDM5OTc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Optional<ExtendedAreaStatus> status = retrieveStatus();\n          \n          \n            \n                        if (status.isPresent()) {\n          \n          \n            \n                            updateChannels(status.get());\n          \n          \n            \n                        } else {\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n          \n          \n            \n                                    \"Received null staus update!\");\n          \n          \n            \n                        }\n          \n          \n            \n                        retrieveStatus().ifPresentOrElse(this::updateChannels, \n          \n          \n            \n                            () -> updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n          \n          \n            \n                                    \"Received null staus update!\"));\n          \n      \n    \n    \n  \n\nAlso below", "url": "https://github.com/openhab/openhab-addons/pull/8922#discussion_r560399777", "createdAt": "2021-01-19T18:39:26Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.omnilink/src/main/java/org/openhab/binding/omnilink/internal/handler/AbstractAreaHandler.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.omnilink.internal.handler;\n+\n+import static org.openhab.binding.omnilink.internal.OmnilinkBindingConstants.*;\n+\n+import java.math.BigInteger;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.omnilink.internal.AreaAlarm;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.UnDefType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.digitaldan.jomnilinkII.Message;\n+import com.digitaldan.jomnilinkII.MessageTypes.ObjectStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.SecurityCodeValidation;\n+import com.digitaldan.jomnilinkII.MessageTypes.properties.AreaProperties;\n+import com.digitaldan.jomnilinkII.MessageTypes.statuses.ExtendedAreaStatus;\n+import com.digitaldan.jomnilinkII.MessageTypes.systemevents.AllOnOffEvent;\n+import com.digitaldan.jomnilinkII.OmniInvalidResponseException;\n+import com.digitaldan.jomnilinkII.OmniUnknownMessageTypeException;\n+\n+/**\n+ * The {@link AbstractAreaHandler} defines some methods that can be used across\n+ * the many different areas defined in an OmniLink Controller.\n+ *\n+ * @author Craig Hamilton - Initial contribution\n+ * @author Ethan Dye - openHAB3 rewrite\n+ */\n+@NonNullByDefault\n+public abstract class AbstractAreaHandler extends AbstractOmnilinkStatusHandler<ExtendedAreaStatus> {\n+    private final Logger logger = LoggerFactory.getLogger(AbstractAreaHandler.class);\n+    private final int thingID = getThingNumber();\n+\n+    public AbstractAreaHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        final OmnilinkBridgeHandler bridgeHandler = getOmnilinkBridgeHandler();\n+\n+        super.initialize();\n+        if (bridgeHandler != null) {\n+            updateAreaProperties(bridgeHandler);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Received null bridge while initializing Area!\");\n+        }\n+    }\n+\n+    private void updateAreaProperties(OmnilinkBridgeHandler bridgeHandler) {\n+        final List<AreaProperties> areas = getAreaProperties();\n+        if (areas != null) {\n+            for (AreaProperties areaProperties : areas) {\n+                String thingName = areaProperties.getName();\n+                if (areaProperties.getNumber() == 1 && \"\".equals(thingName)) {\n+                    thingName = \"Main Area\";\n+                }\n+                Map<String, String> properties = editProperties();\n+                properties.put(THING_PROPERTIES_NAME, thingName);\n+                updateProperties(properties);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"handleCommand: {}, command: {}\", channelUID, command);\n+\n+        if (command instanceof RefreshType) {\n+            Optional<ExtendedAreaStatus> status = retrieveStatus();\n+            if (status.isPresent()) {\n+                updateChannels(status.get());\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"Received null staus update!\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b213b433b29ca7cc55dbecf0a91d3b62b0617db"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNTYyMTk3", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-571562197", "createdAt": "2021-01-19T19:08:18Z", "commit": {"oid": "0cf4ddf90bf99a640a2f71e76dcf4f666ee53198"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ea4da5d7ba3db35aea41a2238907e7586f4b398", "author": {"user": {"login": "ecdye", "name": "Ethan Dye"}}, "url": "https://github.com/openhab/openhab-addons/commit/3ea4da5d7ba3db35aea41a2238907e7586f4b398", "committedDate": "2021-01-19T21:03:37Z", "message": "Inital commit of OmniLink Binding\n\nSigned-off-by: Ethan Dye <mrtops03@gmail.com>\n\nCo-authored-by: Dan Cunningham <dan@digitaldan.com>\nCo-authored-by: Craig Hamilton <craigh@quailholdings.com>\nCo-authored-by: Brian O'Connell <boc@us.ibm.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxNjkxMzU3", "url": "https://github.com/openhab/openhab-addons/pull/8922#pullrequestreview-571691357", "createdAt": "2021-01-19T21:51:52Z", "commit": {"oid": "3ea4da5d7ba3db35aea41a2238907e7586f4b398"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4217, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}