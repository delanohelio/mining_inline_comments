{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzOTcwMjEz", "number": 9468, "title": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)", "bodyText": "Implemented EEP family D2_50\nAdded new thing type (heatRecoveryVentilation) and channels for heat recovery ventilation units\n\nFixes #9465\nSigned-off-by: Daniel Weber uni@fruggy.de", "createdAt": "2020-12-22T08:50:06Z", "url": "https://github.com/openhab/openhab-addons/pull/9468", "merged": true, "mergeCommit": {"oid": "96f15c59baa47741439c5effaf163ab044f025d2"}, "closed": true, "closedAt": "2021-02-04T06:18:36Z", "author": {"login": "fruggy83"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdpsFG-AFqTU1ODgzMDU5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2uwwZAFqTU4MzA2NTk4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODMwNTk5", "url": "https://github.com/openhab/openhab-addons/pull/9468#pullrequestreview-558830599", "createdAt": "2020-12-25T17:45:15Z", "commit": {"oid": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNzo0NToxNVrOILd_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNzo0ODozOVrOILeA7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NjY3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = new HashSet<>(\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = Set.of(", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r548896675", "createdAt": "2020-12-25T17:45:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java", "diffHunk": "@@ -78,13 +79,17 @@\n     public static final ThingTypeUID THING_TYPE_MULTFUNCTIONSMOKEDETECTOR = new ThingTypeUID(BINDING_ID,\n             \"multiFunctionSmokeDetector\");\n \n-    public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = new HashSet<>(Arrays.asList(\n-            THING_TYPE_PUSHBUTTON, THING_TYPE_ROCKERSWITCH, THING_TYPE_CLASSICDEVICE, THING_TYPE_CENTRALCOMMAND,\n-            THING_TYPE_ROOMOPERATINGPANEL, THING_TYPE_MECHANICALHANDLE, THING_TYPE_CONTACT,\n-            THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_TEMPERATURESENSOR, THING_TYPE_TEMPERATUREHUMIDITYSENSOR,\n-            THING_TYPE_GENERICTHING, THING_TYPE_ROLLERSHUTTER, THING_TYPE_OCCUPANCYSENSOR,\n-            THING_TYPE_LIGHTTEMPERATUREOCCUPANCYSENSOR, THING_TYPE_LIGHTSENSOR, THING_TYPE_ENVIRONMENTALSENSOR,\n-            THING_TYPE_AUTOMATEDMETERSENSOR, THING_TYPE_THERMOSTAT, THING_TYPE_MULTFUNCTIONSMOKEDETECTOR));\n+    public static final ThingTypeUID THING_TYPE_HEATRECOVERYVENTILATION = new ThingTypeUID(BINDING_ID,\n+            \"heatRecoveryVentilation\");\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_DEVICE_THING_TYPES_UIDS = new HashSet<>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5Njc5MA==", "bodyText": "Use Map.of here", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r548896790", "createdAt": "2020-12-25T17:46:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/EnOceanBindingConstants.java", "diffHunk": "@@ -179,6 +184,30 @@\n     public static final String CHANNEL_STATUS_REQUEST_EVENT = \"statusRequestEvent\";\n     public static final String CHANNEL_SEND_COMMAND = \"sendCommand\";\n \n+    public static final String CHANNEL_VENTILATIONOPERATIONMODE = \"ventilationOperationMode\";\n+    public static final String CHANNEL_FIREPLACESAFETYMODE = \"fireplaceSafetyMode\";\n+    public static final String CHANNEL_HEATEXCHANGERBYPASSSTATUS = \"heatExchangerBypassStatus\";\n+    public static final String CHANNEL_SUPPLYAIRFLAPSTATUS = \"supplyAirFlapStatus\";\n+    public static final String CHANNEL_EXHAUSTAIRFLAPSTATUS = \"exhaustAirFlapStatus\";\n+    public static final String CHANNEL_DEFROSTMODE = \"defrostMode\";\n+    public static final String CHANNEL_COOLINGPROTECTIONMODE = \"coolingProtectionMode\";\n+    public static final String CHANNEL_OUTDOORAIRHEATERSTATUS = \"outdoorAirHeaterStatus\";\n+    public static final String CHANNEL_SUPPLYAIRHEATERSTATUS = \"supplyAirHeaterStatus\";\n+    public static final String CHANNEL_DRAINHEATERSTATUS = \"drainHeaterStatus\";\n+    public static final String CHANNEL_TIMEROPERATIONMODE = \"timerOperationMode\";\n+    public static final String CHANNEL_WEEKLYTIMERPROGRAMSTATUS = \"weeklyTimerProgramStatus\";\n+    public static final String CHANNEL_ROOMTEMPERATURECONTROLSTATUS = \"roomTemperatureControlStatus\";\n+    public static final String CHANNEL_AIRQUALITYVALUE1 = \"airQualityValue1\";\n+    public static final String CHANNEL_AIRQUALITYVALUE2 = \"airQualityValue2\";\n+    public static final String CHANNEL_OUTDOORAIRTEMPERATURE = \"outdoorAirTemperature\";\n+    public static final String CHANNEL_SUPPLYAIRTEMPERATURE = \"supplyAirTemperature\";\n+    public static final String CHANNEL_INDOORAIRTEMPERATURE = \"indoorAirTemperature\";\n+    public static final String CHANNEL_EXHAUSTAIRTEMPERATURE = \"exhaustAirTemperature\";\n+    public static final String CHANNEL_SUPPLYAIRFANAIRFLOWRATE = \"supplyAirFanAirFlowRate\";\n+    public static final String CHANNEL_EXHAUSTAIRFANAIRFLOWRATE = \"exhaustAirFanAirFlowRate\";\n+    public static final String CHANNEL_SUPPLYFANSPEED = \"supplyFanSpeed\";\n+    public static final String CHANNEL_EXHAUSTFANSPEED = \"exhaustFanSpeed\";\n+\n     public static final Map<String, EnOceanChannelDescription> CHANNELID2CHANNELDESCRIPTION = Collections", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5Njg5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return getBit(bytes[2], 7) ? OnOffType.ON : OnOffType.OFF;\n          \n          \n            \n                            return OnOffType.from(getBit(bytes[2], 7));", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r548896895", "createdAt": "2020-12-25T17:47:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import static org.openhab.binding.enocean.internal.EnOceanBindingConstants.*;\n+\n+import java.util.function.Function;\n+\n+import org.openhab.binding.enocean.internal.Helper;\n+import org.openhab.binding.enocean.internal.eep.Base._VLDMessage;\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50 extends _VLDMessage {\n+\n+    protected final byte mtMask = (byte) 0xf0;\n+    protected final byte MT_REMOTE_TRANSMISSION_REQUEST = 0x00;\n+    protected final byte MT_CONTROL = 0x20;\n+    protected final byte MT_BASIC_STATUS = 0x40;\n+    protected final byte MT_EXTENDED_STATUS = 0x60; // not yet implemented\n+\n+    protected final byte rmtMask = (byte) 0x0f;\n+    protected final byte RMT_BASIC_STATUS = 0x00;\n+    protected final byte RMT_EXTENDED_STATUS = 0x01; // not yet implemented\n+\n+    protected final byte DOMC_NOACTION = 0x0f;\n+    protected final byte CONTROL_NOACTION = 0;\n+    protected final byte TMOC_NOACTION = 127;\n+    protected final byte TMOC_ACTIVATE = (byte) 0xff;\n+    protected final byte THRESHOLD_NOACTION = 127;\n+\n+    public D2_50() {\n+        super();\n+    }\n+\n+    public D2_50(ERP1Message packet) {\n+        super(packet);\n+    }\n+\n+    protected byte getMessageType(byte b) {\n+        return (byte) (b & mtMask);\n+    }\n+\n+    @Override\n+    public void addConfigPropertiesTo(DiscoveryResultBuilder discoveredThingResultBuilder) {\n+        discoveredThingResultBuilder.withProperty(PARAMETER_SENDINGEEPID, getEEPType().getId())\n+                .withProperty(PARAMETER_RECEIVINGEEPID, getEEPType().getId());\n+    }\n+\n+    @Override\n+    protected void convertFromCommandImpl(String channelId, String channelTypeId, Command command,\n+            Function<String, State> getCurrentStateFunc, Configuration config) {\n+\n+        // we need to send just a single message to refresh all channel states, hence just send refresh for OM\n+        if (command == RefreshType.REFRESH && CHANNEL_VENTILATIONOPERATIONMODE.equals(channelId)) {\n+            setData((byte) (MT_REMOTE_TRANSMISSION_REQUEST + RMT_BASIC_STATUS));\n+        } else {\n+            switch (channelId) {\n+                case CHANNEL_VENTILATIONOPERATIONMODE:\n+                    if (command instanceof StringType) {\n+                        byte value = (byte) (Helper.tryParseInt(((StringType) command).toString(), 15) & 0x0f);\n+                        setData((byte) (MT_CONTROL + value), CONTROL_NOACTION, TMOC_NOACTION, THRESHOLD_NOACTION,\n+                                THRESHOLD_NOACTION, CONTROL_NOACTION);\n+                    }\n+                    break;\n+                case CHANNEL_TIMEROPERATIONMODE:\n+                    if (command instanceof OnOffType) {\n+                        byte value = (OnOffType) command == OnOffType.ON ? TMOC_ACTIVATE : TMOC_NOACTION;\n+                        setData((byte) (MT_CONTROL + DOMC_NOACTION), CONTROL_NOACTION, value, THRESHOLD_NOACTION,\n+                                THRESHOLD_NOACTION, CONTROL_NOACTION);\n+                    }\n+                    break;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected State convertToStateImpl(String channelId, String channelTypeId,\n+            Function<String, State> getCurrentStateFunc, Configuration config) {\n+\n+        if (getMessageType(bytes[0]) != MT_BASIC_STATUS) {\n+            return UnDefType.UNDEF;\n+        }\n+\n+        switch (channelId) {\n+            case CHANNEL_VENTILATIONOPERATIONMODE:\n+                return new StringType(String.valueOf(bytes[0] & 0x0f));\n+            case CHANNEL_FIREPLACESAFETYMODE:\n+                return getBit(bytes[1], 3) ? OnOffType.ON : OnOffType.OFF;\n+            case CHANNEL_HEATEXCHANGERBYPASSSTATUS:\n+                return getBit(bytes[1], 2) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+            case CHANNEL_SUPPLYAIRFLAPSTATUS:\n+                return getBit(bytes[1], 1) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+            case CHANNEL_EXHAUSTAIRFLAPSTATUS:\n+                return getBit(bytes[1], 0) ? OpenClosedType.OPEN : OpenClosedType.CLOSED;\n+            case CHANNEL_DEFROSTMODE:\n+                return getBit(bytes[2], 7) ? OnOffType.ON : OnOffType.OFF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5NzAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n          \n          \n            \n                        Arrays.asList(THING_TYPE_CENTRALCOMMAND, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING,\n          \n          \n            \n                                THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT, THING_TYPE_HEATRECOVERYVENTILATION));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(THING_TYPE_CENTRALCOMMAND, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING,\n          \n          \n            \n                                THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT, THING_TYPE_HEATRECOVERYVENTILATION);", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r548897007", "createdAt": "2020-12-25T17:48:39Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/handler/EnOceanBaseActuatorHandler.java", "diffHunk": "@@ -50,8 +50,9 @@\n public class EnOceanBaseActuatorHandler extends EnOceanBaseSensorHandler {\n \n     // List of thing types which support sending of eep messages\n-    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_CENTRALCOMMAND,\n-            THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING, THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT));\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Arrays.asList(THING_TYPE_CENTRALCOMMAND, THING_TYPE_MEASUREMENTSWITCH, THING_TYPE_GENERICTHING,\n+                    THING_TYPE_ROLLERSHUTTER, THING_TYPE_THERMOSTAT, THING_TYPE_HEATRECOVERYVENTILATION));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b01b0d85bfc595e370fdbfd21c39d5bb063eb1"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0OTY3MTY3", "url": "https://github.com/openhab/openhab-addons/pull/9468#pullrequestreview-574967167", "createdAt": "2021-01-24T20:42:58Z", "commit": {"oid": "e70812b62469b20ad151ee5607cc6d10db607df4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMDo0Mjo1OFrOIZP9-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQyMDo0NToyMFrOIZP-0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0NjkzOQ==", "bodyText": "If the fields are immutable and not defined in the constructor, please them static as well.", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563346939", "createdAt": "2021-01-24T20:42:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import static org.openhab.binding.enocean.internal.EnOceanBindingConstants.*;\n+\n+import java.util.function.Function;\n+\n+import org.openhab.binding.enocean.internal.Helper;\n+import org.openhab.binding.enocean.internal.eep.Base._VLDMessage;\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50 extends _VLDMessage {\n+\n+    protected final byte mtMask = (byte) 0xf0;\n+    protected final byte MT_REMOTE_TRANSMISSION_REQUEST = 0x00;\n+    protected final byte MT_CONTROL = 0x20;\n+    protected final byte MT_BASIC_STATUS = 0x40;\n+    protected final byte MT_EXTENDED_STATUS = 0x60; // not yet implemented\n+\n+    protected final byte rmtMask = (byte) 0x0f;\n+    protected final byte RMT_BASIC_STATUS = 0x00;\n+    protected final byte RMT_EXTENDED_STATUS = 0x01; // not yet implemented\n+\n+    protected final byte DOMC_NOACTION = 0x0f;\n+    protected final byte CONTROL_NOACTION = 0;\n+    protected final byte TMOC_NOACTION = 127;\n+    protected final byte TMOC_ACTIVATE = (byte) 0xff;\n+    protected final byte THRESHOLD_NOACTION = 127;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70812b62469b20ad151ee5607cc6d10db607df4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0Njk0OQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563346949", "createdAt": "2021-01-24T20:43:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import static org.openhab.binding.enocean.internal.EnOceanBindingConstants.*;\n+\n+import java.util.function.Function;\n+\n+import org.openhab.binding.enocean.internal.Helper;\n+import org.openhab.binding.enocean.internal.eep.Base._VLDMessage;\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50 extends _VLDMessage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70812b62469b20ad151ee5607cc6d10db607df4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0Njk3NQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563346975", "createdAt": "2021-01-24T20:43:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_00.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50_00 extends D2_50 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70812b62469b20ad151ee5607cc6d10db607df4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0Njk5NQ==", "bodyText": "Please add @NonNullByDefault\nAnd please do so for the rest of the files that aren't dto classes.", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563346995", "createdAt": "2021-01-24T20:43:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_01.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50_01 extends D2_50 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70812b62469b20ad151ee5607cc6d10db607df4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzM0NzE1Mw==", "bodyText": "What is the point of these classes that don't add any extra functionality? Can you just use the D2_50 class instead?", "url": "https://github.com/openhab/openhab-addons/pull/9468#discussion_r563347153", "createdAt": "2021-01-24T20:45:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.enocean/src/main/java/org/openhab/binding/enocean/internal/eep/D2_50/D2_50_10.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.enocean.internal.eep.D2_50;\n+\n+import org.openhab.binding.enocean.internal.messages.ERP1Message;\n+\n+/**\n+ *\n+ * @author Daniel Weber - Initial contribution\n+ */\n+public class D2_50_10 extends D2_50 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70812b62469b20ad151ee5607cc6d10db607df4"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff3a31e0827a876f9b22fae5cc5d0218e115dd7d", "author": {"user": {"login": "fruggy83", "name": "Daniel Weber"}}, "url": "https://github.com/openhab/openhab-addons/commit/ff3a31e0827a876f9b22fae5cc5d0218e115dd7d", "committedDate": "2021-01-29T09:41:11Z", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * Implemented EEP family D2_50\n * Added new thing type (heatRecoveryVentilation) and channels for heat recovery ventilation units\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2561d521422034049c675523b89bc1b24049206", "author": {"user": {"login": "fruggy83", "name": "Daniel Weber"}}, "url": "https://github.com/openhab/openhab-addons/commit/e2561d521422034049c675523b89bc1b24049206", "committedDate": "2021-01-29T09:41:12Z", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * code refactoring (JAVA11 improvements)\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e70812b62469b20ad151ee5607cc6d10db607df4", "author": {"user": {"login": "fruggy83", "name": "Daniel Weber"}}, "url": "https://github.com/openhab/openhab-addons/commit/e70812b62469b20ad151ee5607cc6d10db607df4", "committedDate": "2021-01-06T15:35:06Z", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * code refactoring (JAVA11 improvements)\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>"}, "afterCommit": {"oid": "e2561d521422034049c675523b89bc1b24049206", "author": {"user": {"login": "fruggy83", "name": "Daniel Weber"}}, "url": "https://github.com/openhab/openhab-addons/commit/e2561d521422034049c675523b89bc1b24049206", "committedDate": "2021-01-29T09:41:12Z", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * code refactoring (JAVA11 improvements)\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44edc3c353a33c7fd2abb1506a3dd8824568448f", "author": {"user": {"login": "fruggy83", "name": "Daniel Weber"}}, "url": "https://github.com/openhab/openhab-addons/commit/44edc3c353a33c7fd2abb1506a3dd8824568448f", "committedDate": "2021-01-29T10:33:57Z", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * Removed unnecessary EEP classes\n * Made final fields static\n * Added @NonNullByDefault to EEP Class\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68aaac1cbeea1cc9b6f186ee3dbccd3bb7772fca", "author": {"user": {"login": "fruggy83", "name": "Daniel Weber"}}, "url": "https://github.com/openhab/openhab-addons/commit/68aaac1cbeea1cc9b6f186ee3dbccd3bb7772fca", "committedDate": "2021-01-29T10:40:24Z", "message": "[enocean] Added support for Heat Recovery Ventilation devices (#9465)\n\n * Removed @NonNullByDefault to not mess up PR with non related changes\n\nFixes #9465\n\nSigned-off-by: Daniel Weber <uni@fruggy.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzMDY1OTgx", "url": "https://github.com/openhab/openhab-addons/pull/9468#pullrequestreview-583065981", "createdAt": "2021-02-04T06:18:02Z", "commit": {"oid": "68aaac1cbeea1cc9b6f186ee3dbccd3bb7772fca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3557, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}