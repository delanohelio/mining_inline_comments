{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzM1NDk1", "number": 7404, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyMzoxN1rODzD-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNTozMTowMlrODzO6gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODY5MTU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyMzoxN1rOGHeyzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNToyMDoxM1rOGHr0rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5Nzc0Mg==", "bodyText": "Is this a todo or a comment?", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410497742", "createdAt": "2020-04-17T22:23:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.miio.internal.basic;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonPrimitive;\n+\n+/**\n+ * Conditional Execution of rules\n+ *\n+ * @author Marcel Verpaalen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionConditions {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActionConditions.class);\n+\n+    /**\n+     * Check if it matches the firmware version.\n+     *\n+     * @param condition\n+     * @param deviceVariables\n+     * @param value\n+     * @return value is case firmware is matching, return null if not\n+     */\n+    private static @Nullable JsonElement firmwareCheck(MiIoDeviceActionCondition condition,\n+            Map<String, Object> deviceVariables, @Nullable JsonElement value) {\n+        // TODO: placeholder for firmware version check to allow for firmware dependent actions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NDQwMA==", "bodyText": "It indeed is a placeholder for now for something I want to implement in a further version.\nIt does require still bit of researching on the format of the various firmware version strings Xiaomi is using.\nif it is disturbing I can remove the whole function until it is actually used.", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410664400", "createdAt": "2020-04-18T07:51:48Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.miio.internal.basic;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonPrimitive;\n+\n+/**\n+ * Conditional Execution of rules\n+ *\n+ * @author Marcel Verpaalen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionConditions {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActionConditions.class);\n+\n+    /**\n+     * Check if it matches the firmware version.\n+     *\n+     * @param condition\n+     * @param deviceVariables\n+     * @param value\n+     * @return value is case firmware is matching, return null if not\n+     */\n+    private static @Nullable JsonElement firmwareCheck(MiIoDeviceActionCondition condition,\n+            Map<String, Object> deviceVariables, @Nullable JsonElement value) {\n+        // TODO: placeholder for firmware version check to allow for firmware dependent actions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5Nzc0Mg=="}, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMTIxNA==", "bodyText": "You can leave this as is.", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410711214", "createdAt": "2020-04-18T15:20:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.miio.internal.basic;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonPrimitive;\n+\n+/**\n+ * Conditional Execution of rules\n+ *\n+ * @author Marcel Verpaalen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionConditions {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActionConditions.class);\n+\n+    /**\n+     * Check if it matches the firmware version.\n+     *\n+     * @param condition\n+     * @param deviceVariables\n+     * @param value\n+     * @return value is case firmware is matching, return null if not\n+     */\n+    private static @Nullable JsonElement firmwareCheck(MiIoDeviceActionCondition condition,\n+            Map<String, Object> deviceVariables, @Nullable JsonElement value) {\n+        // TODO: placeholder for firmware version check to allow for firmware dependent actions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5Nzc0Mg=="}, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODY5MjI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyMzozM1rOGHezMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNzo1OTozOFrOGHpAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5Nzg0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return value is case firmware is matching, return null if not\n          \n          \n            \n                 * @return value in case firmware is matching, return null if not", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410497843", "createdAt": "2020-04-17T22:23:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.miio.internal.basic;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonPrimitive;\n+\n+/**\n+ * Conditional Execution of rules\n+ *\n+ * @author Marcel Verpaalen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionConditions {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActionConditions.class);\n+\n+    /**\n+     * Check if it matches the firmware version.\n+     *\n+     * @param condition\n+     * @param deviceVariables\n+     * @param value\n+     * @return value is case firmware is matching, return null if not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NTA3Ng==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410665076", "createdAt": "2020-04-18T07:59:38Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.miio.internal.basic;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonPrimitive;\n+\n+/**\n+ * Conditional Execution of rules\n+ *\n+ * @author Marcel Verpaalen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionConditions {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActionConditions.class);\n+\n+    /**\n+     * Check if it matches the firmware version.\n+     *\n+     * @param condition\n+     * @param deviceVariables\n+     * @param value\n+     * @return value is case firmware is matching, return null if not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5Nzg0Mw=="}, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODY5MzgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyNDoyNlrOGHe0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODowMDoxOVrOGHpAqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5ODEwMQ==", "bodyText": "Can you check for this before trying to cast it rather than catching the exception?", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410498101", "createdAt": "2020-04-17T22:24:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.miio.internal.basic;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonPrimitive;\n+\n+/**\n+ * Conditional Execution of rules\n+ *\n+ * @author Marcel Verpaalen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionConditions {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActionConditions.class);\n+\n+    /**\n+     * Check if it matches the firmware version.\n+     *\n+     * @param condition\n+     * @param deviceVariables\n+     * @param value\n+     * @return value is case firmware is matching, return null if not\n+     */\n+    private static @Nullable JsonElement firmwareCheck(MiIoDeviceActionCondition condition,\n+            Map<String, Object> deviceVariables, @Nullable JsonElement value) {\n+        // TODO: placeholder for firmware version check to allow for firmware dependent actions\n+        return value;\n+    }\n+\n+    /**\n+     * Check if the value is a valid brightness between 1-99.\n+     * If <1 returns Off, if >99 returns On to activate the power On/Off switch\n+     *\n+     * @param value\n+     * @return\n+     */\n+    private static @Nullable JsonElement brightness(@Nullable JsonElement value) {\n+        if (value != null && value.isJsonPrimitive()) {\n+            try {\n+                int intVal = value.getAsInt();\n+                if (intVal > 99) {\n+                    return new JsonPrimitive(\"on\");\n+                }\n+                if (intVal < 1) {\n+                    return new JsonPrimitive(\"off\");\n+                }\n+            } catch (ClassCastException e) {\n+                LOGGER.debug(\"Error parsing brightness. Value {} is not an int\", value);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Check if the value is a valid brightness between 1-99 which can be send to brightness channel.\n+     * If not returns a null\n+     *\n+     * @param value\n+     * @return\n+     */\n+    private static @Nullable JsonElement brightnessExists(@Nullable JsonElement value) {\n+        if (value != null && value.isJsonPrimitive()) {\n+            try {\n+                int intVal = value.getAsInt();\n+                if (intVal > 0 && intVal < 99) {\n+                    return value;\n+                }\n+            } catch (ClassCastException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NTEyOQ==", "bodyText": "yes, didn't find it at first, but found a number check.\ndone", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410665129", "createdAt": "2020-04-18T08:00:19Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/ActionConditions.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.miio.internal.basic;\n+\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonPrimitive;\n+\n+/**\n+ * Conditional Execution of rules\n+ *\n+ * @author Marcel Verpaalen - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ActionConditions {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ActionConditions.class);\n+\n+    /**\n+     * Check if it matches the firmware version.\n+     *\n+     * @param condition\n+     * @param deviceVariables\n+     * @param value\n+     * @return value is case firmware is matching, return null if not\n+     */\n+    private static @Nullable JsonElement firmwareCheck(MiIoDeviceActionCondition condition,\n+            Map<String, Object> deviceVariables, @Nullable JsonElement value) {\n+        // TODO: placeholder for firmware version check to allow for firmware dependent actions\n+        return value;\n+    }\n+\n+    /**\n+     * Check if the value is a valid brightness between 1-99.\n+     * If <1 returns Off, if >99 returns On to activate the power On/Off switch\n+     *\n+     * @param value\n+     * @return\n+     */\n+    private static @Nullable JsonElement brightness(@Nullable JsonElement value) {\n+        if (value != null && value.isJsonPrimitive()) {\n+            try {\n+                int intVal = value.getAsInt();\n+                if (intVal > 99) {\n+                    return new JsonPrimitive(\"on\");\n+                }\n+                if (intVal < 1) {\n+                    return new JsonPrimitive(\"off\");\n+                }\n+            } catch (ClassCastException e) {\n+                LOGGER.debug(\"Error parsing brightness. Value {} is not an int\", value);\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Check if the value is a valid brightness between 1-99 which can be send to brightness channel.\n+     * If not returns a null\n+     *\n+     * @param value\n+     * @return\n+     */\n+    private static @Nullable JsonElement brightnessExists(@Nullable JsonElement value) {\n+        if (value != null && value.isJsonPrimitive()) {\n+            try {\n+                int intVal = value.getAsInt();\n+                if (intVal > 0 && intVal < 99) {\n+                    return value;\n+                }\n+            } catch (ClassCastException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5ODEwMQ=="}, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODY5NjAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyNTozNFrOGHe1lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODowNDozOVrOGHpB_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5ODQ1NA==", "bodyText": "If this is non-null by default why not make this a primitive?", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410498454", "createdAt": "2020-04-17T22:25:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "diffHunk": "@@ -69,6 +75,40 @@ public void setProperty(String property) {\n         this.property = property;\n     }\n \n+    public int getSiid() {\n+        final Integer siid = this.siid;\n+        if (siid != null) {\n+            return siid.intValue();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    public void setSiid(Integer siid) {\n+        this.siid = siid;\n+    }\n+\n+    public int getPiid() {\n+        final Integer piid = this.piid;\n+        if (piid != null) {\n+            return piid.intValue();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    public void setPiid(Integer piid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NTQ2OA==", "bodyText": "These  siid & piid Integers are only used for miot protocol devices, I use it to determine if it is a miot device by comparing to null in the  isMiot function.\nin the further functions I don't want to do this checking anymore hence the conversion here to primitive", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410665468", "createdAt": "2020-04-18T08:04:39Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/basic/MiIoBasicChannel.java", "diffHunk": "@@ -69,6 +75,40 @@ public void setProperty(String property) {\n         this.property = property;\n     }\n \n+    public int getSiid() {\n+        final Integer siid = this.siid;\n+        if (siid != null) {\n+            return siid.intValue();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    public void setSiid(Integer siid) {\n+        this.siid = siid;\n+    }\n+\n+    public int getPiid() {\n+        final Integer piid = this.piid;\n+        if (piid != null) {\n+            return piid.intValue();\n+        } else {\n+            return 0;\n+        }\n+    }\n+\n+    public void setPiid(Integer piid) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5ODQ1NA=="}, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODcxNTQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozNzowMFrOGHfBkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwODowNzo0NFrOGHpC7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMTUyMA==", "bodyText": "Why not just do:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    updateProperties(properties);\n          \n          \n            \n                    }\n          \n          \n            \n                    deviceVariables.putAll(properties);\n          \n          \n            \n                    updateProperties(properties);", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410501520", "createdAt": "2020-04-17T22:37:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -359,22 +359,27 @@ private void updateProperties(JsonObject miioInfo) {\n         Map<String, String> properties = editProperties();\n         if (info.model != null) {\n             properties.put(Thing.PROPERTY_MODEL_ID, info.model);\n+            deviceVariables.put(Thing.PROPERTY_MODEL_ID, info.model);\n         }\n         if (info.fwVer != null) {\n             properties.put(Thing.PROPERTY_FIRMWARE_VERSION, info.fwVer);\n+            deviceVariables.put(Thing.PROPERTY_FIRMWARE_VERSION, info.fwVer);\n         }\n         if (info.hwVer != null) {\n             properties.put(Thing.PROPERTY_HARDWARE_VERSION, info.hwVer);\n+            deviceVariables.put(Thing.PROPERTY_HARDWARE_VERSION, info.hwVer);\n         }\n         if (info.wifiFwVer != null) {\n             properties.put(\"wifiFirmware\", info.wifiFwVer);\n+            deviceVariables.put(\"wifiFirmware\", info.hwVer);\n         }\n         if (info.mcuFwVer != null) {\n             properties.put(\"mcuFirmware\", info.mcuFwVer);\n+            deviceVariables.put(\"mcuFirmware\", info.mcuFwVer);\n         }\n         updateProperties(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2NTcwOQ==", "bodyText": "Excellent suggestion...done", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410665709", "createdAt": "2020-04-18T08:07:44Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoAbstractHandler.java", "diffHunk": "@@ -359,22 +359,27 @@ private void updateProperties(JsonObject miioInfo) {\n         Map<String, String> properties = editProperties();\n         if (info.model != null) {\n             properties.put(Thing.PROPERTY_MODEL_ID, info.model);\n+            deviceVariables.put(Thing.PROPERTY_MODEL_ID, info.model);\n         }\n         if (info.fwVer != null) {\n             properties.put(Thing.PROPERTY_FIRMWARE_VERSION, info.fwVer);\n+            deviceVariables.put(Thing.PROPERTY_FIRMWARE_VERSION, info.fwVer);\n         }\n         if (info.hwVer != null) {\n             properties.put(Thing.PROPERTY_HARDWARE_VERSION, info.hwVer);\n+            deviceVariables.put(Thing.PROPERTY_HARDWARE_VERSION, info.hwVer);\n         }\n         if (info.wifiFwVer != null) {\n             properties.put(\"wifiFirmware\", info.wifiFwVer);\n+            deviceVariables.put(\"wifiFirmware\", info.hwVer);\n         }\n         if (info.mcuFwVer != null) {\n             properties.put(\"mcuFirmware\", info.mcuFwVer);\n+            deviceVariables.put(\"mcuFirmware\", info.mcuFwVer);\n         }\n         updateProperties(properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMTUyMA=="}, "originalCommit": {"oid": "0fc6173d8683189c9d7f0f186102c271ccdf0146"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDQ3OTgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNToyNzo1MlrOGHr4Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNToyNzo1MlrOGHr4Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMjA4Mw==", "bodyText": "You should cache para.get(i) in a local variable for reuse.", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410712083", "createdAt": "2020-04-18T15:27:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -375,11 +417,19 @@ private void updatePropsFromJsonArray(MiIoSendCommand response) {\n                     para.size(), res.size(), para, res);\n         }\n         for (int i = 0; i < para.size(); i++) {\n-            String param = para.get(i).getAsString();\n+            // This is a miot parameter\n+            String param;\n+            if (para.get(i).isJsonObject()) { // miot channel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39d7891618376e18b6bfb2577df9e08c8c49ad4"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDQ4MzIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNTozMTowMlrOGHr5vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNTozMTowMlrOGHr5vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcxMjUwOA==", "bodyText": "This calculation would look better using bit-shift operators instead of multiplication.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                (color.getRed() * 65536) + (color.getGreen() * 256) + color.getBlue());\n          \n          \n            \n                                                (color.getRed() << 16) + (color.getGreen() << 8) + color.getBlue());", "url": "https://github.com/openhab/openhab-addons/pull/7404#discussion_r410712508", "createdAt": "2020-04-18T15:31:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/handler/MiIoBasicHandler.java", "diffHunk": "@@ -130,73 +132,94 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n         }\n         logger.debug(\"Locating action for channel {}: {}\", channelUID.getId(), command);\n         if (!actions.isEmpty()) {\n-            if (actions.containsKey(channelUID.getId())) {\n+            if (actions.containsKey(channelUID)) {\n                 int valuePos = 0;\n-                @Nullable\n-                JsonElement value = null;\n-                MiIoDeviceAction action = actions.get(channelUID.getId());\n-                JsonArray parameters = actions.get(channelUID.getId()).getParameters();\n-                for (int i = 0; i < action.getParameters().size(); i++) {\n-                    JsonElement p = action.getParameters().get(i);\n-                    if (p.isJsonPrimitive() && p.getAsString().toLowerCase().contains(\"$value$\")) {\n-                        valuePos = i;\n+                MiIoBasicChannel miIoBasicChannel = actions.get(channelUID);\n+                for (MiIoDeviceAction action : miIoBasicChannel.getActions()) {\n+                    @Nullable\n+                    JsonElement value = null;\n+                    JsonArray parameters = action.getParameters();\n+                    for (int i = 0; i < action.getParameters().size(); i++) {\n+                        JsonElement p = action.getParameters().get(i);\n+                        if (p.isJsonPrimitive() && p.getAsString().toLowerCase().contains(\"$value$\")) {\n+                            valuePos = i;\n+                        }\n                     }\n-                }\n-                String cmd = actions.get(channelUID.getId()).getCommand();\n-                CommandParameterType paramType = actions.get(channelUID.getId()).getparameterType();\n-                if (paramType == CommandParameterType.COLOR) {\n-                    if (command instanceof HSBType) {\n-                        HSBType hsb = (HSBType) command;\n-                        Color color = Color.getHSBColor(hsb.getHue().floatValue() / 360,\n-                                hsb.getSaturation().floatValue() / 100, hsb.getBrightness().floatValue() / 100);\n-                        value = new JsonPrimitive(\n-                                (color.getRed() * 65536) + (color.getGreen() * 256) + color.getBlue());\n+                    String cmd = action.getCommand();\n+                    CommandParameterType paramType = action.getparameterType();\n+                    if (paramType == CommandParameterType.COLOR) {\n+                        if (command instanceof HSBType) {\n+                            HSBType hsb = (HSBType) command;\n+                            Color color = Color.getHSBColor(hsb.getHue().floatValue() / 360,\n+                                    hsb.getSaturation().floatValue() / 100, hsb.getBrightness().floatValue() / 100);\n+                            value = new JsonPrimitive(\n+                                    (color.getRed() * 65536) + (color.getGreen() * 256) + color.getBlue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c39d7891618376e18b6bfb2577df9e08c8c49ad4"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 280, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}