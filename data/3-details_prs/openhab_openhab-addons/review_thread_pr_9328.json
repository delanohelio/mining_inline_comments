{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MTU4Njgw", "number": 9328, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNToyNFrOFEFWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoyMTo0N1rOFELBIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODI2MjE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/OH-INF/i18n/amazonechocontrol_de.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNToyNFrOIECKaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNzoxNToyNFrOIECKaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEwMDY1MQ==", "bodyText": "Vorschlag: \"F\u00fchrt einen Befehl aus (Nur schreiben). Der Text wird wie ein gesprochener Befehl ausgef\u00fchrt\"", "url": "https://github.com/openhab/openhab-addons/pull/9328#discussion_r541100651", "createdAt": "2020-12-11T17:15:24Z", "author": {"login": "mgeramb"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/OH-INF/i18n/amazonechocontrol_de.properties", "diffHunk": "@@ -88,6 +88,9 @@ channel-type.amazonechocontrol.textToSpeech.description = Spricht den Text (Nur\n channel-type.amazonechocontrol.textToSpeechVolume.label = Sprich Lautst\ufffdrke\n channel-type.amazonechocontrol.textToSpeechVolume.description = Lautst\ufffdrke des Sprich Kanals. Wenn 0 wird die aktuelle Lautst\ufffdrke verwendet.\n \n+channel-type.amazonechocontrol.textCommand.label = Befehl\n+channel-type.amazonechocontrol.textCommand.description = F\ufffdhrt einen Befehl aus (Nur schreiben). Der Befehl kann wie ein gesprochener Befehl ausgef\ufffdhrt werden.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d04cb8a418f4466aa849c5d06b4407c42ce86ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTE2NzU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoxODowNVrOIEK3OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTowMTowNlrOIENd3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0MzE5Mg==", "bodyText": "You are only removing the last command?", "url": "https://github.com/openhab/openhab-addons/pull/9328#discussion_r541243192", "createdAt": "2020-12-11T20:18:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1441,6 +1446,58 @@ private void sendTextToSpeech() {\n         }\n     }\n \n+    public void textCommand(Device device, String text, @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (text.replaceAll(\"<.+?>\", \"\").replaceAll(\"\\\\s+\", \" \").trim().isEmpty()) {\n+            return;\n+        }\n+\n+        // we lock TextCommands until we have finished adding this one\n+        Lock lock = locks.computeIfAbsent(TimerType.TEXT_COMMAND, k -> new ReentrantLock());\n+        lock.lock();\n+        try {\n+            TextCommand textCommand = Objects\n+                    .requireNonNull(textCommands.computeIfAbsent(Objects.hash(text), k -> new TextCommand(text)));\n+            textCommand.devices.add(device);\n+            textCommand.ttsVolumes.add(ttsVolume);\n+            textCommand.standardVolumes.add(standardVolume);\n+            // schedule a TextCommand only if it has not been scheduled before\n+            timers.computeIfAbsent(TimerType.TEXT_COMMAND,\n+                    k -> scheduler.schedule(this::sendTextCommand, 500, TimeUnit.MILLISECONDS));\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    private synchronized void sendTextCommand() {\n+        // we lock new TTS until we have dispatched everything\n+        Lock lock = locks.computeIfAbsent(TimerType.TEXT_COMMAND, k -> new ReentrantLock());\n+        lock.lock();\n+\n+        try {\n+            Iterator<TextCommand> iterator = textCommands.values().iterator();\n+            while (iterator.hasNext()) {\n+                TextCommand textCommand = iterator.next();\n+                try {\n+                    List<Device> devices = textCommand.devices;\n+                    if (!devices.isEmpty()) {\n+                        String text = textCommand.text;\n+                        Map<String, Object> parameters = new HashMap<>();\n+                        parameters.put(\"text\", text);\n+                        executeSequenceCommandWithVolume(devices, \"Alexa.TextCommand\", parameters,\n+                                textCommand.ttsVolumes, textCommand.standardVolumes);\n+                    }\n+                } catch (Exception e) {\n+                    logger.warn(\"send textCommand fails with unexpected error\", e);\n+                }\n+            }\n+            iterator.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b4f5c315d5daf7f389e495724377c85c22a904"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4NTg1Mg==", "bodyText": "Oops. Remove wrong }...", "url": "https://github.com/openhab/openhab-addons/pull/9328#discussion_r541285852", "createdAt": "2020-12-11T21:01:06Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1441,6 +1446,58 @@ private void sendTextToSpeech() {\n         }\n     }\n \n+    public void textCommand(Device device, String text, @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (text.replaceAll(\"<.+?>\", \"\").replaceAll(\"\\\\s+\", \" \").trim().isEmpty()) {\n+            return;\n+        }\n+\n+        // we lock TextCommands until we have finished adding this one\n+        Lock lock = locks.computeIfAbsent(TimerType.TEXT_COMMAND, k -> new ReentrantLock());\n+        lock.lock();\n+        try {\n+            TextCommand textCommand = Objects\n+                    .requireNonNull(textCommands.computeIfAbsent(Objects.hash(text), k -> new TextCommand(text)));\n+            textCommand.devices.add(device);\n+            textCommand.ttsVolumes.add(ttsVolume);\n+            textCommand.standardVolumes.add(standardVolume);\n+            // schedule a TextCommand only if it has not been scheduled before\n+            timers.computeIfAbsent(TimerType.TEXT_COMMAND,\n+                    k -> scheduler.schedule(this::sendTextCommand, 500, TimeUnit.MILLISECONDS));\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    private synchronized void sendTextCommand() {\n+        // we lock new TTS until we have dispatched everything\n+        Lock lock = locks.computeIfAbsent(TimerType.TEXT_COMMAND, k -> new ReentrantLock());\n+        lock.lock();\n+\n+        try {\n+            Iterator<TextCommand> iterator = textCommands.values().iterator();\n+            while (iterator.hasNext()) {\n+                TextCommand textCommand = iterator.next();\n+                try {\n+                    List<Device> devices = textCommand.devices;\n+                    if (!devices.isEmpty()) {\n+                        String text = textCommand.text;\n+                        Map<String, Object> parameters = new HashMap<>();\n+                        parameters.put(\"text\", text);\n+                        executeSequenceCommandWithVolume(devices, \"Alexa.TextCommand\", parameters,\n+                                textCommand.ttsVolumes, textCommand.standardVolumes);\n+                    }\n+                } catch (Exception e) {\n+                    logger.warn(\"send textCommand fails with unexpected error\", e);\n+                }\n+            }\n+            iterator.remove();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0MzE5Mg=="}, "originalCommit": {"oid": "b0b4f5c315d5daf7f389e495724377c85c22a904"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTE3MjU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoxODo1OFrOIEK6og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoxODo1OFrOIEK6og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0NDA2Ng==", "bodyText": "Would this be a good place to use Map.of? Or do you need the map to be a HashMap instance?", "url": "https://github.com/openhab/openhab-addons/pull/9328#discussion_r541244066", "createdAt": "2020-12-11T20:18:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/Connection.java", "diffHunk": "@@ -1441,6 +1446,58 @@ private void sendTextToSpeech() {\n         }\n     }\n \n+    public void textCommand(Device device, String text, @Nullable Integer ttsVolume, @Nullable Integer standardVolume) {\n+        if (text.replaceAll(\"<.+?>\", \"\").replaceAll(\"\\\\s+\", \" \").trim().isEmpty()) {\n+            return;\n+        }\n+\n+        // we lock TextCommands until we have finished adding this one\n+        Lock lock = locks.computeIfAbsent(TimerType.TEXT_COMMAND, k -> new ReentrantLock());\n+        lock.lock();\n+        try {\n+            TextCommand textCommand = Objects\n+                    .requireNonNull(textCommands.computeIfAbsent(Objects.hash(text), k -> new TextCommand(text)));\n+            textCommand.devices.add(device);\n+            textCommand.ttsVolumes.add(ttsVolume);\n+            textCommand.standardVolumes.add(standardVolume);\n+            // schedule a TextCommand only if it has not been scheduled before\n+            timers.computeIfAbsent(TimerType.TEXT_COMMAND,\n+                    k -> scheduler.schedule(this::sendTextCommand, 500, TimeUnit.MILLISECONDS));\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+\n+    private synchronized void sendTextCommand() {\n+        // we lock new TTS until we have dispatched everything\n+        Lock lock = locks.computeIfAbsent(TimerType.TEXT_COMMAND, k -> new ReentrantLock());\n+        lock.lock();\n+\n+        try {\n+            Iterator<TextCommand> iterator = textCommands.values().iterator();\n+            while (iterator.hasNext()) {\n+                TextCommand textCommand = iterator.next();\n+                try {\n+                    List<Device> devices = textCommand.devices;\n+                    if (!devices.isEmpty()) {\n+                        String text = textCommand.text;\n+                        Map<String, Object> parameters = new HashMap<>();\n+                        parameters.put(\"text\", text);\n+                        executeSequenceCommandWithVolume(devices, \"Alexa.TextCommand\", parameters,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b4f5c315d5daf7f389e495724377c85c22a904"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTE5MTM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/EchoHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoyMTo0N1rOIELGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoyMTo0N1rOIELGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0NzE3NA==", "bodyText": "Probably should make the same changes elsewhere as well.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            updateState(CHANNEL_TEXT_COMMAND, new StringType(\"\"));\n          \n          \n            \n                            updateState(CHANNEL_TEXT_COMMAND, StringType.EMPTY);", "url": "https://github.com/openhab/openhab-addons/pull/9328#discussion_r541247174", "createdAt": "2020-12-11T20:21:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/EchoHandler.java", "diffHunk": "@@ -1083,6 +1103,10 @@ public void updateState(AccountHandler accountHandler, @Nullable Device device,\n                 updateTextToSpeech = false;\n                 updateState(CHANNEL_TEXT_TO_SPEECH, new StringType(\"\"));\n             }\n+            if (updateTextCommand) {\n+                updateTextCommand = false;\n+                updateState(CHANNEL_TEXT_COMMAND, new StringType(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0b4f5c315d5daf7f389e495724377c85c22a904"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3626, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}