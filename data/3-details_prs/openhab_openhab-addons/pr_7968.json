{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTIxMzEz", "number": 7968, "title": "[netatmo] Support for switching video surveillance on/off (#7938)", "bodyText": "With this change it is possible to switch the video surveillance on and off (for all cameras / Welcome and Presence). See issue #7938 for more information.\nWhen a camera related command is executed a refresh is executed after 2 seconds to update all channels. This has for example following effects:\n\nWhen the floodlight is switched on/off a new live picture gets received with the new floodlight state.\nWhen the video surveillance is switched on/off an event is received to confirm the new state.", "createdAt": "2020-06-21T09:40:54Z", "url": "https://github.com/openhab/openhab-addons/pull/7968", "merged": true, "mergeCommit": {"oid": "05eb61d95b0fddd49ab5f51b98c989b398a463e1"}, "closed": true, "closedAt": "2020-06-28T20:29:14Z", "author": {"login": "Novanic"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp9bOBgH2gAyNDM3NTIxMzEzOjc4Njk5ZjkyMzQ3NTI2MmY3MTRiMTg2YTQ0NDBkMmE0MGVkZjEzMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvyddMgFqTQzODgxMDY2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "78699f923475262f714b186a4440d2a40edf1331", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/78699f923475262f714b186a4440d2a40edf1331", "committedDate": "2020-06-10T17:50:55Z", "message": "Merge pull request #1 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae6b89156403811be49f80a0ad7831957f7e3ff3", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/ae6b89156403811be49f80a0ad7831957f7e3ff3", "committedDate": "2020-06-12T18:12:18Z", "message": "Merge pull request #2 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66abc11ea152aaa77d9bc64abe15f2dc94f65056", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/66abc11ea152aaa77d9bc64abe15f2dc94f65056", "committedDate": "2020-06-13T20:20:47Z", "message": "Merge pull request #3 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f2cd511ce4312cde304741620c1765d56cd68c5", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/4f2cd511ce4312cde304741620c1765d56cd68c5", "committedDate": "2020-06-16T16:31:06Z", "message": "Merge pull request #4 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd9cfc1d515b67147465297aabcfba123c8b0da2", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/bd9cfc1d515b67147465297aabcfba123c8b0da2", "committedDate": "2020-06-18T18:57:15Z", "message": "Merge pull request #5 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de620021e378cd1f0823075981f891007372f606", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/de620021e378cd1f0823075981f891007372f606", "committedDate": "2020-06-20T20:31:41Z", "message": "Merge pull request #6 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad272b75fe2a8099893fcb90c57c70c3030dbc78", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/ad272b75fe2a8099893fcb90c57c70c3030dbc78", "committedDate": "2020-06-20T22:24:01Z", "message": "Merge pull request #7 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76c47b885b5ed65d8397451c2e5f6afee41e71a5", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/76c47b885b5ed65d8397451c2e5f6afee41e71a5", "committedDate": "2020-06-21T08:57:04Z", "message": "Merge pull request #8 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2318dceac248b64e569a8cb5bfb8f75dd1a19b3a", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/2318dceac248b64e569a8cb5bfb8f75dd1a19b3a", "committedDate": "2020-06-21T09:12:33Z", "message": "[7938] Support for switching video surveillance on/off\n- The video surveillance can now get switched on/off\n- When the command is executed (floodlight or video surveillance switched on/off) a refresh is executed after 2 seconds to update all channels\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f87538137b92cfe0da776caa19e9d780c66d4bc8", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/f87538137b92cfe0da776caa19e9d780c66d4bc8", "committedDate": "2020-06-21T09:34:14Z", "message": "Warnings fixed\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDg5Mjg1", "url": "https://github.com/openhab/openhab-addons/pull/7968#pullrequestreview-434489285", "createdAt": "2020-06-21T10:31:10Z", "commit": {"oid": "f87538137b92cfe0da776caa19e9d780c66d4bc8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMDozMToxMVrOGmrHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMDozMTo1MVrOGmrHrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNTUwOA==", "bodyText": "A DEBUG log will be sufficient I think.", "url": "https://github.com/openhab/openhab-addons/pull/7968#discussion_r443205508", "createdAt": "2020-06-21T10:31:11Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -69,93 +102,136 @@ protected State getNAThingProperty(@NonNull String channelId) {\n     }\n \n     protected State getStatusState() {\n-        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getSdStatusState() {\n-        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getSdStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getAlimStatusState() {\n-        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getAlimStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getIsLocalState() {\n-        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getIsLocal())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getLivePictureURLState() {\n-        String livePictureURL = getLivePictureURL();\n-        return livePictureURL == null ? UnDefType.UNDEF : toStringType(livePictureURL);\n+        return getLivePictureURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getLivePictureState() {\n-        String livePictureURL = getLivePictureURL();\n-        return livePictureURL == null ? UnDefType.UNDEF : HttpUtil.downloadImage(livePictureURL);\n+        Optional<String> livePictureURL = getLivePictureURL();\n+        return livePictureURL.isPresent() ? HttpUtil.downloadImage(livePictureURL.get()) : UnDefType.UNDEF;\n     }\n \n     protected State getLiveStreamState() {\n-        String liveStreamURL = getLiveStreamURL();\n-        return liveStreamURL == null ? UnDefType.UNDEF : new StringType(liveStreamURL);\n+        return getLiveStreamURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n     }\n \n     /**\n      * Get the url for the live snapshot\n      *\n      * @return Url of the live snapshot\n      */\n-    private String getLivePictureURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += LIVE_PICTURE;\n-        }\n-        return result;\n+    private Optional<String> getLivePictureURL() {\n+        return getVpnUrl().map(u -> u += LIVE_PICTURE);\n     }\n \n     /**\n      * Get the url for the live stream depending wether local or not\n      *\n      * @return Url of the live stream\n      */\n-    private String getLiveStreamURL() {\n-        String result = getVpnUrl();\n-        if (result == null) {\n-            return null;\n+    private Optional<String> getLiveStreamURL() {\n+        Optional<String> result = getVpnUrl();\n+        if (!result.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        StringBuilder resultStringBuilder = new StringBuilder(result);\n+        StringBuilder resultStringBuilder = new StringBuilder(result.get());\n         resultStringBuilder.append(\"/live/index\");\n         if (isLocal()) {\n             resultStringBuilder.append(\"_local\");\n         }\n         resultStringBuilder.append(\".m3u8\");\n-        return resultStringBuilder.toString();\n+        return Optional.of(resultStringBuilder.toString());\n     }\n \n-    @SuppressWarnings(\"null\")\n-    protected String getVpnUrl() {\n-        return (module == null) ? null : module.getVpnUrl();\n+    private Optional<String> getVpnUrl() {\n+        return getModule().map(NAWelcomeCamera::getVpnUrl);\n     }\n \n-    public String getStreamURL(String videoId) {\n-        String result = getVpnUrl();\n-        if (result == null) {\n-            return null;\n+    public Optional<String> getStreamURL(String videoId) {\n+        Optional<String> result = getVpnUrl();\n+        if (!result.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        StringBuilder resultStringBuilder = new StringBuilder(result);\n+        StringBuilder resultStringBuilder = new StringBuilder(result.get());\n         resultStringBuilder.append(\"/vod/\");\n         resultStringBuilder.append(videoId);\n         resultStringBuilder.append(\"/index\");\n         if (isLocal()) {\n             resultStringBuilder.append(\"_local\");\n         }\n         resultStringBuilder.append(\".m3u8\");\n-        return resultStringBuilder.toString();\n+        return Optional.of(resultStringBuilder.toString());\n     }\n \n-    @SuppressWarnings(\"null\")\n     private boolean isLocal() {\n-        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal();\n+        return getModule().map(NAWelcomeCamera::getIsLocal).orElse(false);\n+    }\n+\n+    private void switchVideoSurveillance(boolean isOn) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get() + STATUS_CHANGE_URL_PATH + \"?status=\";\n+            if(isOn) {\n+                url += \"on\";\n+            } else {\n+                url += \"off\";\n+            }\n+            executeGETRequest(url);\n+\n+            invalidateParentCacheAndRefresh();\n+        }\n+    }\n+\n+    protected Optional<String> getLocalCameraURL() {\n+        Optional<String> vpnURLOptional = getVpnUrl();\n+        if (vpnURLOptional.isPresent()) {\n+            final String vpnURL = vpnURLOptional.get();\n+\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.optString(\"local_url\", null))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        try {\n+            return executeGETRequest(url).map(JSONObject::new);\n+        } catch (JSONException e) {\n+            logger.warn(\"Error on parsing the content as JSON!\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87538137b92cfe0da776caa19e9d780c66d4bc8"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNTU0OQ==", "bodyText": "A DEBUG log will be sufficient I think.", "url": "https://github.com/openhab/openhab-addons/pull/7968#discussion_r443205549", "createdAt": "2020-06-21T10:31:51Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -69,93 +102,136 @@ protected State getNAThingProperty(@NonNull String channelId) {\n     }\n \n     protected State getStatusState() {\n-        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getSdStatusState() {\n-        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getSdStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getAlimStatusState() {\n-        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getAlimStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getIsLocalState() {\n-        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getIsLocal())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getLivePictureURLState() {\n-        String livePictureURL = getLivePictureURL();\n-        return livePictureURL == null ? UnDefType.UNDEF : toStringType(livePictureURL);\n+        return getLivePictureURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getLivePictureState() {\n-        String livePictureURL = getLivePictureURL();\n-        return livePictureURL == null ? UnDefType.UNDEF : HttpUtil.downloadImage(livePictureURL);\n+        Optional<String> livePictureURL = getLivePictureURL();\n+        return livePictureURL.isPresent() ? HttpUtil.downloadImage(livePictureURL.get()) : UnDefType.UNDEF;\n     }\n \n     protected State getLiveStreamState() {\n-        String liveStreamURL = getLiveStreamURL();\n-        return liveStreamURL == null ? UnDefType.UNDEF : new StringType(liveStreamURL);\n+        return getLiveStreamURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n     }\n \n     /**\n      * Get the url for the live snapshot\n      *\n      * @return Url of the live snapshot\n      */\n-    private String getLivePictureURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += LIVE_PICTURE;\n-        }\n-        return result;\n+    private Optional<String> getLivePictureURL() {\n+        return getVpnUrl().map(u -> u += LIVE_PICTURE);\n     }\n \n     /**\n      * Get the url for the live stream depending wether local or not\n      *\n      * @return Url of the live stream\n      */\n-    private String getLiveStreamURL() {\n-        String result = getVpnUrl();\n-        if (result == null) {\n-            return null;\n+    private Optional<String> getLiveStreamURL() {\n+        Optional<String> result = getVpnUrl();\n+        if (!result.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        StringBuilder resultStringBuilder = new StringBuilder(result);\n+        StringBuilder resultStringBuilder = new StringBuilder(result.get());\n         resultStringBuilder.append(\"/live/index\");\n         if (isLocal()) {\n             resultStringBuilder.append(\"_local\");\n         }\n         resultStringBuilder.append(\".m3u8\");\n-        return resultStringBuilder.toString();\n+        return Optional.of(resultStringBuilder.toString());\n     }\n \n-    @SuppressWarnings(\"null\")\n-    protected String getVpnUrl() {\n-        return (module == null) ? null : module.getVpnUrl();\n+    private Optional<String> getVpnUrl() {\n+        return getModule().map(NAWelcomeCamera::getVpnUrl);\n     }\n \n-    public String getStreamURL(String videoId) {\n-        String result = getVpnUrl();\n-        if (result == null) {\n-            return null;\n+    public Optional<String> getStreamURL(String videoId) {\n+        Optional<String> result = getVpnUrl();\n+        if (!result.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        StringBuilder resultStringBuilder = new StringBuilder(result);\n+        StringBuilder resultStringBuilder = new StringBuilder(result.get());\n         resultStringBuilder.append(\"/vod/\");\n         resultStringBuilder.append(videoId);\n         resultStringBuilder.append(\"/index\");\n         if (isLocal()) {\n             resultStringBuilder.append(\"_local\");\n         }\n         resultStringBuilder.append(\".m3u8\");\n-        return resultStringBuilder.toString();\n+        return Optional.of(resultStringBuilder.toString());\n     }\n \n-    @SuppressWarnings(\"null\")\n     private boolean isLocal() {\n-        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal();\n+        return getModule().map(NAWelcomeCamera::getIsLocal).orElse(false);\n+    }\n+\n+    private void switchVideoSurveillance(boolean isOn) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get() + STATUS_CHANGE_URL_PATH + \"?status=\";\n+            if(isOn) {\n+                url += \"on\";\n+            } else {\n+                url += \"off\";\n+            }\n+            executeGETRequest(url);\n+\n+            invalidateParentCacheAndRefresh();\n+        }\n+    }\n+\n+    protected Optional<String> getLocalCameraURL() {\n+        Optional<String> vpnURLOptional = getVpnUrl();\n+        if (vpnURLOptional.isPresent()) {\n+            final String vpnURL = vpnURLOptional.get();\n+\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.optString(\"local_url\", null))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        try {\n+            return executeGETRequest(url).map(JSONObject::new);\n+        } catch (JSONException e) {\n+            logger.warn(\"Error on parsing the content as JSON!\", e);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Optional<String> executeGETRequest(String url) {\n+        try {\n+            String content = HttpUtil.executeUrl(\"GET\", url, 5000);\n+            if (content != null && !content.isEmpty()) {\n+                return Optional.of(content);\n+            }\n+        } catch (IOException e) {\n+            logger.warn(\"Error on accessing local camera url!\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f87538137b92cfe0da776caa19e9d780c66d4bc8"}, "originalPosition": 238}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d3506305b7ee9f51efa762e9bca49124f341957", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/8d3506305b7ee9f51efa762e9bca49124f341957", "committedDate": "2020-06-21T18:04:30Z", "message": "New tests for isNewLastEvent added\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MDQ3NTQ1", "url": "https://github.com/openhab/openhab-addons/pull/7968#pullrequestreview-437047545", "createdAt": "2020-06-24T22:23:44Z", "commit": {"oid": "8d3506305b7ee9f51efa762e9bca49124f341957"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyMzo0NFrOGolJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoyNDo1NlrOGolLMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNDg1Nw==", "bodyText": "My general rule for logging levels is:\n\ntrace - used for normal expected execution paths\ndebug - used for unexepected execution paths, but well within normal operation\ninfo - used for notable points in an execution path, like a milestone. (in openhab we try reserve this logging level for the core, so bindings should rarely ever call this.)\nwarn - used for notable unexpected execution paths that a regular user (not just a developer) should be notified of. Warnings should be used to indicate that something not-normal occurred and user intervention is required to resolve. Warnings do not indicate a failure to operate merely an abnormal condition of operation that can still be handled by the binding. Failures in binding operation should be indicated by changing the thing status to offline.\nerror - used to indicate catastrophic program failure. This should be used to indicate a catastrophic failure in openhab's ability to operate. A failure in a binding would never cause openhab as a whole to fail so a failure in a bindings should never log an error. Instead that failure should be indicated by changing the thing status.\n\nNow if a JSONException does occur here it doesn't really reflect a failure in the binding so much a failure in an external system and can be thought of more or less akin to connection loss. If you think that such a json parsing failure should be elevated above \"warn\" then I suggest changing the thing status to OFFLINE to reflect that.", "url": "https://github.com/openhab/openhab-addons/pull/7968#discussion_r445204857", "createdAt": "2020-06-24T22:23:44Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -69,93 +102,136 @@ protected State getNAThingProperty(@NonNull String channelId) {\n     }\n \n     protected State getStatusState() {\n-        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getSdStatusState() {\n-        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getSdStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getAlimStatusState() {\n-        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getAlimStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getIsLocalState() {\n-        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getIsLocal())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getLivePictureURLState() {\n-        String livePictureURL = getLivePictureURL();\n-        return livePictureURL == null ? UnDefType.UNDEF : toStringType(livePictureURL);\n+        return getLivePictureURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getLivePictureState() {\n-        String livePictureURL = getLivePictureURL();\n-        return livePictureURL == null ? UnDefType.UNDEF : HttpUtil.downloadImage(livePictureURL);\n+        Optional<String> livePictureURL = getLivePictureURL();\n+        return livePictureURL.isPresent() ? HttpUtil.downloadImage(livePictureURL.get()) : UnDefType.UNDEF;\n     }\n \n     protected State getLiveStreamState() {\n-        String liveStreamURL = getLiveStreamURL();\n-        return liveStreamURL == null ? UnDefType.UNDEF : new StringType(liveStreamURL);\n+        return getLiveStreamURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n     }\n \n     /**\n      * Get the url for the live snapshot\n      *\n      * @return Url of the live snapshot\n      */\n-    private String getLivePictureURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += LIVE_PICTURE;\n-        }\n-        return result;\n+    private Optional<String> getLivePictureURL() {\n+        return getVpnUrl().map(u -> u += LIVE_PICTURE);\n     }\n \n     /**\n      * Get the url for the live stream depending wether local or not\n      *\n      * @return Url of the live stream\n      */\n-    private String getLiveStreamURL() {\n-        String result = getVpnUrl();\n-        if (result == null) {\n-            return null;\n+    private Optional<String> getLiveStreamURL() {\n+        Optional<String> result = getVpnUrl();\n+        if (!result.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        StringBuilder resultStringBuilder = new StringBuilder(result);\n+        StringBuilder resultStringBuilder = new StringBuilder(result.get());\n         resultStringBuilder.append(\"/live/index\");\n         if (isLocal()) {\n             resultStringBuilder.append(\"_local\");\n         }\n         resultStringBuilder.append(\".m3u8\");\n-        return resultStringBuilder.toString();\n+        return Optional.of(resultStringBuilder.toString());\n     }\n \n-    @SuppressWarnings(\"null\")\n-    protected String getVpnUrl() {\n-        return (module == null) ? null : module.getVpnUrl();\n+    private Optional<String> getVpnUrl() {\n+        return getModule().map(NAWelcomeCamera::getVpnUrl);\n     }\n \n-    public String getStreamURL(String videoId) {\n-        String result = getVpnUrl();\n-        if (result == null) {\n-            return null;\n+    public Optional<String> getStreamURL(String videoId) {\n+        Optional<String> result = getVpnUrl();\n+        if (!result.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        StringBuilder resultStringBuilder = new StringBuilder(result);\n+        StringBuilder resultStringBuilder = new StringBuilder(result.get());\n         resultStringBuilder.append(\"/vod/\");\n         resultStringBuilder.append(videoId);\n         resultStringBuilder.append(\"/index\");\n         if (isLocal()) {\n             resultStringBuilder.append(\"_local\");\n         }\n         resultStringBuilder.append(\".m3u8\");\n-        return resultStringBuilder.toString();\n+        return Optional.of(resultStringBuilder.toString());\n     }\n \n-    @SuppressWarnings(\"null\")\n     private boolean isLocal() {\n-        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal();\n+        return getModule().map(NAWelcomeCamera::getIsLocal).orElse(false);\n+    }\n+\n+    private void switchVideoSurveillance(boolean isOn) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get() + STATUS_CHANGE_URL_PATH + \"?status=\";\n+            if(isOn) {\n+                url += \"on\";\n+            } else {\n+                url += \"off\";\n+            }\n+            executeGETRequest(url);\n+\n+            invalidateParentCacheAndRefresh();\n+        }\n+    }\n+\n+    protected Optional<String> getLocalCameraURL() {\n+        Optional<String> vpnURLOptional = getVpnUrl();\n+        if (vpnURLOptional.isPresent()) {\n+            final String vpnURL = vpnURLOptional.get();\n+\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.optString(\"local_url\", null))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        try {\n+            return executeGETRequest(url).map(JSONObject::new);\n+        } catch (JSONException e) {\n+            logger.warn(\"Error on parsing the content as JSON!\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNTUwOA=="}, "originalCommit": {"oid": "f87538137b92cfe0da776caa19e9d780c66d4bc8"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNTI5OA==", "bodyText": "I think that such an exception should probably be elevated to the caller since I don't think that simple logging would be how all callers would like this particular issue to be handled.", "url": "https://github.com/openhab/openhab-addons/pull/7968#discussion_r445205298", "createdAt": "2020-06-24T22:24:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -69,93 +102,136 @@ protected State getNAThingProperty(@NonNull String channelId) {\n     }\n \n     protected State getStatusState() {\n-        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getSdStatusState() {\n-        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getSdStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getAlimStatusState() {\n-        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getAlimStatus())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getIsLocalState() {\n-        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\n+        return getModule().map(m -> toOnOffType(m.getIsLocal())).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getLivePictureURLState() {\n-        String livePictureURL = getLivePictureURL();\n-        return livePictureURL == null ? UnDefType.UNDEF : toStringType(livePictureURL);\n+        return getLivePictureURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n     }\n \n     protected State getLivePictureState() {\n-        String livePictureURL = getLivePictureURL();\n-        return livePictureURL == null ? UnDefType.UNDEF : HttpUtil.downloadImage(livePictureURL);\n+        Optional<String> livePictureURL = getLivePictureURL();\n+        return livePictureURL.isPresent() ? HttpUtil.downloadImage(livePictureURL.get()) : UnDefType.UNDEF;\n     }\n \n     protected State getLiveStreamState() {\n-        String liveStreamURL = getLiveStreamURL();\n-        return liveStreamURL == null ? UnDefType.UNDEF : new StringType(liveStreamURL);\n+        return getLiveStreamURL().map(ChannelTypeUtils::toStringType).orElse(UnDefType.UNDEF);\n     }\n \n     /**\n      * Get the url for the live snapshot\n      *\n      * @return Url of the live snapshot\n      */\n-    private String getLivePictureURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += LIVE_PICTURE;\n-        }\n-        return result;\n+    private Optional<String> getLivePictureURL() {\n+        return getVpnUrl().map(u -> u += LIVE_PICTURE);\n     }\n \n     /**\n      * Get the url for the live stream depending wether local or not\n      *\n      * @return Url of the live stream\n      */\n-    private String getLiveStreamURL() {\n-        String result = getVpnUrl();\n-        if (result == null) {\n-            return null;\n+    private Optional<String> getLiveStreamURL() {\n+        Optional<String> result = getVpnUrl();\n+        if (!result.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        StringBuilder resultStringBuilder = new StringBuilder(result);\n+        StringBuilder resultStringBuilder = new StringBuilder(result.get());\n         resultStringBuilder.append(\"/live/index\");\n         if (isLocal()) {\n             resultStringBuilder.append(\"_local\");\n         }\n         resultStringBuilder.append(\".m3u8\");\n-        return resultStringBuilder.toString();\n+        return Optional.of(resultStringBuilder.toString());\n     }\n \n-    @SuppressWarnings(\"null\")\n-    protected String getVpnUrl() {\n-        return (module == null) ? null : module.getVpnUrl();\n+    private Optional<String> getVpnUrl() {\n+        return getModule().map(NAWelcomeCamera::getVpnUrl);\n     }\n \n-    public String getStreamURL(String videoId) {\n-        String result = getVpnUrl();\n-        if (result == null) {\n-            return null;\n+    public Optional<String> getStreamURL(String videoId) {\n+        Optional<String> result = getVpnUrl();\n+        if (!result.isPresent()) {\n+            return Optional.empty();\n         }\n \n-        StringBuilder resultStringBuilder = new StringBuilder(result);\n+        StringBuilder resultStringBuilder = new StringBuilder(result.get());\n         resultStringBuilder.append(\"/vod/\");\n         resultStringBuilder.append(videoId);\n         resultStringBuilder.append(\"/index\");\n         if (isLocal()) {\n             resultStringBuilder.append(\"_local\");\n         }\n         resultStringBuilder.append(\".m3u8\");\n-        return resultStringBuilder.toString();\n+        return Optional.of(resultStringBuilder.toString());\n     }\n \n-    @SuppressWarnings(\"null\")\n     private boolean isLocal() {\n-        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal();\n+        return getModule().map(NAWelcomeCamera::getIsLocal).orElse(false);\n+    }\n+\n+    private void switchVideoSurveillance(boolean isOn) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get() + STATUS_CHANGE_URL_PATH + \"?status=\";\n+            if(isOn) {\n+                url += \"on\";\n+            } else {\n+                url += \"off\";\n+            }\n+            executeGETRequest(url);\n+\n+            invalidateParentCacheAndRefresh();\n+        }\n+    }\n+\n+    protected Optional<String> getLocalCameraURL() {\n+        Optional<String> vpnURLOptional = getVpnUrl();\n+        if (vpnURLOptional.isPresent()) {\n+            final String vpnURL = vpnURLOptional.get();\n+\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.optString(\"local_url\", null))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        try {\n+            return executeGETRequest(url).map(JSONObject::new);\n+        } catch (JSONException e) {\n+            logger.warn(\"Error on parsing the content as JSON!\", e);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    protected Optional<String> executeGETRequest(String url) {\n+        try {\n+            String content = HttpUtil.executeUrl(\"GET\", url, 5000);\n+            if (content != null && !content.isEmpty()) {\n+                return Optional.of(content);\n+            }\n+        } catch (IOException e) {\n+            logger.warn(\"Error on accessing local camera url!\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIwNTU0OQ=="}, "originalCommit": {"oid": "f87538137b92cfe0da776caa19e9d780c66d4bc8"}, "originalPosition": 238}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MDA0NzYy", "url": "https://github.com/openhab/openhab-addons/pull/7968#pullrequestreview-438004762", "createdAt": "2020-06-26T04:25:06Z", "commit": {"oid": "8d3506305b7ee9f51efa762e9bca49124f341957"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzU3NjQ4", "url": "https://github.com/openhab/openhab-addons/pull/7968#pullrequestreview-438757648", "createdAt": "2020-06-28T08:34:35Z", "commit": {"oid": "8d3506305b7ee9f51efa762e9bca49124f341957"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODEwNjY3", "url": "https://github.com/openhab/openhab-addons/pull/7968#pullrequestreview-438810667", "createdAt": "2020-06-28T20:27:57Z", "commit": {"oid": "8d3506305b7ee9f51efa762e9bca49124f341957"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 311, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}