{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzQzMjE5", "number": 7927, "title": "[netatmo] Add support for the floodlight of the Presence camera (#7912)", "bodyText": "The Presence camera is supported since OpenHAB 2.5.6 (see #3059 ).\nNow it is also possible to switch the floodlight to on, off or auto-mode. This is realized via 2 switches, 1 for the auto-mode and 1 for on or off/auto (depending on the state of the auto-mode).\nTechnical hint: It is required to access the floodlight API via the local network. Therefore a \"/command/ping\" request is sent to determine the local address.\nSee issue #7912 for more information.", "createdAt": "2020-06-16T16:46:37Z", "url": "https://github.com/openhab/openhab-addons/pull/7927", "merged": true, "mergeCommit": {"oid": "0f9e99da3052dfe968fe30629d91d0b706d55325"}, "closed": true, "closedAt": "2020-06-18T18:35:32Z", "author": {"login": "Novanic"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp9bOBgH2gAyNDM1MzQzMjE5Ojc4Njk5ZjkyMzQ3NTI2MmY3MTRiMTg2YTQ0NDBkMmE0MGVkZjEzMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsjPhhgFqTQzMzU2NjA3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "78699f923475262f714b186a4440d2a40edf1331", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/78699f923475262f714b186a4440d2a40edf1331", "committedDate": "2020-06-10T17:50:55Z", "message": "Merge pull request #1 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae6b89156403811be49f80a0ad7831957f7e3ff3", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/ae6b89156403811be49f80a0ad7831957f7e3ff3", "committedDate": "2020-06-12T18:12:18Z", "message": "Merge pull request #2 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66abc11ea152aaa77d9bc64abe15f2dc94f65056", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/66abc11ea152aaa77d9bc64abe15f2dc94f65056", "committedDate": "2020-06-13T20:20:47Z", "message": "Merge pull request #3 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f2cd511ce4312cde304741620c1765d56cd68c5", "author": {"user": {"login": "Novanic", "name": "Sven Strohschein"}}, "url": "https://github.com/openhab/openhab-addons/commit/4f2cd511ce4312cde304741620c1765d56cd68c5", "committedDate": "2020-06-16T16:31:06Z", "message": "Merge pull request #4 from openhab/2.5.x\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde518f9e8701b767bf71e9afe380d03e90221b3", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/dde518f9e8701b767bf71e9afe380d03e90221b3", "committedDate": "2020-06-16T16:46:58Z", "message": "[#7912] Support for the floodlight of the Presence camera\n- Support for the floodlight of the Presence camera added (There are 2 new switches to set the floodlight auto-mode and to switch the floodlight on and off/auto).\n- Netatmo API swagger spec updated\n- Tests added\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNzY4MDAw", "url": "https://github.com/openhab/openhab-addons/pull/7927#pullrequestreview-431768000", "createdAt": "2020-06-16T18:11:01Z", "commit": {"oid": "dde518f9e8701b767bf71e9afe380d03e90221b3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMTowMVrOGknVUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxMzoyN1rOGknalA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NjM1Mw==", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.\nI suggest downgrading this to warning or setting the handler to offline.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441046353", "createdAt": "2020-06-16T18:11:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if(UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        Optional<JSONObject> jsonContent = executeGETRequest(url).map(JSONObject::new);\n+        if(!jsonContent.isPresent()) {\n+            logger.error(\"The request-result could not get retrieved!\");\n+        }\n+        return jsonContent;\n+    }\n+\n+    Optional<String> executeGETRequest(String url) {\n+        try {\n+            String content = HttpUtil.executeUrl(\"GET\", url, 5000);\n+            if (content != null && !content.isEmpty()) {\n+                return Optional.of(content);\n+            }\n+        } catch (IOException | JSONException e) {\n+            logger.error(\"Error on loading local camera url!\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde518f9e8701b767bf71e9afe380d03e90221b3"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA0NzcwMA==", "bodyText": "This should be changed to debug, otherwise you are just double logging what already was logged in executeGETRequest.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441047700", "createdAt": "2020-06-16T18:13:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if(OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if(OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if(UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));\n+            }\n+        }\n+        return cameraAddress.map(CameraAddress::getLocalURL);\n+    }\n+\n+    private Optional<JSONObject> executeGETRequestJSON(String url) {\n+        Optional<JSONObject> jsonContent = executeGETRequest(url).map(JSONObject::new);\n+        if(!jsonContent.isPresent()) {\n+            logger.error(\"The request-result could not get retrieved!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde518f9e8701b767bf71e9afe380d03e90221b3"}, "originalPosition": 159}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5e07d1edfeb6ff12fc31b3f6d2b84d754ddc46d", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/c5e07d1edfeb6ff12fc31b3f6d2b84d754ddc46d", "committedDate": "2020-06-16T20:15:41Z", "message": "Exception handling and logging corrected\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxOTQwMzAw", "url": "https://github.com/openhab/openhab-addons/pull/7927#pullrequestreview-431940300", "createdAt": "2020-06-16T22:39:12Z", "commit": {"oid": "c5e07d1edfeb6ff12fc31b3f6d2b84d754ddc46d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjozOToxMlrOGkvkUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMjozOToxMlrOGkvkUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE4MTI2NQ==", "bodyText": "Using getString with throw an exception if it fails to find anything at that field name, use optString instead so it will return null.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441181265", "createdAt": "2020-06-16T22:39:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if (UnDefType.UNDEF.equals(floodlightAutoModeState)) {\n+                    floodlightAutoModeState = getFloodlightAutoModeState();\n+                }\n+                return floodlightAutoModeState;\n+        }\n+        return super.getNAThingProperty(channelId);\n+    }\n+\n+    private State getFloodlightState() {\n+        if (module != null) {\n+            final boolean isOn = NAWelcomeCamera.LightModeStatusEnum.ON.equals(module.getLightModeStatus());\n+            return toOnOffType(isOn);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private State getFloodlightAutoModeState() {\n+        if (module != null) {\n+            return toOnOffType(NAWelcomeCamera.LightModeStatusEnum.AUTO.equals(module.getLightModeStatus()));\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    private void switchFloodlight(boolean isOn) {\n+        if (isOn) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.ON);\n+        } else {\n+            switchFloodlightAutoMode(OnOffType.ON.equals(floodlightAutoModeState));\n+        }\n+    }\n+\n+    private void switchFloodlightAutoMode(boolean isAutoMode) {\n+        floodlightAutoModeState = toOnOffType(isAutoMode);\n+        if (isAutoMode) {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.AUTO);\n+        } else {\n+            changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum.OFF);\n+        }\n+    }\n+\n+    private void changeFloodlightMode(NAWelcomeCamera.LightModeStatusEnum mode) {\n+        Optional<String> localCameraURL = getLocalCameraURL();\n+        if (localCameraURL.isPresent()) {\n+            String url = localCameraURL.get()\n+                    + FLOODLIGHT_SET_URL_PATH\n+                    + \"?config=%7B%22mode%22:%22\"\n+                    + mode.toString()\n+                    + \"%22%7D\";\n+            executeGETRequest(url);\n+        }\n+    }\n+\n+    private Optional<String> getLocalCameraURL() {\n+        String vpnURL = getVpnUrl();\n+        if (vpnURL != null) {\n+            //The local address is (re-)requested when it wasn't already determined or when the vpn address was changed.\n+            if (!cameraAddress.isPresent() || cameraAddress.get().isVpnURLChanged(vpnURL)) {\n+                Optional<JSONObject> json = executeGETRequestJSON(vpnURL + PING_URL_PATH);\n+                cameraAddress = json.map(j -> j.getString(\"local_url\"))\n+                        .map(localURL -> new CameraAddress(vpnURL, localURL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e07d1edfeb6ff12fc31b3f6d2b84d754ddc46d"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTMyMjA4", "url": "https://github.com/openhab/openhab-addons/pull/7927#pullrequestreview-432132208", "createdAt": "2020-06-17T07:33:23Z", "commit": {"oid": "c5e07d1edfeb6ff12fc31b3f6d2b84d754ddc46d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/321d021f63e3f3387fc67df4da16388b4a3f64e3", "committedDate": "2020-06-17T17:57:35Z", "message": "Potential crash fixed which could occur when a wrong JSON response is returned by the ping command request (when it is a valid JSON but without the expected attribute \"local_url\").\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjYwNzkz", "url": "https://github.com/openhab/openhab-addons/pull/7927#pullrequestreview-432660793", "createdAt": "2020-06-17T18:21:59Z", "commit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyMTo1OVrOGlRvhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODoyNDo1MlrOGlR1eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTE5MA==", "bodyText": "== OnOffType.ON could rather ne used I think.", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441741190", "createdAt": "2020-06-17T18:21:59Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTQyNg==", "bodyText": "Same", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441741426", "createdAt": "2020-06-17T18:22:25Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTY5Mg==", "bodyText": "Same", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441741692", "createdAt": "2020-06-17T18:22:57Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MTg5Mg==", "bodyText": "Same", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441741892", "createdAt": "2020-06-17T18:23:20Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0MjcxMw==", "bodyText": "== could be used rather than equals", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r441742713", "createdAt": "2020-06-17T18:24:52Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/presence/NAPresenceCameraHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.presence;\n+\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\n+\n+import io.swagger.client.model.NAWelcomeCamera;\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT;\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE;\n+\n+/**\n+ * {@link NAPresenceCameraHandler} is the class used to handle Presence camera data\n+ *\n+ * @author Sven Strohschein\n+ */\n+@NonNullByDefault\n+public class NAPresenceCameraHandler extends CameraHandler {\n+\n+    private static final String PING_URL_PATH = \"/command/ping\";\n+    private static final String FLOODLIGHT_SET_URL_PATH = \"/command/floodlight_set_config\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NAPresenceCameraHandler.class);\n+\n+    private Optional<CameraAddress> cameraAddress = Optional.empty();\n+    private State floodlightAutoModeState = UnDefType.UNDEF;\n+\n+    public NAPresenceCameraHandler(final Thing thing, final TimeZoneProvider timeZoneProvider) {\n+        super(thing, timeZoneProvider);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        String channelId = channelUID.getId();\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlight(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlight(false);\n+                }\n+                break;\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                if (OnOffType.ON.equals(command)) {\n+                    switchFloodlightAutoMode(true);\n+                } else if (OnOffType.OFF.equals(command)) {\n+                    switchFloodlightAutoMode(false);\n+                }\n+                break;\n+        }\n+        super.handleCommand(channelUID, command);\n+    }\n+\n+    @Override\n+    protected State getNAThingProperty(@NonNull String channelId) {\n+        switch (channelId) {\n+            case CHANNEL_CAMERA_FLOODLIGHT:\n+                return getFloodlightState();\n+            case CHANNEL_CAMERA_FLOODLIGHT_AUTO_MODE:\n+                //The auto-mode state shouldn't be updated, because this isn't a dedicated information. When the\n+                // floodlight is switched on the state within the Netatmo API is \"on\" and the information if the previous\n+                // state was \"auto\" instead of \"off\" is lost... Therefore the binding handles its own auto-mode state.\n+                if (UnDefType.UNDEF.equals(floodlightAutoModeState)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321d021f63e3f3387fc67df4da16388b4a3f64e3"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e8f154612e097fb0c099c16ce6d54cc025a8b1", "author": {"user": {"login": "sstrohschein", "name": null}}, "url": "https://github.com/openhab/openhab-addons/commit/16e8f154612e097fb0c099c16ce6d54cc025a8b1", "committedDate": "2020-06-18T17:30:22Z", "message": "Code optimization (from code-review)\n\nSigned-off-by: Sven Strohschein <sven.strohschein@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTQ2NTQw", "url": "https://github.com/openhab/openhab-addons/pull/7927#pullrequestreview-433546540", "createdAt": "2020-06-18T18:34:43Z", "commit": {"oid": "16e8f154612e097fb0c099c16ce6d54cc025a8b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY2MDcw", "url": "https://github.com/openhab/openhab-addons/pull/7927#pullrequestreview-433566070", "createdAt": "2020-06-18T19:02:23Z", "commit": {"oid": "16e8f154612e097fb0c099c16ce6d54cc025a8b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMjoyM1rOGl8ZLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMjoyM1rOGl8ZLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzOTk4MA==", "bodyText": "I might have merged too quickly, but just to double check, I don't see you changing NAWelcomeCameraHandler to extend CameraHandler. Was that supposed to be done?", "url": "https://github.com/openhab/openhab-addons/pull/7927#discussion_r442439980", "createdAt": "2020-06-18T19:02:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeHomeHandler.java", "diffHunk": "@@ -145,7 +146,7 @@ protected State getNAThingProperty(String channelId) {\n                     String cameraId = lastEvent.get().getCameraId();\n                     Optional<AbstractNetatmoThingHandler> thing = getBridgeHandler().findNAThing(cameraId);\n                     if (thing.isPresent()) {\n-                        NAWelcomeCameraHandler eventCamera = (NAWelcomeCameraHandler) thing.get();\n+                        CameraHandler eventCamera = (CameraHandler) thing.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16e8f154612e097fb0c099c16ce6d54cc025a8b1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 290, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}