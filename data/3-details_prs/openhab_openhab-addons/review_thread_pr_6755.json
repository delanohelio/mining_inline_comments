{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTQ5Nzg0", "number": 6755, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQwOTo1OToyNlrODVy28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMTo0NTowOVrODV0Qrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MTc5OTUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQwOTo1OToyNlrOFaNY6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQxNjo1Nzo0MVrOFaOerw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNjY2NA==", "bodyText": "Not sure if this sentence is important. It might be confusing actually. mqtt3 can only handle strings and binary.", "url": "https://github.com/openhab/openhab-addons/pull/6755#discussion_r363026664", "createdAt": "2020-01-04T09:59:26Z", "author": {"login": "davidgraeff"}, "path": "bundles/org.openhab.binding.mqtt.generic/README.md", "diffHunk": "@@ -245,6 +245,23 @@ Here are a few examples:\n   - For an output of *May 23, 1995* use \"%1$**tb** %1$**te**,%1$**tY**\".\n   - For an output of *23.05.1995* use \"%1$**td**.%1$**tm**.%1$**tY**\".\n   - For an output of *23:15* use \"%1$**tH**:%1$**tM**\".\n+  \n+Default pattern applied for each type:\n+| Type             | Parameter                         | Pattern             | Comment |\n+| ---------------- | --------------------------------- | ------------------- | ------- |\n+| __string__       | String                            | \"%s\"                | \n+| __number__       | BigDecimal                        | \"%f\"                | The default will remove trailing zeros after the decimal point. \n+| __dimmer__       | BigDecimal                        | \"%f\"                | The default will remove trailing zeros after the decimal point. \n+| __contact__      | String                            | --                  | No pattern supported. Always **on** and **off** strings. \n+| __switch__       | String                            | --                  | No pattern supported. Always **on** and **off** strings. \n+| __colorRGB__     | BigDecimal, BigDecimal, BigDecimal| \"%1$d,%2$d,%3$d\"    | Parameters are **red**, **green** and **blue** components.\n+| __colorHSB__     | BigDecimal, BigDecimal, BigDecimal| \"%1$d,%2$d,%3$d\"    | Parameters are **hue**, **saturation** and **brightness** components.\n+| __location__     | BigDecimal, BigDecimal            | \"%2$f,%3$f,%1$f\"    | Parameters are **altitude**, **latitude** and **longitude**, altitude is only in default pattern, if value is not '0'.\n+| __image__        | --                                | --                  | No publishing supported. \n+| __datetime__     | ZonedDateTime                     | \"%1$tY-%1$tm-%1$tdT%1$tH:%1$tM:%1$tS.%1$tN\" | Trailing zeros of the nanoseconds are removed.\n+| __rollershutter__| String                            | \"%s\"                | No pattern supported. Always **up**, **down**, **stop** string or integer percent value.\n+\n+Any outgoing value transformation will **always** result in a __string__ value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c95bb59f16dede913c4dcc36796745ac9a5563"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA0NDUyNw==", "bodyText": "Well, the point is, that even if the item is a datetime, after any transformation it will be of type string. There is no way (as of now), that a transformation can return any other datatype.\nI imagine, someone could think, they use a javascript tranformation to return a date object, which can then be formatted using the %t formatters.", "url": "https://github.com/openhab/openhab-addons/pull/6755#discussion_r363044527", "createdAt": "2020-01-04T16:57:41Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/README.md", "diffHunk": "@@ -245,6 +245,23 @@ Here are a few examples:\n   - For an output of *May 23, 1995* use \"%1$**tb** %1$**te**,%1$**tY**\".\n   - For an output of *23.05.1995* use \"%1$**td**.%1$**tm**.%1$**tY**\".\n   - For an output of *23:15* use \"%1$**tH**:%1$**tM**\".\n+  \n+Default pattern applied for each type:\n+| Type             | Parameter                         | Pattern             | Comment |\n+| ---------------- | --------------------------------- | ------------------- | ------- |\n+| __string__       | String                            | \"%s\"                | \n+| __number__       | BigDecimal                        | \"%f\"                | The default will remove trailing zeros after the decimal point. \n+| __dimmer__       | BigDecimal                        | \"%f\"                | The default will remove trailing zeros after the decimal point. \n+| __contact__      | String                            | --                  | No pattern supported. Always **on** and **off** strings. \n+| __switch__       | String                            | --                  | No pattern supported. Always **on** and **off** strings. \n+| __colorRGB__     | BigDecimal, BigDecimal, BigDecimal| \"%1$d,%2$d,%3$d\"    | Parameters are **red**, **green** and **blue** components.\n+| __colorHSB__     | BigDecimal, BigDecimal, BigDecimal| \"%1$d,%2$d,%3$d\"    | Parameters are **hue**, **saturation** and **brightness** components.\n+| __location__     | BigDecimal, BigDecimal            | \"%2$f,%3$f,%1$f\"    | Parameters are **altitude**, **latitude** and **longitude**, altitude is only in default pattern, if value is not '0'.\n+| __image__        | --                                | --                  | No publishing supported. \n+| __datetime__     | ZonedDateTime                     | \"%1$tY-%1$tm-%1$tdT%1$tH:%1$tM:%1$tS.%1$tN\" | Trailing zeros of the nanoseconds are removed.\n+| __rollershutter__| String                            | \"%s\"                | No pattern supported. Always **up**, **down**, **stop** string or integer percent value.\n+\n+Any outgoing value transformation will **always** result in a __string__ value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzAyNjY2NA=="}, "originalCommit": {"oid": "b9c95bb59f16dede913c4dcc36796745ac9a5563"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjAyOTI3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/ChannelState.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMTo0NTowOVrOFaPOyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNFQyMzoxMDoxNVrOFaPaHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1Njg0MA==", "bodyText": "What happens if cachedValue is a NumberValue and we have a transformation that e.g. returns a character or a string based on the number value? In update we do newValue = new BigDecimal(command.toString()); which will fail.", "url": "https://github.com/openhab/openhab-addons/pull/6755#discussion_r363056840", "createdAt": "2020-01-04T21:45:09Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/ChannelState.java", "diffHunk": "@@ -352,29 +352,36 @@ public boolean hasSubscribed() {\n \n         // Outgoing transformations\n         for (ChannelStateTransformation t : transformationsOut) {\n-            String transformedValue = t.processValue(mqttCommandValue);\n+            String commandString = mqttCommandValue.getMQTTpublishValue(null);\n+            String transformedValue = t.processValue(commandString);\n             if (transformedValue != null) {\n-                mqttCommandValue = transformedValue;\n+                Value textValue = new TextValue();\n+                textValue.update(new StringType(transformedValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c95bb59f16dede913c4dcc36796745ac9a5563"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1ODE3Ng==", "bodyText": "But here we do the update() on a new TextValue (textValue), which should handle the StringType just fine.\nThe result of every transformation stored in a new TextValue. After the transformation the original cachedValue is no longer available, only the new TextValue.\nBut this also means, that after a transformation, only the format %s (plus pre-/postifx) makes any sense.", "url": "https://github.com/openhab/openhab-addons/pull/6755#discussion_r363058176", "createdAt": "2020-01-04T22:22:04Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/ChannelState.java", "diffHunk": "@@ -352,29 +352,36 @@ public boolean hasSubscribed() {\n \n         // Outgoing transformations\n         for (ChannelStateTransformation t : transformationsOut) {\n-            String transformedValue = t.processValue(mqttCommandValue);\n+            String commandString = mqttCommandValue.getMQTTpublishValue(null);\n+            String transformedValue = t.processValue(commandString);\n             if (transformedValue != null) {\n-                mqttCommandValue = transformedValue;\n+                Value textValue = new TextValue();\n+                textValue.update(new StringType(transformedValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1Njg0MA=="}, "originalCommit": {"oid": "b9c95bb59f16dede913c4dcc36796745ac9a5563"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1ODM4NQ==", "bodyText": "But isn\u2018t that the same we have now? %d will not work after a transformation. IIRC that was the original request.", "url": "https://github.com/openhab/openhab-addons/pull/6755#discussion_r363058385", "createdAt": "2020-01-04T22:27:35Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/ChannelState.java", "diffHunk": "@@ -352,29 +352,36 @@ public boolean hasSubscribed() {\n \n         // Outgoing transformations\n         for (ChannelStateTransformation t : transformationsOut) {\n-            String transformedValue = t.processValue(mqttCommandValue);\n+            String commandString = mqttCommandValue.getMQTTpublishValue(null);\n+            String transformedValue = t.processValue(commandString);\n             if (transformedValue != null) {\n-                mqttCommandValue = transformedValue;\n+                Value textValue = new TextValue();\n+                textValue.update(new StringType(transformedValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1Njg0MA=="}, "originalCommit": {"oid": "b9c95bb59f16dede913c4dcc36796745ac9a5563"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1OTc0Mw==", "bodyText": "No, there original request does not contain any tranformation. %d does not work even then, because everything is already a string when we start to format. And the Formatter does not try to convert strings to integers.", "url": "https://github.com/openhab/openhab-addons/pull/6755#discussion_r363059743", "createdAt": "2020-01-04T23:10:15Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/ChannelState.java", "diffHunk": "@@ -352,29 +352,36 @@ public boolean hasSubscribed() {\n \n         // Outgoing transformations\n         for (ChannelStateTransformation t : transformationsOut) {\n-            String transformedValue = t.processValue(mqttCommandValue);\n+            String commandString = mqttCommandValue.getMQTTpublishValue(null);\n+            String transformedValue = t.processValue(commandString);\n             if (transformedValue != null) {\n-                mqttCommandValue = transformedValue;\n+                Value textValue = new TextValue();\n+                textValue.update(new StringType(transformedValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzA1Njg0MA=="}, "originalCommit": {"oid": "b9c95bb59f16dede913c4dcc36796745ac9a5563"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1153, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}