{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDEyNjM4", "number": 7006, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMDowNjo1NlrODgNDtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOToyNjozOFrODgfNRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDk0OTY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMDowNjo1NlrOFqStfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOToxMDozOFrOFqtykw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTA3MA==", "bodyText": "What's the idea here? If any batteryState is low, set the zoneList to OFF otherwise to ON?\nhomeHandler.getApi().listZones(homeId).forEach(zone -> {\n    try {\n        boolean batteryLow = !zone.getDevices().stream().map(ControlDevice::getBatteryState).anyMatch(s->!(\"NORMAL\".equals(s)));\n        zoneList.put(Long:valueOf(zone.getId()), OnOffType.from(batteryLow));\n    } catch (IOException | ApiException e) {\n        logger.debug(\"Fetch (battery state) zone list exception\", e); \n    }\n}\n\nThis also allows to process other zones if one zone failed (instead of before where processing stops when the first error occurs.", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r379891070", "createdAt": "2020-02-16T10:06:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -57,10 +57,20 @@ private synchronized void refreshZoneList() {\n             Long homeId = homeHandler.getHomeId();\n             if (homeId != null) {\n                 logger.debug(\"Fetching (battery state) zone list for HomeId {}\", homeId);\n+                zoneList.clear();\n                 try {\n-                    zoneList = homeHandler.getApi().listZones(homeId);\n+                    for (Zone zone : homeHandler.getApi().listZones(homeId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "004420acf555df2c0160afd33424c1c682318790"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxNDEwMQ==", "bodyText": "I think I need to give you some background here..\nIn a tado system the Bridge Thing is the home \"HomeId\", and within each Home, there are Things for rooms \"ZoneId\" (for example Living Room Heating). In the majority of cases, each Zone has a single radiator control valve device in it. But the tado system does also allow for each Zone to have more than one radiator control valve; and in that case the two (or more) radiator control valves are slaved together under the single Zone Thing.\nHomeId = \"my address\"\n\u251c\u2500\u2500 ZoneId = \"Kitchen\"\n\u2502   \u251c\u2500\u2500 DeviceID = \"radiator control valve A\"\n\u251c\u2500\u2500 ZoneId = \"Living Room\"\n     \u251c\u2500\u2500 DeviceID = \"radiator control valve B\"\n     \u251c\u2500\u2500 DeviceID = \"radiator control valve C\"\n\nIn the binding, the main API interface is a JSON request to http://something/something/ZoneId=J which fetches Channel information for the Zone like room temperature, set temperature, heating state. The binding polls this JSON request according to the refresh Interval defined in the Configuration Parameters.\nHOWEVER, for the low battery alarm -- unlike the other Channels -- the checking for this alarm is NOT done at Zone level but rather at each radiator control valve device level. So for each device there is a separate JSON request to the API as http://something/something/DeviceId=K which reads the low battery alarm state.\nThe radiator control valve devices are not modelled as Things in the binding. So to bring their low battery alarm state into openHAB it is necessary to poll each device, and amalgamate these alarm values in the common Zone low battery battery alarm Channel (by OR'ing across all the radiator control valve devices in that Zone).\nFurthermore, in the previous build of this binding, the JSON calls for the low battery alarm were not being made according to the polling refresh Interval, but were instead being made immediately every time that the binding requested an update. So this caused far too many unnecessary API calls -- particularly since this Channel only goes into alarm roughly once in 6 months.\nSo in this new build of the binding, I have done two things: a) the polling of JSON request to the radiator control valve devices for their low battery alarm state is no longer made on every refresh request, and b) there is now a Map table that maps between the Zone Ids and the amalgamated low battery alarm states of the radiator control valve devices within that Zone.", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r379914101", "createdAt": "2020-02-16T16:07:13Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -57,10 +57,20 @@ private synchronized void refreshZoneList() {\n             Long homeId = homeHandler.getHomeId();\n             if (homeId != null) {\n                 logger.debug(\"Fetching (battery state) zone list for HomeId {}\", homeId);\n+                zoneList.clear();\n                 try {\n-                    zoneList = homeHandler.getApi().listZones(homeId);\n+                    for (Zone zone : homeHandler.getApi().listZones(homeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTA3MA=="}, "originalCommit": {"oid": "004420acf555df2c0160afd33424c1c682318790"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxNTY0Nw==", "bodyText": "I think that is exactly what my code-snippet is doing. It's only another way of doing the same thing.", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r379915647", "createdAt": "2020-02-16T16:31:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -57,10 +57,20 @@ private synchronized void refreshZoneList() {\n             Long homeId = homeHandler.getHomeId();\n             if (homeId != null) {\n                 logger.debug(\"Fetching (battery state) zone list for HomeId {}\", homeId);\n+                zoneList.clear();\n                 try {\n-                    zoneList = homeHandler.getApi().listZones(homeId);\n+                    for (Zone zone : homeHandler.getApi().listZones(homeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTA3MA=="}, "originalCommit": {"oid": "004420acf555df2c0160afd33424c1c682318790"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzNDczOQ==", "bodyText": "Resolved. See comments below..", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r380334739", "createdAt": "2020-02-17T19:10:38Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -57,10 +57,20 @@ private synchronized void refreshZoneList() {\n             Long homeId = homeHandler.getHomeId();\n             if (homeId != null) {\n                 logger.debug(\"Fetching (battery state) zone list for HomeId {}\", homeId);\n+                zoneList.clear();\n                 try {\n-                    zoneList = homeHandler.getApi().listZones(homeId);\n+                    for (Zone zone : homeHandler.getApi().listZones(homeId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTA3MA=="}, "originalCommit": {"oid": "004420acf555df2c0160afd33424c1c682318790"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDk1MDYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQxMDowOTo1MVrOFqSuFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo0MDo1NFrOFqovJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTIyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    State state = zoneList.get(zoneId);\n          \n          \n            \n                    return zoneList.getorDefault(zoneId, OnOffType.OFF);", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r379891220", "createdAt": "2020-02-16T10:09:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -69,25 +79,8 @@ private synchronized void refreshZoneList() {\n \n     public State getBatteryLowAlarm(long zoneId) {\n         refreshZoneList();\n-        boolean hasBatteryStateValue = false;\n-        if (zoneList != null) {\n-            // logger.debug(\"Fetching battery state for ZoneId {}\", zoneId);\n-            for (Zone zone : zoneList) {\n-                if (zoneId == zone.getId()) {\n-                    for (ControlDevice device : zone.getDevices()) {\n-                        String batteryState = device.getBatteryState();\n-                        if (batteryState != null) {\n-                            if (!batteryState.equals(\"NORMAL\")) {    \n-                                return OnOffType.ON;\n-                            }\n-                            hasBatteryStateValue = true;\n-                        }\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-        return hasBatteryStateValue ? OnOffType.OFF : UnDefType.UNDEF;\n+        State state = zoneList.get(zoneId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "004420acf555df2c0160afd33424c1c682318790"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkxOTM2OQ==", "bodyText": "or probably default to UndefType.UNDEF as we don't know if ON or OFF is correct.", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r379919369", "createdAt": "2020-02-16T17:30:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -69,25 +79,8 @@ private synchronized void refreshZoneList() {\n \n     public State getBatteryLowAlarm(long zoneId) {\n         refreshZoneList();\n-        boolean hasBatteryStateValue = false;\n-        if (zoneList != null) {\n-            // logger.debug(\"Fetching battery state for ZoneId {}\", zoneId);\n-            for (Zone zone : zoneList) {\n-                if (zoneId == zone.getId()) {\n-                    for (ControlDevice device : zone.getDevices()) {\n-                        String batteryState = device.getBatteryState();\n-                        if (batteryState != null) {\n-                            if (!batteryState.equals(\"NORMAL\")) {    \n-                                return OnOffType.ON;\n-                            }\n-                            hasBatteryStateValue = true;\n-                        }\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-        return hasBatteryStateValue ? OnOffType.OFF : UnDefType.UNDEF;\n+        State state = zoneList.get(zoneId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTIyMA=="}, "originalCommit": {"oid": "004420acf555df2c0160afd33424c1c682318790"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1MTk0MA==", "bodyText": "Agreed to your two points. I was not aware of the getOrDefault() method, so I definitely learned something useful, thank you.", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r380251940", "createdAt": "2020-02-17T15:40:54Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -69,25 +79,8 @@ private synchronized void refreshZoneList() {\n \n     public State getBatteryLowAlarm(long zoneId) {\n         refreshZoneList();\n-        boolean hasBatteryStateValue = false;\n-        if (zoneList != null) {\n-            // logger.debug(\"Fetching battery state for ZoneId {}\", zoneId);\n-            for (Zone zone : zoneList) {\n-                if (zoneId == zone.getId()) {\n-                    for (ControlDevice device : zone.getDevices()) {\n-                        String batteryState = device.getBatteryState();\n-                        if (batteryState != null) {\n-                            if (!batteryState.equals(\"NORMAL\")) {    \n-                                return OnOffType.ON;\n-                            }\n-                            hasBatteryStateValue = true;\n-                        }\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-        return hasBatteryStateValue ? OnOffType.OFF : UnDefType.UNDEF;\n+        State state = zoneList.get(zoneId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTg5MTIyMA=="}, "originalCommit": {"oid": "004420acf555df2c0160afd33424c1c682318790"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzkxOTMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.tado/pom-aggregator.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOToyNDoxOVrOFquB-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMTozMzo1MVrOFqwHBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzODY4MA==", "bodyText": "Is this file still needed? IMO we should try to integrate it in the main pom (in another PR)", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r380338680", "createdAt": "2020-02-17T19:24:19Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.tado/pom-aggregator.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e6899a4ac0007126027c0698c35605f3140eae"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0NzQ0Mg==", "bodyText": "Yes it\u2019s ok to delete it. Shall l do it or will you?", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r380347442", "createdAt": "2020-02-17T19:56:20Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.tado/pom-aggregator.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzODY4MA=="}, "originalCommit": {"oid": "a3e6899a4ac0007126027c0698c35605f3140eae"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2MzQzOA==", "bodyText": "would be great if you could do that", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r380363438", "createdAt": "2020-02-17T20:57:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.tado/pom-aggregator.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzODY4MA=="}, "originalCommit": {"oid": "a3e6899a4ac0007126027c0698c35605f3140eae"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3Mjc0Mw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r380372743", "createdAt": "2020-02-17T21:33:51Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.tado/pom-aggregator.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzODY4MA=="}, "originalCommit": {"oid": "a3e6899a4ac0007126027c0698c35605f3140eae"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzkyMzI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOToyNjozOFrOFquEYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo1NjozNFrOFqukfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzOTI5OQ==", "bodyText": "Did you remove the stacktrace by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r380339299", "createdAt": "2020-02-17T19:26:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -57,37 +58,23 @@ private synchronized void refreshZoneList() {\n             Long homeId = homeHandler.getHomeId();\n             if (homeId != null) {\n                 logger.debug(\"Fetching (battery state) zone list for HomeId {}\", homeId);\n+                zoneList.clear();\n                 try {\n-                    zoneList = homeHandler.getApi().listZones(homeId);\n+                    homeHandler.getApi().listZones(homeId).forEach(zone -> {\n+                        boolean batteryLow = !zone.getDevices().stream().map(ControlDevice::getBatteryState)\n+                                .filter(Objects::nonNull).allMatch(s -> s.equals(\"NORMAL\"));\n+                        zoneList.put(Long.valueOf(zone.getId()), OnOffType.from(batteryLow));\n+                    });\n                 } catch (IOException | ApiException e) {\n-                    zoneList = null;\n-                    logger.debug(\"Fetch (battery state) zone list exception\", e);\n+                    logger.debug(\"Fetch (battery state) zone list exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3e6899a4ac0007126027c0698c35605f3140eae"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0NzUxNw==", "bodyText": "Yes. :)", "url": "https://github.com/openhab/openhab-addons/pull/7006#discussion_r380347517", "createdAt": "2020-02-17T19:56:34Z", "author": {"login": "andrewfg"}, "path": "bundles/org.openhab.binding.tado/src/main/java/org/openhab/binding/tado/internal/handler/TadoBatteryChecker.java", "diffHunk": "@@ -57,37 +58,23 @@ private synchronized void refreshZoneList() {\n             Long homeId = homeHandler.getHomeId();\n             if (homeId != null) {\n                 logger.debug(\"Fetching (battery state) zone list for HomeId {}\", homeId);\n+                zoneList.clear();\n                 try {\n-                    zoneList = homeHandler.getApi().listZones(homeId);\n+                    homeHandler.getApi().listZones(homeId).forEach(zone -> {\n+                        boolean batteryLow = !zone.getDevices().stream().map(ControlDevice::getBatteryState)\n+                                .filter(Objects::nonNull).allMatch(s -> s.equals(\"NORMAL\"));\n+                        zoneList.put(Long.valueOf(zone.getId()), OnOffType.from(batteryLow));\n+                    });\n                 } catch (IOException | ApiException e) {\n-                    zoneList = null;\n-                    logger.debug(\"Fetch (battery state) zone list exception\", e);\n+                    logger.debug(\"Fetch (battery state) zone list exception\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMzOTI5OQ=="}, "originalCommit": {"oid": "a3e6899a4ac0007126027c0698c35605f3140eae"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 925, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}