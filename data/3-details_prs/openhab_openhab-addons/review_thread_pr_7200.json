{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODMzMzUx", "number": 7200, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyOToyMFrOD4pe4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo1ODozNVrOD_-iiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI2NDk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyOToyMFrOGPigEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMToyOToyMFrOGPigEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NzA5MA==", "bodyText": "Please add a short description.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418947090", "createdAt": "2020-05-02T11:29:20Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/README.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Meteo Alerte Binding\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI2OTA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTozNDoxMlrOGPih-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTozNDoxMlrOGPih-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NzU3Nw==", "bodyText": "observation-time", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418947577", "createdAt": "2020-05-02T11:34:12Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/README.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Meteo Alerte Binding\n+\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the weather alerts for a given department.\n+It has the `department` id.\n+Of course, you can add multiple Things, e.g. for getting alerts for different locations.\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+\n+## Binding Configuration\n+\n+The binding has no configuration options, all configuration is done at Thing level.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:\n+\n+| Parameter  | Description                                                         |\n+|------------|---------------------------------------------------------------------|\n+| department | Name of the department.                                             |\n+| refresh    | Refresh interval in hours. Optional, the default value is 24 hours. |\n+\n+## Channels\n+\n+The M\u00e9t\u00e9o Alerte information that are retrieved is available as these channels:\n+\n+| Channel ID            | Item Type | Description                                   |\n+|-----------------------|-----------|-----------------------------------------------|\n+| observationTime       | DateTime  | Date and time of alert creation               |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI3MDQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTozNTozNFrOGPiimw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTozNTozNFrOGPiimw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0NzczOQ==", "bodyText": "vent-icon is missing", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418947739", "createdAt": "2020-05-02T11:35:34Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/README.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Meteo Alerte Binding\n+\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the weather alerts for a given department.\n+It has the `department` id.\n+Of course, you can add multiple Things, e.g. for getting alerts for different locations.\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+\n+## Binding Configuration\n+\n+The binding has no configuration options, all configuration is done at Thing level.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:\n+\n+| Parameter  | Description                                                         |\n+|------------|---------------------------------------------------------------------|\n+| department | Name of the department.                                             |\n+| refresh    | Refresh interval in hours. Optional, the default value is 24 hours. |\n+\n+## Channels\n+\n+The M\u00e9t\u00e9o Alerte information that are retrieved is available as these channels:\n+\n+| Channel ID            | Item Type | Description                                   |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI3NjU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0MzozMlrOGPillg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0MzozMlrOGPillg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0ODUwMg==", "bodyText": "As thing label (and channels label) are in French, I would suggest a description in French too.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418948502", "createdAt": "2020-05-02T11:43:32Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,211 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"meteoalerte\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"department\">\n+\t\t<label>Alertes D\u00e9partement</label>\n+\t\t<description>\n+\t\t\tProvides various natural risks on a given department", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI3NzY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0NDozNVrOGPimDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0NDozNVrOGPimDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0ODYyMw==", "bodyText": "Please add unit=\"h\"", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418948623", "createdAt": "2020-05-02T11:44:35Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,211 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"meteoalerte\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"department\">\n+\t\t<label>Alertes D\u00e9partement</label>\n+\t\t<description>\n+\t\t\tProvides various natural risks on a given department\n+\t\t</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"vent\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"vent-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"comment\" typeId=\"comment\" />\n+\t\t\t<channel id=\"observation-time\" typeId=\"observation-time\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"department\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>D\u00e9partement</label>\n+\t\t\t\t<description>Nom du d\u00e9partement</description>\n+\t\t\t\t<options>\n+\t\t\t\t\t<option value=\"AIN\">Ain</option>\n+\t\t\t\t\t<option value=\"AISNE\">Aisne</option>\n+\t\t\t\t\t<option value=\"ALLIER\">Allier</option>\n+\t\t\t\t\t<option value=\"ALPES-DE-HAUTE-PROVENCE\">Alpes de Haute Provence</option>\n+\t\t\t\t\t<option value=\"ALPES-MARITIMES\">Alpes Maritimes</option>\n+\t\t\t\t\t<option value=\"ARDECHE\">Ard\u00e8che</option>\n+\t\t\t\t\t<option value=\"ARDENNES\">Ardennes</option>\n+\t\t\t\t\t<option value=\"ARIEGE\">Ari\u00e8ge</option>\n+\t\t\t\t\t<option value=\"AUBE\">Aube</option>\n+\t\t\t\t\t<option value=\"AUDE\">Aude</option>\n+\t\t\t\t\t<option value=\"AVEYRON\">Aveyron</option>\n+\t\t\t\t\t<option value=\"BAS-RHIN\">Bas-Rhin</option>\n+\t\t\t\t\t<option value=\"BOUCHES-DU-RHONE\">Bouches du Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"CALVADOS\">Calvados</option>\n+\t\t\t\t\t<option value=\"CANTAL\">Cantal</option>\n+\t\t\t\t\t<option value=\"CHARENTE\">Charente</option>\n+\t\t\t\t\t<option value=\"CHARENTE-MARITIME\">Charente Maritime</option>\n+\t\t\t\t\t<option value=\"CHER\">Cher</option>\n+\t\t\t\t\t<option value=\"CORREZE\">Corr\u00e8ze</option>\n+\t\t\t\t\t<option value=\"CORSE-DU-SUD\">Corse du Sud</option>\n+\t\t\t\t\t<option value=\"COTE-D'OR\">C\u00f4te D'Or</option>\n+\t\t\t\t\t<option value=\"COTES-D'ARMOR\">C\u00f4tes D'Armor</option>\n+\t\t\t\t\t<option value=\"CREUSE\">Creuse</option>\n+\t\t\t\t\t<option value=\"DEUX-SEVRES\">Deux S\u00e8vres</option>\n+\t\t\t\t\t<option value=\"DORDOGNE\">Dordogne</option>\n+\t\t\t\t\t<option value=\"DOUBS\">Doubs</option>\n+\t\t\t\t\t<option value=\"DROME\">Dr\u00f4me</option>\n+\t\t\t\t\t<option value=\"ESSONNE\">Essonne</option>\n+\t\t\t\t\t<option value=\"EURE\">Eure</option>\n+\t\t\t\t\t<option value=\"EURE-ET-LOIR\">Eure et Loir</option>\n+\t\t\t\t\t<option value=\"FINISTERE\">Finist\u00e8re</option>\n+\t\t\t\t\t<option value=\"GARD\">Gard</option>\n+\t\t\t\t\t<option value=\"GERS\">Gers</option>\n+\t\t\t\t\t<option value=\"GIRONDE\">Gironde</option>\n+\t\t\t\t\t<option value=\"HAUT-RHIN\">Haut-Rhin</option>\n+\t\t\t\t\t<option value=\"HAUTE-CORSE\">Haute Corse</option>\n+\t\t\t\t\t<option value=\"HAUTE-GARONNE\">Haute Garonne</option>\n+\t\t\t\t\t<option value=\"HAUTE-LOIRE\">Haute Loire</option>\n+\t\t\t\t\t<option value=\"HAUTE-MARNE\">Haute Marne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAONE\">Haute Sa\u00f4ne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAVOIE\">Haute Savoie</option>\n+\t\t\t\t\t<option value=\"HAUTE-VIENNE\">Haute Vienne</option>\n+\t\t\t\t\t<option value=\"HAUTES-ALPES\">Hautes Alpes</option>\n+\t\t\t\t\t<option value=\"HAUTES-PYRENEES\">Hautes Pyr\u00e9n\u00e9es</option>\n+\t\t\t\t\t<option value=\"HAUTS-DE-SEINE\">Hauts de Seine</option>\n+\t\t\t\t\t<option value=\"HERAULT\">H\u00e9rault</option>\n+\t\t\t\t\t<option value=\"ILLE-ET-VILAINE\">Ille et Vilaine</option>\n+\t\t\t\t\t<option value=\"INDRE\">Indre</option>\n+\t\t\t\t\t<option value=\"INDRE-ET-LOIRE\">Indre et Loire</option>\n+\t\t\t\t\t<option value=\"ISERE\">Is\u00e8re</option>\n+\t\t\t\t\t<option value=\"JURA\">Jura</option>\n+\t\t\t\t\t<option value=\"LANDES\">Landes</option>\n+\t\t\t\t\t<option value=\"LOIR-ET-CHER\">Loir et Cher</option>\n+\t\t\t\t\t<option value=\"LOIRE\">Loire</option>\n+\t\t\t\t\t<option value=\"LOIRE-ATLANTIQUE\">Loire Atlantique</option>\n+\t\t\t\t\t<option value=\"LOIRET\">Loiret</option>\n+\t\t\t\t\t<option value=\"LOT\">Lot</option>\n+\t\t\t\t\t<option value=\"LOT-ET-GARONNE\">Lot et Garonne</option>\n+\t\t\t\t\t<option value=\"LOZERE\">Loz\u00e8re</option>\n+\t\t\t\t\t<option value=\"MAINE-ET-LOIRE\">Maine et Loire</option>\n+\t\t\t\t\t<option value=\"MANCHE\">Manche</option>\n+\t\t\t\t\t<option value=\"MARNE\">Marne</option>\n+\t\t\t\t\t<option value=\"MAYENNE\">Mayenne</option>\n+\t\t\t\t\t<option value=\"MEURTHE-ET-MOSELLE\">Meurthe et Moselle</option>\n+\t\t\t\t\t<option value=\"MEUSE\">Meuse</option>\n+\t\t\t\t\t<option value=\"MORBIHAN\">Morbihan</option>\n+\t\t\t\t\t<option value=\"MOSELLE\">Moselle</option>\n+\t\t\t\t\t<option value=\"NIEVRE\">Ni\u00e8vre</option>\n+\t\t\t\t\t<option value=\"NORD\">Nord</option>\n+\t\t\t\t\t<option value=\"OISE\">Oise</option>\n+\t\t\t\t\t<option value=\"ORNE\">Orne</option>\n+\t\t\t\t\t<option value=\"PARIS\">Paris</option>\n+\t\t\t\t\t<option value=\"PAS-DE-CALAIS\">Pas de Calais</option>\n+\t\t\t\t\t<option value=\"PUY-DE-DOME\">Puy de D\u00f4me</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ATLANTIQUES\">Pyr\u00e9n\u00e9es Atlantiques</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ORIENTALES\">Pyr\u00e9n\u00e9es Orientales</option>\n+\t\t\t\t\t<option value=\"RHONE\">Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"SAONE-ET-LOIRE\">Sa\u00f4ne et Loire</option>\n+\t\t\t\t\t<option value=\"SARTHE\">Sarthe</option>\n+\t\t\t\t\t<option value=\"SAVOIE\">Savoie</option>\n+\t\t\t\t\t<option value=\"SEINE-ET-MARNE\">Seine et Marne</option>\n+\t\t\t\t\t<option value=\"SEINE-MARITIME\">Seine Maritime</option>\n+\t\t\t\t\t<option value=\"SEINE-SAINT-DENIS\">Seine Saint Denis</option>\n+\t\t\t\t\t<option value=\"SOMME\">Somme</option>\n+\t\t\t\t\t<option value=\"TARN\">Tarn</option>\n+\t\t\t\t\t<option value=\"TARN-ET-GARONNE\">Tarn et Garonne</option>\n+\t\t\t\t\t<option value=\"TERRITOIRE DE BELFORT\">Territoire de Belfort</option>\n+\t\t\t\t\t<option value=\"VAL-D'OISE\">Val D'Oise</option>\n+\t\t\t\t\t<option value=\"VAL-DE-MARNE\">Val de Marne</option>\n+\t\t\t\t\t<option value=\"VAR\">Var</option>\n+\t\t\t\t\t<option value=\"VAUCLUSE\">Vaucluse</option>\n+\t\t\t\t\t<option value=\"VENDEE\">Vend\u00e9e</option>\n+\t\t\t\t\t<option value=\"VIENNE\">Vienne</option>\n+\t\t\t\t\t<option value=\"VOSGES\">Vosges</option>\n+\t\t\t\t\t<option value=\"YONNE\">Yonne</option>\n+\t\t\t\t\t<option value=\"YVELINES\">Yvelines</option>\n+\t\t\t\t</options>\n+\t\t\t\t<limitToOptions>true</limitToOptions>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI3ODM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0NTo0OFrOGPimaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0NTo0OFrOGPimaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0ODcxMw==", "bodyText": "In French like others ?", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418948713", "createdAt": "2020-05-02T11:45:48Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,211 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"meteoalerte\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"department\">\n+\t\t<label>Alertes D\u00e9partement</label>\n+\t\t<description>\n+\t\t\tProvides various natural risks on a given department\n+\t\t</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"vent\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"vent-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"comment\" typeId=\"comment\" />\n+\t\t\t<channel id=\"observation-time\" typeId=\"observation-time\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"department\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>D\u00e9partement</label>\n+\t\t\t\t<description>Nom du d\u00e9partement</description>\n+\t\t\t\t<options>\n+\t\t\t\t\t<option value=\"AIN\">Ain</option>\n+\t\t\t\t\t<option value=\"AISNE\">Aisne</option>\n+\t\t\t\t\t<option value=\"ALLIER\">Allier</option>\n+\t\t\t\t\t<option value=\"ALPES-DE-HAUTE-PROVENCE\">Alpes de Haute Provence</option>\n+\t\t\t\t\t<option value=\"ALPES-MARITIMES\">Alpes Maritimes</option>\n+\t\t\t\t\t<option value=\"ARDECHE\">Ard\u00e8che</option>\n+\t\t\t\t\t<option value=\"ARDENNES\">Ardennes</option>\n+\t\t\t\t\t<option value=\"ARIEGE\">Ari\u00e8ge</option>\n+\t\t\t\t\t<option value=\"AUBE\">Aube</option>\n+\t\t\t\t\t<option value=\"AUDE\">Aude</option>\n+\t\t\t\t\t<option value=\"AVEYRON\">Aveyron</option>\n+\t\t\t\t\t<option value=\"BAS-RHIN\">Bas-Rhin</option>\n+\t\t\t\t\t<option value=\"BOUCHES-DU-RHONE\">Bouches du Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"CALVADOS\">Calvados</option>\n+\t\t\t\t\t<option value=\"CANTAL\">Cantal</option>\n+\t\t\t\t\t<option value=\"CHARENTE\">Charente</option>\n+\t\t\t\t\t<option value=\"CHARENTE-MARITIME\">Charente Maritime</option>\n+\t\t\t\t\t<option value=\"CHER\">Cher</option>\n+\t\t\t\t\t<option value=\"CORREZE\">Corr\u00e8ze</option>\n+\t\t\t\t\t<option value=\"CORSE-DU-SUD\">Corse du Sud</option>\n+\t\t\t\t\t<option value=\"COTE-D'OR\">C\u00f4te D'Or</option>\n+\t\t\t\t\t<option value=\"COTES-D'ARMOR\">C\u00f4tes D'Armor</option>\n+\t\t\t\t\t<option value=\"CREUSE\">Creuse</option>\n+\t\t\t\t\t<option value=\"DEUX-SEVRES\">Deux S\u00e8vres</option>\n+\t\t\t\t\t<option value=\"DORDOGNE\">Dordogne</option>\n+\t\t\t\t\t<option value=\"DOUBS\">Doubs</option>\n+\t\t\t\t\t<option value=\"DROME\">Dr\u00f4me</option>\n+\t\t\t\t\t<option value=\"ESSONNE\">Essonne</option>\n+\t\t\t\t\t<option value=\"EURE\">Eure</option>\n+\t\t\t\t\t<option value=\"EURE-ET-LOIR\">Eure et Loir</option>\n+\t\t\t\t\t<option value=\"FINISTERE\">Finist\u00e8re</option>\n+\t\t\t\t\t<option value=\"GARD\">Gard</option>\n+\t\t\t\t\t<option value=\"GERS\">Gers</option>\n+\t\t\t\t\t<option value=\"GIRONDE\">Gironde</option>\n+\t\t\t\t\t<option value=\"HAUT-RHIN\">Haut-Rhin</option>\n+\t\t\t\t\t<option value=\"HAUTE-CORSE\">Haute Corse</option>\n+\t\t\t\t\t<option value=\"HAUTE-GARONNE\">Haute Garonne</option>\n+\t\t\t\t\t<option value=\"HAUTE-LOIRE\">Haute Loire</option>\n+\t\t\t\t\t<option value=\"HAUTE-MARNE\">Haute Marne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAONE\">Haute Sa\u00f4ne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAVOIE\">Haute Savoie</option>\n+\t\t\t\t\t<option value=\"HAUTE-VIENNE\">Haute Vienne</option>\n+\t\t\t\t\t<option value=\"HAUTES-ALPES\">Hautes Alpes</option>\n+\t\t\t\t\t<option value=\"HAUTES-PYRENEES\">Hautes Pyr\u00e9n\u00e9es</option>\n+\t\t\t\t\t<option value=\"HAUTS-DE-SEINE\">Hauts de Seine</option>\n+\t\t\t\t\t<option value=\"HERAULT\">H\u00e9rault</option>\n+\t\t\t\t\t<option value=\"ILLE-ET-VILAINE\">Ille et Vilaine</option>\n+\t\t\t\t\t<option value=\"INDRE\">Indre</option>\n+\t\t\t\t\t<option value=\"INDRE-ET-LOIRE\">Indre et Loire</option>\n+\t\t\t\t\t<option value=\"ISERE\">Is\u00e8re</option>\n+\t\t\t\t\t<option value=\"JURA\">Jura</option>\n+\t\t\t\t\t<option value=\"LANDES\">Landes</option>\n+\t\t\t\t\t<option value=\"LOIR-ET-CHER\">Loir et Cher</option>\n+\t\t\t\t\t<option value=\"LOIRE\">Loire</option>\n+\t\t\t\t\t<option value=\"LOIRE-ATLANTIQUE\">Loire Atlantique</option>\n+\t\t\t\t\t<option value=\"LOIRET\">Loiret</option>\n+\t\t\t\t\t<option value=\"LOT\">Lot</option>\n+\t\t\t\t\t<option value=\"LOT-ET-GARONNE\">Lot et Garonne</option>\n+\t\t\t\t\t<option value=\"LOZERE\">Loz\u00e8re</option>\n+\t\t\t\t\t<option value=\"MAINE-ET-LOIRE\">Maine et Loire</option>\n+\t\t\t\t\t<option value=\"MANCHE\">Manche</option>\n+\t\t\t\t\t<option value=\"MARNE\">Marne</option>\n+\t\t\t\t\t<option value=\"MAYENNE\">Mayenne</option>\n+\t\t\t\t\t<option value=\"MEURTHE-ET-MOSELLE\">Meurthe et Moselle</option>\n+\t\t\t\t\t<option value=\"MEUSE\">Meuse</option>\n+\t\t\t\t\t<option value=\"MORBIHAN\">Morbihan</option>\n+\t\t\t\t\t<option value=\"MOSELLE\">Moselle</option>\n+\t\t\t\t\t<option value=\"NIEVRE\">Ni\u00e8vre</option>\n+\t\t\t\t\t<option value=\"NORD\">Nord</option>\n+\t\t\t\t\t<option value=\"OISE\">Oise</option>\n+\t\t\t\t\t<option value=\"ORNE\">Orne</option>\n+\t\t\t\t\t<option value=\"PARIS\">Paris</option>\n+\t\t\t\t\t<option value=\"PAS-DE-CALAIS\">Pas de Calais</option>\n+\t\t\t\t\t<option value=\"PUY-DE-DOME\">Puy de D\u00f4me</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ATLANTIQUES\">Pyr\u00e9n\u00e9es Atlantiques</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ORIENTALES\">Pyr\u00e9n\u00e9es Orientales</option>\n+\t\t\t\t\t<option value=\"RHONE\">Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"SAONE-ET-LOIRE\">Sa\u00f4ne et Loire</option>\n+\t\t\t\t\t<option value=\"SARTHE\">Sarthe</option>\n+\t\t\t\t\t<option value=\"SAVOIE\">Savoie</option>\n+\t\t\t\t\t<option value=\"SEINE-ET-MARNE\">Seine et Marne</option>\n+\t\t\t\t\t<option value=\"SEINE-MARITIME\">Seine Maritime</option>\n+\t\t\t\t\t<option value=\"SEINE-SAINT-DENIS\">Seine Saint Denis</option>\n+\t\t\t\t\t<option value=\"SOMME\">Somme</option>\n+\t\t\t\t\t<option value=\"TARN\">Tarn</option>\n+\t\t\t\t\t<option value=\"TARN-ET-GARONNE\">Tarn et Garonne</option>\n+\t\t\t\t\t<option value=\"TERRITOIRE DE BELFORT\">Territoire de Belfort</option>\n+\t\t\t\t\t<option value=\"VAL-D'OISE\">Val D'Oise</option>\n+\t\t\t\t\t<option value=\"VAL-DE-MARNE\">Val de Marne</option>\n+\t\t\t\t\t<option value=\"VAR\">Var</option>\n+\t\t\t\t\t<option value=\"VAUCLUSE\">Vaucluse</option>\n+\t\t\t\t\t<option value=\"VENDEE\">Vend\u00e9e</option>\n+\t\t\t\t\t<option value=\"VIENNE\">Vienne</option>\n+\t\t\t\t\t<option value=\"VOSGES\">Vosges</option>\n+\t\t\t\t\t<option value=\"YONNE\">Yonne</option>\n+\t\t\t\t\t<option value=\"YVELINES\">Yvelines</option>\n+\t\t\t\t</options>\n+\t\t\t\t<limitToOptions>true</limitToOptions>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" required=\"true\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Specifies the refresh interval in hours.</description>\n+\t\t\t\t<default>24</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"alert-level\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Alerte</label>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Vert</option>\n+\t\t\t\t<option value=\"1\">Jaune</option>\n+\t\t\t\t<option value=\"2\">Orange</option>\n+\t\t\t\t<option value=\"3\">Rouge</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"comment\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Commentaire</label>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"observation-time\" advanced=\"true\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Observation Time</label>\n+\t\t<description>Observation date and time</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI3ODQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0NTo1N1rOGPimcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0NTo1N1rOGPimcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0ODcyMw==", "bodyText": "In French like others ?", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418948723", "createdAt": "2020-05-02T11:45:57Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,211 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"meteoalerte\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"department\">\n+\t\t<label>Alertes D\u00e9partement</label>\n+\t\t<description>\n+\t\t\tProvides various natural risks on a given department\n+\t\t</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"vent\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"vent-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"comment\" typeId=\"comment\" />\n+\t\t\t<channel id=\"observation-time\" typeId=\"observation-time\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"department\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>D\u00e9partement</label>\n+\t\t\t\t<description>Nom du d\u00e9partement</description>\n+\t\t\t\t<options>\n+\t\t\t\t\t<option value=\"AIN\">Ain</option>\n+\t\t\t\t\t<option value=\"AISNE\">Aisne</option>\n+\t\t\t\t\t<option value=\"ALLIER\">Allier</option>\n+\t\t\t\t\t<option value=\"ALPES-DE-HAUTE-PROVENCE\">Alpes de Haute Provence</option>\n+\t\t\t\t\t<option value=\"ALPES-MARITIMES\">Alpes Maritimes</option>\n+\t\t\t\t\t<option value=\"ARDECHE\">Ard\u00e8che</option>\n+\t\t\t\t\t<option value=\"ARDENNES\">Ardennes</option>\n+\t\t\t\t\t<option value=\"ARIEGE\">Ari\u00e8ge</option>\n+\t\t\t\t\t<option value=\"AUBE\">Aube</option>\n+\t\t\t\t\t<option value=\"AUDE\">Aude</option>\n+\t\t\t\t\t<option value=\"AVEYRON\">Aveyron</option>\n+\t\t\t\t\t<option value=\"BAS-RHIN\">Bas-Rhin</option>\n+\t\t\t\t\t<option value=\"BOUCHES-DU-RHONE\">Bouches du Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"CALVADOS\">Calvados</option>\n+\t\t\t\t\t<option value=\"CANTAL\">Cantal</option>\n+\t\t\t\t\t<option value=\"CHARENTE\">Charente</option>\n+\t\t\t\t\t<option value=\"CHARENTE-MARITIME\">Charente Maritime</option>\n+\t\t\t\t\t<option value=\"CHER\">Cher</option>\n+\t\t\t\t\t<option value=\"CORREZE\">Corr\u00e8ze</option>\n+\t\t\t\t\t<option value=\"CORSE-DU-SUD\">Corse du Sud</option>\n+\t\t\t\t\t<option value=\"COTE-D'OR\">C\u00f4te D'Or</option>\n+\t\t\t\t\t<option value=\"COTES-D'ARMOR\">C\u00f4tes D'Armor</option>\n+\t\t\t\t\t<option value=\"CREUSE\">Creuse</option>\n+\t\t\t\t\t<option value=\"DEUX-SEVRES\">Deux S\u00e8vres</option>\n+\t\t\t\t\t<option value=\"DORDOGNE\">Dordogne</option>\n+\t\t\t\t\t<option value=\"DOUBS\">Doubs</option>\n+\t\t\t\t\t<option value=\"DROME\">Dr\u00f4me</option>\n+\t\t\t\t\t<option value=\"ESSONNE\">Essonne</option>\n+\t\t\t\t\t<option value=\"EURE\">Eure</option>\n+\t\t\t\t\t<option value=\"EURE-ET-LOIR\">Eure et Loir</option>\n+\t\t\t\t\t<option value=\"FINISTERE\">Finist\u00e8re</option>\n+\t\t\t\t\t<option value=\"GARD\">Gard</option>\n+\t\t\t\t\t<option value=\"GERS\">Gers</option>\n+\t\t\t\t\t<option value=\"GIRONDE\">Gironde</option>\n+\t\t\t\t\t<option value=\"HAUT-RHIN\">Haut-Rhin</option>\n+\t\t\t\t\t<option value=\"HAUTE-CORSE\">Haute Corse</option>\n+\t\t\t\t\t<option value=\"HAUTE-GARONNE\">Haute Garonne</option>\n+\t\t\t\t\t<option value=\"HAUTE-LOIRE\">Haute Loire</option>\n+\t\t\t\t\t<option value=\"HAUTE-MARNE\">Haute Marne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAONE\">Haute Sa\u00f4ne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAVOIE\">Haute Savoie</option>\n+\t\t\t\t\t<option value=\"HAUTE-VIENNE\">Haute Vienne</option>\n+\t\t\t\t\t<option value=\"HAUTES-ALPES\">Hautes Alpes</option>\n+\t\t\t\t\t<option value=\"HAUTES-PYRENEES\">Hautes Pyr\u00e9n\u00e9es</option>\n+\t\t\t\t\t<option value=\"HAUTS-DE-SEINE\">Hauts de Seine</option>\n+\t\t\t\t\t<option value=\"HERAULT\">H\u00e9rault</option>\n+\t\t\t\t\t<option value=\"ILLE-ET-VILAINE\">Ille et Vilaine</option>\n+\t\t\t\t\t<option value=\"INDRE\">Indre</option>\n+\t\t\t\t\t<option value=\"INDRE-ET-LOIRE\">Indre et Loire</option>\n+\t\t\t\t\t<option value=\"ISERE\">Is\u00e8re</option>\n+\t\t\t\t\t<option value=\"JURA\">Jura</option>\n+\t\t\t\t\t<option value=\"LANDES\">Landes</option>\n+\t\t\t\t\t<option value=\"LOIR-ET-CHER\">Loir et Cher</option>\n+\t\t\t\t\t<option value=\"LOIRE\">Loire</option>\n+\t\t\t\t\t<option value=\"LOIRE-ATLANTIQUE\">Loire Atlantique</option>\n+\t\t\t\t\t<option value=\"LOIRET\">Loiret</option>\n+\t\t\t\t\t<option value=\"LOT\">Lot</option>\n+\t\t\t\t\t<option value=\"LOT-ET-GARONNE\">Lot et Garonne</option>\n+\t\t\t\t\t<option value=\"LOZERE\">Loz\u00e8re</option>\n+\t\t\t\t\t<option value=\"MAINE-ET-LOIRE\">Maine et Loire</option>\n+\t\t\t\t\t<option value=\"MANCHE\">Manche</option>\n+\t\t\t\t\t<option value=\"MARNE\">Marne</option>\n+\t\t\t\t\t<option value=\"MAYENNE\">Mayenne</option>\n+\t\t\t\t\t<option value=\"MEURTHE-ET-MOSELLE\">Meurthe et Moselle</option>\n+\t\t\t\t\t<option value=\"MEUSE\">Meuse</option>\n+\t\t\t\t\t<option value=\"MORBIHAN\">Morbihan</option>\n+\t\t\t\t\t<option value=\"MOSELLE\">Moselle</option>\n+\t\t\t\t\t<option value=\"NIEVRE\">Ni\u00e8vre</option>\n+\t\t\t\t\t<option value=\"NORD\">Nord</option>\n+\t\t\t\t\t<option value=\"OISE\">Oise</option>\n+\t\t\t\t\t<option value=\"ORNE\">Orne</option>\n+\t\t\t\t\t<option value=\"PARIS\">Paris</option>\n+\t\t\t\t\t<option value=\"PAS-DE-CALAIS\">Pas de Calais</option>\n+\t\t\t\t\t<option value=\"PUY-DE-DOME\">Puy de D\u00f4me</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ATLANTIQUES\">Pyr\u00e9n\u00e9es Atlantiques</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ORIENTALES\">Pyr\u00e9n\u00e9es Orientales</option>\n+\t\t\t\t\t<option value=\"RHONE\">Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"SAONE-ET-LOIRE\">Sa\u00f4ne et Loire</option>\n+\t\t\t\t\t<option value=\"SARTHE\">Sarthe</option>\n+\t\t\t\t\t<option value=\"SAVOIE\">Savoie</option>\n+\t\t\t\t\t<option value=\"SEINE-ET-MARNE\">Seine et Marne</option>\n+\t\t\t\t\t<option value=\"SEINE-MARITIME\">Seine Maritime</option>\n+\t\t\t\t\t<option value=\"SEINE-SAINT-DENIS\">Seine Saint Denis</option>\n+\t\t\t\t\t<option value=\"SOMME\">Somme</option>\n+\t\t\t\t\t<option value=\"TARN\">Tarn</option>\n+\t\t\t\t\t<option value=\"TARN-ET-GARONNE\">Tarn et Garonne</option>\n+\t\t\t\t\t<option value=\"TERRITOIRE DE BELFORT\">Territoire de Belfort</option>\n+\t\t\t\t\t<option value=\"VAL-D'OISE\">Val D'Oise</option>\n+\t\t\t\t\t<option value=\"VAL-DE-MARNE\">Val de Marne</option>\n+\t\t\t\t\t<option value=\"VAR\">Var</option>\n+\t\t\t\t\t<option value=\"VAUCLUSE\">Vaucluse</option>\n+\t\t\t\t\t<option value=\"VENDEE\">Vend\u00e9e</option>\n+\t\t\t\t\t<option value=\"VIENNE\">Vienne</option>\n+\t\t\t\t\t<option value=\"VOSGES\">Vosges</option>\n+\t\t\t\t\t<option value=\"YONNE\">Yonne</option>\n+\t\t\t\t\t<option value=\"YVELINES\">Yvelines</option>\n+\t\t\t\t</options>\n+\t\t\t\t<limitToOptions>true</limitToOptions>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" required=\"true\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Specifies the refresh interval in hours.</description>\n+\t\t\t\t<default>24</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"alert-level\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Alerte</label>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Vert</option>\n+\t\t\t\t<option value=\"1\">Jaune</option>\n+\t\t\t\t<option value=\"2\">Orange</option>\n+\t\t\t\t<option value=\"3\">Rouge</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"comment\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Commentaire</label>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"observation-time\" advanced=\"true\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Observation Time</label>\n+\t\t<description>Observation date and time</description>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"condition-icon\">\n+\t\t<item-type>Image</item-type>\n+\t\t<label>Icon</label>\n+\t\t<description>Icon representing the alert level.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI3OTk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0ODowMVrOGPinLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo0ODowMVrOGPinLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0ODkxMA==", "bodyText": "In French like others ?", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418948910", "createdAt": "2020-05-02T11:48:01Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,211 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"meteoalerte\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"department\">\n+\t\t<label>Alertes D\u00e9partement</label>\n+\t\t<description>\n+\t\t\tProvides various natural risks on a given department\n+\t\t</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"vent\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"vent-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"comment\" typeId=\"comment\" />\n+\t\t\t<channel id=\"observation-time\" typeId=\"observation-time\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"department\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>D\u00e9partement</label>\n+\t\t\t\t<description>Nom du d\u00e9partement</description>\n+\t\t\t\t<options>\n+\t\t\t\t\t<option value=\"AIN\">Ain</option>\n+\t\t\t\t\t<option value=\"AISNE\">Aisne</option>\n+\t\t\t\t\t<option value=\"ALLIER\">Allier</option>\n+\t\t\t\t\t<option value=\"ALPES-DE-HAUTE-PROVENCE\">Alpes de Haute Provence</option>\n+\t\t\t\t\t<option value=\"ALPES-MARITIMES\">Alpes Maritimes</option>\n+\t\t\t\t\t<option value=\"ARDECHE\">Ard\u00e8che</option>\n+\t\t\t\t\t<option value=\"ARDENNES\">Ardennes</option>\n+\t\t\t\t\t<option value=\"ARIEGE\">Ari\u00e8ge</option>\n+\t\t\t\t\t<option value=\"AUBE\">Aube</option>\n+\t\t\t\t\t<option value=\"AUDE\">Aude</option>\n+\t\t\t\t\t<option value=\"AVEYRON\">Aveyron</option>\n+\t\t\t\t\t<option value=\"BAS-RHIN\">Bas-Rhin</option>\n+\t\t\t\t\t<option value=\"BOUCHES-DU-RHONE\">Bouches du Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"CALVADOS\">Calvados</option>\n+\t\t\t\t\t<option value=\"CANTAL\">Cantal</option>\n+\t\t\t\t\t<option value=\"CHARENTE\">Charente</option>\n+\t\t\t\t\t<option value=\"CHARENTE-MARITIME\">Charente Maritime</option>\n+\t\t\t\t\t<option value=\"CHER\">Cher</option>\n+\t\t\t\t\t<option value=\"CORREZE\">Corr\u00e8ze</option>\n+\t\t\t\t\t<option value=\"CORSE-DU-SUD\">Corse du Sud</option>\n+\t\t\t\t\t<option value=\"COTE-D'OR\">C\u00f4te D'Or</option>\n+\t\t\t\t\t<option value=\"COTES-D'ARMOR\">C\u00f4tes D'Armor</option>\n+\t\t\t\t\t<option value=\"CREUSE\">Creuse</option>\n+\t\t\t\t\t<option value=\"DEUX-SEVRES\">Deux S\u00e8vres</option>\n+\t\t\t\t\t<option value=\"DORDOGNE\">Dordogne</option>\n+\t\t\t\t\t<option value=\"DOUBS\">Doubs</option>\n+\t\t\t\t\t<option value=\"DROME\">Dr\u00f4me</option>\n+\t\t\t\t\t<option value=\"ESSONNE\">Essonne</option>\n+\t\t\t\t\t<option value=\"EURE\">Eure</option>\n+\t\t\t\t\t<option value=\"EURE-ET-LOIR\">Eure et Loir</option>\n+\t\t\t\t\t<option value=\"FINISTERE\">Finist\u00e8re</option>\n+\t\t\t\t\t<option value=\"GARD\">Gard</option>\n+\t\t\t\t\t<option value=\"GERS\">Gers</option>\n+\t\t\t\t\t<option value=\"GIRONDE\">Gironde</option>\n+\t\t\t\t\t<option value=\"HAUT-RHIN\">Haut-Rhin</option>\n+\t\t\t\t\t<option value=\"HAUTE-CORSE\">Haute Corse</option>\n+\t\t\t\t\t<option value=\"HAUTE-GARONNE\">Haute Garonne</option>\n+\t\t\t\t\t<option value=\"HAUTE-LOIRE\">Haute Loire</option>\n+\t\t\t\t\t<option value=\"HAUTE-MARNE\">Haute Marne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAONE\">Haute Sa\u00f4ne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAVOIE\">Haute Savoie</option>\n+\t\t\t\t\t<option value=\"HAUTE-VIENNE\">Haute Vienne</option>\n+\t\t\t\t\t<option value=\"HAUTES-ALPES\">Hautes Alpes</option>\n+\t\t\t\t\t<option value=\"HAUTES-PYRENEES\">Hautes Pyr\u00e9n\u00e9es</option>\n+\t\t\t\t\t<option value=\"HAUTS-DE-SEINE\">Hauts de Seine</option>\n+\t\t\t\t\t<option value=\"HERAULT\">H\u00e9rault</option>\n+\t\t\t\t\t<option value=\"ILLE-ET-VILAINE\">Ille et Vilaine</option>\n+\t\t\t\t\t<option value=\"INDRE\">Indre</option>\n+\t\t\t\t\t<option value=\"INDRE-ET-LOIRE\">Indre et Loire</option>\n+\t\t\t\t\t<option value=\"ISERE\">Is\u00e8re</option>\n+\t\t\t\t\t<option value=\"JURA\">Jura</option>\n+\t\t\t\t\t<option value=\"LANDES\">Landes</option>\n+\t\t\t\t\t<option value=\"LOIR-ET-CHER\">Loir et Cher</option>\n+\t\t\t\t\t<option value=\"LOIRE\">Loire</option>\n+\t\t\t\t\t<option value=\"LOIRE-ATLANTIQUE\">Loire Atlantique</option>\n+\t\t\t\t\t<option value=\"LOIRET\">Loiret</option>\n+\t\t\t\t\t<option value=\"LOT\">Lot</option>\n+\t\t\t\t\t<option value=\"LOT-ET-GARONNE\">Lot et Garonne</option>\n+\t\t\t\t\t<option value=\"LOZERE\">Loz\u00e8re</option>\n+\t\t\t\t\t<option value=\"MAINE-ET-LOIRE\">Maine et Loire</option>\n+\t\t\t\t\t<option value=\"MANCHE\">Manche</option>\n+\t\t\t\t\t<option value=\"MARNE\">Marne</option>\n+\t\t\t\t\t<option value=\"MAYENNE\">Mayenne</option>\n+\t\t\t\t\t<option value=\"MEURTHE-ET-MOSELLE\">Meurthe et Moselle</option>\n+\t\t\t\t\t<option value=\"MEUSE\">Meuse</option>\n+\t\t\t\t\t<option value=\"MORBIHAN\">Morbihan</option>\n+\t\t\t\t\t<option value=\"MOSELLE\">Moselle</option>\n+\t\t\t\t\t<option value=\"NIEVRE\">Ni\u00e8vre</option>\n+\t\t\t\t\t<option value=\"NORD\">Nord</option>\n+\t\t\t\t\t<option value=\"OISE\">Oise</option>\n+\t\t\t\t\t<option value=\"ORNE\">Orne</option>\n+\t\t\t\t\t<option value=\"PARIS\">Paris</option>\n+\t\t\t\t\t<option value=\"PAS-DE-CALAIS\">Pas de Calais</option>\n+\t\t\t\t\t<option value=\"PUY-DE-DOME\">Puy de D\u00f4me</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ATLANTIQUES\">Pyr\u00e9n\u00e9es Atlantiques</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ORIENTALES\">Pyr\u00e9n\u00e9es Orientales</option>\n+\t\t\t\t\t<option value=\"RHONE\">Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"SAONE-ET-LOIRE\">Sa\u00f4ne et Loire</option>\n+\t\t\t\t\t<option value=\"SARTHE\">Sarthe</option>\n+\t\t\t\t\t<option value=\"SAVOIE\">Savoie</option>\n+\t\t\t\t\t<option value=\"SEINE-ET-MARNE\">Seine et Marne</option>\n+\t\t\t\t\t<option value=\"SEINE-MARITIME\">Seine Maritime</option>\n+\t\t\t\t\t<option value=\"SEINE-SAINT-DENIS\">Seine Saint Denis</option>\n+\t\t\t\t\t<option value=\"SOMME\">Somme</option>\n+\t\t\t\t\t<option value=\"TARN\">Tarn</option>\n+\t\t\t\t\t<option value=\"TARN-ET-GARONNE\">Tarn et Garonne</option>\n+\t\t\t\t\t<option value=\"TERRITOIRE DE BELFORT\">Territoire de Belfort</option>\n+\t\t\t\t\t<option value=\"VAL-D'OISE\">Val D'Oise</option>\n+\t\t\t\t\t<option value=\"VAL-DE-MARNE\">Val de Marne</option>\n+\t\t\t\t\t<option value=\"VAR\">Var</option>\n+\t\t\t\t\t<option value=\"VAUCLUSE\">Vaucluse</option>\n+\t\t\t\t\t<option value=\"VENDEE\">Vend\u00e9e</option>\n+\t\t\t\t\t<option value=\"VIENNE\">Vienne</option>\n+\t\t\t\t\t<option value=\"VOSGES\">Vosges</option>\n+\t\t\t\t\t<option value=\"YONNE\">Yonne</option>\n+\t\t\t\t\t<option value=\"YVELINES\">Yvelines</option>\n+\t\t\t\t</options>\n+\t\t\t\t<limitToOptions>true</limitToOptions>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" required=\"true\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Specifies the refresh interval in hours.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI4NTk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo1NTozNlrOGPip-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo1NTozNlrOGPip-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0OTYyNg==", "bodyText": "Please set thing status to OFFLINE with COMMUNICATION_ERROR.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418949626", "createdAt": "2020-05-02T11:55:36Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI4NzA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo1Njo0M1rOGPiqfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMTo1Njo0M1rOGPiqfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk0OTc1Ng==", "bodyText": "Max WARN level", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418949756", "createdAt": "2020-05-02T11:56:43Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.error(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI5NTczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjowNjo0NFrOGPiung==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjowNjo0NFrOGPiung==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MDgxNA==", "bodyText": "Can you add avalanches even if I know that this risk is very very very low in Yvelines mdr", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418950814", "createdAt": "2020-05-02T12:06:44Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/README.md", "diffHunk": "@@ -0,0 +1,92 @@\n+# Meteo Alerte Binding\n+\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the weather alerts for a given department.\n+It has the `department` id.\n+Of course, you can add multiple Things, e.g. for getting alerts for different locations.\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+\n+## Binding Configuration\n+\n+The binding has no configuration options, all configuration is done at Thing level.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:\n+\n+| Parameter  | Description                                                         |\n+|------------|---------------------------------------------------------------------|\n+| department | Name of the department.                                             |\n+| refresh    | Refresh interval in hours. Optional, the default value is 24 hours. |\n+\n+## Channels\n+\n+The M\u00e9t\u00e9o Alerte information that are retrieved is available as these channels:\n+\n+| Channel ID            | Item Type | Description                                   |\n+|-----------------------|-----------|-----------------------------------------------|\n+| observationTime       | DateTime  | Date and time of alert creation               |\n+| comment               | String    | General comments on alerts for the department |\n+| vent                  | String    | Wind alert level (*)                          |\n+| pluie-inondation      | String    | Rain alert level (*)                          |\n+| orage                 | String    | Storm alert level (*)                         |\n+| inondation            | String    | Flood alert level (*)                         |\n+| neige                 | String    | Snow alert level (*)                          |\n+| canicule              | String    | Heat alert level (*)                          |\n+| grand-froid           | String    | Cold alert level (*)                          |\n+| avalanches            | String    | Avalanche alert level (*)                     |\n+| pluie-inondation-icon | Image     | Pictogram of the Rain alert level             |\n+| orage-icon            | Image     | Pictogram of Storm alert level                |\n+| inondation-icon       | Image     | Pictogram of Flood alert level                |\n+| neige-icon            | Image     | Pictogram of Snow alert level                 |\n+| canicule-icon         | Image     | Pictogram of Heat alert level                 |\n+| grand-froid-icon      | Image     | Pictogram of Cold alert level                 |\n+| avalanches-icon       | Image     | Pictogram of Avalanche alert level            |\n+\n+(*) Each alert level is described by a color : \n+\n+| Code | Color  | Description                               |\n+|------|--------|-------------------------------------------|\n+| 0    | Green  | No particular vigilance                   |\n+| 1    | Yellow | Be attentive to the weather situation     |\n+| 2    | Orange | Be \"very vigilant\" in the concerned areas |\n+| 3    | Red    | Absolute vigilance required               |\n+\n+\n+## Full Example\n+\n+meteoalert.things:\n+\n+```\n+Thing meteoalerte:department:yvelines @ \"MyCity\" [department=\"YVELINES\", refresh=12]\n+```\n+\n+meteoalert.items:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzI5NjYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjowODoyOVrOGPivHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjowODoyOVrOGPivHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MDk0MQ==", "bodyText": "Please add a security control in case index is not found and set the channel state to UNDEF.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418950941", "createdAt": "2020-05-02T12:08:29Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.error(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });\n+    }\n+\n+    public void updateIcon(String channelId, String value) {\n+        String iconChannelId = channelId + \"-icon\";\n+        if (isLinked(iconChannelId)) {\n+            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n+            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n+            if (image != null) {\n+                RawType picto = new RawType(image, \"image/gif\");\n+                updateState(iconChannelId, picto);\n+            }\n+        }\n+    }\n+\n+    private byte @Nullable [] getImage(String iconPath) {\n+        byte[] data = null;\n+        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n+        logger.trace(\"Path to icon image resource is: {}\", url);\n+        if (url != null) {\n+            try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n+                InputStream is = url.openStream();\n+                BufferedImage image = ImageIO.read(is);\n+                ImageIO.write(image, \"gif\", out);\n+                out.flush();\n+                data = out.toByteArray();\n+            } catch (IOException e) {\n+                logger.debug(\"I/O exception occurred getting image data: {}\", e.getMessage(), e);\n+            }\n+        }\n+        return data;\n+    }\n+\n+    public void updateAlertString(String channelId, String value) {\n+        if (!value.isEmpty() && isLinked(channelId)) {\n+            int level = ALERT_LEVELS.indexOf(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzMwNDU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxMjoxNzo1MVrOGPiyxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNDo0MDowMlrOGPjrcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MTg3OQ==", "bodyText": "What is the advantage to use java.awt.image.BufferedImage ?\nWould a byte copy not be sufficient ?", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418951879", "createdAt": "2020-05-02T12:17:51Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.error(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });\n+    }\n+\n+    public void updateIcon(String channelId, String value) {\n+        String iconChannelId = channelId + \"-icon\";\n+        if (isLinked(iconChannelId)) {\n+            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n+            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n+            if (image != null) {\n+                RawType picto = new RawType(image, \"image/gif\");\n+                updateState(iconChannelId, picto);\n+            }\n+        }\n+    }\n+\n+    private byte @Nullable [] getImage(String iconPath) {\n+        byte[] data = null;\n+        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n+        logger.trace(\"Path to icon image resource is: {}\", url);\n+        if (url != null) {\n+            try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n+                InputStream is = url.openStream();\n+                BufferedImage image = ImageIO.read(is);\n+                ImageIO.write(image, \"gif\", out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk2NjM4NA==", "bodyText": "I'm not a specialist of this matter, found this in another binding. I think this takes care of the image format as being a gif.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418966384", "createdAt": "2020-05-02T14:40:02Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.error(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });\n+    }\n+\n+    public void updateIcon(String channelId, String value) {\n+        String iconChannelId = channelId + \"-icon\";\n+        if (isLinked(iconChannelId)) {\n+            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n+            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n+            if (image != null) {\n+                RawType picto = new RawType(image, \"image/gif\");\n+                updateState(iconChannelId, picto);\n+            }\n+        }\n+    }\n+\n+    private byte @Nullable [] getImage(String iconPath) {\n+        byte[] data = null;\n+        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n+        logger.trace(\"Path to icon image resource is: {}\", url);\n+        if (url != null) {\n+            try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n+                InputStream is = url.openStream();\n+                BufferedImage image = ImageIO.read(is);\n+                ImageIO.write(image, \"gif\", out);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk1MTg3OQ=="}, "originalCommit": {"oid": "95c824c510307a343589e6d482ec6f00e864e9b2"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQ2NTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNToyOToyNVrOGPkAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNToyOToyNVrOGPkAGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3MTY3Mw==", "bodyText": "Keep the info in the description that this setting unit is hour (because Paper UI does not display the unit). Without the info in the description, the user will have no idea what value to set.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418971673", "createdAt": "2020-05-02T15:29:25Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,211 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"meteoalerte\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"department\">\n+\t\t<label>Alertes D\u00e9partement</label>\n+\t\t<description>\n+\t\t\tFournit les niveaux d'alerte m\u00e9t\u00e9o pour un d\u00e9partement.\n+\t\t</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"vent\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"vent-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"comment\" typeId=\"comment\" />\n+\t\t\t<channel id=\"observation-time\" typeId=\"observation-time\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"department\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>D\u00e9partement</label>\n+\t\t\t\t<description>Nom du d\u00e9partement</description>\n+\t\t\t\t<options>\n+\t\t\t\t\t<option value=\"AIN\">Ain</option>\n+\t\t\t\t\t<option value=\"AISNE\">Aisne</option>\n+\t\t\t\t\t<option value=\"ALLIER\">Allier</option>\n+\t\t\t\t\t<option value=\"ALPES-DE-HAUTE-PROVENCE\">Alpes de Haute Provence</option>\n+\t\t\t\t\t<option value=\"ALPES-MARITIMES\">Alpes Maritimes</option>\n+\t\t\t\t\t<option value=\"ARDECHE\">Ard\u00e8che</option>\n+\t\t\t\t\t<option value=\"ARDENNES\">Ardennes</option>\n+\t\t\t\t\t<option value=\"ARIEGE\">Ari\u00e8ge</option>\n+\t\t\t\t\t<option value=\"AUBE\">Aube</option>\n+\t\t\t\t\t<option value=\"AUDE\">Aude</option>\n+\t\t\t\t\t<option value=\"AVEYRON\">Aveyron</option>\n+\t\t\t\t\t<option value=\"BAS-RHIN\">Bas-Rhin</option>\n+\t\t\t\t\t<option value=\"BOUCHES-DU-RHONE\">Bouches du Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"CALVADOS\">Calvados</option>\n+\t\t\t\t\t<option value=\"CANTAL\">Cantal</option>\n+\t\t\t\t\t<option value=\"CHARENTE\">Charente</option>\n+\t\t\t\t\t<option value=\"CHARENTE-MARITIME\">Charente Maritime</option>\n+\t\t\t\t\t<option value=\"CHER\">Cher</option>\n+\t\t\t\t\t<option value=\"CORREZE\">Corr\u00e8ze</option>\n+\t\t\t\t\t<option value=\"CORSE-DU-SUD\">Corse du Sud</option>\n+\t\t\t\t\t<option value=\"COTE-D'OR\">C\u00f4te D'Or</option>\n+\t\t\t\t\t<option value=\"COTES-D'ARMOR\">C\u00f4tes D'Armor</option>\n+\t\t\t\t\t<option value=\"CREUSE\">Creuse</option>\n+\t\t\t\t\t<option value=\"DEUX-SEVRES\">Deux S\u00e8vres</option>\n+\t\t\t\t\t<option value=\"DORDOGNE\">Dordogne</option>\n+\t\t\t\t\t<option value=\"DOUBS\">Doubs</option>\n+\t\t\t\t\t<option value=\"DROME\">Dr\u00f4me</option>\n+\t\t\t\t\t<option value=\"ESSONNE\">Essonne</option>\n+\t\t\t\t\t<option value=\"EURE\">Eure</option>\n+\t\t\t\t\t<option value=\"EURE-ET-LOIR\">Eure et Loir</option>\n+\t\t\t\t\t<option value=\"FINISTERE\">Finist\u00e8re</option>\n+\t\t\t\t\t<option value=\"GARD\">Gard</option>\n+\t\t\t\t\t<option value=\"GERS\">Gers</option>\n+\t\t\t\t\t<option value=\"GIRONDE\">Gironde</option>\n+\t\t\t\t\t<option value=\"HAUT-RHIN\">Haut-Rhin</option>\n+\t\t\t\t\t<option value=\"HAUTE-CORSE\">Haute Corse</option>\n+\t\t\t\t\t<option value=\"HAUTE-GARONNE\">Haute Garonne</option>\n+\t\t\t\t\t<option value=\"HAUTE-LOIRE\">Haute Loire</option>\n+\t\t\t\t\t<option value=\"HAUTE-MARNE\">Haute Marne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAONE\">Haute Sa\u00f4ne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAVOIE\">Haute Savoie</option>\n+\t\t\t\t\t<option value=\"HAUTE-VIENNE\">Haute Vienne</option>\n+\t\t\t\t\t<option value=\"HAUTES-ALPES\">Hautes Alpes</option>\n+\t\t\t\t\t<option value=\"HAUTES-PYRENEES\">Hautes Pyr\u00e9n\u00e9es</option>\n+\t\t\t\t\t<option value=\"HAUTS-DE-SEINE\">Hauts de Seine</option>\n+\t\t\t\t\t<option value=\"HERAULT\">H\u00e9rault</option>\n+\t\t\t\t\t<option value=\"ILLE-ET-VILAINE\">Ille et Vilaine</option>\n+\t\t\t\t\t<option value=\"INDRE\">Indre</option>\n+\t\t\t\t\t<option value=\"INDRE-ET-LOIRE\">Indre et Loire</option>\n+\t\t\t\t\t<option value=\"ISERE\">Is\u00e8re</option>\n+\t\t\t\t\t<option value=\"JURA\">Jura</option>\n+\t\t\t\t\t<option value=\"LANDES\">Landes</option>\n+\t\t\t\t\t<option value=\"LOIR-ET-CHER\">Loir et Cher</option>\n+\t\t\t\t\t<option value=\"LOIRE\">Loire</option>\n+\t\t\t\t\t<option value=\"LOIRE-ATLANTIQUE\">Loire Atlantique</option>\n+\t\t\t\t\t<option value=\"LOIRET\">Loiret</option>\n+\t\t\t\t\t<option value=\"LOT\">Lot</option>\n+\t\t\t\t\t<option value=\"LOT-ET-GARONNE\">Lot et Garonne</option>\n+\t\t\t\t\t<option value=\"LOZERE\">Loz\u00e8re</option>\n+\t\t\t\t\t<option value=\"MAINE-ET-LOIRE\">Maine et Loire</option>\n+\t\t\t\t\t<option value=\"MANCHE\">Manche</option>\n+\t\t\t\t\t<option value=\"MARNE\">Marne</option>\n+\t\t\t\t\t<option value=\"MAYENNE\">Mayenne</option>\n+\t\t\t\t\t<option value=\"MEURTHE-ET-MOSELLE\">Meurthe et Moselle</option>\n+\t\t\t\t\t<option value=\"MEUSE\">Meuse</option>\n+\t\t\t\t\t<option value=\"MORBIHAN\">Morbihan</option>\n+\t\t\t\t\t<option value=\"MOSELLE\">Moselle</option>\n+\t\t\t\t\t<option value=\"NIEVRE\">Ni\u00e8vre</option>\n+\t\t\t\t\t<option value=\"NORD\">Nord</option>\n+\t\t\t\t\t<option value=\"OISE\">Oise</option>\n+\t\t\t\t\t<option value=\"ORNE\">Orne</option>\n+\t\t\t\t\t<option value=\"PARIS\">Paris</option>\n+\t\t\t\t\t<option value=\"PAS-DE-CALAIS\">Pas de Calais</option>\n+\t\t\t\t\t<option value=\"PUY-DE-DOME\">Puy de D\u00f4me</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ATLANTIQUES\">Pyr\u00e9n\u00e9es Atlantiques</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ORIENTALES\">Pyr\u00e9n\u00e9es Orientales</option>\n+\t\t\t\t\t<option value=\"RHONE\">Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"SAONE-ET-LOIRE\">Sa\u00f4ne et Loire</option>\n+\t\t\t\t\t<option value=\"SARTHE\">Sarthe</option>\n+\t\t\t\t\t<option value=\"SAVOIE\">Savoie</option>\n+\t\t\t\t\t<option value=\"SEINE-ET-MARNE\">Seine et Marne</option>\n+\t\t\t\t\t<option value=\"SEINE-MARITIME\">Seine Maritime</option>\n+\t\t\t\t\t<option value=\"SEINE-SAINT-DENIS\">Seine Saint Denis</option>\n+\t\t\t\t\t<option value=\"SOMME\">Somme</option>\n+\t\t\t\t\t<option value=\"TARN\">Tarn</option>\n+\t\t\t\t\t<option value=\"TARN-ET-GARONNE\">Tarn et Garonne</option>\n+\t\t\t\t\t<option value=\"TERRITOIRE DE BELFORT\">Territoire de Belfort</option>\n+\t\t\t\t\t<option value=\"VAL-D'OISE\">Val D'Oise</option>\n+\t\t\t\t\t<option value=\"VAL-DE-MARNE\">Val de Marne</option>\n+\t\t\t\t\t<option value=\"VAR\">Var</option>\n+\t\t\t\t\t<option value=\"VAUCLUSE\">Vaucluse</option>\n+\t\t\t\t\t<option value=\"VENDEE\">Vend\u00e9e</option>\n+\t\t\t\t\t<option value=\"VIENNE\">Vienne</option>\n+\t\t\t\t\t<option value=\"VOSGES\">Vosges</option>\n+\t\t\t\t\t<option value=\"YONNE\">Yonne</option>\n+\t\t\t\t\t<option value=\"YVELINES\">Yvelines</option>\n+\t\t\t\t</options>\n+\t\t\t\t<limitToOptions>true</limitToOptions>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" required=\"true\" unit=\"h\">\n+\t\t\t\t<label>Fr\u00e9quence de rafraichissement</label>\n+\t\t\t\t<description>P\u00e9riode d'actualisation des donn\u00e9es.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76982741b65b72a7fa1a6ed581685c7028b63db8"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQ2NjQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNToyOTo1NlrOGPkAZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNToyOTo1NlrOGPkAZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3MTc1MA==", "bodyText": "Pictogramme", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418971750", "createdAt": "2020-05-02T15:29:56Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,211 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"meteoalerte\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"department\">\n+\t\t<label>Alertes D\u00e9partement</label>\n+\t\t<description>\n+\t\t\tFournit les niveaux d'alerte m\u00e9t\u00e9o pour un d\u00e9partement.\n+\t\t</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"vent\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches\" typeId=\"alert-level\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"vent-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Vent</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"pluie-inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Pluie Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"orage-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Orage</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"inondation-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Inondation</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"neige-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Neige</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"canicule-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Canicule</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"grand-froid-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Grand Froid</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avalanches-icon\" typeId=\"condition-icon\">\n+\t\t\t\t<label>Etat Avalanches</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"comment\" typeId=\"comment\" />\n+\t\t\t<channel id=\"observation-time\" typeId=\"observation-time\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"department\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>D\u00e9partement</label>\n+\t\t\t\t<description>Nom du d\u00e9partement</description>\n+\t\t\t\t<options>\n+\t\t\t\t\t<option value=\"AIN\">Ain</option>\n+\t\t\t\t\t<option value=\"AISNE\">Aisne</option>\n+\t\t\t\t\t<option value=\"ALLIER\">Allier</option>\n+\t\t\t\t\t<option value=\"ALPES-DE-HAUTE-PROVENCE\">Alpes de Haute Provence</option>\n+\t\t\t\t\t<option value=\"ALPES-MARITIMES\">Alpes Maritimes</option>\n+\t\t\t\t\t<option value=\"ARDECHE\">Ard\u00e8che</option>\n+\t\t\t\t\t<option value=\"ARDENNES\">Ardennes</option>\n+\t\t\t\t\t<option value=\"ARIEGE\">Ari\u00e8ge</option>\n+\t\t\t\t\t<option value=\"AUBE\">Aube</option>\n+\t\t\t\t\t<option value=\"AUDE\">Aude</option>\n+\t\t\t\t\t<option value=\"AVEYRON\">Aveyron</option>\n+\t\t\t\t\t<option value=\"BAS-RHIN\">Bas-Rhin</option>\n+\t\t\t\t\t<option value=\"BOUCHES-DU-RHONE\">Bouches du Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"CALVADOS\">Calvados</option>\n+\t\t\t\t\t<option value=\"CANTAL\">Cantal</option>\n+\t\t\t\t\t<option value=\"CHARENTE\">Charente</option>\n+\t\t\t\t\t<option value=\"CHARENTE-MARITIME\">Charente Maritime</option>\n+\t\t\t\t\t<option value=\"CHER\">Cher</option>\n+\t\t\t\t\t<option value=\"CORREZE\">Corr\u00e8ze</option>\n+\t\t\t\t\t<option value=\"CORSE-DU-SUD\">Corse du Sud</option>\n+\t\t\t\t\t<option value=\"COTE-D'OR\">C\u00f4te D'Or</option>\n+\t\t\t\t\t<option value=\"COTES-D'ARMOR\">C\u00f4tes D'Armor</option>\n+\t\t\t\t\t<option value=\"CREUSE\">Creuse</option>\n+\t\t\t\t\t<option value=\"DEUX-SEVRES\">Deux S\u00e8vres</option>\n+\t\t\t\t\t<option value=\"DORDOGNE\">Dordogne</option>\n+\t\t\t\t\t<option value=\"DOUBS\">Doubs</option>\n+\t\t\t\t\t<option value=\"DROME\">Dr\u00f4me</option>\n+\t\t\t\t\t<option value=\"ESSONNE\">Essonne</option>\n+\t\t\t\t\t<option value=\"EURE\">Eure</option>\n+\t\t\t\t\t<option value=\"EURE-ET-LOIR\">Eure et Loir</option>\n+\t\t\t\t\t<option value=\"FINISTERE\">Finist\u00e8re</option>\n+\t\t\t\t\t<option value=\"GARD\">Gard</option>\n+\t\t\t\t\t<option value=\"GERS\">Gers</option>\n+\t\t\t\t\t<option value=\"GIRONDE\">Gironde</option>\n+\t\t\t\t\t<option value=\"HAUT-RHIN\">Haut-Rhin</option>\n+\t\t\t\t\t<option value=\"HAUTE-CORSE\">Haute Corse</option>\n+\t\t\t\t\t<option value=\"HAUTE-GARONNE\">Haute Garonne</option>\n+\t\t\t\t\t<option value=\"HAUTE-LOIRE\">Haute Loire</option>\n+\t\t\t\t\t<option value=\"HAUTE-MARNE\">Haute Marne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAONE\">Haute Sa\u00f4ne</option>\n+\t\t\t\t\t<option value=\"HAUTE-SAVOIE\">Haute Savoie</option>\n+\t\t\t\t\t<option value=\"HAUTE-VIENNE\">Haute Vienne</option>\n+\t\t\t\t\t<option value=\"HAUTES-ALPES\">Hautes Alpes</option>\n+\t\t\t\t\t<option value=\"HAUTES-PYRENEES\">Hautes Pyr\u00e9n\u00e9es</option>\n+\t\t\t\t\t<option value=\"HAUTS-DE-SEINE\">Hauts de Seine</option>\n+\t\t\t\t\t<option value=\"HERAULT\">H\u00e9rault</option>\n+\t\t\t\t\t<option value=\"ILLE-ET-VILAINE\">Ille et Vilaine</option>\n+\t\t\t\t\t<option value=\"INDRE\">Indre</option>\n+\t\t\t\t\t<option value=\"INDRE-ET-LOIRE\">Indre et Loire</option>\n+\t\t\t\t\t<option value=\"ISERE\">Is\u00e8re</option>\n+\t\t\t\t\t<option value=\"JURA\">Jura</option>\n+\t\t\t\t\t<option value=\"LANDES\">Landes</option>\n+\t\t\t\t\t<option value=\"LOIR-ET-CHER\">Loir et Cher</option>\n+\t\t\t\t\t<option value=\"LOIRE\">Loire</option>\n+\t\t\t\t\t<option value=\"LOIRE-ATLANTIQUE\">Loire Atlantique</option>\n+\t\t\t\t\t<option value=\"LOIRET\">Loiret</option>\n+\t\t\t\t\t<option value=\"LOT\">Lot</option>\n+\t\t\t\t\t<option value=\"LOT-ET-GARONNE\">Lot et Garonne</option>\n+\t\t\t\t\t<option value=\"LOZERE\">Loz\u00e8re</option>\n+\t\t\t\t\t<option value=\"MAINE-ET-LOIRE\">Maine et Loire</option>\n+\t\t\t\t\t<option value=\"MANCHE\">Manche</option>\n+\t\t\t\t\t<option value=\"MARNE\">Marne</option>\n+\t\t\t\t\t<option value=\"MAYENNE\">Mayenne</option>\n+\t\t\t\t\t<option value=\"MEURTHE-ET-MOSELLE\">Meurthe et Moselle</option>\n+\t\t\t\t\t<option value=\"MEUSE\">Meuse</option>\n+\t\t\t\t\t<option value=\"MORBIHAN\">Morbihan</option>\n+\t\t\t\t\t<option value=\"MOSELLE\">Moselle</option>\n+\t\t\t\t\t<option value=\"NIEVRE\">Ni\u00e8vre</option>\n+\t\t\t\t\t<option value=\"NORD\">Nord</option>\n+\t\t\t\t\t<option value=\"OISE\">Oise</option>\n+\t\t\t\t\t<option value=\"ORNE\">Orne</option>\n+\t\t\t\t\t<option value=\"PARIS\">Paris</option>\n+\t\t\t\t\t<option value=\"PAS-DE-CALAIS\">Pas de Calais</option>\n+\t\t\t\t\t<option value=\"PUY-DE-DOME\">Puy de D\u00f4me</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ATLANTIQUES\">Pyr\u00e9n\u00e9es Atlantiques</option>\n+\t\t\t\t\t<option value=\"PYRENEES-ORIENTALES\">Pyr\u00e9n\u00e9es Orientales</option>\n+\t\t\t\t\t<option value=\"RHONE\">Rh\u00f4ne</option>\n+\t\t\t\t\t<option value=\"SAONE-ET-LOIRE\">Sa\u00f4ne et Loire</option>\n+\t\t\t\t\t<option value=\"SARTHE\">Sarthe</option>\n+\t\t\t\t\t<option value=\"SAVOIE\">Savoie</option>\n+\t\t\t\t\t<option value=\"SEINE-ET-MARNE\">Seine et Marne</option>\n+\t\t\t\t\t<option value=\"SEINE-MARITIME\">Seine Maritime</option>\n+\t\t\t\t\t<option value=\"SEINE-SAINT-DENIS\">Seine Saint Denis</option>\n+\t\t\t\t\t<option value=\"SOMME\">Somme</option>\n+\t\t\t\t\t<option value=\"TARN\">Tarn</option>\n+\t\t\t\t\t<option value=\"TARN-ET-GARONNE\">Tarn et Garonne</option>\n+\t\t\t\t\t<option value=\"TERRITOIRE DE BELFORT\">Territoire de Belfort</option>\n+\t\t\t\t\t<option value=\"VAL-D'OISE\">Val D'Oise</option>\n+\t\t\t\t\t<option value=\"VAL-DE-MARNE\">Val de Marne</option>\n+\t\t\t\t\t<option value=\"VAR\">Var</option>\n+\t\t\t\t\t<option value=\"VAUCLUSE\">Vaucluse</option>\n+\t\t\t\t\t<option value=\"VENDEE\">Vend\u00e9e</option>\n+\t\t\t\t\t<option value=\"VIENNE\">Vienne</option>\n+\t\t\t\t\t<option value=\"VOSGES\">Vosges</option>\n+\t\t\t\t\t<option value=\"YONNE\">Yonne</option>\n+\t\t\t\t\t<option value=\"YVELINES\">Yvelines</option>\n+\t\t\t\t</options>\n+\t\t\t\t<limitToOptions>true</limitToOptions>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refresh\" type=\"integer\" min=\"1\" required=\"true\" unit=\"h\">\n+\t\t\t\t<label>Fr\u00e9quence de rafraichissement</label>\n+\t\t\t\t<description>P\u00e9riode d'actualisation des donn\u00e9es.</description>\n+\t\t\t\t<default>24</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"alert-level\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Alerte</label>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"0\">Vert</option>\n+\t\t\t\t<option value=\"1\">Jaune</option>\n+\t\t\t\t<option value=\"2\">Orange</option>\n+\t\t\t\t<option value=\"3\">Rouge</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"comment\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Commentaire</label>\n+\t\t<state readOnly=\"true\" pattern=\"%s\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"observation-time\" advanced=\"true\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Heure d'observation</label>\n+\t\t<description>Date et heure d'observation.</description>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"condition-icon\">\n+\t\t<item-type>Image</item-type>\n+\t\t<label>Icon</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76982741b65b72a7fa1a6ed581685c7028b63db8"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzQ2NzA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNTozMDozNVrOGPkAsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNTozMDozNVrOGPkAsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3MTgyNA==", "bodyText": "Maybe avoid the useless CR.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r418971824", "createdAt": "2020-05-02T15:30:35Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,211 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"meteoalerte\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"department\">\n+\t\t<label>Alertes D\u00e9partement</label>\n+\t\t<description>\n+\t\t\tFournit les niveaux d'alerte m\u00e9t\u00e9o pour un d\u00e9partement.\n+\t\t</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76982741b65b72a7fa1a6ed581685c7028b63db8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDg2NTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTowMDo1NFrOGY_CqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTowMDo1NFrOGY_CqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MTg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>2.5.5-SNAPSHOT</version>\n          \n          \n            \n                <version>2.5.6-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r428851880", "createdAt": "2020-05-21T19:00:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/pom.xml", "diffHunk": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>2.5.5-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDg3MTU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTowMjozOVrOGY_GVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTowMjozOVrOGY_GVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MjgyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> refreshJob;", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r428852820", "createdAt": "2020-05-21T19:02:39Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDg3MzMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTowMzoxM1rOGY_HfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTowMzoxM1rOGY_HfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MzExNw==", "bodyText": "Either set this to some default value or let it be nullable.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r428853117", "createdAt": "2020-05-21T19:03:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDg3NjI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTowNDoxMlrOGY_Jhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOTozNzowMFrOGZAJPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MzYzOA==", "bodyText": "Any reason you aren't using an HttpClient?", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r428853638", "createdAt": "2020-05-21T19:04:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2OTk1MA==", "bodyText": "Yes, a simple call of this kind should be ok:\nString response = HttpUtil.executeUrl(\"GET\", queryUrl, timeout);", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r428869950", "createdAt": "2020-05-21T19:37:00Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1MzYzOA=="}, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDg5OTU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOToxMjoxM1rOGY_YvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOToxMjoxM1rOGY_YvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg1NzUzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n          \n          \n            \n                            InputStream is = url.openStream();\n          \n          \n            \n                        try (ByteArrayOutputStream out = new ByteArrayOutputStream();\n          \n          \n            \n                                     InputStream is = url.openStream()) {", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r428857533", "createdAt": "2020-05-21T19:12:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });\n+    }\n+\n+    public void updateIcon(String channelId, String value) {\n+        String iconChannelId = channelId + \"-icon\";\n+        if (isLinked(iconChannelId)) {\n+            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n+            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n+            if (image != null) {\n+                RawType picto = new RawType(image, \"image/gif\");\n+                updateState(iconChannelId, picto);\n+            }\n+        }\n+    }\n+\n+    private byte @Nullable [] getImage(String iconPath) {\n+        byte[] data = null;\n+        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n+        logger.trace(\"Path to icon image resource is: {}\", url);\n+        if (url != null) {\n+            try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n+                InputStream is = url.openStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDkyNzMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOToyMToxN1rOGY_qjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwODoyMDoxMVrOGZOwew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjA5NA==", "bodyText": "Since your images are already gifs, a simple byte copy should suffice. I can't think of another reason that you would need to parse the image and then write it out again unless there is some weird image metadata you are trying to accomplish with this.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r428862094", "createdAt": "2020-05-21T19:21:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });\n+    }\n+\n+    public void updateIcon(String channelId, String value) {\n+        String iconChannelId = channelId + \"-icon\";\n+        if (isLinked(iconChannelId)) {\n+            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n+            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n+            if (image != null) {\n+                RawType picto = new RawType(image, \"image/gif\");\n+                updateState(iconChannelId, picto);\n+            }\n+        }\n+    }\n+\n+    private byte @Nullable [] getImage(String iconPath) {\n+        byte[] data = null;\n+        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n+        logger.trace(\"Path to icon image resource is: {}\", url);\n+        if (url != null) {\n+            try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n+                InputStream is = url.openStream();\n+                BufferedImage image = ImageIO.read(is);\n+                ImageIO.write(image, \"gif\", out);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEwOTM3MQ==", "bodyText": "Well, I copied the way it was done in the weathercompany binding.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r429109371", "createdAt": "2020-05-22T08:20:11Z", "author": {"login": "clinique"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @NonNullByDefault({}) ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) String queryUrl;\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            URL url = new URL(queryUrl);\n+            try {\n+                URLConnection connection = url.openConnection();\n+                String response = IOUtils.toString(connection.getInputStream());\n+                IOUtils.closeQuietly(connection.getInputStream());\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });\n+    }\n+\n+    public void updateIcon(String channelId, String value) {\n+        String iconChannelId = channelId + \"-icon\";\n+        if (isLinked(iconChannelId)) {\n+            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n+            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n+            if (image != null) {\n+                RawType picto = new RawType(image, \"image/gif\");\n+                updateState(iconChannelId, picto);\n+            }\n+        }\n+    }\n+\n+    private byte @Nullable [] getImage(String iconPath) {\n+        byte[] data = null;\n+        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n+        logger.trace(\"Path to icon image resource is: {}\", url);\n+        if (url != null) {\n+            try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n+                InputStream is = url.openStream();\n+                BufferedImage image = ImageIO.read(is);\n+                ImageIO.write(image, \"gif\", out);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MjA5NA=="}, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MDkzNjcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOToyNDoyOFrOGY_wlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxOToyNDoyOFrOGY_wlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg2MzYzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n          \n          \n            \n                        Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));\n          \n          \n            \n                private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r428863639", "createdAt": "2020-05-21T19:24:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final ArrayList<String> ALERT_LEVELS = new ArrayList<>(\n+            Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83b015a533c4f3a2e0df779c911c9adae76adf2"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTU1NTIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzoxNjo1OFrOGZrzdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzoxNjo1OFrOGZrzdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NTI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new MalformedURLException();\n          \n          \n            \n                            throw new MalformedURLException(\"queryUrl not initialized\");", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r429585269", "createdAt": "2020-05-23T23:16:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "925f5c4d9f99157f1282b87c11416e6a7bb026ae"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTU1NTI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzoxNzoxOFrOGZrzgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzoxNzoxOFrOGZrzgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NTI4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r429585282", "createdAt": "2020-05-23T23:17:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException();\n+            }\n+            try {\n+                String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "925f5c4d9f99157f1282b87c11416e6a7bb026ae"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTU1NzA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzoyMjoyOFrOGZr0dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzoyMjoyOFrOGZr0dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NTUyNQ==", "bodyText": "Use try-with-resources to make sure that the url stream gets closed. You should also use a buffered input stream so that it will do batch reads behind the scenes for you which improves performance.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                        InputStream in = url.openStream();\n          \n          \n            \n                    try (InputStream in = new BufferedInputStream(url.openStream())){", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r429585525", "createdAt": "2020-05-23T23:22:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException();\n+            }\n+            try {\n+                String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });\n+    }\n+\n+    public void updateIcon(String channelId, String value) {\n+        String iconChannelId = channelId + \"-icon\";\n+        if (isLinked(iconChannelId)) {\n+            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n+            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n+            if (image != null) {\n+                RawType picto = new RawType(image, \"image/gif\");\n+                updateState(iconChannelId, picto);\n+            }\n+        }\n+    }\n+\n+    private byte @Nullable [] getImage(String iconPath) {\n+        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n+        logger.debug(\"Path to icon image resource is: {}\", url);\n+        try {\n+            InputStream in = url.openStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "925f5c4d9f99157f1282b87c11416e6a7bb026ae"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTU2MjkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzozODozNlrOGZr3ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzozODozNlrOGZr3ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NjI5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r429586299", "createdAt": "2020-05-23T23:38:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException();\n+            }\n+            try {\n+                String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+                updateStatus(ThingStatus.ONLINE);\n+                ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+                updateChannels(apiResponse);\n+            } catch (IOException e) {\n+                logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n+            }\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "925f5c4d9f99157f1282b87c11416e6a7bb026ae"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTU2MzQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzo0MDoxMlrOGZr3wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMzo0MDoxMlrOGZr3wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4NjM2OA==", "bodyText": "might as well merge the inner and outer try blocks into a single try block.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r429586368", "createdAt": "2020-05-23T23:40:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException();\n+            }\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "925f5c4d9f99157f1282b87c11416e6a7bb026ae"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjM5OTQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyMDo0MlrOGasyww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyMDo0MlrOGasyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MDA1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Of course, you can add multiple Things, e.g. for getting alerts for different locations.\n          \n          \n            \n            Of course, you can add multiple things, e.g. for getting alerts for different locations.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430650051", "createdAt": "2020-05-26T19:20:42Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Meteo Alerte Binding\n+\n+The Meteo Alerte binding gives alert level regarding major weather related risk factors.\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the weather alerts for a given department.\n+It has the `department` id.\n+Of course, you can add multiple Things, e.g. for getting alerts for different locations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQwMDMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyMTowMVrOGaszaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyMTowMVrOGaszaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MDIxNg==", "bodyText": "just remove it if discovery is not supported", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430650216", "createdAt": "2020-05-26T19:21:01Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Meteo Alerte Binding\n+\n+The Meteo Alerte binding gives alert level regarding major weather related risk factors.\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the weather alerts for a given department.\n+It has the `department` id.\n+Of course, you can add multiple Things, e.g. for getting alerts for different locations.\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQwMTA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyMToxNlrOGaszzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyMToxNlrOGaszzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MDMxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The binding has no configuration options, all configuration is done at Thing level.\n          \n          \n            \n            The binding has no configuration options, all configuration is done at thing level.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430650319", "createdAt": "2020-05-26T19:21:16Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Meteo Alerte Binding\n+\n+The Meteo Alerte binding gives alert level regarding major weather related risk factors.\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the weather alerts for a given department.\n+It has the `department` id.\n+Of course, you can add multiple Things, e.g. for getting alerts for different locations.\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+\n+## Binding Configuration\n+\n+The binding has no configuration options, all configuration is done at Thing level.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQwMjI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyMTozOFrOGas0hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyMTozOFrOGas0hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MDUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | department | Name of the department.                                             |\n          \n          \n            \n            | `department` | Name of the department.                                             |\n          \n      \n    \n    \n  \n\nalso below", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430650503", "createdAt": "2020-05-26T19:21:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Meteo Alerte Binding\n+\n+The Meteo Alerte binding gives alert level regarding major weather related risk factors.\n+\n+## Supported Things\n+\n+There is exactly one supported thing type, which represents the weather alerts for a given department.\n+It has the `department` id.\n+Of course, you can add multiple Things, e.g. for getting alerts for different locations.\n+\n+## Discovery\n+\n+This binding does not handle auto-discovery.\n+\n+## Binding Configuration\n+\n+The binding has no configuration options, all configuration is done at Thing level.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:\n+\n+| Parameter  | Description                                                         |\n+|------------|---------------------------------------------------------------------|\n+| department | Name of the department.                                             |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQxNjA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyNTo1NlrOGas9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOToyNTo1NlrOGas9Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1Mjc1OA==", "bodyText": "I would prefer to have this initialization in the constructor. It's a bit long here. You could also add that to the handler factory and pass it to the thing handler as parameter of the constructor.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430652758", "createdAt": "2020-05-26T19:25:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQyOTMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMDoxMFrOGatF4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMDoxMFrOGatF4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NDk0Nw==", "bodyText": "Would it make sense to increase granularity here and use MINUTES instead of HOURS? Since lead times of warnings are sometimes very short, it might be desirable to have it at 30 minutes or so.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430654947", "createdAt": "2020-05-26T19:30:10Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQzMjI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMTowM1rOGatH1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMTowM1rOGatH1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NTQ0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {\n          \n          \n            \n                    if (refreshJob != null) {\n          \n      \n    \n    \n  \n\nCancelling doesn't hurt even if it is already cancelled. Another option would be to move the null-assignment outside if the if-block (otherwise the field will never be assigned null im case of a cancelled job).", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430655444", "createdAt": "2020-05-26T19:31:03Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQzOTk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMzoyMlrOGatMrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozMzoyMlrOGatMrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NjY4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else {\n          \n          \n            \n                        logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n          \n          \n            \n                    }\n          \n          \n            \n                    } \n          \n      \n    \n    \n  \n\nOther bindings that support commands might be linked to these channels. Ignoring that silently is ok,", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430656686", "createdAt": "2020-05-26T19:33:22Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQ0ODY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozNTowNFrOGatSGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozNTowNFrOGatSGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1ODA3NA==", "bodyText": "I would suggest to add the URL to the thing status. Since thing status changes are logged by default, there is no need to add additional logging. Also below.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430658074", "createdAt": "2020-05-26T19:35:04Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+            updateChannels(apiResponse);\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQ1Mzg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozNTo1NVrOGatVRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozNTo1NVrOGatVRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1ODg4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n          \n          \n            \n                    Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record ->\n          \n      \n    \n    \n  \n\nstatement lambda can be replaced by expression lambda if only a single expression ins present.", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430658885", "createdAt": "2020-05-26T19:35:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+            updateChannels(apiResponse);\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+        } catch (IOException e) {\n+            logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQ2MDYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozNzoxNVrOGatZaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTozNzoxNVrOGatZaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1OTk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    });\n          \n          \n            \n                    );", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430659944", "createdAt": "2020-05-26T19:37:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+            updateChannels(apiResponse);\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+        } catch (IOException e) {\n+            logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQ3Nzk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0MDozM1rOGatkNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0MDozM1rOGatkNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2MjcxMA==", "bodyText": "Can be refactored in OH3 with in.readAllBytes() (available in JDK9+) (just a comment)", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430662710", "createdAt": "2020-05-26T19:40:33Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/handler/MeteoAlerteHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.handler;\n+\n+import static org.openhab.binding.meteoalerte.internal.MeteoAlerteBindingConstants.*;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.i18n.TimeZoneProvider;\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\n+import org.eclipse.smarthome.core.library.types.RawType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\n+import org.openhab.binding.meteoalerte.internal.MeteoAlerteConfiguration;\n+import org.openhab.binding.meteoalerte.internal.json.ApiResponse;\n+import org.osgi.framework.FrameworkUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializer;\n+\n+/**\n+ * The {@link MeteoAlerteHandler} is responsible for updating channels\n+ * and querying the API\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MeteoAlerteHandler extends BaseThingHandler {\n+    private static final String URL = \"https://public.opendatasoft.com/api/records/1.0/search/?dataset=risques-meteorologiques-copy&\"\n+            + \"facet=etat_vent&facet=etat_pluie_inondation&facet=etat_orage&facet=etat_inondation&facet=etat_neige&facet=etat_canicule&\"\n+            + \"facet=etat_grand_froid&facet=etat_avalanches&refine.nom_dept=\";\n+    private static final int TIMEOUT_MS = 30000;\n+    private static final List<String> ALERT_LEVELS = Arrays.asList(\"Vert\", \"Jaune\", \"Orange\", \"Rouge\");\n+    private final Logger logger = LoggerFactory.getLogger(MeteoAlerteHandler.class);\n+    private final Gson gson = new GsonBuilder()\n+            .registerTypeAdapter(ZonedDateTime.class, (JsonDeserializer<ZonedDateTime>) (json, type,\n+                    jsonDeserializationContext) -> ZonedDateTime.parse(json.getAsJsonPrimitive().getAsString()))\n+            .create();\n+\n+    // Time zone provider representing time zone configured in openHAB configuration\n+    private final TimeZoneProvider timeZoneProvider;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private String queryUrl = \"\";\n+\n+    public MeteoAlerteHandler(Thing thing, TimeZoneProvider timeZoneProvider) {\n+        super(thing);\n+        this.timeZoneProvider = timeZoneProvider;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Initializing M\u00e9t\u00e9o Alerte handler.\");\n+\n+        MeteoAlerteConfiguration config = getConfigAs(MeteoAlerteConfiguration.class);\n+        logger.debug(\"config department = {}\", config.department);\n+        logger.debug(\"config refresh = {}\", config.refresh);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        queryUrl = URL + config.department;\n+        refreshJob = scheduler.scheduleWithFixedDelay(this::updateAndPublish, 0, config.refresh, TimeUnit.HOURS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the M\u00e9t\u00e9o Alerte handler.\");\n+        ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            this.refreshJob = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateAndPublish();\n+        } else {\n+            logger.debug(\"The Meteo Alerte binding is read-only and can not handle command {}\", command);\n+        }\n+    }\n+\n+    private void updateAndPublish() {\n+        try {\n+            if (queryUrl.isEmpty()) {\n+                throw new MalformedURLException(\"queryUrl not initialized\");\n+            }\n+            String response = HttpUtil.executeUrl(\"GET\", queryUrl, TIMEOUT_MS);\n+            updateStatus(ThingStatus.ONLINE);\n+            ApiResponse apiResponse = gson.fromJson(response, ApiResponse.class);\n+            updateChannels(apiResponse);\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Malformed URL in M\u00e9t\u00e9o Alerte request : {}\", queryUrl);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+        } catch (IOException e) {\n+            logger.warn(\"Error opening connection to Meteo Alerte webservice : {}\", e.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Update the channel from the last Meteo Alerte data retrieved\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    private void updateChannels(ApiResponse apiResponse) {\n+        Arrays.stream(apiResponse.getRecords()).findFirst().ifPresent(record -> {\n+            record.getFields().ifPresent(fields -> {\n+                updateAlertString(WIND, fields.getVent());\n+                updateAlertString(RAIN, fields.getPluieInondation());\n+                updateAlertString(STORM, fields.getOrage());\n+                updateAlertString(FLOOD, fields.getInondation());\n+                updateAlertString(SNOW, fields.getNeige());\n+                updateAlertString(HEAT, fields.getCanicule());\n+                updateAlertString(FREEZE, fields.getGrandFroid());\n+                updateAlertString(AVALANCHE, fields.getAvalanches());\n+\n+                fields.getDateInsert().ifPresent(date -> updateDate(OBSERVATION_TIME, date));\n+                updateState(COMMENT, new StringType(fields.getVigilanceComment()));\n+                updateIcon(WIND, fields.getVent());\n+                updateIcon(RAIN, fields.getPluieInondation());\n+                updateIcon(STORM, fields.getOrage());\n+                updateIcon(FLOOD, fields.getInondation());\n+                updateIcon(SNOW, fields.getNeige());\n+                updateIcon(HEAT, fields.getCanicule());\n+                updateIcon(FREEZE, fields.getGrandFroid());\n+                updateIcon(AVALANCHE, fields.getAvalanches());\n+            });\n+        });\n+    }\n+\n+    public void updateIcon(String channelId, String value) {\n+        String iconChannelId = channelId + \"-icon\";\n+        if (isLinked(iconChannelId)) {\n+            String pictoName = channelId + (!value.isEmpty() ? \"_\" + value.toLowerCase() : \"\");\n+            byte[] image = getImage(\"picto\" + File.separator + pictoName + \".gif\");\n+            if (image != null) {\n+                RawType picto = new RawType(image, \"image/gif\");\n+                updateState(iconChannelId, picto);\n+            }\n+        }\n+    }\n+\n+    private byte @Nullable [] getImage(String iconPath) {\n+        URL url = FrameworkUtil.getBundle(getClass()).getResource(iconPath);\n+        logger.debug(\"Path to icon image resource is: {}\", url);\n+        try (InputStream in = new BufferedInputStream(url.openStream())) {\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjQ5MDM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/json/Fields.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0MzoxMVrOGatr4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo0MzoxMVrOGatr4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY2NDY3Mg==", "bodyText": "I would prefer a name that is not so close to a standard java class name (Field). Maybe ResponseFieldDTO, WDYT?", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430664672", "createdAt": "2020-05-26T19:43:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/json/Fields.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.meteoalerte.internal.json;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link Fields} is the Java class used to map the JSON\n+ * response to the webservice request.\n+ *\n+ * @author Ga\u00ebl L'hopital - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Fields {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1886cd2c01f4b02f1c7aa93137b786074a5b8f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDExNTI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/MeteoAlerteConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo1ODozNVrOGa9vQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo1ODozNVrOGa9vQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyNzY4Mw==", "bodyText": "1440", "url": "https://github.com/openhab/openhab-addons/pull/7200#discussion_r430927683", "createdAt": "2020-05-27T07:58:35Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.meteoalerte/src/main/java/org/openhab/binding/meteoalerte/internal/MeteoAlerteConfiguration.java", "diffHunk": "@@ -23,5 +23,5 @@\n @NonNullByDefault\n public class MeteoAlerteConfiguration {\n     public String department = \"\";\n-    public Integer refresh = 24;\n+    public Integer refresh = 1400;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c3297163ee0681fb08c3d1009ee9498e8a1206c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 739, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}