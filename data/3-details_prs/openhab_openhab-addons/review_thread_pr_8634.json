{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDUxMTQ1", "number": 8634, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NTowM1rOEzaX-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowOTo0MlrOE08ZsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ0OTUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NTowM1rOHqniLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0NTowM1rOHqniLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0OTk2NA==", "bodyText": "huh?", "url": "https://github.com/openhab/openhab-addons/pull/8634#discussion_r514449964", "createdAt": "2020-10-29T17:45:03Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+\n+/**\n+ * This is a convenience class to interact with the Thing's {@link ModbusCommunicationInterface}.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public abstract class BaseModbusThingHandler extends BaseThingHandler {\n+    private List<PollTask> periodicPollers = new ArrayList<>();\n+    private List<Future<?>> oneTimePollers = new ArrayList<>();\n+    private boolean initialized;\n+\n+    public BaseModbusThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * This method must be invoked in the base class' initialize() method before any other initialization is done.\n+     * It will throw an unchecked exception if the {@link ModbusCommunicationInterface} is not accessible (fail-fast).\n+     * This prevents any further initialization of the Thing. The framework will set the ThingStatus to\n+     * HANDLER_INITIALIZING_ERROR and display an appropriate error message.\n+     */\n+    @Override\n+    public void initialize() {\n+        getModbus();\n+\n+        initialized = true;\n+    }\n+\n+    /**\n+     * Register regularly polled task. The method returns immediately, and the execution of the poll task will happen in\n+     * the background.\n+     *\n+     * One can register only one regular poll task for triplet of (endpoint, request, callback).\n+     *\n+     * @param request request to send\n+     * @param pollPeriodMillis poll interval, in milliseconds\n+     * @param initialDelayMillis initial delay before starting polling, in milliseconds\n+     * @param callback callback to call with data\n+     * @param callback callback to call in case of failure\n+     * @return poll task representing the regular poll\n+     * @throws IllegalStateException when this communication has been closed already\n+     */\n+    public PollTask registerRegularPoll(ModbusReadRequestBlueprint request, long pollPeriodMillis,\n+            long initialDelayMillis, ModbusReadCallback resultCallback,\n+            ModbusFailureCallback<ModbusReadRequestBlueprint> failureCallback) {\n+        checkInitialized();\n+\n+        PollTask task = getModbus().registerRegularPoll(request, pollPeriodMillis, initialDelayMillis, resultCallback,\n+                failureCallback);\n+        periodicPollers.add(task);\n+\n+        return task;\n+    }\n+\n+    /**\n+     * Unregister regularly polled task\n+     *\n+     * If this communication interface is closed already, the method returns immediately with false return value\n+     *\n+     * @param task poll task to unregister\n+     * @return whether poll task was unregistered. Poll task is not unregistered in case of unexpected errors or\n+     *         in the case where the poll task is not registered in the first place\n+     * @throws SBCException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662d864aaefab2d0ec87c69be22c427ec8494af8"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzQ2ODMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0OToyMFrOHqntxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzo0OToyMFrOHqntxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1MjkzNQ==", "bodyText": "I can see potential thread safety issues since the methods are not synchronised.\nEither use thread-safe collections or make methods concurrent?", "url": "https://github.com/openhab/openhab-addons/pull/8634#discussion_r514452935", "createdAt": "2020-10-29T17:49:20Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.handler;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+\n+/**\n+ * This is a convenience class to interact with the Thing's {@link ModbusCommunicationInterface}.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+public abstract class BaseModbusThingHandler extends BaseThingHandler {\n+    private List<PollTask> periodicPollers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662d864aaefab2d0ec87c69be22c427ec8494af8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTUxMDI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTowOTo0MlrOHs8yjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOToxODo1MVrOHs9F8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NTM3NQ==", "bodyText": "Perhaps you could open in javadoc briefly how to use this and what the main benefit", "url": "https://github.com/openhab/openhab-addons/pull/8634#discussion_r516895375", "createdAt": "2020-11-03T19:09:42Z", "author": {"login": "ssalonen"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.handler;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+\n+/**\n+ * This is a convenience class to interact with the Thing's {@link ModbusCommunicationInterface}.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ *\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de60fead099068e573869ae5155f074b771f345"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwMDMzOQ==", "bodyText": "You're right. I will update the dev documentation, too.", "url": "https://github.com/openhab/openhab-addons/pull/8634#discussion_r516900339", "createdAt": "2020-11-03T19:18:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.modbus/src/main/java/org/openhab/binding/modbus/handler/BaseModbusThingHandler.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.modbus.handler;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Future;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BridgeHandler;\n+import org.openhab.io.transport.modbus.ModbusCommunicationInterface;\n+import org.openhab.io.transport.modbus.ModbusFailureCallback;\n+import org.openhab.io.transport.modbus.ModbusReadCallback;\n+import org.openhab.io.transport.modbus.ModbusReadRequestBlueprint;\n+import org.openhab.io.transport.modbus.ModbusWriteCallback;\n+import org.openhab.io.transport.modbus.ModbusWriteRequestBlueprint;\n+import org.openhab.io.transport.modbus.PollTask;\n+import org.openhab.io.transport.modbus.endpoint.ModbusSlaveEndpoint;\n+\n+/**\n+ * This is a convenience class to interact with the Thing's {@link ModbusCommunicationInterface}.\n+ *\n+ * @author Fabian Wolter - Initial contribution\n+ *\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg5NTM3NQ=="}, "originalCommit": {"oid": "0de60fead099068e573869ae5155f074b771f345"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4183, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}